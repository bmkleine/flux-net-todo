requirejs.config({
    paths: {
        text: '../Scripts/text',
        durandal: '../Scripts/durandal',
        plugins: '../Scripts/durandal/plugins',
        transitions: '../Scripts/durandal/transitions',
        ace: '../Scripts/ace',
        moment: '../Scripts/moment',
        'd3': '../Scripts/nvd3',
        forge: '../Scripts/forge',
        jszip: '../Scripts/jszip'
    }
});

define('jquery', function() { return jQuery; });
define('knockout', ko);
define('nvd3', ['d3/d3', 'd3/nv', 'd3/models/timelines', 'd3/models/timelinesChart'], function (d3, nv, timelines, chart) { return nv; });

// Do not remove the below comment, as it's used by the optimized build to inline Durandal scripts.
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The activator module encapsulates all logic related to screen/component activation.
 * An activator is essentially an asynchronous state machine that understands a particular state transition protocol.
 * The protocol ensures that the following series of events always occur: `canDeactivate` (previous state), `canActivate` (new state), `deactivate` (previous state), `activate` (new state).
 * Each of the _can_ callbacks may return a boolean, affirmative value or promise for one of those. If either of the _can_ functions yields a false result, then activation halts.
 * @module activator
 * @requires system
 * @requires knockout
 */
define("durandal/activator", ['durandal/system', 'knockout'], function (system, ko) {
    var activator;
    var defaultOptions = {
        canDeactivate:true
    };

    function ensureSettings(settings) {
        if (settings == undefined) {
            settings = {};
        }

        if (!system.isBoolean(settings.closeOnDeactivate)) {
            settings.closeOnDeactivate = activator.defaults.closeOnDeactivate;
        }

        if (!settings.beforeActivate) {
            settings.beforeActivate = activator.defaults.beforeActivate;
        }

        if (!settings.afterDeactivate) {
            settings.afterDeactivate = activator.defaults.afterDeactivate;
        }

        if(!settings.affirmations){
            settings.affirmations = activator.defaults.affirmations;
        }

        if (!settings.interpretResponse) {
            settings.interpretResponse = activator.defaults.interpretResponse;
        }

        if (!settings.areSameItem) {
            settings.areSameItem = activator.defaults.areSameItem;
        }

        if (!settings.findChildActivator) {
            settings.findChildActivator = activator.defaults.findChildActivator;
        }

        return settings;
    }

    function invoke(target, method, data) {
        if (system.isArray(data)) {
            return target[method].apply(target, data);
        }

        return target[method](data);
    }

    function deactivate(item, close, settings, dfd, setter) {
        if (item && item.deactivate) {
            system.log('Deactivating', item);

            var result;
            try {
                result = item.deactivate(close);
            } catch(error) {
                system.log('ERROR: ' + error.message, error);
                dfd.resolve(false);
                return;
            }

            if (result && result.then) {
                result.then(function() {
                    settings.afterDeactivate(item, close, setter);
                    dfd.resolve(true);
                }, function(reason) {
                    system.log(reason);
                    dfd.resolve(false);
                });
            } else {
                settings.afterDeactivate(item, close, setter);
                dfd.resolve(true);
            }
        } else {
            if (item) {
                settings.afterDeactivate(item, close, setter);
            }

            dfd.resolve(true);
        }
    }

    function activate(newItem, activeItem, callback, activationData) {
        var result;

        if(newItem && newItem.activate) {
            system.log('Activating', newItem);

            try {
                result = invoke(newItem, 'activate', activationData);
            } catch(error) {
                system.log('ERROR: ' + error.message, error);
                callback(false);
                return;
            }
        }

        if(result && result.then) {
            result.then(function() {
                activeItem(newItem);
                callback(true);
            }, function(reason) {
                system.log('ERROR: ' + reason.message, reason);
                callback(false);
            });
        } else {
            activeItem(newItem);
            callback(true);
        }
    }

    function canDeactivateItem(item, close, settings, options) {
        options = system.extend({}, defaultOptions, options);
        settings.lifecycleData = null;

        return system.defer(function (dfd) {
            function continueCanDeactivate() {
                if (item && item.canDeactivate && options.canDeactivate) {
                    var resultOrPromise;
                    try {
                        resultOrPromise = item.canDeactivate(close);
                    } catch (error) {
                        system.log('ERROR: ' + error.message, error);
                        dfd.resolve(false);
                        return;
                    }

                    if (resultOrPromise.then) {
                        resultOrPromise.then(function (result) {
                            settings.lifecycleData = result;
                            dfd.resolve(settings.interpretResponse(result));
                        }, function (reason) {
                            system.log('ERROR: ' + reason.message, reason);
                            dfd.resolve(false);
                        });
                    } else {
                        settings.lifecycleData = resultOrPromise;
                        dfd.resolve(settings.interpretResponse(resultOrPromise));
                    }
                } else {
                    dfd.resolve(true);
                }
            }

            var childActivator = settings.findChildActivator(item);
            if (childActivator) {
                childActivator.canDeactivate().then(function(result) {
                    if (result) {
                        continueCanDeactivate();
                    } else {
                        dfd.resolve(false);
                    }
                });
            } else {
                continueCanDeactivate();
            }
        }).promise();
    };

    function canActivateItem(newItem, activeItem, settings, activeData, newActivationData) {
        settings.lifecycleData = null;

        return system.defer(function (dfd) {
            if (settings.areSameItem(activeItem(), newItem, activeData, newActivationData)) {
                dfd.resolve(true);
                return;
            }

            if (newItem && newItem.canActivate) {
                var resultOrPromise;
                try {
                    resultOrPromise = invoke(newItem, 'canActivate', newActivationData);
                } catch (error) {
                    system.log('ERROR: ' + error.message, error);
                    dfd.resolve(false);
                    return;
                }

                if (resultOrPromise.then) {
                    resultOrPromise.then(function(result) {
                        settings.lifecycleData = result;
                        dfd.resolve(settings.interpretResponse(result));
                    }, function(reason) {
                        system.log('ERROR: ' + reason.message, reason);
                        dfd.resolve(false);
                    });
                } else {
                    settings.lifecycleData = resultOrPromise;
                    dfd.resolve(settings.interpretResponse(resultOrPromise));
                }
            } else {
                dfd.resolve(true);
            }
        }).promise();
    };

    /**
     * An activator is a read/write computed observable that enforces the activation lifecycle whenever changing values.
     * @class Activator
     */
    function createActivator(initialActiveItem, settings) {
        var activeItem = ko.observable(null);
        var activeData;

        settings = ensureSettings(settings);

        var computed = ko.computed({
            read: function () {
                return activeItem();
            },
            write: function (newValue) {
                computed.viaSetter = true;
                computed.activateItem(newValue);
            }
        });

        computed.__activator__ = true;

        /**
         * The settings for this activator.
         * @property {ActivatorSettings} settings
         */
        computed.settings = settings;
        settings.activator = computed;

        /**
         * An observable which indicates whether or not the activator is currently in the process of activating an instance.
         * @method isActivating
         * @return {boolean}
         */
        computed.isActivating = ko.observable(false);

        computed.forceActiveItem = function (item) {
            activeItem(item);
        };

        /**
         * Determines whether or not the specified item can be deactivated.
         * @method canDeactivateItem
         * @param {object} item The item to check.
         * @param {boolean} close Whether or not to check if close is possible.
         * @param {object} options Options for controlling the activation process.
         * @return {promise}
         */
        computed.canDeactivateItem = function (item, close, options) {
            return canDeactivateItem(item, close, settings, options);
        };

        /**
         * Deactivates the specified item.
         * @method deactivateItem
         * @param {object} item The item to deactivate.
         * @param {boolean} close Whether or not to close the item.
         * @return {promise}
         */
        computed.deactivateItem = function (item, close) {
            return system.defer(function(dfd) {
                computed.canDeactivateItem(item, close).then(function(canDeactivate) {
                    if (canDeactivate) {
                        deactivate(item, close, settings, dfd, activeItem);
                    } else {
                        computed.notifySubscribers();
                        dfd.resolve(false);
                    }
                });
            }).promise();
        };

        /**
         * Determines whether or not the specified item can be activated.
         * @method canActivateItem
         * @param {object} item The item to check.
         * @param {object} activationData Data associated with the activation.
         * @return {promise}
         */
        computed.canActivateItem = function (newItem, activationData) {
            return canActivateItem(newItem, activeItem, settings, activeData, activationData);
        };

        /**
         * Activates the specified item.
         * @method activateItem
         * @param {object} newItem The item to activate.
         * @param {object} newActivationData Data associated with the activation.
         * @param {object} options Options for controlling the activation process.
         * @return {promise}
         */
        computed.activateItem = function (newItem, newActivationData, options) {
            var viaSetter = computed.viaSetter;
            computed.viaSetter = false;

            return system.defer(function (dfd) {
                if (computed.isActivating()) {
                    dfd.resolve(false);
                    return;
                }

                computed.isActivating(true);

                var currentItem = activeItem();
                if (settings.areSameItem(currentItem, newItem, activeData, newActivationData)) {
                    computed.isActivating(false);
                    dfd.resolve(true);
                    return;
                }

                computed.canDeactivateItem(currentItem, settings.closeOnDeactivate, options).then(function (canDeactivate) {
                    if (canDeactivate) {
                        computed.canActivateItem(newItem, newActivationData).then(function (canActivate) {
                            if (canActivate) {
                                system.defer(function (dfd2) {
                                    deactivate(currentItem, settings.closeOnDeactivate, settings, dfd2);
                                }).promise().then(function () {
                                        newItem = settings.beforeActivate(newItem, newActivationData);
                                        activate(newItem, activeItem, function (result) {
                                            activeData = newActivationData;
                                            computed.isActivating(false);
                                            dfd.resolve(result);
                                        }, newActivationData);
                                    });
                            } else {
                                if (viaSetter) {
                                    computed.notifySubscribers();
                                }

                                computed.isActivating(false);
                                dfd.resolve(false);
                            }
                        });
                    } else {
                        if (viaSetter) {
                            computed.notifySubscribers();
                        }

                        computed.isActivating(false);
                        dfd.resolve(false);
                    }
                });
            }).promise();
        };

        /**
         * Determines whether or not the activator, in its current state, can be activated.
         * @method canActivate
         * @return {promise}
         */
        computed.canActivate = function () {
            var toCheck;

            if (initialActiveItem) {
                toCheck = initialActiveItem;
                initialActiveItem = false;
            } else {
                toCheck = computed();
            }

            return computed.canActivateItem(toCheck);
        };

        /**
         * Activates the activator, in its current state.
         * @method activate
         * @return {promise}
         */
        computed.activate = function () {
            var toActivate;

            if (initialActiveItem) {
                toActivate = initialActiveItem;
                initialActiveItem = false;
            } else {
                toActivate = computed();
            }

            return computed.activateItem(toActivate);
        };

        /**
         * Determines whether or not the activator, in its current state, can be deactivated.
         * @method canDeactivate
         * @return {promise}
         */
        computed.canDeactivate = function (close) {
            return computed.canDeactivateItem(computed(), close);
        };

        /**
         * Deactivates the activator, in its current state.
         * @method deactivate
         * @return {promise}
         */
        computed.deactivate = function (close) {
            return computed.deactivateItem(computed(), close);
        };

        computed.includeIn = function (includeIn) {
            includeIn.canActivate = function () {
                return computed.canActivate();
            };

            includeIn.activate = function () {
                return computed.activate();
            };

            includeIn.canDeactivate = function (close) {
                return computed.canDeactivate(close);
            };

            includeIn.deactivate = function (close) {
                return computed.deactivate(close);
            };
        };

        if (settings.includeIn) {
            computed.includeIn(settings.includeIn);
        } else if (initialActiveItem) {
            computed.activate();
        }

        computed.forItems = function (items) {
            settings.closeOnDeactivate = false;

            settings.determineNextItemToActivate = function (list, lastIndex) {
                var toRemoveAt = lastIndex - 1;

                if (toRemoveAt == -1 && list.length > 1) {
                    return list[1];
                }

                if (toRemoveAt > -1 && toRemoveAt < list.length - 1) {
                    return list[toRemoveAt];
                }

                return null;
            };

            settings.beforeActivate = function (newItem) {
                var currentItem = computed();

                if (!newItem) {
                    newItem = settings.determineNextItemToActivate(items, currentItem ? items.indexOf(currentItem) : 0);
                } else {
                    var index = items.indexOf(newItem);

                    if (index == -1) {
                        items.push(newItem);
                    } else {
                        newItem = items()[index];
                    }
                }

                return newItem;
            };

            settings.afterDeactivate = function (oldItem, close) {
                if (close) {
                    items.remove(oldItem);
                }
            };

            var originalCanDeactivate = computed.canDeactivate;
            computed.canDeactivate = function (close) {
                if (close) {
                    return system.defer(function (dfd) {
                        var list = items();
                        var results = [];

                        function finish() {
                            for (var j = 0; j < results.length; j++) {
                                if (!results[j]) {
                                    dfd.resolve(false);
                                    return;
                                }
                            }

                            dfd.resolve(true);
                        }

                        for (var i = 0; i < list.length; i++) {
                            computed.canDeactivateItem(list[i], close).then(function (result) {
                                results.push(result);
                                if (results.length == list.length) {
                                    finish();
                                }
                            });
                        }
                    }).promise();
                } else {
                    return originalCanDeactivate();
                }
            };

            var originalDeactivate = computed.deactivate;
            computed.deactivate = function (close) {
                if (close) {
                    return system.defer(function (dfd) {
                        var list = items();
                        var results = 0;
                        var listLength = list.length;

                        function doDeactivate(item) {
                            setTimeout(function () {
                                computed.deactivateItem(item, close).then(function () {
                                    results++;
                                    items.remove(item);
                                    if (results == listLength) {
                                        dfd.resolve();
                                    }
                                });
                            }, 1);
                        }

                        for (var i = 0; i < listLength; i++) {
                            doDeactivate(list[i]);
                        }
                    }).promise();
                } else {
                    return originalDeactivate();
                }
            };

            return computed;
        };

        return computed;
    }

    /**
     * @class ActivatorSettings
     * @static
     */
    var activatorSettings = {
        /**
         * The default value passed to an object's deactivate function as its close parameter.
         * @property {boolean} closeOnDeactivate
         * @default true
         */
        closeOnDeactivate: true,
        /**
         * Lower-cased words which represent a truthy value.
         * @property {string[]} affirmations
         * @default ['yes', 'ok', 'true']
         */
        affirmations: ['yes', 'ok', 'true'],
        /**
         * Interprets the response of a `canActivate` or `canDeactivate` call using the known affirmative values in the `affirmations` array.
         * @method interpretResponse
         * @param {object} value
         * @return {boolean}
         */
        interpretResponse: function(value) {
            if(system.isObject(value)) {
                value = value.can || false;
            }

            if(system.isString(value)) {
                return ko.utils.arrayIndexOf(this.affirmations, value.toLowerCase()) !== -1;
            }

            return value;
        },
        /**
         * Determines whether or not the current item and the new item are the same.
         * @method areSameItem
         * @param {object} currentItem
         * @param {object} newItem
         * @param {object} currentActivationData
         * @param {object} newActivationData
         * @return {boolean}
         */
        areSameItem: function(currentItem, newItem, currentActivationData, newActivationData) {
            return currentItem == newItem;
        },
        /**
         * Called immediately before the new item is activated.
         * @method beforeActivate
         * @param {object} newItem
         */
        beforeActivate: function(newItem) {
            return newItem;
        },
        /**
         * Called immediately after the old item is deactivated.
         * @method afterDeactivate
         * @param {object} oldItem The previous item.
         * @param {boolean} close Whether or not the previous item was closed.
         * @param {function} setter The activate item setter function.
         */
        afterDeactivate: function(oldItem, close, setter) {
            if(close && setter) {
                setter(null);
            }
        },
        findChildActivator: function(item){
            return null;
        }
    };

    /**
     * @class ActivatorModule
     * @static
     */
    activator = {
        /**
         * The default settings used by activators.
         * @property {ActivatorSettings} defaults
         */
        defaults: activatorSettings,
        /**
         * Creates a new activator.
         * @method create
         * @param {object} [initialActiveItem] The item which should be immediately activated upon creation of the ativator.
         * @param {ActivatorSettings} [settings] Per activator overrides of the default activator settings.
         * @return {Activator} The created activator.
         */
        create: createActivator,
        /**
         * Determines whether or not the provided object is an activator or not.
         * @method isActivator
         * @param {object} object Any object you wish to verify as an activator or not.
         * @return {boolean} True if the object is an activator; false otherwise.
         */
        isActivator:function(object){
            return object && object.__activator__;
        }
    };

    return activator;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The app module controls app startup, plugin loading/configuration and root visual display.
 * @module app
 * @requires system
 * @requires viewEngine
 * @requires composition
 * @requires events
 * @requires jquery
 */
define("durandal/app", ['durandal/system', 'durandal/viewEngine', 'durandal/composition', 'durandal/events', 'jquery'], function(system, viewEngine, composition, Events, $) {
    var app,
        allPluginIds = [],
        allPluginConfigs = [];

    function loadPlugins(){
        return system.defer(function(dfd){
            if(allPluginIds.length == 0){
                dfd.resolve();
                return;
            }

            system.acquire(allPluginIds).then(function(loaded){
                for(var i = 0; i < loaded.length; i++){
                    var currentModule = loaded[i];

                    if(currentModule.install){
                        var config = allPluginConfigs[i];
                        if(!system.isObject(config)){
                            config = {};
                        }

                        currentModule.install(config);
                        system.log('Plugin:Installed ' + allPluginIds[i]);
                    }else{
                        system.log('Plugin:Loaded ' + allPluginIds[i]);
                    }
                }

                dfd.resolve();
            }).fail(function(err){
                system.error('Failed to load plugin(s). Details: ' + err.message);
            });
        }).promise();
    }

    /**
     * @class AppModule
     * @static
     * @uses Events
     */
    app = {
        /**
         * The title of your application.
         * @property {string} title
         */
        title: 'Application',
        /**
         * Configures one or more plugins to be loaded and installed into the application.
         * @method configurePlugins
         * @param {object} config Keys are plugin names. Values can be truthy, to simply install the plugin, or a configuration object to pass to the plugin.
         * @param {string} [baseUrl] The base url to load the plugins from.
         */
        configurePlugins:function(config, baseUrl){
            var pluginIds = system.keys(config);
            baseUrl = baseUrl || 'plugins/';

            if(baseUrl.indexOf('/', baseUrl.length - 1) === -1){
                baseUrl += '/';
            }

            for(var i = 0; i < pluginIds.length; i++){
                var key = pluginIds[i];
                allPluginIds.push(baseUrl + key);
                allPluginConfigs.push(config[key]);
            }
        },
        /**
         * Starts the application.
         * @method start
         * @return {promise}
         */
        start: function() {
            system.log('Application:Starting');

            if (this.title) {
                document.title = this.title;
            }

            return system.defer(function (dfd) {
                $(function() {
                    loadPlugins().then(function(){
                        dfd.resolve();
                        system.log('Application:Started');
                    });
                });
            }).promise();
        },
        /**
         * Sets the root module/view for the application.
         * @method setRoot
         * @param {string} root The root view or module.
         * @param {string} [transition] The transition to use from the previous root (or splash screen) into the new root.
         * @param {string} [applicationHost] The application host element or id. By default the id 'applicationHost' will be used.
         */
        setRoot: function(root, transition, applicationHost) {
            var hostElement, settings = { activate:true, transition: transition };

            if (!applicationHost || system.isString(applicationHost)) {
                hostElement = document.getElementById(applicationHost || 'applicationHost');
            } else {
                hostElement = applicationHost;
            }

            if (system.isString(root)) {
                if (viewEngine.isViewUrl(root)) {
                    settings.view = root;
                } else {
                    settings.model = root;
                }
            } else {
                settings.model = root;
            }

            function finishComposition() {
                if(settings.model) {
                    if (settings.model.canActivate) {
                        try {
                            var result = settings.model.canActivate();
                            if (result && result.then) {
                                result.then(function (actualResult) {
                                    if (actualResult) {
                                        composition.compose(hostElement, settings);
                                    }
                                }).fail(function (err) {
                                    system.error(err);
                                });
                            } else if (result) {
                                composition.compose(hostElement, settings);
                            }
                        } catch (er) {
                            system.error(er);
                        }
                    } else {
                        composition.compose(hostElement, settings);
                    }
                } else {
                    composition.compose(hostElement, settings);
                }
            }

            if(system.isString(settings.model)) {
                system.acquire(settings.model).then(function(module) {
                    settings.model = system.resolveObject(module);
                    finishComposition();
                }).fail(function(err) {
                    system.error('Failed to load root module (' + settings.model + '). Details: ' + err.message);
                });
            } else {
                finishComposition();
            }
        }
    };

    Events.includeIn(app);

    return app;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The binder joins an object instance and a DOM element tree by applying databinding and/or invoking binding lifecycle callbacks (binding and bindingComplete).
 * @module binder
 * @requires system
 * @requires knockout
 */
define("durandal/binder", ['durandal/system', 'knockout'], function (system, ko) {
    var binder,
        insufficientInfoMessage = 'Insufficient Information to Bind',
        unexpectedViewMessage = 'Unexpected View Type',
        bindingInstructionKey = 'durandal-binding-instruction',
        koBindingContextKey = '__ko_bindingContext__';

    function normalizeBindingInstruction(result){
        if(result === undefined){
            return { applyBindings: true };
        }

        if(system.isBoolean(result)){
            return { applyBindings:result };
        }

        if(result.applyBindings === undefined){
            result.applyBindings = true;
        }

        return result;
    }

    function doBind(obj, view, bindingTarget, data){
        if (!view || !bindingTarget) {
            if (binder.throwOnErrors) {
                system.error(insufficientInfoMessage);
            } else {
                system.log(insufficientInfoMessage, view, data);
            }
            return;
        }

        if (!view.getAttribute) {
            if (binder.throwOnErrors) {
                system.error(unexpectedViewMessage);
            } else {
                system.log(unexpectedViewMessage, view, data);
            }
            return;
        }

        var viewName = view.getAttribute('data-view');

        try {
            var instruction;

            if (obj && obj.binding) {
                instruction = obj.binding(view);
            }

            instruction = normalizeBindingInstruction(instruction);
            binder.binding(data, view, instruction);

            if(instruction.applyBindings){
                system.log('Binding', viewName, data);
                ko.applyBindings(bindingTarget, view);
            }else if(obj){
                ko.utils.domData.set(view, koBindingContextKey, { $data:obj });
            }

            binder.bindingComplete(data, view, instruction);

            if (obj && obj.bindingComplete) {
                obj.bindingComplete(view);
            }

            ko.utils.domData.set(view, bindingInstructionKey, instruction);
            return instruction;
        } catch (e) {
            e.message = e.message + ';\nView: ' + viewName + ";\nModuleId: " + system.getModuleId(data);
            if (binder.throwOnErrors) {
                system.error(e);
            } else {
                system.log(e.message);
            }
        }
    }

    /**
     * @class BinderModule
     * @static
     */
    return binder = {
        /**
         * Called before every binding operation. Does nothing by default.
         * @method binding
         * @param {object} data The data that is about to be bound.
         * @param {DOMElement} view The view that is about to be bound.
         * @param {object} instruction The object that carries the binding instructions.
         */
        binding: system.noop,
        /**
         * Called after every binding operation. Does nothing by default.
         * @method bindingComplete
         * @param {object} data The data that has just been bound.
         * @param {DOMElement} view The view that has just been bound.
         * @param {object} instruction The object that carries the binding instructions.
         */
        bindingComplete: system.noop,
        /**
         * Indicates whether or not the binding system should throw errors or not.
         * @property {boolean} throwOnErrors
         * @default false The binding system will not throw errors by default. Instead it will log them.
         */
        throwOnErrors: false,
        /**
         * Gets the binding instruction that was associated with a view when it was bound.
         * @method getBindingInstruction
         * @param {DOMElement} view The view that was previously bound.
         * @return {object} The object that carries the binding instructions.
         */
        getBindingInstruction:function(view){
            return ko.utils.domData.get(view, bindingInstructionKey);
        },
        /**
         * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.
         * @method bindContext
         * @param {KnockoutBindingContext} bindingContext The current binding context.
         * @param {DOMElement} view The view to bind.
         * @param {object} [obj] The data to bind to, causing the creation of a child binding context if present.
         * @param {string} [dataAlias] An alias for $data if present.
         */
        bindContext: function(bindingContext, view, obj, dataAlias) {
            if (obj && bindingContext) {
                bindingContext = bindingContext.createChildContext(obj, typeof(dataAlias) === 'string' ? dataAlias : null);
            }

            return doBind(obj, view, bindingContext, obj || (bindingContext ? bindingContext.$data : null));
        },
        /**
         * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.
         * @method bind
         * @param {object} obj The data to bind to.
         * @param {DOMElement} view The view to bind.
         */
        bind: function(obj, view) {
            return doBind(obj, view, obj, obj);
        }
    };
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The composition module encapsulates all functionality related to visual composition.
 * @module composition
 * @requires system
 * @requires viewLocator
 * @requires binder
 * @requires viewEngine
 * @requires activator
 * @requires jquery
 * @requires knockout
 */
define("durandal/composition", ['durandal/system', 'durandal/viewLocator', 'durandal/binder', 'durandal/viewEngine', 'durandal/activator', 'jquery', 'knockout'], function (system, viewLocator, binder, viewEngine, activator, $, ko) {
    var dummyModel = {},
        activeViewAttributeName = 'data-active-view',
        composition,
        compositionCompleteCallbacks = [],
        compositionCount = 0,
        compositionDataKey = 'durandal-composition-data',
        partAttributeName = 'data-part',
        bindableSettings = ['model', 'view', 'transition', 'area', 'strategy', 'activationData', 'onError'],
        visibilityKey = "durandal-visibility-data",
        composeBindings = ['compose:'];
    
    function onError(context, error, element) {
        try {
            if (context.onError) {
                try {
                    context.onError(error, element);
                } catch (e) {
                    system.error(e);
                }
            } else {
                system.error(error);
            }
        } finally {
            endComposition(context, element, true);
        }
    }

    function getHostState(parent) {
        var elements = [];
        var state = {
            childElements: elements,
            activeView: null
        };

        var child = ko.virtualElements.firstChild(parent);

        while (child) {
            if (child.nodeType == 1) {
                elements.push(child);
                if (child.getAttribute(activeViewAttributeName)) {
                    state.activeView = child;
                }
            }

            child = ko.virtualElements.nextSibling(child);
        }

        if(!state.activeView){
            state.activeView = elements[0];
        }

        return state;
    }

    function endComposition(context, element, error) {
        compositionCount--;

        if(compositionCount === 0) {
            var callBacks = compositionCompleteCallbacks;
            compositionCompleteCallbacks = [];
            
            if (!error) {
                setTimeout(function () {
                    var i = callBacks.length;

                    while (i--) {
                        try {
                            callBacks[i]();
                        } catch (e) {
                            onError(context, e, element);
                        }
                    }
                }, 1);
            }
        }

        cleanUp(context);
    }

    function cleanUp(context){
        delete context.activeView;
        delete context.viewElements;
    }

    function tryActivate(context, successCallback, skipActivation, element) {
        if(skipActivation){
            successCallback();
        } else if (context.activate && context.model && context.model.activate) {
            var result;

            try{
                if(system.isArray(context.activationData)) {
                    result = context.model.activate.apply(context.model, context.activationData);
                } else {
                    result = context.model.activate(context.activationData);
                }

                if(result && result.then) {
                    result.then(successCallback, function(reason) {
                        onError(context, reason, element);
                        successCallback();
                    });
                } else if(result || result === undefined) {
                    successCallback();
                } else {
                    endComposition(context, element);
                }
            }
            catch(e){
                onError(context, e, element);
            }
        } else {
            successCallback();
        }
    }

    function triggerAttach(context, element) {
        var context = this;

        if (context.activeView) {
            context.activeView.removeAttribute(activeViewAttributeName);
        }

        if (context.child) {
            try{
                if (context.model && context.model.attached) {
                    if (context.composingNewView || context.alwaysTriggerAttach) {
                        context.model.attached(context.child, context.parent, context);
                    }
                }

                if (context.attached) {
                    context.attached(context.child, context.parent, context);
                }

                context.child.setAttribute(activeViewAttributeName, true);

                if (context.composingNewView && context.model && context.model.detached) {
                    ko.utils.domNodeDisposal.addDisposeCallback(context.child, function () {
                        try{
                            context.model.detached(context.child, context.parent, context);
                        }catch(e2){
                            onError(context, e2, element);
                        }
                    });
                }
            }catch(e){
                onError(context, e, element);
            }
        }

        context.triggerAttach = system.noop;
    }

    function shouldTransition(context) {
        if (system.isString(context.transition)) {
            if (context.activeView) {
                if (context.activeView == context.child) {
                    return false;
                }

                if (!context.child) {
                    return true;
                }

                if (context.skipTransitionOnSameViewId) {
                    var currentViewId = context.activeView.getAttribute('data-view');
                    var newViewId = context.child.getAttribute('data-view');
                    return currentViewId != newViewId;
                }
            }

            return true;
        }

        return false;
    }

    function cloneNodes(nodesArray) {
        for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {
            var clonedNode = nodesArray[i].cloneNode(true);
            newNodesArray.push(clonedNode);
        }
        return newNodesArray;
    }

    function replaceParts(context){
        var parts = cloneNodes(context.parts);
        var replacementParts = composition.getParts(parts);
        var standardParts = composition.getParts(context.child);

        for (var partId in replacementParts) {
            var toReplace = standardParts[partId];
            if (!toReplace) {
                toReplace = $('[data-part="' + partId + '"]', context.child).get(0);
                if (!toReplace) {
                    system.log('Could not find part to override: ' + partId);
                    continue;
                }
            }

            toReplace.parentNode.replaceChild(replacementParts[partId], toReplace);
        }
    }

    function removePreviousView(context){
        var children = ko.virtualElements.childNodes(context.parent), i, len;

        if(!system.isArray(children)){
            var arrayChildren = [];
            for(i = 0, len = children.length; i < len; i++){
                arrayChildren[i] = children[i];
            }
            children = arrayChildren;
        }

        for(i = 1,len = children.length; i < len; i++){
            ko.removeNode(children[i]);
        }
    }

    function hide(view) {
        ko.utils.domData.set(view, visibilityKey, view.style.display);
        view.style.display = 'none';
    }

    function show(view) {
        var displayStyle = ko.utils.domData.get(view, visibilityKey);
        view.style.display = displayStyle === 'none' ? 'block' : displayStyle;
    }

    function hasComposition(element){
        var dataBind = element.getAttribute('data-bind');
        if(!dataBind){
            return false;
        }

        for(var i = 0, length = composeBindings.length; i < length; i++){
            if(dataBind.indexOf(composeBindings[i]) > -1){
                return true;
            }
        }

        return false;
    }

    /**
     * @class CompositionTransaction
     * @static
     */
    var compositionTransaction = {
        /**
         * Registers a callback which will be invoked when the current composition transaction has completed. The transaction includes all parent and children compositions.
         * @method complete
         * @param {function} callback The callback to be invoked when composition is complete.
         */
        complete: function (callback) {
            compositionCompleteCallbacks.push(callback);
        }
    };

    /**
     * @class CompositionModule
     * @static
     */
    composition = {
        /**
         * An array of all the binding handler names (includeing :) that trigger a composition.
         * @property {string} composeBindings
         * @default ['compose:']
         */
        composeBindings:composeBindings,
        /**
         * Converts a transition name to its moduleId.
         * @method convertTransitionToModuleId
         * @param {string} name The name of the transtion.
         * @return {string} The moduleId.
         */
        convertTransitionToModuleId: function (name) {
            return 'transitions/' + name;
        },
        /**
         * The name of the transition to use in all compositions.
         * @property {string} defaultTransitionName
         * @default null
         */
        defaultTransitionName: null,
        /**
         * Represents the currently executing composition transaction.
         * @property {CompositionTransaction} current
         */
        current: compositionTransaction,
        /**
         * Registers a binding handler that will be invoked when the current composition transaction is complete.
         * @method addBindingHandler
         * @param {string} name The name of the binding handler.
         * @param {object} [config] The binding handler instance. If none is provided, the name will be used to look up an existing handler which will then be converted to a composition handler.
         * @param {function} [initOptionsFactory] If the registered binding needs to return options from its init call back to knockout, this function will server as a factory for those options. It will receive the same parameters that the init function does.
         */
        addBindingHandler:function(name, config, initOptionsFactory){
            var key,
                dataKey = 'composition-handler-' + name,
                handler;

            config = config || ko.bindingHandlers[name];
            initOptionsFactory = initOptionsFactory || function(){ return undefined;  };

            handler = ko.bindingHandlers[name] = {
                init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    if(compositionCount > 0){
                        var data = {
                            trigger:ko.observable(null)
                        };

                        composition.current.complete(function(){
                            if(config.init){
                                config.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                            }

                            if(config.update){
                                ko.utils.domData.set(element, dataKey, config);
                                data.trigger('trigger');
                            }
                        });

                        ko.utils.domData.set(element, dataKey, data);
                    }else{
                        ko.utils.domData.set(element, dataKey, config);

                        if(config.init){
                            config.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                        }
                    }

                    return initOptionsFactory(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                },
                update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var data = ko.utils.domData.get(element, dataKey);

                    if(data.update){
                        return data.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                    }

                    if(data.trigger){
                        data.trigger();
                    }
                }
            };

            for (key in config) {
                if (key !== "init" && key !== "update") {
                    handler[key] = config[key];
                }
            }
        },
        /**
         * Gets an object keyed with all the elements that are replacable parts, found within the supplied elements. The key will be the part name and the value will be the element itself.
         * @method getParts
         * @param {DOMElement\DOMElement[]} elements The element(s) to search for parts.
         * @return {object} An object keyed by part.
         */
        getParts: function(elements, parts) {
            parts = parts || {};

            if (!elements) {
                return parts;
            }

            if (elements.length === undefined) {
                elements = [elements];
            }

            for (var i = 0, length = elements.length; i < length; i++) {
                var element = elements[i],
                    id;

                if (element.getAttribute) {
                    id = element.getAttribute(partAttributeName);
                    if (id) {
                        parts[id] = element;
                    }

                    if (element.hasChildNodes() && !hasComposition(element)) {
                        composition.getParts(element.childNodes, parts);
                    }
                }
            }

            return parts;
        },
        cloneNodes:cloneNodes,
        finalize: function (context, element) {
            if(context.transition === undefined) {
                context.transition = this.defaultTransitionName;
            }

            if(!context.child && !context.activeView){
                if (!context.cacheViews) {
                    ko.virtualElements.emptyNode(context.parent);
                }

                context.triggerAttach(context, element);
                endComposition(context, element);
            } else if (shouldTransition(context)) {
                var transitionModuleId = this.convertTransitionToModuleId(context.transition);

                system.acquire(transitionModuleId).then(function (transition) {
                    context.transition = transition;

                    transition(context).then(function () {
                        if (!context.cacheViews) {
                            if(!context.child){
                                ko.virtualElements.emptyNode(context.parent);
                            }else{
                                removePreviousView(context);
                            }
                        }else if(context.activeView){
                            var instruction = binder.getBindingInstruction(context.activeView);
                            if(instruction && instruction.cacheViews != undefined && !instruction.cacheViews){
                                ko.removeNode(context.activeView);
                            }else{
                                hide(context.activeView);
                            }
                        }

                        if (context.child) {
                            show(context.child);
                        }

                        context.triggerAttach(context, element);
                        endComposition(context, element);
                    });
                }).fail(function(err){
                    onError(context, 'Failed to load transition (' + transitionModuleId + '). Details: ' + err.message, element);
                });
            } else {
                if (context.child != context.activeView) {
                    if (context.cacheViews && context.activeView) {
                        var instruction = binder.getBindingInstruction(context.activeView);
                        if(!instruction || (instruction.cacheViews != undefined && !instruction.cacheViews)){
                            ko.removeNode(context.activeView);
                        }else{
                            hide(context.activeView);
                        }
                    }

                    if (!context.child) {
                        if (!context.cacheViews) {
                            ko.virtualElements.emptyNode(context.parent);
                        }
                    } else {
                        if (!context.cacheViews) {
                            removePreviousView(context);
                        }

                        show(context.child);
                    }
                }

                context.triggerAttach(context, element);
                endComposition(context, element);
            }
        },
        bindAndShow: function (child, element, context, skipActivation) {
            context.child = child;
            context.parent.__composition_context = context;

            if (context.cacheViews) {
                context.composingNewView = (ko.utils.arrayIndexOf(context.viewElements, child) == -1);
            } else {
                context.composingNewView = true;
            }

            tryActivate(context, function () {
                if (context.parent.__composition_context == context) {
                    delete context.parent.__composition_context;

                    if (context.binding) {
                        context.binding(context.child, context.parent, context);
                    }

                    if (context.preserveContext && context.bindingContext) {
                        if (context.composingNewView) {
                            if(context.parts){
                                replaceParts(context);
                            }

                            hide(child);
                            ko.virtualElements.prepend(context.parent, child);

                        binder.bindContext(context.bindingContext, child, context.model, context.as);
                        }
                    } else if (child) {
                        var modelToBind = context.model || dummyModel;
                        var currentModel = ko.dataFor(child);

                        if (currentModel != modelToBind) {
                            if (!context.composingNewView) {
                                ko.removeNode(child);
                                viewEngine.createView(child.getAttribute('data-view')).then(function(recreatedView) {
                                    composition.bindAndShow(recreatedView, element, context, true);
                                });
                                return;
                            }

                            if(context.parts){
                                replaceParts(context);
                            }

                            hide(child);
                            ko.virtualElements.prepend(context.parent, child);

                            binder.bind(modelToBind, child);
                        }
                    }

                    composition.finalize(context, element);
                } else {
                    endComposition(context, element);
                }
            }, skipActivation, element);
        },
        /**
         * Eecutes the default view location strategy.
         * @method defaultStrategy
         * @param {object} context The composition context containing the model and possibly existing viewElements.
         * @return {promise} A promise for the view.
         */
        defaultStrategy: function (context) {
            return viewLocator.locateViewForObject(context.model, context.area, context.viewElements);
        },
        getSettings: function (valueAccessor, element) {
            var value = valueAccessor(),
                settings = ko.utils.unwrapObservable(value) || {},
                activatorPresent = activator.isActivator(value),
                moduleId;

            if (system.isString(settings)) {
                if (viewEngine.isViewUrl(settings)) {
                    settings = {
                        view: settings
                    };
                } else {
                    settings = {
                        model: settings,
                        activate: !activatorPresent
                    };
                }

                return settings;
            }

            moduleId = system.getModuleId(settings);
            if (moduleId) {
                settings = {
                    model: settings,
                    activate: !activatorPresent
                };

                return settings;
            }

            if(!activatorPresent && settings.model) {
                activatorPresent = activator.isActivator(settings.model);
            }

            for (var attrName in settings) {
                if (ko.utils.arrayIndexOf(bindableSettings, attrName) != -1) {
                    settings[attrName] = ko.utils.unwrapObservable(settings[attrName]);
                } else {
                    settings[attrName] = settings[attrName];
                }
            }

            if (activatorPresent) {
                settings.activate = false;
            } else if (settings.activate === undefined) {
                settings.activate = true;
            }

            return settings;
        },
        executeStrategy: function (context, element) {
            context.strategy(context).then(function (child) {
                composition.bindAndShow(child, element, context);
            });
        },
        inject: function (context, element) {
            if (!context.model) {
                this.bindAndShow(null, element, context);
                return;
            }

            if (context.view) {
                viewLocator.locateView(context.view, context.area, context.viewElements).then(function (child) {
                    composition.bindAndShow(child, element, context);
                });
                return;
            }

            if (!context.strategy) {
                context.strategy = this.defaultStrategy;
            }

            if (system.isString(context.strategy)) {
                system.acquire(context.strategy).then(function (strategy) {
                    context.strategy = strategy;
                    composition.executeStrategy(context, element);
                }).fail(function (err) {
                    onError(context, 'Failed to load view strategy (' + context.strategy + '). Details: ' + err.message, element);
                });
            } else {
                this.executeStrategy(context, element);
            }
        },
        /**
         * Initiates a composition.
         * @method compose
         * @param {DOMElement} element The DOMElement or knockout virtual element that serves as the parent for the composition.
         * @param {object} settings The composition settings.
         * @param {object} [bindingContext] The current binding context.
         */
        compose: function (element, settings, bindingContext, fromBinding) {
            compositionCount++;

            if(!fromBinding){
                settings = composition.getSettings(function() { return settings; }, element);
            }

            if (settings.compositionComplete) {
                compositionCompleteCallbacks.push(function () {
                    settings.compositionComplete(settings.child, settings.parent, settings);
                });
            }

            compositionCompleteCallbacks.push(function () {
                if(settings.composingNewView && settings.model && settings.model.compositionComplete){
                    settings.model.compositionComplete(settings.child, settings.parent, settings);
                }
            });

            var hostState = getHostState(element);

            settings.activeView = hostState.activeView;
            settings.parent = element;
            settings.triggerAttach = triggerAttach;
            settings.bindingContext = bindingContext;

            if (settings.cacheViews && !settings.viewElements) {
                settings.viewElements = hostState.childElements;
            }

            if (!settings.model) {
                if (!settings.view) {
                    this.bindAndShow(null, element, settings);
                } else {
                    settings.area = settings.area || 'partial';
                    settings.preserveContext = true;

                    viewLocator.locateView(settings.view, settings.area, settings.viewElements).then(function (child) {
                        composition.bindAndShow(child, element, settings);
                    });
                }
            } else if (system.isString(settings.model)) {
                system.acquire(settings.model).then(function (module) {
                    settings.model = system.resolveObject(module);
                    composition.inject(settings, element);
                }).fail(function (err) {
                    onError(settings, 'Failed to load composed module (' + settings.model + '). Details: ' + err.message, element);
                });
            } else {
                composition.inject(settings, element);
            }
        }
    };

    ko.bindingHandlers.compose = {
        init: function() {
            return { controlsDescendantBindings: true };
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var settings = composition.getSettings(valueAccessor, element);
            if(settings.mode){
                var data = ko.utils.domData.get(element, compositionDataKey);
                if(!data){
                    var childNodes = ko.virtualElements.childNodes(element);
                    data = {};

                    if(settings.mode === 'inline'){
                        data.view = viewEngine.ensureSingleElement(childNodes);
                    }else if(settings.mode === 'templated'){
                        data.parts = cloneNodes(childNodes);
                    }

                    ko.virtualElements.emptyNode(element);
                    ko.utils.domData.set(element, compositionDataKey, data);
                }

                if(settings.mode === 'inline'){
                    settings.view = data.view.cloneNode(true);
                }else if(settings.mode === 'templated'){
                    settings.parts = data.parts;
                }

                settings.preserveContext = true;
            }

            composition.compose(element, settings, bindingContext, true);
        }
    };

    ko.virtualElements.allowedBindings.compose = true;

    return composition;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Durandal events originate from backbone.js but also combine some ideas from signals.js as well as some additional improvements.
 * Events can be installed into any object and are installed into the `app` module by default for convenient app-wide eventing.
 * @module events
 * @requires system
 */
define("durandal/events", ['durandal/system'], function (system) {
    var eventSplitter = /\s+/;
    var Events = function() { };

    /**
     * Represents an event subscription.
     * @class Subscription
     */
    var Subscription = function(owner, events) {
        this.owner = owner;
        this.events = events;
    };

    /**
     * Attaches a callback to the event subscription.
     * @method then
     * @param {function} callback The callback function to invoke when the event is triggered.
     * @param {object} [context] An object to use as `this` when invoking the `callback`.
     * @chainable
     */
    Subscription.prototype.then = function (callback, context) {
        this.callback = callback || this.callback;
        this.context = context || this.context;
        
        if (!this.callback) {
            return this;
        }

        this.owner.on(this.events, this.callback, this.context);
        return this;
    };

    /**
     * Attaches a callback to the event subscription.
     * @method on
     * @param {function} [callback] The callback function to invoke when the event is triggered. If `callback` is not provided, the previous callback will be re-activated.
     * @param {object} [context] An object to use as `this` when invoking the `callback`.
     * @chainable
     */
    Subscription.prototype.on = Subscription.prototype.then;

    /**
     * Cancels the subscription.
     * @method off
     * @chainable
     */
    Subscription.prototype.off = function () {
        this.owner.off(this.events, this.callback, this.context);
        return this;
    };

    /**
     * Creates an object with eventing capabilities.
     * @class Events
     */

    /**
     * Creates a subscription or registers a callback for the specified event.
     * @method on
     * @param {string} events One or more events, separated by white space.
     * @param {function} [callback] The callback function to invoke when the event is triggered. If `callback` is not provided, a subscription instance is returned.
     * @param {object} [context] An object to use as `this` when invoking the `callback`.
     * @return {Subscription|Events} A subscription is returned if no callback is supplied, otherwise the events object is returned for chaining.
     */
    Events.prototype.on = function(events, callback, context) {
        var calls, event, list;

        if (!callback) {
            return new Subscription(this, events);
        } else {
            calls = this.callbacks || (this.callbacks = {});
            events = events.split(eventSplitter);

            while (event = events.shift()) {
                list = calls[event] || (calls[event] = []);
                list.push(callback, context);
            }

            return this;
        }
    };

    /**
     * Removes the callbacks for the specified events.
     * @method off
     * @param {string} [events] One or more events, separated by white space to turn off. If no events are specified, then the callbacks will be removed.
     * @param {function} [callback] The callback function to remove. If `callback` is not provided, all callbacks for the specified events will be removed.
     * @param {object} [context] The object that was used as `this`. Callbacks with this context will be removed.
     * @chainable
     */
    Events.prototype.off = function(events, callback, context) {
        var event, calls, list, i;

        // No events
        if (!(calls = this.callbacks)) {
            return this;
        }

        //removing all
        if (!(events || callback || context)) {
            delete this.callbacks;
            return this;
        }

        events = events ? events.split(eventSplitter) : system.keys(calls);

        // Loop through the callback list, splicing where appropriate.
        while (event = events.shift()) {
            if (!(list = calls[event]) || !(callback || context)) {
                delete calls[event];
                continue;
            }

            for (i = list.length - 2; i >= 0; i -= 2) {
                if (!(callback && list[i] !== callback || context && list[i + 1] !== context)) {
                    list.splice(i, 2);
                }
            }
        }

        return this;
    };

    /**
     * Triggers the specified events.
     * @method trigger
     * @param {string} [events] One or more events, separated by white space to trigger.
     * @chainable
     */
    Events.prototype.trigger = function(events) {
        var event, calls, list, i, length, args, all, rest;
        if (!(calls = this.callbacks)) {
            return this;
        }

        rest = [];
        events = events.split(eventSplitter);
        for (i = 1, length = arguments.length; i < length; i++) {
            rest[i - 1] = arguments[i];
        }

        // For each event, walk through the list of callbacks twice, first to
        // trigger the event, then to trigger any `"all"` callbacks.
        while (event = events.shift()) {
            // Copy callback lists to prevent modification.
            if (all = calls.all) {
                all = all.slice();
            }

            if (list = calls[event]) {
                list = list.slice();
            }

            // Execute event callbacks.
            if (list) {
                for (i = 0, length = list.length; i < length; i += 2) {
                    list[i].apply(list[i + 1] || this, rest);
                }
            }

            // Execute "all" callbacks.
            if (all) {
                args = [event].concat(rest);
                for (i = 0, length = all.length; i < length; i += 2) {
                    all[i].apply(all[i + 1] || this, args);
                }
            }
        }

        return this;
    };

    /**
     * Creates a function that will trigger the specified events when called. Simplifies proxying jQuery (or other) events through to the events object.
     * @method proxy
     * @param {string} events One or more events, separated by white space to trigger by invoking the returned function.
     * @return {function} Calling the function will invoke the previously specified events on the events object.
     */
    Events.prototype.proxy = function(events) {
        var that = this;
        return (function(arg) {
            that.trigger(events, arg);
        });
    };

    /**
     * Creates an object with eventing capabilities.
     * @class EventsModule
     * @static
     */

    /**
     * Adds eventing capabilities to the specified object.
     * @method includeIn
     * @param {object} targetObject The object to add eventing capabilities to.
     */
    Events.includeIn = function(targetObject) {
        targetObject.on = Events.prototype.on;
        targetObject.off = Events.prototype.off;
        targetObject.trigger = Events.prototype.trigger;
        targetObject.proxy = Events.prototype.proxy;
    };

    return Events;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The system module encapsulates the most basic features used by other modules.
 * @module system
 * @requires require
 * @requires jquery
 */
define("durandal/system", ['require', 'jquery'], function(require, $) {
    var isDebugging = false,
        nativeKeys = Object.keys,
        hasOwnProperty = Object.prototype.hasOwnProperty,
        toString = Object.prototype.toString,
        system,
        treatAsIE8 = false,
        nativeIsArray = Array.isArray,
        slice = Array.prototype.slice;

    //polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
    if (!String.prototype.trim) {
        String.prototype.trim = function () {
            return this.replace(/^\s+|\s+$/g, '');
        };
    }

    //see http://patik.com/blog/complete-cross-browser-console-log/
    // Tell IE9 to use its built-in console
    if (Function.prototype.bind && (typeof console === 'object' || typeof console === 'function') && typeof console.log == 'object') {
        try {
            ['log', 'info', 'warn', 'error', 'assert', 'dir', 'clear', 'profile', 'profileEnd']
                .forEach(function(method) {
                    console[method] = this.call(console[method], console);
                }, Function.prototype.bind);
        } catch (ex) {
            treatAsIE8 = true;
        }
    }

    // callback for dojo's loader 
    // note: if you wish to use Durandal with dojo's AMD loader,
    // currently you must fork the dojo source with the following
    // dojo/dojo.js, line 1187, the last line of the finishExec() function: 
    //  (add) signal("moduleLoaded", [module.result, module.mid]);
    // an enhancement request has been submitted to dojo to make this
    // a permanent change. To view the status of this request, visit:
    // http://bugs.dojotoolkit.org/ticket/16727

    if (require.on) {
        require.on("moduleLoaded", function(module, mid) {
            system.setModuleId(module, mid);
        });
    }

    // callback for require.js loader
    if (typeof requirejs !== 'undefined') {
        requirejs.onResourceLoad = function(context, map, depArray) {
            system.setModuleId(context.defined[map.id], map.id);
        };
    }

    var noop = function() { };

    var log = function() {
        try {
            // Modern browsers
            if (typeof console != 'undefined' && typeof console.log == 'function') {
                // Opera 11
                if (window.opera) {
                    var i = 0;
                    while (i < arguments.length) {
                        console.log('Item ' + (i + 1) + ': ' + arguments[i]);
                        i++;
                    }
                }
                // All other modern browsers
                else if ((slice.call(arguments)).length == 1 && typeof slice.call(arguments)[0] == 'string') {
                    console.log((slice.call(arguments)).toString());
                } else {
                    console.log.apply(console, slice.call(arguments));
                }
            }
            // IE8
            else if ((!Function.prototype.bind || treatAsIE8) && typeof console != 'undefined' && typeof console.log == 'object') {
                Function.prototype.call.call(console.log, console, slice.call(arguments));
            }

            // IE7 and lower, and other old browsers
        } catch (ignore) { }
    };

    var logError = function(error, err) {
        var exception;
        
        if(error instanceof Error){
            exception = error;
        } else {
            exception = new Error(error);
        }
        
        exception.innerError = err;
        
        //Report the error as an error, not as a log
        try {
            // Modern browsers (it's only a single item, no need for argument splitting as in log() above)
            if (typeof console != 'undefined' && typeof console.error == 'function') {
                console.error(exception);
            }
            // IE8
            else if ((!Function.prototype.bind || treatAsIE8) && typeof console != 'undefined' && typeof console.error == 'object') {
                Function.prototype.call.call(console.error, console, exception);
            }
            // IE7 and lower, and other old browsers
        } catch (ignore) { }

        throw exception;
    };

    /**
     * @class SystemModule
     * @static
     */
    system = {
        /**
         * Durandal's version.
         * @property {string} version
         */
        version: "2.1.0",
        /**
         * A noop function.
         * @method noop
         */
        noop: noop,
        /**
         * Gets the module id for the specified object.
         * @method getModuleId
         * @param {object} obj The object whose module id you wish to determine.
         * @return {string} The module id.
         */
        getModuleId: function(obj) {
            if (!obj) {
                return null;
            }

            if (typeof obj == 'function' && obj.prototype) {
                return obj.prototype.__moduleId__;
            }

            if (typeof obj == 'string') {
                return null;
            }

            return obj.__moduleId__;
        },
        /**
         * Sets the module id for the specified object.
         * @method setModuleId
         * @param {object} obj The object whose module id you wish to set.
         * @param {string} id The id to set for the specified object.
         */
        setModuleId: function(obj, id) {
            if (!obj) {
                return;
            }

            if (typeof obj == 'function' && obj.prototype) {
                obj.prototype.__moduleId__ = id;
                return;
            }

            if (typeof obj == 'string') {
                return;
            }

            obj.__moduleId__ = id;
        },
        /**
         * Resolves the default object instance for a module. If the module is an object, the module is returned. If the module is a function, that function is called with `new` and it's result is returned.
         * @method resolveObject
         * @param {object} module The module to use to get/create the default object for.
         * @return {object} The default object for the module.
         */
        resolveObject: function(module) {
            if (system.isFunction(module)) {
                return new module();
            } else {
                return module;
            }
        },
        /**
         * Gets/Sets whether or not Durandal is in debug mode.
         * @method debug
         * @param {boolean} [enable] Turns on/off debugging.
         * @return {boolean} Whether or not Durandal is current debugging.
         */
        debug: function(enable) {
            if (arguments.length == 1) {
                isDebugging = enable;
                if (isDebugging) {
                    this.log = log;
                    this.error = logError;
                    this.log('Debug:Enabled');
                } else {
                    this.log('Debug:Disabled');
                    this.log = noop;
                    this.error = noop;
                }
            }

            return isDebugging;
        },
        /**
         * Logs data to the console. Pass any number of parameters to be logged. Log output is not processed if the framework is not running in debug mode.
         * @method log
         * @param {object} info* The objects to log.
         */
        log: noop,
        /**
         * Logs an error.
         * @method error
         * @param {string|Error} obj The error to report.
         */
        error: noop,
        /**
         * Asserts a condition by throwing an error if the condition fails.
         * @method assert
         * @param {boolean} condition The condition to check.
         * @param {string} message The message to report in the error if the condition check fails.
         */
        assert: function (condition, message) {
            if (!condition) {
                system.error(new Error(message || 'Assert:Failed'));
            }
        },
        /**
         * Creates a deferred object which can be used to create a promise. Optionally pass a function action to perform which will be passed an object used in resolving the promise.
         * @method defer
         * @param {function} [action] The action to defer. You will be passed the deferred object as a paramter.
         * @return {Deferred} The deferred object.
         */
        defer: function(action) {
            return $.Deferred(action);
        },
        /**
         * Creates a simple V4 UUID. This should not be used as a PK in your database. It can be used to generate internal, unique ids. For a more robust solution see [node-uuid](https://github.com/broofa/node-uuid).
         * @method guid
         * @return {string} The guid.
         */
        guid: function() {
            var d = new Date().getTime();
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d/16);
                return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
            });
        },
        /**
         * Uses require.js to obtain a module. This function returns a promise which resolves with the module instance. You can pass more than one module id to this function or an array of ids. If more than one or an array is passed, then the promise will resolve with an array of module instances.
         * @method acquire
         * @param {string|string[]} moduleId The id(s) of the modules to load.
         * @return {Promise} A promise for the loaded module(s).
         */
        acquire: function() {
            var modules,
                first = arguments[0],
                arrayRequest = false;

            if(system.isArray(first)){
                modules = first;
                arrayRequest = true;
            }else{
                modules = slice.call(arguments, 0);
            }

            return this.defer(function(dfd) {
                require(modules, function() {
                    var args = arguments;
                    setTimeout(function() {
                        if(args.length > 1 || arrayRequest){
                            dfd.resolve(slice.call(args, 0));
                        }else{
                            dfd.resolve(args[0]);
                        }
                    }, 1);
                }, function(err){
                    dfd.reject(err);
                });
            }).promise();
        },
        /**
         * Extends the first object with the properties of the following objects.
         * @method extend
         * @param {object} obj The target object to extend.
         * @param {object} extension* Uses to extend the target object.
         */
        extend: function(obj) {
            var rest = slice.call(arguments, 1);

            for (var i = 0; i < rest.length; i++) {
                var source = rest[i];

                if (source) {
                    for (var prop in source) {
                        obj[prop] = source[prop];
                    }
                }
            }

            return obj;
        },
        /**
         * Uses a setTimeout to wait the specified milliseconds.
         * @method wait
         * @param {number} milliseconds The number of milliseconds to wait.
         * @return {Promise}
         */
        wait: function(milliseconds) {
            return system.defer(function(dfd) {
                setTimeout(dfd.resolve, milliseconds);
            }).promise();
        }
    };

    /**
     * Gets all the owned keys of the specified object.
     * @method keys
     * @param {object} object The object whose owned keys should be returned.
     * @return {string[]} The keys.
     */
    system.keys = nativeKeys || function(obj) {
        if (obj !== Object(obj)) {
            throw new TypeError('Invalid object');
        }

        var keys = [];

        for (var key in obj) {
            if (hasOwnProperty.call(obj, key)) {
                keys[keys.length] = key;
            }
        }

        return keys;
    };

    /**
     * Determines if the specified object is an html element.
     * @method isElement
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
    };

    /**
     * Determines if the specified object is an array.
     * @method isArray
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) == '[object Array]';
    };

    /**
     * Determines if the specified object is...an object. ie. Not an array, string, etc.
     * @method isObject
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isObject = function(obj) {
        return obj === Object(obj);
    };

    /**
     * Determines if the specified object is a boolean.
     * @method isBoolean
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isBoolean = function(obj) {
        return typeof(obj) === "boolean";
    };

    /**
     * Determines if the specified object is a promise.
     * @method isPromise
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */
    system.isPromise = function(obj) {
        return obj && system.isFunction(obj.then);
    };

    /**
     * Determines if the specified object is a function arguments object.
     * @method isArguments
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a function.
     * @method isFunction
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a string.
     * @method isString
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a number.
     * @method isNumber
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a date.
     * @method isDate
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    /**
     * Determines if the specified object is a boolean.
     * @method isBoolean
     * @param {object} object The object to check.
     * @return {boolean} True if matches the type, false otherwise.
     */

    //isArguments, isFunction, isString, isNumber, isDate, isRegExp.
    var isChecks = ['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'];

    function makeIsFunction(name) {
        var value = '[object ' + name + ']';
        system['is' + name] = function(obj) {
            return toString.call(obj) == value;
        };
    }

    for (var i = 0; i < isChecks.length; i++) {
        makeIsFunction(isChecks[i]);
    }

    return system;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The viewEngine module provides information to the viewLocator module which is used to locate the view's source file. The viewEngine also transforms a view id into a view instance.
 * @module viewEngine
 * @requires system
 * @requires jquery
 */
define("durandal/viewEngine", ['durandal/system', 'jquery'], function (system, $) {
    var parseMarkup;

    if ($.parseHTML) {
        parseMarkup = function (html) {
            return $.parseHTML(html);
        };
    } else {
        parseMarkup = function (html) {
            return $(html).get();
        };
    }

    /**
     * @class ViewEngineModule
     * @static
     */
    return {
        cache:{},
        /**
         * The file extension that view source files are expected to have.
         * @property {string} viewExtension
         * @default .html
         */
        viewExtension: '.html',
        /**
         * The name of the RequireJS loader plugin used by the viewLocator to obtain the view source. (Use requirejs to map the plugin's full path).
         * @property {string} viewPlugin
         * @default text
         */
        viewPlugin: 'text',
        /**
         * Parameters passed to the RequireJS loader plugin used by the viewLocator to obtain the view source.
         * @property {string} viewPluginParameters
         * @default The empty string by default.
         */
        viewPluginParameters: '',
        /**
         * Determines if the url is a url for a view, according to the view engine.
         * @method isViewUrl
         * @param {string} url The potential view url.
         * @return {boolean} True if the url is a view url, false otherwise.
         */
        isViewUrl: function (url) {
            return url.indexOf(this.viewExtension, url.length - this.viewExtension.length) !== -1;
        },
        /**
         * Converts a view url into a view id.
         * @method convertViewUrlToViewId
         * @param {string} url The url to convert.
         * @return {string} The view id.
         */
        convertViewUrlToViewId: function (url) {
            return url.substring(0, url.length - this.viewExtension.length);
        },
        /**
         * Converts a view id into a full RequireJS path.
         * @method convertViewIdToRequirePath
         * @param {string} viewId The view id to convert.
         * @return {string} The require path.
         */
        convertViewIdToRequirePath: function (viewId) {
            var plugin = this.viewPlugin ? this.viewPlugin + '!' : '';
            return plugin + viewId + this.viewExtension + this.viewPluginParameters;
        },
        /**
         * Parses the view engine recognized markup and returns DOM elements.
         * @method parseMarkup
         * @param {string} markup The markup to parse.
         * @return {DOMElement[]} The elements.
         */
        parseMarkup: parseMarkup,
        /**
         * Calls `parseMarkup` and then pipes the results through `ensureSingleElement`.
         * @method processMarkup
         * @param {string} markup The markup to process.
         * @return {DOMElement} The view.
         */
        processMarkup: function (markup) {
            var allElements = this.parseMarkup(markup);
            return this.ensureSingleElement(allElements);
        },
        /**
         * Converts an array of elements into a single element. White space and comments are removed. If a single element does not remain, then the elements are wrapped.
         * @method ensureSingleElement
         * @param {DOMElement[]} allElements The elements.
         * @return {DOMElement} A single element.
         */
        ensureSingleElement:function(allElements){
            if (allElements.length == 1) {
                return allElements[0];
            }

            var withoutCommentsOrEmptyText = [];

            for (var i = 0; i < allElements.length; i++) {
                var current = allElements[i];
                if (current.nodeType != 8) {
                    if (current.nodeType == 3) {
                        var result = /\S/.test(current.nodeValue);
                        if (!result) {
                            continue;
                        }
                    }

                    withoutCommentsOrEmptyText.push(current);
                }
            }

            if (withoutCommentsOrEmptyText.length > 1) {
                return $(withoutCommentsOrEmptyText).wrapAll('<div class="durandal-wrapper"></div>').parent().get(0);
            }

            return withoutCommentsOrEmptyText[0];
        },
        /**
         * Gets the view associated with the id from the cache of parsed views.
         * @method tryGetViewFromCache
         * @param {string} id The view id to lookup in the cache.
         * @return {DOMElement|null} The cached view or null if it's not in the cache.
         */
        tryGetViewFromCache:function(id) {
            return this.cache[id];
        },
        /**
         * Puts the view associated with the id into the cache of parsed views.
         * @method putViewInCache
         * @param {string} id The view id whose view should be cached.
         * @param {DOMElement} view The view to cache.
         */
        putViewInCache: function (id, view) {
            this.cache[id] = view;
        },
        /**
         * Creates the view associated with the view id.
         * @method createView
         * @param {string} viewId The view id whose view should be created.
         * @return {Promise} A promise of the view.
         */
        createView: function(viewId) {
            var that = this;
            var requirePath = this.convertViewIdToRequirePath(viewId);
            var existing = this.tryGetViewFromCache(requirePath);

            if (existing) {
                return system.defer(function(dfd) {
                    dfd.resolve(existing.cloneNode(true));
                }).promise();
            }

            return system.defer(function(dfd) {
                system.acquire(requirePath).then(function(markup) {
                    var element = that.processMarkup(markup);
                    element.setAttribute('data-view', viewId);
                    that.putViewInCache(requirePath, element);
                    dfd.resolve(element.cloneNode(true));
                }).fail(function(err) {
                    that.createFallbackView(viewId, requirePath, err).then(function(element) {
                        element.setAttribute('data-view', viewId);
                        that.cache[requirePath] = element;
                        dfd.resolve(element.cloneNode(true));
                    });
                });
            }).promise();
        },
        /**
         * Called when a view cannot be found to provide the opportunity to locate or generate a fallback view. Mainly used to ease development.
         * @method createFallbackView
         * @param {string} viewId The view id whose view should be created.
         * @param {string} requirePath The require path that was attempted.
         * @param {Error} requirePath The error that was returned from the attempt to locate the default view.
         * @return {Promise} A promise for the fallback view.
         */
        createFallbackView: function (viewId, requirePath, err) {
            var that = this,
                message = 'View Not Found. Searched for "' + viewId + '" via path "' + requirePath + '".';

            return system.defer(function(dfd) {
                dfd.resolve(that.processMarkup('<div class="durandal-view-404">' + message + '</div>'));
            }).promise();
        }
    };
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The viewLocator module collaborates with the viewEngine module to provide views (literally dom sub-trees) to other parts of the framework as needed. The primary consumer of the viewLocator is the composition module.
 * @module viewLocator
 * @requires system
 * @requires viewEngine
 */
define("durandal/viewLocator", ['durandal/system', 'durandal/viewEngine'], function (system, viewEngine) {
    function findInElements(nodes, url) {
        for (var i = 0; i < nodes.length; i++) {
            var current = nodes[i];
            var existingUrl = current.getAttribute('data-view');
            if (existingUrl == url) {
                return current;
            }
        }
    }
    
    function escape(str) {
        return (str + '').replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1");
    }

    /**
     * @class ViewLocatorModule
     * @static
     */
    return {
        /**
         * Allows you to set up a convention for mapping module folders to view folders. It is a convenience method that customizes `convertModuleIdToViewId` and `translateViewIdToArea` under the covers.
         * @method useConvention
         * @param {string} [modulesPath] A string to match in the path and replace with the viewsPath. If not specified, the match is 'viewmodels'.
         * @param {string} [viewsPath] The replacement for the modulesPath. If not specified, the replacement is 'views'.
         * @param {string} [areasPath] Partial views are mapped to the "views" folder if not specified. Use this parameter to change their location.
         */
        useConvention: function(modulesPath, viewsPath, areasPath) {
            modulesPath = modulesPath || 'viewmodels';
            viewsPath = viewsPath || 'views';
            areasPath = areasPath || viewsPath;

            var reg = new RegExp(escape(modulesPath), 'gi');

            this.convertModuleIdToViewId = function (moduleId) {
                return moduleId.replace(reg, viewsPath);
            };

            this.translateViewIdToArea = function (viewId, area) {
                if (!area || area == 'partial') {
                    return areasPath + '/' + viewId;
                }
                
                return areasPath + '/' + area + '/' + viewId;
            };
        },
        /**
         * Maps an object instance to a view instance.
         * @method locateViewForObject
         * @param {object} obj The object to locate the view for.
         * @param {string} [area] The area to translate the view to.
         * @param {DOMElement[]} [elementsToSearch] An existing set of elements to search first.
         * @return {Promise} A promise of the view.
         */
        locateViewForObject: function(obj, area, elementsToSearch) {
            var view;

            if (obj.getView) {
                view = obj.getView();
                if (view) {
                    return this.locateView(view, area, elementsToSearch);
                }
            }

            if (obj.viewUrl) {
                return this.locateView(obj.viewUrl, area, elementsToSearch);
            }

            var id = system.getModuleId(obj);
            if (id) {
                return this.locateView(this.convertModuleIdToViewId(id), area, elementsToSearch);
            }

            return this.locateView(this.determineFallbackViewId(obj), area, elementsToSearch);
        },
        /**
         * Converts a module id into a view id. By default the ids are the same.
         * @method convertModuleIdToViewId
         * @param {string} moduleId The module id.
         * @return {string} The view id.
         */
        convertModuleIdToViewId: function(moduleId) {
            return moduleId;
        },
        /**
         * If no view id can be determined, this function is called to genreate one. By default it attempts to determine the object's type and use that.
         * @method determineFallbackViewId
         * @param {object} obj The object to determine the fallback id for.
         * @return {string} The view id.
         */
        determineFallbackViewId: function (obj) {
            var funcNameRegex = /function (.{1,})\(/;
            var results = (funcNameRegex).exec((obj).constructor.toString());
            var typeName = (results && results.length > 1) ? results[1] : "";
            typeName = typeName.trim();
            return 'views/' + typeName;
        },
        /**
         * Takes a view id and translates it into a particular area. By default, no translation occurs.
         * @method translateViewIdToArea
         * @param {string} viewId The view id.
         * @param {string} area The area to translate the view to.
         * @return {string} The translated view id.
         */
        translateViewIdToArea: function (viewId, area) {
            return viewId;
        },
        /**
         * Locates the specified view.
         * @method locateView
         * @param {string|DOMElement} viewOrUrlOrId A view, view url or view id to locate.
         * @param {string} [area] The area to translate the view to.
         * @param {DOMElement[]} [elementsToSearch] An existing set of elements to search first.
         * @return {Promise} A promise of the view.
         */
        locateView: function(viewOrUrlOrId, area, elementsToSearch) {
            if (typeof viewOrUrlOrId === 'string') {
                var viewId;

                if (viewEngine.isViewUrl(viewOrUrlOrId)) {
                    viewId = viewEngine.convertViewUrlToViewId(viewOrUrlOrId);
                } else {
                    viewId = viewOrUrlOrId;
                }

                if (area) {
                    viewId = this.translateViewIdToArea(viewId, area);
                }

                if (elementsToSearch) {
                    var existing = findInElements(elementsToSearch, viewId);
                    if (existing) {
                        return system.defer(function(dfd) {
                            dfd.resolve(existing);
                        }).promise();
                    }
                }

                return viewEngine.createView(viewId);
            }

            return system.defer(function(dfd) {
                dfd.resolve(viewOrUrlOrId);
            }).promise();
        }
    };
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * The dialog module enables the display of message boxes, custom modal dialogs and other overlays or slide-out UI abstractions. Dialogs are constructed by the composition system which interacts with a user defined dialog context. The dialog module enforced the activator lifecycle.
 * @module dialog
 * @requires system
 * @requires app
 * @requires composition
 * @requires activator
 * @requires viewEngine
 * @requires jquery
 * @requires knockout
 */
define("plugins/dialog", ['durandal/system', 'durandal/app', 'durandal/composition', 'durandal/activator', 'durandal/viewEngine', 'jquery', 'knockout'], function (system, app, composition, activator, viewEngine, $, ko) {
    var contexts = {},
        dialogCount = ko.observable(0),
        dialog;

    /**
     * Models a message box's message, title and options.
     * @class MessageBox
     */
    var MessageBox = function (message, title, options, autoclose, settings) {
        this.message = message;
        this.title = title || MessageBox.defaultTitle;
        this.options = options || MessageBox.defaultOptions;
        this.autoclose = autoclose || false;
        this.settings = $.extend({}, MessageBox.defaultSettings, settings);
    };

    /**
     * Selects an option and closes the message box, returning the selected option through the dialog system's promise.
     * @method selectOption
     * @param {string} dialogResult The result to select.
     */
    MessageBox.prototype.selectOption = function (dialogResult) {
        dialog.close(this, dialogResult);
    };

    /**
     * Provides the view to the composition system.
     * @method getView
     * @return {DOMElement} The view of the message box.
     */
    MessageBox.prototype.getView = function () {
        return viewEngine.processMarkup(MessageBox.defaultViewMarkup);
    };

    /**
     * Configures a custom view to use when displaying message boxes.
     * @method setViewUrl
     * @param {string} viewUrl The view url relative to the base url which the view locator will use to find the message box's view.
     * @static
     */
    MessageBox.setViewUrl = function (viewUrl) {
        delete MessageBox.prototype.getView;
        MessageBox.prototype.viewUrl = viewUrl;
    };

    /**
     * The title to be used for the message box if one is not provided.
     * @property {string} defaultTitle
     * @default Application
     * @static
     */
    MessageBox.defaultTitle = app.title || 'Application';

    /**
     * The options to display in the message box if none are specified.
     * @property {string[]} defaultOptions
     * @default ['Ok']
     * @static
     */
    MessageBox.defaultOptions = ['Ok'];

    
    MessageBox.defaultSettings = { buttonClass: "btn btn-default", primaryButtonClass: "btn-primary autofocus", secondaryButtonClass: "", "class": "modal-content messageBox", style: null };

    /**
    * Sets the classes and styles used throughout the message box markup.
    * @method setDefaults
    * @param {object} settings A settings object containing the following optional properties: buttonClass, primaryButtonClass, secondaryButtonClass, class, style.
    */
    MessageBox.setDefaults = function (settings) {
        $.extend(MessageBox.defaultSettings, settings);
    };

    MessageBox.prototype.getButtonClass = function ($index) {
        var c = "";
        if (this.settings) {
            if (this.settings.buttonClass) {
                c = this.settings.buttonClass;
            }
            if ($index() === 0 && this.settings.primaryButtonClass) {
                if (c.length > 0) {
                    c += " ";
                }
                c += this.settings.primaryButtonClass;
            }
            if ($index() > 0 && this.settings.secondaryButtonClass) {
                if (c.length > 0) {
                    c += " ";
                }
                c += this.settings.secondaryButtonClass;
            }
        }
        return c;
    };

    MessageBox.prototype.getClass = function () {
        if (this.settings) {
            return this.settings["class"];
        }
        return "messageBox";
    };

    MessageBox.prototype.getStyle = function () {
        if (this.settings) {
            return this.settings.style;
        }
        return null;
    };

    MessageBox.prototype.getButtonText = function (stringOrObject) {
        var t = $.type(stringOrObject);
        if (t === "string") {
            return stringOrObject;
        }
        else if (t === "object") {
            if ($.type(stringOrObject.text) === "string") {
                return stringOrObject.text;
            } else {
                system.error('The object for a MessageBox button does not have a text property that is a string.');
                return null;
            }
        }
        system.error('Object for a MessageBox button is not a string or object but ' + t + '.');
        return null;
    };

    MessageBox.prototype.getButtonValue = function (stringOrObject) {
        var t = $.type(stringOrObject);
        if (t === "string") {
            return stringOrObject;
        }
        else if (t === "object") {
            if ($.type(stringOrObject.text) === "undefined") {
                system.error('The object for a MessageBox button does not have a value property defined.');
                return null;
            } else {
                return stringOrObject.value;
            }
        }
        system.error('Object for a MessageBox button is not a string or object but ' + t + '.');
        return null;
    };

    /**
     * The markup for the message box's view.
     * @property {string} defaultViewMarkup
     * @static
     */
    MessageBox.defaultViewMarkup = [
        '<div data-view="plugins/messageBox" data-bind="css: getClass(), style: getStyle()">',
            '<div class="modal-header">',
                '<h3 data-bind="html: title"></h3>',
            '</div>',
            '<div class="modal-body">',
                '<p class="message" data-bind="html: message"></p>',
            '</div>',
            '<div class="modal-footer">',
                '<!-- ko foreach: options -->',
                '<button data-bind="click: function () { $parent.selectOption($parent.getButtonValue($data)); }, text: $parent.getButtonText($data), css: $parent.getButtonClass($index)"></button>',
                '<!-- /ko -->',
                '<div style="clear:both;"></div>',
            '</div>',
        '</div>'
    ].join('\n');

    function ensureDialogInstance(objOrModuleId) {
        return system.defer(function (dfd) {
            if (system.isString(objOrModuleId)) {
                system.acquire(objOrModuleId).then(function (module) {
                    dfd.resolve(system.resolveObject(module));
                }).fail(function (err) {
                    system.error('Failed to load dialog module (' + objOrModuleId + '). Details: ' + err.message);
                });
            } else {
                dfd.resolve(objOrModuleId);
            }
        }).promise();
    }

    /**
     * @class DialogModule
     * @static
     */
    dialog = {
        /**
         * The constructor function used to create message boxes.
         * @property {MessageBox} MessageBox
         */
        MessageBox: MessageBox,
        /**
         * The css zIndex that the last dialog was displayed at.
         * @property {number} currentZIndex
         */
        currentZIndex: 1050,
        /**
         * Gets the next css zIndex at which a dialog should be displayed.
         * @method getNextZIndex
         * @return {number} The next usable zIndex.
         */
        getNextZIndex: function () {
            return ++this.currentZIndex;
        },
        /**
         * Determines whether or not there are any dialogs open.
         * @method isOpen
         * @return {boolean} True if a dialog is open. false otherwise.
         */
        isOpen: ko.computed(function() {
            return dialogCount() > 0;
        }),
        /**
         * Gets the dialog context by name or returns the default context if no name is specified.
         * @method getContext
         * @param {string} [name] The name of the context to retrieve.
         * @return {DialogContext} True context.
         */
        getContext: function (name) {
            return contexts[name || 'default'];
        },
        /**
         * Adds (or replaces) a dialog context.
         * @method addContext
         * @param {string} name The name of the context to add.
         * @param {DialogContext} dialogContext The context to add.
         */
        addContext: function (name, dialogContext) {
            dialogContext.name = name;
            contexts[name] = dialogContext;

            var helperName = 'show' + name.substr(0, 1).toUpperCase() + name.substr(1);
            this[helperName] = function (obj, activationData) {
                return this.show(obj, activationData, name);
            };
        },
        createCompositionSettings: function (obj, dialogContext) {
            var settings = {
                model: obj,
                activate: false,
                transition: false
            };

            if (dialogContext.binding) {
                settings.binding = dialogContext.binding;
            }

            if (dialogContext.attached) {
                settings.attached = dialogContext.attached;
            }

            if (dialogContext.compositionComplete) {
                settings.compositionComplete = dialogContext.compositionComplete;
            }

            return settings;
        },
        /**
         * Gets the dialog model that is associated with the specified object.
         * @method getDialog
         * @param {object} obj The object for whom to retrieve the dialog.
         * @return {Dialog} The dialog model.
         */
        getDialog: function (obj) {
            if (obj) {
                return obj.__dialog__;
            }

            return undefined;
        },
        /**
         * Closes the dialog associated with the specified object.
         * @method close
         * @param {object} obj The object whose dialog should be closed.
         * @param {object} results* The results to return back to the dialog caller after closing.
         */
        close: function (obj) {
            var theDialog = this.getDialog(obj);
            if (theDialog) {
                var rest = Array.prototype.slice.call(arguments, 1);
                theDialog.close.apply(theDialog, rest);
            }
        },
        /**
         * Shows a dialog.
         * @method show
         * @param {object|string} obj The object (or moduleId) to display as a dialog.
         * @param {object} [activationData] The data that should be passed to the object upon activation.
         * @param {string} [context] The name of the dialog context to use. Uses the default context if none is specified.
         * @return {Promise} A promise that resolves when the dialog is closed and returns any data passed at the time of closing.
         */
        show: function (obj, activationData, context) {
            var that = this;
            var dialogContext = contexts[context || 'default'];

            return system.defer(function (dfd) {
                ensureDialogInstance(obj).then(function (instance) {
                    var dialogActivator = activator.create();

                    dialogActivator.activateItem(instance, activationData).then(function (success) {
                        if (success) {
                            var theDialog = instance.__dialog__ = {
                                owner: instance,
                                context: dialogContext,
                                activator: dialogActivator,
                                close: function () {
                                    var args = arguments;
                                    dialogActivator.deactivateItem(instance, true).then(function (closeSuccess) {
                                        if (closeSuccess) {
                                            dialogCount(dialogCount() - 1);
                                            dialogContext.removeHost(theDialog);
                                            delete instance.__dialog__;

                                            if (args.length === 0) {
                                                dfd.resolve();
                                            } else if (args.length === 1) {
                                                dfd.resolve(args[0]);
                                            } else {
                                                dfd.resolve.apply(dfd, args);
                                            }
                                        }
                                    });
                                }
                            };

                            theDialog.settings = that.createCompositionSettings(instance, dialogContext);
                            dialogContext.addHost(theDialog);

                            dialogCount(dialogCount() + 1);
                            composition.compose(theDialog.host, theDialog.settings);
                        } else {
                            dfd.resolve(false);
                        }
                    });
                });
            }).promise();
        },
        /**
         * Shows a message box.
         * @method showMessage
         * @param {string} message The message to display in the dialog.
         * @param {string} [title] The title message.
         * @param {string[]} [options] The options to provide to the user.
         * @param {boolean} [autoclose] Automatically close the the message box when clicking outside?
         * @param {Object} [settings] Custom settings for this instance of the messsage box, used to change classes and styles.
         * @return {Promise} A promise that resolves when the message box is closed and returns the selected option.
         */
        showMessage: function (message, title, options, autoclose, settings) {
            if (system.isString(this.MessageBox)) {
                return dialog.show(this.MessageBox, [
                    message,
                    title || MessageBox.defaultTitle,
                    options || MessageBox.defaultOptions,
                    autoclose || false,
                    settings || {}
                ]);
            }

            return dialog.show(new this.MessageBox(message, title, options, autoclose, settings));
        },
        /**
         * Installs this module into Durandal; called by the framework. Adds `app.showDialog` and `app.showMessage` convenience methods.
         * @method install
         * @param {object} [config] Add a `messageBox` property to supply a custom message box constructor. Add a `messageBoxView` property to supply custom view markup for the built-in message box. You can also use messageBoxViewUrl to specify the view url.
         */
        install: function (config) {
            app.showDialog = function (obj, activationData, context) {
                return dialog.show(obj, activationData, context);
            };

            app.closeDialog = function () {
                return dialog.close.apply(dialog, arguments);
            };

            app.showMessage = function (message, title, options, autoclose, settings) {
                return dialog.showMessage(message, title, options, autoclose, settings);
            };

            if (config.messageBox) {
                dialog.MessageBox = config.messageBox;
            }

            if (config.messageBoxView) {
                dialog.MessageBox.prototype.getView = function () {
                    return viewEngine.processMarkup(config.messageBoxView);
                };
            }

            if (config.messageBoxViewUrl) {
                dialog.MessageBox.setViewUrl(config.messageBoxViewUrl);
            }
        }
    };

    /**
     * @class DialogContext
     */
    dialog.addContext('default', {
        blockoutOpacity: 0.2,
        removeDelay: 200,
        /**
         * In this function, you are expected to add a DOM element to the tree which will serve as the "host" for the modal's composed view. You must add a property called host to the modalWindow object which references the dom element. It is this host which is passed to the composition module.
         * @method addHost
         * @param {Dialog} theDialog The dialog model.
         */
        addHost: function (theDialog) {
            var body = $('body');
            var blockout = $('<div class="modalBlockout"></div>')
                .css({ 'z-index': dialog.getNextZIndex(), 'opacity': this.blockoutOpacity })
                .appendTo(body);

            var host = $('<div class="modalHost"></div>')
                .css({ 'z-index': dialog.getNextZIndex() })
                .appendTo(body);

            theDialog.host = host.get(0);
            theDialog.blockout = blockout.get(0);

            if (!dialog.isOpen()) {
                theDialog.oldBodyMarginRight = body.css("margin-right");
                theDialog.oldInlineMarginRight = body.get(0).style.marginRight;

                var html = $("html");
                var oldBodyOuterWidth = body.outerWidth(true);
                var oldScrollTop = html.scrollTop();
                $("html").css("overflow-y", "hidden");
                var newBodyOuterWidth = $("body").outerWidth(true);
                body.css("margin-right", (newBodyOuterWidth - oldBodyOuterWidth + parseInt(theDialog.oldBodyMarginRight, 10)) + "px");
                html.scrollTop(oldScrollTop); // necessary for Firefox
            }
        },
        /**
         * This function is expected to remove any DOM machinery associated with the specified dialog and do any other necessary cleanup.
         * @method removeHost
         * @param {Dialog} theDialog The dialog model.
         */
        removeHost: function (theDialog) {
            $(theDialog.host).css('opacity', 0);
            $(theDialog.blockout).css('opacity', 0);

            setTimeout(function () {
                ko.removeNode(theDialog.host);
                ko.removeNode(theDialog.blockout);
            }, this.removeDelay);

            if (!dialog.isOpen()) {
                var html = $("html");
                var oldScrollTop = html.scrollTop(); // necessary for Firefox.
                html.css("overflow-y", "").scrollTop(oldScrollTop);

                if (theDialog.oldInlineMarginRight) {
                    $("body").css("margin-right", theDialog.oldBodyMarginRight);
                } else {
                    $("body").css("margin-right", '');
                }
            }
        },
        attached: function (view) {
            //To prevent flickering in IE8, we set visibility to hidden first, and later restore it
            $(view).css("visibility", "hidden");
        },
        /**
         * This function is called after the modal is fully composed into the DOM, allowing your implementation to do any final modifications, such as positioning or animation. You can obtain the original dialog object by using `getDialog` on context.model.
         * @method compositionComplete
         * @param {DOMElement} child The dialog view.
         * @param {DOMElement} parent The parent view.
         * @param {object} context The composition context.
         */
        compositionComplete: function (child, parent, context) {
            var theDialog = dialog.getDialog(context.model);
            var $child = $(child);
            var loadables = $child.find("img").filter(function () {
                //Remove images with known width and height
                var $this = $(this);
                return !(this.style.width && this.style.height) && !($this.attr("width") && $this.attr("height"));
            });

            $child.data("predefinedWidth", $child.get(0).style.width);

            var setDialogPosition = function (childView, objDialog) {
                //Setting a short timeout is need in IE8, otherwise we could do this straight away
                setTimeout(function () {
                    var $childView = $(childView);

                    objDialog.context.reposition(childView);

                    $(objDialog.host).css('opacity', 1);
                    $childView.css("visibility", "visible");

                    $childView.find('.autofocus').first().focus();
                }, 1);
            };

            setDialogPosition(child, theDialog);
            loadables.load(function () {
                setDialogPosition(child, theDialog);
            });

            if ($child.hasClass('autoclose') || context.model.autoclose) {
                $(theDialog.blockout).click(function () {
                    theDialog.close();
                });
            }
        },
        /**
         * This function is called to reposition the model view.
         * @method reposition
         * @param {DOMElement} view The dialog view.
         */
        reposition: function (view) {
            var $view = $(view),
                $window = $(window);

            //We will clear and then set width for dialogs without width set 
            if (!$view.data("predefinedWidth")) {
                $view.css({ width: '' }); //Reset width
            }
            var width = $view.outerWidth(false),
                height = $view.outerHeight(false),
                windowHeight = $window.height() - 10, //leave at least 10 pixels free
                windowWidth = $window.width() - 10, //leave at least 10 pixels free
                constrainedHeight = Math.min(height, windowHeight),
                constrainedWidth = Math.min(width, windowWidth);

            $view.css({
                'margin-top': (-constrainedHeight / 2).toString() + 'px',
                'margin-left': (-constrainedWidth / 2).toString() + 'px'
            });

            if (height > windowHeight) {
                $view.css("overflow-y", "auto").outerHeight(windowHeight);
            } else {
                $view.css({
                    "overflow-y": "",
                    "height": ""
                });
            }

            if (width > windowWidth) {
                $view.css("overflow-x", "auto").outerWidth(windowWidth);
            } else {
                $view.css("overflow-x", "");

                if (!$view.data("predefinedWidth")) {
                    //Ensure the correct width after margin-left has been set
                    $view.outerWidth(constrainedWidth);
                } else {
                    $view.css("width", $view.data("predefinedWidth"));
                }
            }
        }
    });

    return dialog;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * This module is based on Backbone's core history support. It abstracts away the low level details of working with browser history and url changes in order to provide a solid foundation for a router.
 * @module history
 * @requires system
 * @requires jquery
 */
define("plugins/history", ['durandal/system', 'jquery'], function (system, $) {
    // Cached regex for stripping a leading hash/slash and trailing space.
    var routeStripper = /^[#\/]|\s+$/g;

    // Cached regex for stripping leading and trailing slashes.
    var rootStripper = /^\/+|\/+$/g;

    // Cached regex for detecting MSIE.
    var isExplorer = /msie [\w.]+/;

    // Cached regex for removing a trailing slash.
    var trailingSlash = /\/$/;

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    function updateHash(location, fragment, replace) {
        if (replace) {
            var href = location.href.replace(/(javascript:|#).*$/, '');

            if (history.history.replaceState) {
                history.history.replaceState({}, document.title, href + '#' + fragment); // using history.replaceState instead of location.replace to work around chrom bug
            } else {
                location.replace(href + '#' + fragment);
            }
        } else {
            // Some browsers require that `hash` contains a leading #.
            location.hash = '#' + fragment;
        }
    };

    /**
     * @class HistoryModule
     * @static
     */
    var history = {
        /**
         * The setTimeout interval used when the browser does not support hash change events.
         * @property {string} interval
         * @default 50
         */
        interval: 50,
        /**
         * Indicates whether or not the history module is actively tracking history.
         * @property {string} active
         */
        active: false
    };
    
    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
        history.location = window.location;
        history.history = window.history;
    }

    /**
     * Gets the true hash value. Cannot use location.hash directly due to a bug in Firefox where location.hash will always be decoded.
     * @method getHash
     * @param {string} [window] The optional window instance
     * @return {string} The hash.
     */
    history.getHash = function(window) {
        var match = (window || history).location.href.match(/#(.*)$/);
        return match ? match[1] : '';
    };
    
    /**
     * Get the cross-browser normalized URL fragment, either from the URL, the hash, or the override.
     * @method getFragment
     * @param {string} fragment The fragment.
     * @param {boolean} forcePushState Should we force push state?
     * @return {string} he fragment.
     */
    history.getFragment = function(fragment, forcePushState) {
        if (fragment == null) {
            if (history._hasPushState || !history._wantsHashChange || forcePushState) {
                fragment = history.location.pathname + history.location.search;
                var root = history.root.replace(trailingSlash, '');
                if (!fragment.indexOf(root)) {
                    fragment = fragment.substr(root.length);
                }
            } else {
                fragment = history.getHash();
            }
        }
        
        return fragment.replace(routeStripper, '');
    };

    /**
     * Activate the hash change handling, returning `true` if the current URL matches an existing route, and `false` otherwise.
     * @method activate
     * @param {HistoryOptions} options.
     * @return {boolean|undefined} Returns true/false from loading the url unless the silent option was selected.
     */
    history.activate = function(options) {
        if (history.active) {
            system.error("History has already been activated.");
        }

        history.active = true;

        // Figure out the initial configuration. Do we need an iframe?
        // Is pushState desired ... is it available?
        history.options = system.extend({}, { root: '/' }, history.options, options);
        history.root = history.options.root;
        history._wantsHashChange = history.options.hashChange !== false;
        history._wantsPushState = !!history.options.pushState;
        history._hasPushState = !!(history.options.pushState && history.history && history.history.pushState);

        var fragment = history.getFragment();
        var docMode = document.documentMode;
        var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

        // Normalize root to always include a leading and trailing slash.
        history.root = ('/' + history.root + '/').replace(rootStripper, '/');

        if (oldIE && history._wantsHashChange) {
            history.iframe = $('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
            history.navigate(fragment, false);
        }

        // Depending on whether we're using pushState or hashes, and whether
        // 'onhashchange' is supported, determine how we check the URL state.
        if (history._hasPushState) {
            $(window).on('popstate', history.checkUrl);
        } else if (history._wantsHashChange && ('onhashchange' in window) && !oldIE) {
            $(window).on('hashchange', history.checkUrl);
        } else if (history._wantsHashChange) {
            history._checkUrlInterval = setInterval(history.checkUrl, history.interval);
        }

        // Determine if we need to change the base url, for a pushState link
        // opened by a non-pushState browser.
        history.fragment = fragment;
        var loc = history.location;
        var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === history.root;

        // Transition from hashChange to pushState or vice versa if both are requested.
        if (history._wantsHashChange && history._wantsPushState) {
            // If we've started off with a route from a `pushState`-enabled
            // browser, but we're currently in a browser that doesn't support it...
            if (!history._hasPushState && !atRoot) {
                history.fragment = history.getFragment(null, true);
                history.location.replace(history.root + history.location.search + '#' + history.fragment);
                // Return immediately as browser will do redirect to new url
                return true;

            // Or if we've started out with a hash-based route, but we're currently
            // in a browser where it could be `pushState`-based instead...
            } else if (history._hasPushState && atRoot && loc.hash) {
                this.fragment = history.getHash().replace(routeStripper, '');
                this.history.replaceState({}, document.title, history.root + history.fragment + loc.search);
            }
        }

        if (!history.options.silent) {
            return history.loadUrl(options.startRoute);
        }
    };

    /**
     * Disable history, perhaps temporarily. Not useful in a real app, but possibly useful for unit testing Routers.
     * @method deactivate
     */
    history.deactivate = function() {
        $(window).off('popstate', history.checkUrl).off('hashchange', history.checkUrl);
        clearInterval(history._checkUrlInterval);
        history.active = false;
    };

    /**
     * Checks the current URL to see if it has changed, and if it has, calls `loadUrl`, normalizing across the hidden iframe.
     * @method checkUrl
     * @return {boolean} Returns true/false from loading the url.
     */
    history.checkUrl = function() {
        var current = history.getFragment();
        if (current === history.fragment && history.iframe) {
            current = history.getFragment(history.getHash(history.iframe));
        }

        if (current === history.fragment) {
            return false;
        }

        if (history.iframe) {
            history.navigate(current, false);
        }
        
        history.loadUrl();
    };
    
    /**
     * Attempts to load the current URL fragment. A pass-through to options.routeHandler.
     * @method loadUrl
     * @return {boolean} Returns true/false from the route handler.
     */
    history.loadUrl = function(fragmentOverride) {
        var fragment = history.fragment = history.getFragment(fragmentOverride);

        return history.options.routeHandler ?
            history.options.routeHandler(fragment) :
            false;
    };

    /**
     * Save a fragment into the hash history, or replace the URL state if the
     * 'replace' option is passed. You are responsible for properly URL-encoding
     * the fragment in advance.
     * The options object can contain `trigger: false` if you wish to not have the
     * route callback be fired, or `replace: true`, if
     * you wish to modify the current URL without adding an entry to the history.
     * @method navigate
     * @param {string} fragment The url fragment to navigate to.
     * @param {object|boolean} options An options object with optional trigger and replace flags. You can also pass a boolean directly to set the trigger option. Trigger is `true` by default.
     * @return {boolean} Returns true/false from loading the url.
     */
    history.navigate = function(fragment, options) {
        if (!history.active) {
            return false;
        }

        if(options === undefined) {
            options = {
                trigger: true
            };
        }else if(system.isBoolean(options)) {
            options = {
                trigger: options
            };
        }

        fragment = history.getFragment(fragment || '');

        if (history.fragment === fragment) {
            return;
        }

        history.fragment = fragment;

        var url = history.root + fragment;

        // Don't include a trailing slash on the root.
        if(fragment === '' && url !== '/') {
            url = url.slice(0, -1);
        }

        // If pushState is available, we use it to set the fragment as a real URL.
        if (history._hasPushState) {
            history.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

            // If hash changes haven't been explicitly disabled, update the hash
            // fragment to store history.
        } else if (history._wantsHashChange) {
            updateHash(history.location, fragment, options.replace);
            
            if (history.iframe && (fragment !== history.getFragment(history.getHash(history.iframe)))) {
                // Opening and closing the iframe tricks IE7 and earlier to push a
                // history entry on hash-tag change.  When replace is true, we don't
                // want history.
                if (!options.replace) {
                    history.iframe.document.open().close();
                }
                
                updateHash(history.iframe.location, fragment, options.replace);
            }

            // If you've told us that you explicitly don't want fallback hashchange-
            // based history, then `navigate` becomes a page refresh.
        } else {
            return history.location.assign(url);
        }

        if (options.trigger) {
            return history.loadUrl(fragment);
        }
    };

    /**
     * Navigates back in the browser history.
     * @method navigateBack
     */
    history.navigateBack = function() {
        history.history.back();
    };

    /**
     * @class HistoryOptions
     * @static
     */

    /**
     * The function that will be called back when the fragment changes.
     * @property {function} routeHandler
     */

    /**
     * The url root used to extract the fragment when using push state.
     * @property {string} root
     */

    /**
     * Use hash change when present.
     * @property {boolean} hashChange
     * @default true
     */

    /**
     * Use push state when present.
     * @property {boolean} pushState
     * @default false
     */

    /**
     * Prevents loading of the current url when activating history.
     * @property {boolean} silent
     * @default false
     */

    return history;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Enables common http request scenarios.
 * @module http
 * @requires jquery
 * @requires knockout
 */
define("plugins/http", ['jquery', 'knockout'], function ($, ko) {
    /**
     * @class HTTPModule
     * @static
     */
    return {
        /**
         * The name of the callback parameter to inject into jsonp requests by default.
         * @property {string} callbackParam
         * @default callback
         */
        callbackParam: 'callback',
        /**
         * Converts the data to JSON.
         * @method toJSON
         * @param {object} data The data to convert to JSON.
         * @return {string} JSON.
         */
        toJSON: function(data) {
            return ko.toJSON(data);
        },
        /**
         * Makes an HTTP GET request.
         * @method get
         * @param {string} url The url to send the get request to.
         * @param {object} [query] An optional key/value object to transform into query string parameters.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the get response data.
         */
        get: function (url, query, headers) {
            return $.ajax(url, { data: query, headers: ko.toJS(headers) });
        },
        /**
         * Makes an JSONP request.
         * @method jsonp
         * @param {string} url The url to send the get request to.
         * @param {object} [query] An optional key/value object to transform into query string parameters.
         * @param {string} [callbackParam] The name of the callback parameter the api expects (overrides the default callbackParam).
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the response data.
         */
        jsonp: function (url, query, callbackParam, headers) {
            if (url.indexOf('=?') == -1) {
                callbackParam = callbackParam || this.callbackParam;

                if (url.indexOf('?') == -1) {
                    url += '?';
                } else {
                    url += '&';
                }

                url += callbackParam + '=?';
            }

            return $.ajax({
                url: url,
                dataType: 'jsonp',
                data: query,
                headers: ko.toJS(headers)
            });
        },
        /**
         * Makes an HTTP PUT request.
         * @method put
         * @param {string} url The url to send the put request to.
         * @param {object} data The data to put. It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the response data.
         */
        put:function(url, data, headers) {
            return $.ajax({
                url: url,
                data: this.toJSON(data),
                type: 'PUT',
                contentType: 'application/json',
                dataType: 'json',
                headers: ko.toJS(headers)
            });
        },
        /**
         * Makes an HTTP POST request.
         * @method post
         * @param {string} url The url to send the post request to.
         * @param {object} data The data to post. It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the response data.
         */
        post: function (url, data, headers) {
            return $.ajax({
                url: url,
                data: this.toJSON(data),
                type: 'POST',
                contentType: 'application/json',
                dataType: 'json',
                headers: ko.toJS(headers)
            });
        },
        /**
         * Makes an HTTP DELETE request.
         * @method remove
         * @param {string} url The url to send the delete request to.
         * @param {object} [query] An optional key/value object to transform into query string parameters.
         * @param {object} [headers] The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.
         * @return {Promise} A promise of the get response data.
         */
        remove:function(url, query, headers) {
            return $.ajax({
                url: url,
                data: query,
                type: 'DELETE',
                headers: ko.toJS(headers)
            });
        }
    };
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Enables automatic observability of plain javascript object for ES5 compatible browsers. Also, converts promise properties into observables that are updated when the promise resolves.
 * @module observable
 * @requires system
 * @requires binder
 * @requires knockout
 */
define("plugins/observable", ['durandal/system', 'durandal/binder', 'knockout'], function(system, binder, ko) {
    var observableModule,
        toString = Object.prototype.toString,
        nonObservableTypes = ['[object Function]', '[object String]', '[object Boolean]', '[object Number]', '[object Date]', '[object RegExp]'],
        observableArrayMethods = ['remove', 'removeAll', 'destroy', 'destroyAll', 'replace'],
        arrayMethods = ['pop', 'reverse', 'sort', 'shift', 'slice'],
        additiveArrayFunctions = ['push', 'unshift'],
        es5Functions = ['filter', 'map', 'reduce', 'reduceRight', 'forEach', 'every', 'some'],
        arrayProto = Array.prototype,
        observableArrayFunctions = ko.observableArray.fn,
        logConversion = false,
        changeDetectionMethod = undefined,
        skipPromises = false,
        shouldIgnorePropertyName;

    /**
     * You can call observable(obj, propertyName) to get the observable function for the specified property on the object.
     * @class ObservableModule
     */

    if (!('getPropertyDescriptor' in Object)) {
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf = Object.getPrototypeOf;

        Object['getPropertyDescriptor'] = function(o, name) {
            var proto = o, descriptor;

            while(proto && !(descriptor = getOwnPropertyDescriptor(proto, name))) {
                proto = getPrototypeOf(proto);
            }

            return descriptor;
        };
    }

    function defaultShouldIgnorePropertyName(propertyName){
        var first = propertyName[0];
        return first === '_' || first === '$' || (changeDetectionMethod && propertyName === changeDetectionMethod);
    }

    function isNode(obj) {
        return !!(obj && obj.nodeType !== undefined && system.isNumber(obj.nodeType));
    }

    function canConvertType(value) {
        if (!value || isNode(value) || value.ko === ko || value.jquery) {
            return false;
        }

        var type = toString.call(value);

        return nonObservableTypes.indexOf(type) == -1 && !(value === true || value === false);
    }

    function createLookup(obj) {
        var value = {};

        Object.defineProperty(obj, "__observable__", {
            enumerable: false,
            configurable: false,
            writable: false,
            value: value
        });

        return value;
    }

    function makeObservableArray(original, observable, hasChanged) {
        var lookup = original.__observable__, notify = true;

        if(lookup && lookup.__full__){
            return;
        }

        lookup = lookup || createLookup(original);
        lookup.__full__ = true;

        es5Functions.forEach(function (methodName) {
            observable[methodName] = function () {
                return arrayProto[methodName].apply(original, arguments);
            };
        });

        observableArrayMethods.forEach(function(methodName) {
            original[methodName] = function() {
                notify = false;
                var methodCallResult = observableArrayFunctions[methodName].apply(observable, arguments);
                notify = true;
                return methodCallResult;
            };
        });

        arrayMethods.forEach(function(methodName) {
            original[methodName] = function() {
                if(notify){
                    observable.valueWillMutate();
                }

                var methodCallResult = arrayProto[methodName].apply(original, arguments);

                if(notify){
                    observable.valueHasMutated();
                }

                return methodCallResult;
            };
        });

        additiveArrayFunctions.forEach(function(methodName){
            original[methodName] = function() {
                for (var i = 0, len = arguments.length; i < len; i++) {
                    convertObject(arguments[i], hasChanged);
                }

                if(notify){
                    observable.valueWillMutate();
                }

                var methodCallResult = arrayProto[methodName].apply(original, arguments);

                if(notify){
                    observable.valueHasMutated();
                }

                return methodCallResult;
            };
        });

        original['splice'] = function() {
            for (var i = 2, len = arguments.length; i < len; i++) {
                convertObject(arguments[i], hasChanged);
            }

            if(notify){
                observable.valueWillMutate();
            }

            var methodCallResult = arrayProto['splice'].apply(original, arguments);

            if(notify){
                observable.valueHasMutated();
            }

            return methodCallResult;
        };

        for (var i = 0, len = original.length; i < len; i++) {
            convertObject(original[i], hasChanged);
        }
    }

    /**
     * Converts an entire object into an observable object by re-writing its attributes using ES5 getters and setters. Attributes beginning with '_' or '$' are ignored.
     * @method convertObject
     * @param {object} obj The target object to convert.
     */
    function convertObject(obj, hasChanged) {
        var lookup, value;

        if (changeDetectionMethod) {
            if(obj && obj[changeDetectionMethod]) {
                if (hasChanged) {
                    hasChanged = hasChanged.slice(0);
                } else {
                    hasChanged = [];
                }
                hasChanged.push(obj[changeDetectionMethod]);
            }
        }

        if(!canConvertType(obj)){
            return;
        }

        lookup = obj.__observable__;

        if(lookup && lookup.__full__){
            return;
        }

        lookup = lookup || createLookup(obj);
        lookup.__full__ = true;

        if (system.isArray(obj)) {
            var observable = ko.observableArray(obj);
            makeObservableArray(obj, observable, hasChanged);
        } else {
            for (var propertyName in obj) {
                if(shouldIgnorePropertyName(propertyName)){
                    continue;
                }

                if (!lookup[propertyName]) {
                    var descriptor = Object.getPropertyDescriptor(obj, propertyName);
                    if (descriptor && (descriptor.get || descriptor.set)) {
                        defineProperty(obj, propertyName, {
                            get:descriptor.get,
                            set:descriptor.set
                        });
                    } else {
                        value = obj[propertyName];

                        if(!system.isFunction(value)) {
                            convertProperty(obj, propertyName, value, hasChanged);
                        }
                    }
                }
            }
        }

        if(logConversion) {
            system.log('Converted', obj);
        }
    }

    function innerSetter(observable, newValue, isArray) {
        //if this was originally an observableArray, then always check to see if we need to add/replace the array methods (if newValue was an entirely new array)
        if (isArray) {
            if (!newValue) {
                //don't allow null, force to an empty array
                newValue = [];
                makeObservableArray(newValue, observable);
            }
            else if (!newValue.destroyAll) {
                makeObservableArray(newValue, observable);
            }
        } else {
            convertObject(newValue);
        }

        //call the update to the observable after the array as been updated.
        observable(newValue);
    }

    /**
     * Converts a normal property into an observable property using ES5 getters and setters.
     * @method convertProperty
     * @param {object} obj The target object on which the property to convert lives.
     * @param {string} propertyName The name of the property to convert.
     * @param {object} [original] The original value of the property. If not specified, it will be retrieved from the object.
     * @return {KnockoutObservable} The underlying observable.
     */
    function convertProperty(obj, propertyName, original, hasChanged) {
        var observable,
            isArray,
            lookup = obj.__observable__ || createLookup(obj);

        if(original === undefined){
            original = obj[propertyName];
        }

        if (system.isArray(original)) {
            observable = ko.observableArray(original);
            makeObservableArray(original, observable, hasChanged);
            isArray = true;
        } else if (typeof original == "function") {
            if(ko.isObservable(original)){
                observable = original;
            }else{
                return null;
            }
        } else if(!skipPromises && system.isPromise(original)) {
            observable = ko.observable();

            original.then(function (result) {
                if(system.isArray(result)) {
                    var oa = ko.observableArray(result);
                    makeObservableArray(result, oa, hasChanged);
                    result = oa;
                }

                observable(result);
            });
        } else {
            observable = ko.observable(original);
            convertObject(original, hasChanged);
        }

        if (hasChanged && hasChanged.length > 0) {
            hasChanged.forEach(function (func) {
                if (system.isArray(original)) {
                    observable.subscribe(function (arrayChanges) {
                        func(obj, propertyName, null, arrayChanges);
                    }, null, "arrayChange");
                } else {
                    observable.subscribe(function (newValue) {
                        func(obj, propertyName, newValue, null);
                    });
                }
            });
        }

        Object.defineProperty(obj, propertyName, {
            configurable: true,
            enumerable: true,
            get: observable,
            set: ko.isWriteableObservable(observable) ? (function (newValue) {
                if (newValue && system.isPromise(newValue) && !skipPromises) {
                    newValue.then(function (result) {
                        innerSetter(observable, result, system.isArray(result));
                    });
                } else {
                    innerSetter(observable, newValue, isArray);
                }
            }) : undefined
        });

        lookup[propertyName] = observable;
        return observable;
    }

    /**
     * Defines a computed property using ES5 getters and setters.
     * @method defineProperty
     * @param {object} obj The target object on which to create the property.
     * @param {string} propertyName The name of the property to define.
     * @param {function|object} evaluatorOrOptions The Knockout computed function or computed options object.
     * @return {KnockoutObservable} The underlying computed observable.
     */
    function defineProperty(obj, propertyName, evaluatorOrOptions) {
        var computedOptions = { owner: obj, deferEvaluation: true },
            computed;

        if (typeof evaluatorOrOptions === 'function') {
            computedOptions.read = evaluatorOrOptions;
        } else {
            if ('value' in evaluatorOrOptions) {
                system.error('For defineProperty, you must not specify a "value" for the property. You must provide a "get" function.');
            }

            if (typeof evaluatorOrOptions.get !== 'function' && typeof evaluatorOrOptions.read !== 'function') {
                system.error('For defineProperty, the third parameter must be either an evaluator function, or an options object containing a function called "get".');
            }

            computedOptions.read = evaluatorOrOptions.get || evaluatorOrOptions.read;
            computedOptions.write = evaluatorOrOptions.set || evaluatorOrOptions.write;
        }

        computed = ko.computed(computedOptions);
        obj[propertyName] = computed;

        return convertProperty(obj, propertyName, computed);
    }

    observableModule = function(obj, propertyName){
        var lookup, observable, value;

        if (!obj) {
            return null;
        }

        lookup = obj.__observable__;
        if(lookup){
            observable = lookup[propertyName];
            if(observable){
                return observable;
            }
        }

        value = obj[propertyName];

        if(ko.isObservable(value)){
            return value;
        }

        return convertProperty(obj, propertyName, value);
    };

    observableModule.defineProperty = defineProperty;
    observableModule.convertProperty = convertProperty;
    observableModule.convertObject = convertObject;

    /**
     * Installs the plugin into the view model binder's `beforeBind` hook so that objects are automatically converted before being bound.
     * @method install
     */
    observableModule.install = function(options) {
        var original = binder.binding;

        binder.binding = function(obj, view, instruction) {
            if(instruction.applyBindings && !instruction.skipConversion){
                convertObject(obj);
            }

            original(obj, view);
        };

        logConversion = options.logConversion;
        if (options.changeDetection) {
            changeDetectionMethod = options.changeDetection;
        }

        skipPromises = options.skipPromises;
        shouldIgnorePropertyName = options.shouldIgnorePropertyName || defaultShouldIgnorePropertyName;
    };

    return observableModule;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Connects the history module's url and history tracking support to Durandal's activation and composition engine allowing you to easily build navigation-style applications.
 * @module router
 * @requires system
 * @requires app
 * @requires activator
 * @requires events
 * @requires composition
 * @requires history
 * @requires knockout
 * @requires jquery
 */
define("plugins/router", ['durandal/system', 'durandal/app', 'durandal/activator', 'durandal/events', 'durandal/composition', 'plugins/history', 'knockout', 'jquery'], function(system, app, activator, events, composition, history, ko, $) {
    var optionalParam = /\((.*?)\)/g;
    var namedParam = /(\(\?)?:\w+/g;
    var splatParam = /\*\w+/g;
    var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    var startDeferred, rootRouter;
    var trailingSlash = /\/$/;
    var routesAreCaseSensitive = false;
    var lastUrl = '/', lastTryUrl = '/';

    function routeStringToRegExp(routeString) {
        routeString = routeString.replace(escapeRegExp, '\\$&')
            .replace(optionalParam, '(?:$1)?')
            .replace(namedParam, function(match, optional) {
                return optional ? match : '([^\/]+)';
            })
            .replace(splatParam, '(.*?)');

        return new RegExp('^' + routeString + '$', routesAreCaseSensitive ? undefined : 'i');
    }

    function stripParametersFromRoute(route) {
        var colonIndex = route.indexOf(':');
        var length = colonIndex > 0 ? colonIndex - 1 : route.length;
        return route.substring(0, length);
    }

    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }

    function compareArrays(first, second) {
        if (!first || !second){
            return false;
        }

        if (first.length != second.length) {
            return false;
        }

        for (var i = 0, len = first.length; i < len; i++) {
            if (first[i] != second[i]) {
                return false;
            }
        }

        return true;
    }

    function reconstructUrl(instruction){
        if(!instruction.queryString){
            return instruction.fragment;
        }

        return instruction.fragment + '?' + instruction.queryString;
    }

    /**
     * @class Router
     * @uses Events
     */

    /**
     * Triggered when the navigation logic has completed.
     * @event router:navigation:complete
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the navigation has been cancelled.
     * @event router:navigation:cancelled
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when navigation begins.
     * @event router:navigation:processing
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered right before a route is activated.
     * @event router:route:activating
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered right before a route is configured.
     * @event router:route:before-config
     * @param {object} config The route config.
     * @param {Router} router The router.
     */

    /**
     * Triggered just after a route is configured.
     * @event router:route:after-config
     * @param {object} config The route config.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the view for the activated instance is attached.
     * @event router:navigation:attached
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the composition that the activated instance participates in is complete.
     * @event router:navigation:composition-complete
     * @param {object} instance The activated instance.
     * @param {object} instruction The routing instruction.
     * @param {Router} router The router.
     */

    /**
     * Triggered when the router does not find a matching route.
     * @event router:route:not-found
     * @param {string} fragment The url fragment.
     * @param {Router} router The router.
     */

    var createRouter = function() {
        var queue = [],
            isProcessing = ko.observable(false),
            currentActivation,
            currentInstruction,
            activeItem = activator.create();

        var router = {
            /**
             * The route handlers that are registered. Each handler consists of a `routePattern` and a `callback`.
             * @property {object[]} handlers
             */
            handlers: [],
            /**
             * The route configs that are registered.
             * @property {object[]} routes
             */
            routes: [],
            /**
             * The route configurations that have been designated as displayable in a nav ui (nav:true).
             * @property {KnockoutObservableArray} navigationModel
             */
            navigationModel: ko.observableArray([]),
            /**
             * The active item/screen based on the current navigation state.
             * @property {Activator} activeItem
             */
            activeItem: activeItem,
            /**
             * Indicates that the router (or a child router) is currently in the process of navigating.
             * @property {KnockoutComputed} isNavigating
             */
            isNavigating: ko.computed(function() {
                var current = activeItem();
                var processing = isProcessing();
                var currentRouterIsProcesing = current
                    && current.router
                    && current.router != router
                    && current.router.isNavigating() ? true : false;
                return  processing || currentRouterIsProcesing;
            }),
            /**
             * An observable surfacing the active routing instruction that is currently being processed or has recently finished processing.
             * The instruction object has `config`, `fragment`, `queryString`, `params` and `queryParams` properties.
             * @property {KnockoutObservable} activeInstruction
             */
            activeInstruction:ko.observable(null),
            __router__:true
        };

        events.includeIn(router);

        activeItem.settings.areSameItem = function (currentItem, newItem, currentActivationData, newActivationData) {
            if (currentItem == newItem) {
                return compareArrays(currentActivationData, newActivationData);
            }

            return false;
        };

        activeItem.settings.findChildActivator = function(item) {
            if (item && item.router && item.router.parent == router) {
                return item.router.activeItem;
            }

            return null;
        };

        function hasChildRouter(instance, parentRouter) {
            return instance.router && instance.router.parent == parentRouter;
        }

        function setCurrentInstructionRouteIsActive(flag) {
            if (currentInstruction && currentInstruction.config.isActive) {
                currentInstruction.config.isActive(flag);
            }
        }

        function completeNavigation(instance, instruction, mode) {
            system.log('Navigation Complete', instance, instruction);

            var fromModuleId = system.getModuleId(currentActivation);
            if (fromModuleId) {
                router.trigger('router:navigation:from:' + fromModuleId);
            }

            currentActivation = instance;

            setCurrentInstructionRouteIsActive(false);
            currentInstruction = instruction;
            setCurrentInstructionRouteIsActive(true);

            var toModuleId = system.getModuleId(currentActivation);
            if (toModuleId) {
                router.trigger('router:navigation:to:' + toModuleId);
            }

            if (!hasChildRouter(instance, router)) {
                router.updateDocumentTitle(instance, instruction);
            }

            switch (mode) {
                case 'rootRouter':
                    lastUrl = reconstructUrl(currentInstruction);
                    break;
                case 'rootRouterWithChild':
                    lastTryUrl = reconstructUrl(currentInstruction);
                    break;
                case 'lastChildRouter':
                    lastUrl = lastTryUrl;
                    break;
            }

            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;

            router.trigger('router:navigation:complete', instance, instruction, router);
        }

        function cancelNavigation(instance, instruction) {
            system.log('Navigation Cancelled');

            router.activeInstruction(currentInstruction);

            router.navigate(lastUrl, false);

            isProcessing(false);
            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;
            router.trigger('router:navigation:cancelled', instance, instruction, router);
        }

        function redirect(url) {
            system.log('Navigation Redirecting');

            isProcessing(false);
            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;
            router.navigate(url, { trigger: true, replace: true });
        }

        function activateRoute(activator, instance, instruction) {
            rootRouter.navigatingBack = !rootRouter.explicitNavigation && currentActivation != instruction.fragment;
            router.trigger('router:route:activating', instance, instruction, router);

            var options = {
                canDeactivate: !router.parent
            };

            activator.activateItem(instance, instruction.params, options).then(function(succeeded) {
                if (succeeded) {
                    var previousActivation = currentActivation;
                    var withChild = hasChildRouter(instance, router);
                    var mode = '';

                    if (router.parent) {
                        if(!withChild) {
                            mode = 'lastChildRouter';
                        }
                    } else {
                        if (withChild) {
                            mode = 'rootRouterWithChild';
                        } else {
                            mode = 'rootRouter';
                        }
                    }

                    completeNavigation(instance, instruction, mode);

                    if (withChild) {
                        instance.router.trigger('router:route:before-child-routes', instance, instruction, router);

                        var fullFragment = instruction.fragment;
                        if (instruction.queryString) {
                            fullFragment += "?" + instruction.queryString;
                        }

                        instance.router.loadUrl(fullFragment);
                    }

                    if (previousActivation == instance) {
                        router.attached();
                        router.compositionComplete();
                    }
                } else if(activator.settings.lifecycleData && activator.settings.lifecycleData.redirect){
                    redirect(activator.settings.lifecycleData.redirect);
                }else{
                    cancelNavigation(instance, instruction);
                }

                if (startDeferred) {
                    startDeferred.resolve();
                    startDeferred = null;
                }
            }).fail(function(err){
                system.error(err);
            });
        }

        /**
         * Inspects routes and modules before activation. Can be used to protect access by cancelling navigation or redirecting.
         * @method guardRoute
         * @param {object} instance The module instance that is about to be activated by the router.
         * @param {object} instruction The route instruction. The instruction object has config, fragment, queryString, params and queryParams properties.
         * @return {Promise|Boolean|String} If a boolean, determines whether or not the route should activate or be cancelled. If a string, causes a redirect to the specified route. Can also be a promise for either of these value types.
         */
        function handleGuardedRoute(activator, instance, instruction) {
            var resultOrPromise = router.guardRoute(instance, instruction);
            if (resultOrPromise || resultOrPromise === '') {
                if (resultOrPromise.then) {
                    resultOrPromise.then(function(result) {
                        if (result) {
                            if (system.isString(result)) {
                                redirect(result);
                            } else {
                                activateRoute(activator, instance, instruction);
                            }
                        } else {
                            cancelNavigation(instance, instruction);
                        }
                    });
                } else {
                    if (system.isString(resultOrPromise)) {
                        redirect(resultOrPromise);
                    } else {
                        activateRoute(activator, instance, instruction);
                    }
                }
            } else {
                cancelNavigation(instance, instruction);
            }
        }

        function ensureActivation(activator, instance, instruction) {
            if (router.guardRoute) {
                handleGuardedRoute(activator, instance, instruction);
            } else {
                activateRoute(activator, instance, instruction);
            }
        }

        function canReuseCurrentActivation(instruction) {
            return currentInstruction
                && currentInstruction.config.moduleId == instruction.config.moduleId
                && currentActivation
                && ((currentActivation.canReuseForRoute && currentActivation.canReuseForRoute.apply(currentActivation, instruction.params))
                || (!currentActivation.canReuseForRoute && currentActivation.router && currentActivation.router.loadUrl));
        }

        function dequeueInstruction() {
            if (isProcessing()) {
                return;
            }

            var instruction = queue.shift();
            queue = [];

            if (!instruction) {
                return;
            }

            isProcessing(true);
            router.activeInstruction(instruction);
            router.trigger('router:navigation:processing', instruction, router);

            if (canReuseCurrentActivation(instruction)) {
                var tempActivator = activator.create();
                tempActivator.forceActiveItem(currentActivation); //enforce lifecycle without re-compose
                tempActivator.settings.areSameItem = activeItem.settings.areSameItem;
                tempActivator.settings.findChildActivator = activeItem.settings.findChildActivator;
                ensureActivation(tempActivator, currentActivation, instruction);
            } else if(!instruction.config.moduleId) {
                ensureActivation(activeItem, {
                    viewUrl:instruction.config.viewUrl,
                    canReuseForRoute:function() {
                        return true;
                    }
                }, instruction);
            } else {
                system.acquire(instruction.config.moduleId).then(function(m) {
                    var instance = system.resolveObject(m);

                    if(instruction.config.viewUrl) {
                        instance.viewUrl = instruction.config.viewUrl;
                    }

                    ensureActivation(activeItem, instance, instruction);
                }).fail(function(err) {
                    cancelNavigation(null, instruction);
                    system.error('Failed to load routed module (' + instruction.config.moduleId + '). Details: ' + err.message, err);
                });
            }
        }

        function queueInstruction(instruction) {
            queue.unshift(instruction);
            dequeueInstruction();
        }

        // Given a route, and a URL fragment that it matches, return the array of
        // extracted decoded parameters. Empty or unmatched parameters will be
        // treated as `null` to normalize cross-browser behavior.
        function createParams(routePattern, fragment, queryString) {
            var params = routePattern.exec(fragment).slice(1);

            for (var i = 0; i < params.length; i++) {
                var current = params[i];
                params[i] = current ? decodeURIComponent(current) : null;
            }

            var queryParams = router.parseQueryString(queryString);
            if (queryParams) {
                params.push(queryParams);
            }

            return {
                params:params,
                queryParams:queryParams
            };
        }

        function configureRoute(config){
            router.trigger('router:route:before-config', config, router);

            if (!system.isRegExp(config.route)) {
                config.title = config.title || router.convertRouteToTitle(config.route);

                if (!config.viewUrl) {
                    config.moduleId = config.moduleId || router.convertRouteToModuleId(config.route);
                }
                
                config.hash = config.hash || router.convertRouteToHash(config.route);

                if (config.hasChildRoutes) {
                    config.route = config.route + '*childRoutes';
                }

                config.routePattern = routeStringToRegExp(config.route);
            }else{
                config.routePattern = config.route;
            }

            config.isActive = config.isActive || ko.observable(false);
            router.trigger('router:route:after-config', config, router);
            router.routes.push(config);

            router.route(config.routePattern, function(fragment, queryString) {
                var paramInfo = createParams(config.routePattern, fragment, queryString);
                queueInstruction({
                    fragment: fragment,
                    queryString:queryString,
                    config: config,
                    params: paramInfo.params,
                    queryParams:paramInfo.queryParams
                });
            });
        };

        function mapRoute(config) {
            if(system.isArray(config.route)){
                var isActive = config.isActive || ko.observable(false);

                for(var i = 0, length = config.route.length; i < length; i++){
                    var current = system.extend({}, config);

                    current.route = config.route[i];
                    current.isActive = isActive;

                    if(i > 0){
                        delete current.nav;
                    }

                    configureRoute(current);
                }
            }else{
                configureRoute(config);
            }

            return router;
        }

        /**
         * Parses a query string into an object.
         * @method parseQueryString
         * @param {string} queryString The query string to parse.
         * @return {object} An object keyed according to the query string parameters.
         */
        router.parseQueryString = function (queryString) {
            var queryObject, pairs;

            if (!queryString) {
                return null;
            }

            pairs = queryString.split('&');

            if (pairs.length == 0) {
                return null;
            }

            queryObject = {};

            for (var i = 0; i < pairs.length; i++) {
                var pair = pairs[i];
                if (pair === '') {
                    continue;
                }

                var parts = pair.split(/=(.+)?/),
                    key = parts[0],
                    value = parts[1] && decodeURIComponent(parts[1].replace(/\+/g, ' '));

                var existing = queryObject[key];

                if (existing) {
                    if (system.isArray(existing)) {
                        existing.push(value);
                    } else {
                        queryObject[key] = [existing, value];
                    }
                }
                else {
                    queryObject[key] = value;
                }
            }

            return queryObject;
        };

        /**
         * Add a route to be tested when the url fragment changes.
         * @method route
         * @param {RegEx} routePattern The route pattern to test against.
         * @param {function} callback The callback to execute when the route pattern is matched.
         */
        router.route = function(routePattern, callback) {
            router.handlers.push({ routePattern: routePattern, callback: callback });
        };

        /**
         * Attempt to load the specified URL fragment. If a route succeeds with a match, returns `true`. If no defined routes matches the fragment, returns `false`.
         * @method loadUrl
         * @param {string} fragment The URL fragment to find a match for.
         * @return {boolean} True if a match was found, false otherwise.
         */
        router.loadUrl = function(fragment) {
            var handlers = router.handlers,
                queryString = null,
                coreFragment = fragment,
                queryIndex = fragment.indexOf('?');

            if (queryIndex != -1) {
                coreFragment = fragment.substring(0, queryIndex);
                queryString = fragment.substr(queryIndex + 1);
            }

            if(router.relativeToParentRouter){
                var instruction = this.parent.activeInstruction();
				coreFragment = queryIndex == -1 ? instruction.params.join('/') : instruction.params.slice(0, -1).join('/');

                if(coreFragment && coreFragment.charAt(0) == '/'){
                    coreFragment = coreFragment.substr(1);
                }

                if(!coreFragment){
                    coreFragment = '';
                }

                coreFragment = coreFragment.replace('//', '/').replace('//', '/');
            }

            coreFragment = coreFragment.replace(trailingSlash, '');

            for (var i = 0; i < handlers.length; i++) {
                var current = handlers[i];
                if (current.routePattern.test(coreFragment)) {
                    current.callback(coreFragment, queryString);
                    return true;
                }
            }

            system.log('Route Not Found', fragment, currentInstruction);
            router.trigger('router:route:not-found', fragment, router);

            if (router.parent) {
                lastUrl = lastTryUrl;
            }

            history.navigate(lastUrl, { trigger:false, replace:true });

            rootRouter.explicitNavigation = false;
            rootRouter.navigatingBack = false;

            return false;
        };

        var titleSubscription;
        function setTitle(value) {
            var appTitle = ko.unwrap(app.title);

            if (appTitle) {
                document.title = value + " | " + appTitle;
            } else {
                document.title = value;
            }
        }  
        
        // Allow observable to be used for app.title
        if(ko.isObservable(app.title)) {
            app.title.subscribe(function () {
                var instruction = router.activeInstruction();
                var title = instruction != null ? ko.unwrap(instruction.config.title) : '';
                setTitle(title);
            });
        }
        
        /**
         * Updates the document title based on the activated module instance, the routing instruction and the app.title.
         * @method updateDocumentTitle
         * @param {object} instance The activated module.
         * @param {object} instruction The routing instruction associated with the action. It has a `config` property that references the original route mapping config.
         */
        router.updateDocumentTitle = function (instance, instruction) {
            var appTitle = ko.unwrap(app.title),
                title = instruction.config.title;
                
            if (titleSubscription) {
                titleSubscription.dispose();
            }

            if (title) {
                if (ko.isObservable(title)) {
                    titleSubscription = title.subscribe(setTitle);
                    setTitle(title());
                } else {
                    setTitle(title);
                }
            } else if (appTitle) {
                document.title = appTitle;
            }
        };

        /**
         * Save a fragment into the hash history, or replace the URL state if the
         * 'replace' option is passed. You are responsible for properly URL-encoding
         * the fragment in advance.
         * The options object can contain `trigger: false` if you wish to not have the
         * route callback be fired, or `replace: true`, if
         * you wish to modify the current URL without adding an entry to the history.
         * @method navigate
         * @param {string} fragment The url fragment to navigate to.
         * @param {object|boolean} options An options object with optional trigger and replace flags. You can also pass a boolean directly to set the trigger option. Trigger is `true` by default.
         * @return {boolean} Returns true/false from loading the url.
         */
        router.navigate = function(fragment, options) {
            if(fragment && fragment.indexOf('://') != -1) {
                window.location.href = fragment;
                return true;
            }

            if(options === undefined || (system.isBoolean(options) && options) || (system.isObject(options) && options.trigger)) {
                rootRouter.explicitNavigation = true;
            }

            if ((system.isBoolean(options) && !options) || (options && options.trigger != undefined && !options.trigger)) {
                lastUrl = fragment;
            }

            return history.navigate(fragment, options);
        };

        /**
         * Navigates back in the browser history.
         * @method navigateBack
         */
        router.navigateBack = function() {
            history.navigateBack();
        };

        router.attached = function() {
            router.trigger('router:navigation:attached', currentActivation, currentInstruction, router);
        };

        router.compositionComplete = function(){
            isProcessing(false);
            router.trigger('router:navigation:composition-complete', currentActivation, currentInstruction, router);
            dequeueInstruction();
        };

        /**
         * Converts a route to a hash suitable for binding to a link's href.
         * @method convertRouteToHash
         * @param {string} route
         * @return {string} The hash.
         */
        router.convertRouteToHash = function(route) {
            route = route.replace(/\*.*$/, '');

            if(router.relativeToParentRouter){
                var instruction = router.parent.activeInstruction(),
                    hash = route ? instruction.config.hash + '/' + route : instruction.config.hash;

                if(history._hasPushState){
                    hash = '/' + hash;
                }

                hash = hash.replace('//', '/').replace('//', '/');
                return hash;
            }

            if(history._hasPushState){
                return route;
            }

            return "#" + route;
        };

        /**
         * Converts a route to a module id. This is only called if no module id is supplied as part of the route mapping.
         * @method convertRouteToModuleId
         * @param {string} route
         * @return {string} The module id.
         */
        router.convertRouteToModuleId = function(route) {
            return stripParametersFromRoute(route);
        };

        /**
         * Converts a route to a displayable title. This is only called if no title is specified as part of the route mapping.
         * @method convertRouteToTitle
         * @param {string} route
         * @return {string} The title.
         */
        router.convertRouteToTitle = function(route) {
            var value = stripParametersFromRoute(route);
            return value.substring(0, 1).toUpperCase() + value.substring(1);
        };

        /**
         * Maps route patterns to modules.
         * @method map
         * @param {string|object|object[]} route A route, config or array of configs.
         * @param {object} [config] The config for the specified route.
         * @chainable
         * @example
         router.map([
         { route: '', title:'Home', moduleId: 'homeScreen', nav: true },
         { route: 'customer/:id', moduleId: 'customerDetails'}
         ]);
         */
        router.map = function(route, config) {
            if (system.isArray(route)) {
                for (var i = 0; i < route.length; i++) {
                    router.map(route[i]);
                }

                return router;
            }

            if (system.isString(route) || system.isRegExp(route)) {
                if (!config) {
                    config = {};
                } else if (system.isString(config)) {
                    config = { moduleId: config };
                }

                config.route = route;
            } else {
                config = route;
            }

            return mapRoute(config);
        };

        /**
         * Builds an observable array designed to bind a navigation UI to. The model will exist in the `navigationModel` property.
         * @method buildNavigationModel
         * @param {number} defaultOrder The default order to use for navigation visible routes that don't specify an order. The default is 100 and each successive route will be one more than that.
         * @chainable
         */
        router.buildNavigationModel = function(defaultOrder) {
            var nav = [], routes = router.routes;
            var fallbackOrder = defaultOrder || 100;

            for (var i = 0; i < routes.length; i++) {
                var current = routes[i];

                if (current.nav) {
                    if (!system.isNumber(current.nav)) {
                        current.nav = ++fallbackOrder;
                    }

                    nav.push(current);
                }
            }

            nav.sort(function(a, b) { return a.nav - b.nav; });
            router.navigationModel(nav);

            return router;
        };

        /**
         * Configures how the router will handle unknown routes.
         * @method mapUnknownRoutes
         * @param {string|function} [config] If not supplied, then the router will map routes to modules with the same name.
         * If a string is supplied, it represents the module id to route all unknown routes to.
         * Finally, if config is a function, it will be called back with the route instruction containing the route info. The function can then modify the instruction by adding a moduleId and the router will take over from there.
         * @param {string} [replaceRoute] If config is a module id, then you can optionally provide a route to replace the url with.
         * @chainable
         */
        router.mapUnknownRoutes = function(config, replaceRoute) {
            var catchAllRoute = "*catchall";
            var catchAllPattern = routeStringToRegExp(catchAllRoute);

            router.route(catchAllPattern, function (fragment, queryString) {
                var paramInfo = createParams(catchAllPattern, fragment, queryString);
                var instruction = {
                    fragment: fragment,
                    queryString: queryString,
                    config: {
                        route: catchAllRoute,
                        routePattern: catchAllPattern
                    },
                    params: paramInfo.params,
                    queryParams: paramInfo.queryParams
                };

                if (!config) {
                    instruction.config.moduleId = fragment;
                } else if (system.isString(config)) {
                    instruction.config.moduleId = config;
                    if(replaceRoute){
                        history.navigate(replaceRoute, { trigger:false, replace:true });
                    }
                } else if (system.isFunction(config)) {
                    var result = config(instruction);
                    if (result && result.then) {
                        result.then(function() {
                            router.trigger('router:route:before-config', instruction.config, router);
                            router.trigger('router:route:after-config', instruction.config, router);
                            queueInstruction(instruction);
                        });
                        return;
                    }
                } else {
                    instruction.config = config;
                    instruction.config.route = catchAllRoute;
                    instruction.config.routePattern = catchAllPattern;
                }

                router.trigger('router:route:before-config', instruction.config, router);
                router.trigger('router:route:after-config', instruction.config, router);
                queueInstruction(instruction);
            });

            return router;
        };

        /**
         * Resets the router by removing handlers, routes, event handlers and previously configured options.
         * @method reset
         * @chainable
         */
        router.reset = function() {
            currentInstruction = currentActivation = undefined;
            router.handlers = [];
            router.routes = [];
            router.off();
            delete router.options;
            return router;
        };

        /**
         * Makes all configured routes and/or module ids relative to a certain base url.
         * @method makeRelative
         * @param {string|object} settings If string, the value is used as the base for routes and module ids. If an object, you can specify `route` and `moduleId` separately. In place of specifying route, you can set `fromParent:true` to make routes automatically relative to the parent router's active route.
         * @chainable
         */
        router.makeRelative = function(settings){
            if(system.isString(settings)){
                settings = {
                    moduleId:settings,
                    route:settings
                };
            }

            if(settings.moduleId && !endsWith(settings.moduleId, '/')){
                settings.moduleId += '/';
            }

            if(settings.route && !endsWith(settings.route, '/')){
                settings.route += '/';
            }

            if(settings.fromParent){
                router.relativeToParentRouter = true;
            }

            router.on('router:route:before-config').then(function(config){
                if(settings.moduleId){
                    config.moduleId = settings.moduleId + config.moduleId;
                }

                if(settings.route){
                    if(config.route === ''){
                        config.route = settings.route.substring(0, settings.route.length - 1);
                    }else{
                        config.route = settings.route + config.route;
                    }
                }
            });

            if (settings.dynamicHash) {
                router.on('router:route:after-config').then(function (config) {
                    config.routePattern = routeStringToRegExp(config.route ? settings.dynamicHash + '/' + config.route : settings.dynamicHash);
                    config.dynamicHash = config.dynamicHash || ko.observable(config.hash);
                });

                router.on('router:route:before-child-routes').then(function(instance, instruction, parentRouter) {
                    var childRouter = instance.router;

                    for(var i = 0; i < childRouter.routes.length; i++) {
                        var route = childRouter.routes[i];
                        var params = instruction.params.slice(0);

                        route.hash = childRouter.convertRouteToHash(route.route)
                            .replace(namedParam, function(match) {
                                return params.length > 0 ? params.shift() : match;
                            });

                        route.dynamicHash(route.hash);
                    }
                });
            }

            return router;
        };

        /**
         * Creates a child router.
         * @method createChildRouter
         * @return {Router} The child router.
         */
        router.createChildRouter = function() {
            var childRouter = createRouter();
            childRouter.parent = router;
            return childRouter;
        };

        return router;
    };

    /**
     * @class RouterModule
     * @extends Router
     * @static
     */
    rootRouter = createRouter();
    rootRouter.explicitNavigation = false;
    rootRouter.navigatingBack = false;

    /**
     * Makes the RegExp generated for routes case sensitive, rather than the default of case insensitive.
     * @method makeRoutesCaseSensitive
     */
    rootRouter.makeRoutesCaseSensitive = function(){
        routesAreCaseSensitive = true;
    };

    /**
     * Verify that the target is the current window
     * @method targetIsThisWindow
     * @return {boolean} True if the event's target is the current window, false otherwise.
     */
    rootRouter.targetIsThisWindow = function(event) {
        var targetWindow = $(event.target).attr('target');

        if (!targetWindow ||
            targetWindow === window.name ||
            targetWindow === '_self' ||
            (targetWindow === 'top' && window === window.top)) { return true; }

        return false;
    };

    /**
     * Activates the router and the underlying history tracking mechanism.
     * @method activate
     * @return {Promise} A promise that resolves when the router is ready.
     */
    rootRouter.activate = function(options) {
        return system.defer(function(dfd) {
            startDeferred = dfd;
            rootRouter.options = system.extend({ routeHandler: rootRouter.loadUrl }, rootRouter.options, options);

            history.activate(rootRouter.options);

            if(history._hasPushState){
                var routes = rootRouter.routes,
                    i = routes.length;

                while(i--){
                    var current = routes[i];
                    current.hash = current.hash.replace('#', '/');
                }
            }

            var rootStripper = rootRouter.options.root && new RegExp("^" + rootRouter.options.root + "/");

            $(document).delegate("a", 'click', function(evt){
                if(history._hasPushState){
                    if(!evt.altKey && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && rootRouter.targetIsThisWindow(evt)){
                        var href = $(this).attr("href");

                        // Ensure the protocol is not part of URL, meaning its relative.
                        // Stop the event bubbling to ensure the link will not cause a page refresh.
                        if (href != null && !(href.charAt(0) === "#" || /^[a-z]+:/i.test(href))) {
                            rootRouter.explicitNavigation = true;
                            evt.preventDefault();

                            if (rootStripper) {
                                href = href.replace(rootStripper, "");
                            }

                            history.navigate(href);
                        }
                    }
                }else{
                    rootRouter.explicitNavigation = true;
                }
            });

            if(history.options.silent && startDeferred){
                startDeferred.resolve();
                startDeferred = null;
            }
        }).promise();
    };

    /**
     * Disable history, perhaps temporarily. Not useful in a real app, but possibly useful for unit testing Routers.
     * @method deactivate
     */
    rootRouter.deactivate = function() {
        history.deactivate();
    };

    /**
     * Installs the router's custom ko binding handler.
     * @method install
     */
    rootRouter.install = function(){
        ko.bindingHandlers.router = {
            init: function() {
                return { controlsDescendantBindings: true };
            },
            update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var settings = ko.utils.unwrapObservable(valueAccessor()) || {};

                if (settings.__router__) {
                    settings = {
                        model:settings.activeItem(),
                        attached:settings.attached,
                        compositionComplete:settings.compositionComplete,
                        activate: false
                    };
                } else {
                    var theRouter = ko.utils.unwrapObservable(settings.router || viewModel.router) || rootRouter;
                    settings.model = theRouter.activeItem();
                    settings.attached = theRouter.attached;
                    settings.compositionComplete = theRouter.compositionComplete;
                    settings.activate = false;
                }

                composition.compose(element, settings, bindingContext);
            }
        };

        ko.virtualElements.allowedBindings.router = true;
    };

    return rootRouter;
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Serializes and deserializes data to/from JSON.
 * @module serializer
 * @requires system
 */
define("plugins/serializer", ['durandal/system'], function(system) {
    /**
     * @class SerializerModule
     * @static
     */
    return {
        /**
         * The name of the attribute that the serializer should use to identify an object's type.
         * @property {string} typeAttribute
         * @default type
         */
        typeAttribute: 'type',
        /**
         * The amount of space to use for indentation when writing out JSON.
         * @property {string|number} space
         * @default undefined
         */
        space:undefined,
        /**
         * The default replacer function used during serialization. By default properties starting with '_' or '$' are removed from the serialized object.
         * @method replacer
         * @param {string} key The object key to check.
         * @param {object} value The object value to check.
         * @return {object} The value to serialize.
         */
        replacer: function(key, value) {
            if(key){
                var first = key[0];
                if(first === '_' || first === '$'){
                    return undefined;
                }
            }

            return value;
        },
        /**
         * Serializes the object.
         * @method serialize
         * @param {object} object The object to serialize.
         * @param {object} [settings] Settings can specify a replacer or space to override the serializer defaults.
         * @return {string} The JSON string.
         */
        serialize: function(object, settings) {
            settings = (settings === undefined) ? {} : settings;

            if(system.isString(settings) || system.isNumber(settings)) {
                settings = { space: settings };
            }

            return JSON.stringify(object, settings.replacer || this.replacer, settings.space || this.space);
        },
        /**
         * Gets the type id for an object instance, using the configured `typeAttribute`.
         * @method getTypeId
         * @param {object} object The object to serialize.
         * @return {string} The type.
         */
        getTypeId: function(object) {
            if (object) {
                return object[this.typeAttribute];
            }

            return undefined;
        },
        /**
         * Maps type ids to object constructor functions. Keys are type ids and values are functions.
         * @property {object} typeMap.
         */
        typeMap: {},
        /**
         * Adds a type id/constructor function mampping to the `typeMap`.
         * @method registerType
         * @param {string} typeId The type id.
         * @param {function} constructor The constructor.
         */
        registerType: function() {
            var first = arguments[0];

            if (arguments.length == 1) {
                var id = first[this.typeAttribute] || system.getModuleId(first);
                this.typeMap[id] = first;
            } else {
                this.typeMap[first] = arguments[1];
            }
        },
        /**
         * The default reviver function used during deserialization. By default is detects type properties on objects and uses them to re-construct the correct object using the provided constructor mapping.
         * @method reviver
         * @param {string} key The attribute key.
         * @param {object} value The object value associated with the key.
         * @param {function} getTypeId A custom function used to get the type id from a value.
         * @param {object} getConstructor A custom function used to get the constructor function associated with a type id.
         * @return {object} The value.
         */
        reviver: function(key, value, getTypeId, getConstructor) {
            var typeId = getTypeId(value);
            if (typeId) {
                var ctor = getConstructor(typeId);
                if (ctor) {
                    if (ctor.fromJSON) {
                        return ctor.fromJSON(value);
                    }

                    return new ctor(value);
                }
            }

            return value;
        },
        /**
         * Deserialize the JSON.
         * @method deserialize
         * @param {string} text The JSON string.
         * @param {object} [settings] Settings can specify a reviver, getTypeId function or getConstructor function.
         * @return {object} The deserialized object.
         */
        deserialize: function(text, settings) {
            var that = this;
            settings = settings || {};

            var getTypeId = settings.getTypeId || function(object) { return that.getTypeId(object); };
            var getConstructor = settings.getConstructor || function(id) { return that.typeMap[id]; };
            var reviver = settings.reviver || function(key, value) { return that.reviver(key, value, getTypeId, getConstructor); };

            return JSON.parse(text, reviver);
        },
        /**
         * Clone the object.
         * @method clone
         * @param {object} obj The object to clone.
         * @param {object} [settings] Settings can specify any of the options allowed by the serialize or deserialize methods.
         * @return {object} The new clone.
         */
        clone:function(obj, settings) {
            return this.deserialize(this.serialize(obj, settings), settings);
        }
    };
});
/**
 * Durandal 2.1.0 Copyright (c) 2012 Blue Spire Consulting, Inc. All Rights Reserved.
 * Available via the MIT license.
 * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.
 */
/**
 * Layers the widget sugar on top of the composition system.
 * @module widget
 * @requires system
 * @requires composition
 * @requires jquery
 * @requires knockout
 */
define("plugins/widget", ['durandal/system', 'durandal/composition', 'jquery', 'knockout'], function(system, composition, $, ko) {
    var kindModuleMaps = {},
        kindViewMaps = {},
        bindableSettings = ['model', 'view', 'kind'],
        widgetDataKey = 'durandal-widget-data';

    function extractParts(element, settings){
        var data = ko.utils.domData.get(element, widgetDataKey);

        if(!data){
            data = {
                parts:composition.cloneNodes(ko.virtualElements.childNodes(element))
            };

            ko.virtualElements.emptyNode(element);
            ko.utils.domData.set(element, widgetDataKey, data);
        }

        settings.parts = data.parts;
    }

    /**
     * @class WidgetModule
     * @static
     */
    var widget = {
        getSettings: function(valueAccessor) {
            var settings = ko.utils.unwrapObservable(valueAccessor()) || {};

            if (system.isString(settings)) {
                return { kind: settings };
            }

            for (var attrName in settings) {
                if (ko.utils.arrayIndexOf(bindableSettings, attrName) != -1) {
                    settings[attrName] = ko.utils.unwrapObservable(settings[attrName]);
                } else {
                    settings[attrName] = settings[attrName];
                }
            }

            return settings;
        },
        /**
         * Creates a ko binding handler for the specified kind.
         * @method registerKind
         * @param {string} kind The kind to create a custom binding handler for.
         */
        registerKind: function(kind) {
            ko.bindingHandlers[kind] = {
                init: function() {
                    return { controlsDescendantBindings: true };
                },
                update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var settings = widget.getSettings(valueAccessor);
                    settings.kind = kind;
                    extractParts(element, settings);
                    widget.create(element, settings, bindingContext, true);
                }
            };

            ko.virtualElements.allowedBindings[kind] = true;
            composition.composeBindings.push(kind + ':');
        },
        /**
         * Maps views and module to the kind identifier if a non-standard pattern is desired.
         * @method mapKind
         * @param {string} kind The kind name.
         * @param {string} [viewId] The unconventional view id to map the kind to.
         * @param {string} [moduleId] The unconventional module id to map the kind to.
         */
        mapKind: function(kind, viewId, moduleId) {
            if (viewId) {
                kindViewMaps[kind] = viewId;
            }

            if (moduleId) {
                kindModuleMaps[kind] = moduleId;
            }
        },
        /**
         * Maps a kind name to it's module id. First it looks up a custom mapped kind, then falls back to `convertKindToModulePath`.
         * @method mapKindToModuleId
         * @param {string} kind The kind name.
         * @return {string} The module id.
         */
        mapKindToModuleId: function(kind) {
            return kindModuleMaps[kind] || widget.convertKindToModulePath(kind);
        },
        /**
         * Converts a kind name to it's module path. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.
         * @method convertKindToModulePath
         * @param {string} kind The kind name.
         * @return {string} The module path.
         */
        convertKindToModulePath: function(kind) {
            return 'widgets/' + kind + '/viewmodel';
        },
        /**
         * Maps a kind name to it's view id. First it looks up a custom mapped kind, then falls back to `convertKindToViewPath`.
         * @method mapKindToViewId
         * @param {string} kind The kind name.
         * @return {string} The view id.
         */
        mapKindToViewId: function(kind) {
            return kindViewMaps[kind] || widget.convertKindToViewPath(kind);
        },
        /**
         * Converts a kind name to it's view id. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.
         * @method convertKindToViewPath
         * @param {string} kind The kind name.
         * @return {string} The view id.
         */
        convertKindToViewPath: function(kind) {
            return 'widgets/' + kind + '/view';
        },
        createCompositionSettings: function(element, settings) {
            if (!settings.model) {
                settings.model = this.mapKindToModuleId(settings.kind);
            }

            if (!settings.view) {
                settings.view = this.mapKindToViewId(settings.kind);
            }

            settings.preserveContext = true;
            settings.activate = true;
            settings.activationData = settings;
            settings.mode = 'templated';

            return settings;
        },
        /**
         * Creates a widget.
         * @method create
         * @param {DOMElement} element The DOMElement or knockout virtual element that serves as the target element for the widget.
         * @param {object} settings The widget settings.
         * @param {object} [bindingContext] The current binding context.
         */
        create: function(element, settings, bindingContext, fromBinding) {
            if(!fromBinding){
                settings = widget.getSettings(function() { return settings; }, element);
            }

            var compositionSettings = widget.createCompositionSettings(element, settings);

            composition.compose(element, compositionSettings, bindingContext);
        },
        /**
         * Installs the widget module by adding the widget binding handler and optionally registering kinds.
         * @method install
         * @param {object} config The module config. Add a `kinds` array with the names of widgets to automatically register. You can also specify a `bindingName` if you wish to use another name for the widget binding, such as "control" for example.
         */
        install:function(config){
            config.bindingName = config.bindingName || 'widget';

            if(config.kinds){
                var toRegister = config.kinds;

                for(var i = 0; i < toRegister.length; i++){
                    widget.registerKind(toRegister[i]);
                }
            }

            ko.bindingHandlers[config.bindingName] = {
                init: function() {
                    return { controlsDescendantBindings: true };
                },
                update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var settings = widget.getSettings(valueAccessor);
                    extractParts(element, settings);
                    widget.create(element, settings, bindingContext, true);
                }
            };

            composition.composeBindings.push(config.bindingName + ':');
            ko.virtualElements.allowedBindings[config.bindingName] = true;
        }
    };

    return widget;
});


define(['durandal/system', 'durandal/app', 'durandal/viewLocator', 'plugins/dialog'], function (system, app, viewLocator, dialog) {
    //system.debug(true);
	
	NProgress.configure({ showSpinner: false });

    app.title = 'Raven.Studio';
    dialog.MessageBox.setViewUrl('views/dialog.html');

    app.configurePlugins({
        router: true,
        dialog: true,
        widget: true
    });

    app.start().then(function() {
        //Replace 'viewmodels' in the moduleId with 'views' to locate the view.
        //Look for partial views in a 'views' folder in the root.
        viewLocator.useConvention();

        if ("WebSocket" in window || "EventSource" in window) {
            //Show the app by setting the root view model for our application with a transition.
            app.setRoot('viewmodels/shell');
        } else {
            //The browser doesn't support nor WebSocket nor EventSource. IE 9, Firefox 6, Chrome 6 and below.
            app.showMessage("Your browser isn't supported. Please use a modern browser!", ":-(", []);
            NProgress.done();
        }
    });
});
﻿﻿// Want Intellisense comments for your extensions? Use JSDoc format:
/**
* Summary goes here.
* @someArg Description of someArg here.
*/


﻿var buildType;
(function (buildType) {
    buildType[buildType["Stable"] = 0] = "Stable";
    buildType[buildType["Unstable"] = 1] = "Unstable";
})(buildType || (buildType = {}));


var logTenantType;
(function (logTenantType) {
    logTenantType[logTenantType["Database"] = 0] = "Database";
    logTenantType[logTenantType["Filesystem"] = 1] = "Filesystem";
    logTenantType[logTenantType["CounterStorage"] = 2] = "CounterStorage";
})(logTenantType || (logTenantType = {}));

var ImportItemType;
(function (ImportItemType) {
    ImportItemType[ImportItemType["Documents"] = 0x1] = "Documents";
    ImportItemType[ImportItemType["Indexes"] = 0x2] = "Indexes";
    ImportItemType[ImportItemType["Attachments"] = 0x4] = "Attachments";
    ImportItemType[ImportItemType["Transformers"] = 0x8] = "Transformers";
    ImportItemType[ImportItemType["RemoveAnalyzers"] = 0x8000] = "RemoveAnalyzers";
})(ImportItemType || (ImportItemType = {}));
var filesystemSynchronizationType;
(function (filesystemSynchronizationType) {
    filesystemSynchronizationType[filesystemSynchronizationType["Unknown"] = 0] = "Unknown";
    filesystemSynchronizationType[filesystemSynchronizationType["ContentUpdate"] = 1] = "ContentUpdate";
    filesystemSynchronizationType[filesystemSynchronizationType["MetadataUpdate"] = 2] = "MetadataUpdate";
    filesystemSynchronizationType[filesystemSynchronizationType["Rename"] = 3] = "Rename";
    filesystemSynchronizationType[filesystemSynchronizationType["Delete"] = 4] = "Delete";
})(filesystemSynchronizationType || (filesystemSynchronizationType = {}));

var synchronizationAction;
(function (synchronizationAction) {
    synchronizationAction[synchronizationAction["Enqueue"] = 0] = "Enqueue";
    synchronizationAction[synchronizationAction["Start"] = 1] = "Start";
    synchronizationAction[synchronizationAction["Finish"] = 2] = "Finish";
})(synchronizationAction || (synchronizationAction = {}));

var synchronizationDirection;
(function (synchronizationDirection) {
    synchronizationDirection[synchronizationDirection["Outgoing"] = 0] = "Outgoing";
    synchronizationDirection[synchronizationDirection["Incoming"] = 1] = "Incoming";
})(synchronizationDirection || (synchronizationDirection = {}));

var conflictStatus;
(function (conflictStatus) {
    conflictStatus[conflictStatus["Detected"] = 0] = "Detected";
    conflictStatus[conflictStatus["Resolved"] = 1] = "Resolved";
})(conflictStatus || (conflictStatus = {}));

var fileChangeAction;
(function (fileChangeAction) {
    fileChangeAction[fileChangeAction["Add"] = 0] = "Add";
    fileChangeAction[fileChangeAction["Delete"] = 1] = "Delete";
    fileChangeAction[fileChangeAction["Update"] = 2] = "Update";
    fileChangeAction[fileChangeAction["Renaming"] = 3] = "Renaming";
    fileChangeAction[fileChangeAction["Renamed"] = 4] = "Renamed";
})(fileChangeAction || (fileChangeAction = {}));

var filesystemConfigurationChangeAction;
(function (filesystemConfigurationChangeAction) {
    filesystemConfigurationChangeAction[filesystemConfigurationChangeAction["Set"] = 0] = "Set";
    filesystemConfigurationChangeAction[filesystemConfigurationChangeAction["Delete"] = 1] = "Delete";
})(filesystemConfigurationChangeAction || (filesystemConfigurationChangeAction = {}));
﻿var searchResults = (function () {
    function searchResults() {
    }
    return searchResults;
})();
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/adminLogsConfigureCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var adminLogsConfigureCommand = (function (_super) {
        __extends(adminLogsConfigureCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function adminLogsConfigureCommand(ownerDb, logConfig, eventsId) {
            _super.call(this);
            this.ownerDb = ownerDb;
            this.logConfig = logConfig;
            this.eventsId = eventsId;

            if (!this.ownerDb) {
                throw new Error("Must specify a database.");
            }
        }
        adminLogsConfigureCommand.prototype.execute = function () {
            var args = {
                'watch-category': $.map(this.logConfig, function (item) {
                    return item.category + ":" + item.level;
                }),
                id: this.eventsId
            };

            var url = "/admin/logs/configure" + this.urlEncodeArgs(args);
            return this.query(url, null, this.ownerDb);
        };
        return adminLogsConfigureCommand;
    })(commandBase);

    
    return adminLogsConfigureCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/backupDatabaseCommand", ["require", "exports", "commands/commandBase", "commands/getDocumentWithMetadataCommand"], function(require, exports, commandBase, getDocumentWithMetadataCommand) {
    var backupDatabaseCommand = (function (_super) {
        __extends(backupDatabaseCommand, _super);
        function backupDatabaseCommand(db, backupLocation, updateBackupStatus, incremental) {
            _super.call(this);
            this.db = db;
            this.backupLocation = backupLocation;
            this.updateBackupStatus = updateBackupStatus;
            this.incremental = incremental;
        }
        backupDatabaseCommand.prototype.execute = function () {
            var _this = this;
            var result = $.Deferred();

            this.query('/admin/databases/' + this.db.name, null, null).fail(function (response) {
                _this.reportError("Failed to fetch database document!", response.responseText, response.statusText);
                result.reject();
            }).done(function (doc) {
                var args = {
                    BackupLocation: _this.backupLocation,
                    DatabaseDocument: doc
                };
                _this.post('/admin/backup?incremental=' + _this.incremental, JSON.stringify(args), _this.db, { dataType: 'text' }).fail(function (response) {
                    _this.reportError("Failed to create backup!", response.responseText, response.statusText);
                    result.reject();
                }).done(function () {
                    return _this.getBackupStatus(result);
                });
            });

            return result;
        };

        backupDatabaseCommand.prototype.getBackupStatus = function (result) {
            var _this = this;
            new getDocumentWithMetadataCommand("Raven/Backup/Status", this.db).execute().fail(function (response) {
                _this.reportError("Failed to fetch backup status!", response.responseText, response.statusText);
                result.reject();
            }).done(function (backupStatus) {
                _this.updateBackupStatus(backupStatus);
                if (backupStatus.IsRunning) {
                    setTimeout(function () {
                        return _this.getBackupStatus(result);
                    }, 1000);
                } else {
                    _this.reportSuccess("Database backup was successfully created!");
                    result.resolve();
                }
            });
        };
        return backupDatabaseCommand;
    })(commandBase);

    
    return backupDatabaseCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/checkEncryptionKey", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var checkEncryptionKey = (function (_super) {
        __extends(checkEncryptionKey, _super);
        function checkEncryptionKey(key) {
            _super.call(this);
            this.key = key;
        }
        checkEncryptionKey.prototype.execute = function () {
            var _this = this;
            var keyObject = { "key": this.key };
            var result = this.post("/studio-tasks/is-base-64-key", keyObject, null);

            result.fail(function (response) {
                return _this.reportError("Failed to create encryption", response.responseText, response.statusText);
            });
            return result;
        };
        return checkEncryptionKey;
    })(commandBase);

    
    return checkEncryptionKey;
});
/// <reference path="../models/dto.ts" />
define("commands/commandBase", ["require", "exports", "common/alertType", "common/messagePublisher", "models/database", "common/appUrl", "common/oauthContext", "forge/forge_custom.min", "plugins/router"], function(require, exports, alertType, messagePublisher, database, appUrl, oauthContext, forge, router) {
    /// Commands encapsulate a read or write operation to the database and support progress notifications and common AJAX related functionality.
    var commandBase = (function () {
        function commandBase() {
        }
        commandBase.prototype.execute = function () {
            throw new Error("Execute must be overridden.");
        };

        commandBase.prototype.urlEncodeArgs = function (args) {
            var propNameAndValues = [];
            for (var prop in args) {
                var value = args[prop];
                if (value instanceof Array) {
                    for (var i = 0; i < value.length; i++) {
                        propNameAndValues.push(prop + "=" + encodeURIComponent(value[i]));
                    }
                } else if (value !== undefined) {
                    propNameAndValues.push(prop + "=" + encodeURIComponent(value));
                }
            }

            return "?" + propNameAndValues.join("&");
        };

        commandBase.prototype.query = function (relativeUrl, args, resource, resultsSelector, timeToAlert) {
            if (typeof timeToAlert === "undefined") { timeToAlert = 9000; }
            var ajax = this.ajax(relativeUrl, args, "GET", resource, null, timeToAlert);
            if (resultsSelector) {
                var task = $.Deferred();
                ajax.done(function (results, status, xhr) {
                    //if we fetched a database document, save the etag from the header
                    if (results.hasOwnProperty('SecuredSettings')) {
                        results['__metadata'] = { '@etag': xhr.getResponseHeader('Etag') };
                    }
                    var transformedResults = resultsSelector(results);
                    task.resolve(transformedResults);
                });
                ajax.fail(function (request, status, error) {
                    task.reject(request, status, error);
                });
                return task;
            } else {
                return ajax;
            }
        };

        commandBase.prototype.head = function (relativeUrl, args, resource, resultsSelector) {
            var ajax = this.ajax(relativeUrl, args, "HEAD", resource);
            if (resultsSelector) {
                var task = $.Deferred();
                ajax.done(function (results, status, xhr) {
                    var allHeaders = xhr.getAllResponseHeaders();
                    if (allHeaders) {
                        var headersObject = {};
                        var headersArray = xhr.getAllResponseHeaders().trim().split(/\r?\n/);
                        for (var n = 0; n < headersArray.length; n++) {
                            var keyValue = headersArray[n].split(": ");
                            if (keyValue.length == 2) {
                                //keyValue[1] = keyValue[1].replaceAll("\"", "");
                                headersObject[keyValue[0]] = keyValue[1];
                            }
                        }
                        var transformedResults = resultsSelector(headersObject);
                        task.resolve(transformedResults);
                    }
                });
                ajax.fail(function (request, status, error) {
                    task.reject(request, status, error);
                });
                return task;
            } else {
                return ajax;
            }
        };

        commandBase.prototype.put = function (relativeUrl, args, resource, options, timeToAlert) {
            if (typeof timeToAlert === "undefined") { timeToAlert = 9000; }
            return this.ajax(relativeUrl, args, "PUT", resource, options, timeToAlert);
        };

        commandBase.prototype.reset = function (relativeUrl, args, resource, options) {
            return this.ajax(relativeUrl, args, "RESET", resource, options);
        };

        /*
        * Performs a DELETE rest call.
        */
        commandBase.prototype.del = function (relativeUrl, args, resource, options, timeToAlert) {
            if (typeof timeToAlert === "undefined") { timeToAlert = 9000; }
            return this.ajax(relativeUrl, args, "DELETE", resource, options, timeToAlert);
        };

        commandBase.prototype.post = function (relativeUrl, args, resource, options, timeToAlert) {
            if (typeof timeToAlert === "undefined") { timeToAlert = 9000; }
            return this.ajax(relativeUrl, args, "POST", resource, options, timeToAlert);
        };

        commandBase.prototype.patch = function (relativeUrl, args, resource, options) {
            return this.ajax(relativeUrl, args, "PATCH", resource, options);
        };

        commandBase.prototype.ajax = function (relativeUrl, args, method, resource, options, timeToAlert) {
            var _this = this;
            if (typeof timeToAlert === "undefined") { timeToAlert = 9000; }
            var originalArguments = arguments;

            // ContentType:
            //
            // Can't use application/json in cross-domain requests, otherwise it
            // issues OPTIONS preflight request first, which doesn't return proper
            // headers(e.g.Etag header, etc.)
            //
            // So, for GETs, we issue text/plain requests, which skip the OPTIONS
            // request and goes straight for the GET request.
            var contentType = method === "GET" ? "text/plain; charset=utf-8" : "application/json; charset=utf-8";
            var defaultOptions = {
                cache: false,
                url: appUrl.forResourceQuery(resource) + relativeUrl,
                data: args,
                dataType: "json",
                contentType: contentType,
                type: method,
                headers: undefined,
                xhr: function () {
                    var xhr = new XMLHttpRequest();
                    xhr.upload.addEventListener("progress", function (evt) {
                        if (evt.lengthComputable) {
                            var percentComplete = (evt.loaded / evt.total) * 100;
                            if (percentComplete < 100) {
                                // waiting for upload progress to complete
                                clearTimeout(commandBase.alertTimeout);
                                commandBase.alertTimeout = setTimeout(commandBase.showServerNotRespondingAlert, timeToAlert);
                            }
                            ko.postbox.publish("UploadProgress", percentComplete);
                        }
                    }, false);

                    return xhr;
                }
            };

            if (options) {
                for (var prop in options) {
                    defaultOptions[prop] = options[prop];
                }
            }
            if (commandBase.loadingCounter == 0 && timeToAlert > 0) {
                commandBase.splashTimerHandle = setTimeout(commandBase.showSpin, 1000, timeToAlert);
            }

            if (oauthContext.apiKey()) {
                if (!defaultOptions.headers) {
                    defaultOptions.headers = {};
                }
                defaultOptions.headers["Has-Api-Key"] = "True";
            }

            if (oauthContext.authHeader()) {
                if (!defaultOptions.headers) {
                    defaultOptions.headers = {};
                }
                defaultOptions.headers["Authorization"] = oauthContext.authHeader();
            }

            var ajaxTask = $.Deferred();

            commandBase.loadingCounter++;
            $.ajax(defaultOptions).always(function () {
                --commandBase.loadingCounter;
                if (commandBase.loadingCounter == 0) {
                    clearTimeout(commandBase.alertTimeout);
                    commandBase.alertTimeout = 0;
                    clearTimeout(commandBase.splashTimerHandle);
                    commandBase.hideSpin();
                }
            }).done(function (results, status, xhr) {
                ajaxTask.resolve(results, status, xhr);
            }).fail(function (request, status, error) {
                var dbBeingUpdated = request.getResponseHeader("Raven-Database-Load-In-Progress");
                if (dbBeingUpdated) {
                    ajaxTask.reject(request, status, error);
                    var currentDb = appUrl.getDatabase();
                    if (currentDb != null && currentDb.name == dbBeingUpdated) {
                        router.navigate(appUrl.forUpgrade(new database(dbBeingUpdated)));
                    }
                } else if (request.status == 412 && oauthContext.apiKey()) {
                    _this.handleOAuth(ajaxTask, request, originalArguments);
                } else {
                    ajaxTask.reject(request, status, error);
                }
            });

            return ajaxTask.promise();
        };

        commandBase.prototype.handleOAuth = function (task, request, originalArguments) {
            var _this = this;
            var oauthSource = request.getResponseHeader('OAuth-Source');

            // issue request to oauth source endpoint to get RSA exponent and modulus
            $.ajax({
                type: 'POST',
                url: oauthSource,
                headers: {
                    grant_type: 'client_credentials'
                }
            }).fail(function (request, status, error) {
                if (request.status != 412) {
                    task.reject(request, status, error);
                } else {
                    var wwwAuth = request.getResponseHeader('WWW-Authenticate');
                    var tokens = wwwAuth.split(',');
                    var authRequest = {};
                    tokens.forEach(function (token) {
                        var eqPos = token.indexOf("=");
                        var kv = [token.substring(0, eqPos), token.substring(eqPos + 1)];
                        var m = kv[0].match(/[a-zA-Z]+$/g);
                        if (m) {
                            authRequest[m[0]] = kv[1];
                        } else {
                            authRequest[kv[0]] = kv[1];
                        }
                    });

                    // form oauth request
                    var data = _this.objectToString({
                        exponent: authRequest.exponent,
                        modulus: authRequest.modulus,
                        data: _this.encryptAsymmetric(authRequest.exponent, authRequest.modulus, _this.objectToString({
                            "api key name": oauthContext.apiKeyName(),
                            "challenge": authRequest.challenge,
                            "response": _this.prepareResponse(authRequest.challenge)
                        }))
                    });

                    $.ajax({
                        type: 'POST',
                        url: oauthSource,
                        data: data,
                        headers: {
                            grant_type: 'client_credentials'
                        }
                    }).done(function (results, status, xhr) {
                        oauthContext.authHeader("Bearer " + results.replace(/(\r\n|\n|\r)/gm, ""));
                        _this.retryOriginalRequest(task, originalArguments);
                    }).fail(function (request, status, error) {
                        task.reject(request, status, error);
                    });
                }
            });
        };

        commandBase.prototype.retryOriginalRequest = function (task, orignalArguments) {
            this.ajax.apply(this, orignalArguments).done(function (results, status, xhr) {
                task.resolve(results, status, xhr);
            }).fail(function (request, status, error) {
                task.reject(request, status, error);
            });
        };

        commandBase.prototype.prepareResponse = function (challenge) {
            var input = challenge + ";" + oauthContext.apiKeySecret();
            var md = forge.md.sha1.create();
            md.update(input);
            return forge.util.encode64(md.digest().getBytes());
        };

        commandBase.prototype.objectToString = function (input) {
            return $.map(input, function (value, key) {
                return key + "=" + value;
            }).join(',');
        };

        commandBase.prototype.base64ToBigInt = function (input) {
            input = forge.util.decode64(input);
            var hex = forge.util.bytesToHex(input);
            return new forge.jsbn.BigInteger(hex, 16);
        };

        commandBase.prototype.encryptAsymmetric = function (exponent, modulus, data) {
            var e = this.base64ToBigInt(exponent);
            var n = this.base64ToBigInt(modulus);
            var rsa = forge.pki.rsa;
            var publicKey = rsa.setPublicKey(n, e);

            var key = forge.random.getBytesSync(32);
            var iv = forge.random.getBytesSync(16);

            var keyAndIvEncrypted = publicKey.encrypt(key + iv, 'RSA-OAEP');

            var cipher = forge.cipher.createCipher('AES-CBC', key);
            cipher.start({ iv: iv });
            cipher.update(forge.util.createBuffer(data));
            cipher.finish();
            var encrypted = cipher.output;
            return forge.util.encode64(keyAndIvEncrypted + encrypted.data);
        };

        commandBase.showSpin = function (timeToAlert) {
            ko.postbox.publish("LoadProgress", 2 /* warning */);
            if (commandBase.alertTimeout == 0) {
                commandBase.alertTimeout = setTimeout(commandBase.showServerNotRespondingAlert, timeToAlert);
            }
        };

        commandBase.showServerNotRespondingAlert = function () {
            ko.postbox.publish("LoadProgress", 3 /* danger */);
        };

        commandBase.hideSpin = function () {
            ko.postbox.publish("LoadProgress", null);
        };

        commandBase.prototype.reportInfo = function (title, details) {
            messagePublisher.reportInfo(title, details);
        };

        commandBase.prototype.reportError = function (title, details, httpStatusText) {
            messagePublisher.reportError(title, details, httpStatusText);
        };

        commandBase.prototype.reportSuccess = function (title, details) {
            messagePublisher.reportSuccess(title, details);
        };

        commandBase.prototype.reportWarning = function (title, details, httpStatusText) {
            messagePublisher.reportWarning(title, details, httpStatusText);
        };
        commandBase.ravenClientVersion = '3.0.0.0';
        commandBase.splashTimerHandle = 0;
        commandBase.alertTimeout = 0;
        commandBase.loadingCounter = 0;
        return commandBase;
    })();

    
    return commandBase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/compactDatabaseCommand", ["require", "exports", "commands/commandBase", "common/appUrl", 'commands/getOperationStatusCommand'], function(require, exports, commandBase, appUrl, getOperationStatusCommand) {
    var compactDatabaseCommand = (function (_super) {
        __extends(compactDatabaseCommand, _super);
        function compactDatabaseCommand(db) {
            _super.call(this);
            this.db = db;
        }
        compactDatabaseCommand.prototype.execute = function () {
            var _this = this;
            var promise = $.Deferred();
            var url = '/admin/compact' + this.urlEncodeArgs({ database: this.db.name });
            this.post(url, null, appUrl.getSystemDatabase()).done(function (result) {
                return _this.monitorCompact(promise, result.OperationId);
            }).fail(function (response) {
                _this.reportError("Failed to compact database!", response.responseText, response.statusText);
                promise.reject();
            });
            return promise;
        };

        compactDatabaseCommand.prototype.monitorCompact = function (parentPromise, operationId) {
            var _this = this;
            new getOperationStatusCommand(appUrl.getSystemDatabase(), operationId).execute().done(function (result) {
                if (result.Completed) {
                    if (result.Faulted) {
                        _this.reportError("Failed to compact database!", result.State.Error);
                        parentPromise.reject();
                    } else {
                        _this.reportSuccess("Compact completed");
                        parentPromise.resolve();
                    }
                } else {
                    setTimeout(function () {
                        return _this.monitorCompact(parentPromise, operationId);
                    }, 500);
                }
            });
        };
        return compactDatabaseCommand;
    })(commandBase);

    
    return compactDatabaseCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/createDatabaseCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var createDatabaseCommand = (function (_super) {
        __extends(createDatabaseCommand, _super);
        function createDatabaseCommand(databaseName, settings, securedSettings) {
            _super.call(this);
            this.databaseName = databaseName;
            this.settings = settings;
            this.securedSettings = securedSettings;

            if (!databaseName) {
                this.reportError("Database must have a name!");
                throw new Error("Database must have a name!");
            }
        }
        createDatabaseCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Creating " + this.databaseName);
            var databaseDoc = {
                "Settings": this.settings,
                "SecuredSettings": this.securedSettings,
                "Disabled": false
            };

            var url = "/admin/databases/" + this.databaseName;
            return this.put(url, JSON.stringify(databaseDoc), null, { dataType: undefined }).then(function () {
                return _this.query("/databases/" + _this.databaseName + "/silverlight/ensureStartup", null, null);
            }).done(function () {
                return _this.reportSuccess(_this.databaseName + " created");
            }).fail(function (response) {
                return _this.reportError("Failed to create database", response.responseText, response.statusText);
            });
        };
        return createDatabaseCommand;
    })(commandBase);

    
    return createDatabaseCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/createDefaultSettingsCommand", ["require", "exports", "models/document", "models/versioningEntry", "commands/commandBase", "commands/getDatabaseSettingsCommand", "commands/saveDatabaseSettingsCommand", "commands/saveVersioningCommand"], function(require, exports, document, versioningEntry, commandBase, getDatabaseSettingsCommand, saveDatabaseSettingsCommand, saveVersioningCommand) {
    var createDefaultSettingsCommand = (function (_super) {
        __extends(createDefaultSettingsCommand, _super);
        function createDefaultSettingsCommand(db, bundles) {
            _super.call(this);
            this.db = db;
            this.bundles = bundles;
        }
        createDefaultSettingsCommand.prototype.execute = function () {
            this.reportInfo("Creating default settings for '" + this.db.name + "'...");

            var tasksToWatch = [];
            if (this.bundles.contains("Quotas")) {
                tasksToWatch.push(this.updateQuotasSettings());
            }
            if (this.bundles.contains("Versioning")) {
                tasksToWatch.push(this.saveVersioningConfiguration());
            }

            if (tasksToWatch.length > 0) {
                return $.when.apply(null, tasksToWatch);
            } else {
                return $.Deferred().resolve();
            }
        };

        createDefaultSettingsCommand.prototype.fillDefaultQuotasSettings = function (doc) {
            var result = new document(doc.toDto(true));
            result["Settings"]["Raven/Quotas/Size/HardLimitInKB"] = (50 * 1024).toString();
            result["Settings"]["Raven/Quotas/Size/SoftMarginInKB"] = (45 * 1024).toString();
            result["Settings"]["Raven/Quotas/Documents/HardLimit"] = (10000).toString();
            result["Settings"]["Raven/Quotas/Documents/SoftLimit"] = (8000).toString();
            return result;
        };

        createDefaultSettingsCommand.prototype.saveDatabaseSettings = function (databaseSettings) {
            return new saveDatabaseSettingsCommand(this.db, databaseSettings).execute();
        };

        createDefaultSettingsCommand.prototype.updateQuotasSettings = function () {
            var _this = this;
            var taskDone = $.Deferred();
            new getDatabaseSettingsCommand(this.db, false).execute().fail(function () {
                return taskDone.fail();
            }).then(this.fillDefaultQuotasSettings).then(function (doc) {
                return _this.saveDatabaseSettings(doc);
            }).fail(function () {
                return taskDone.fail();
            }).then(function () {
                return taskDone.resolve();
            });
            return taskDone;
        };

        createDefaultSettingsCommand.prototype.createDefaultVersioningSettings = function () {
            return [
                new versioningEntry({
                    Id: "DefaultConfiguration",
                    MaxRevisions: 5,
                    Exclude: false
                })
            ];
        };

        createDefaultSettingsCommand.prototype.saveVersioningConfiguration = function () {
            var entries = this.createDefaultVersioningSettings().map(function (ve) {
                return ve.toDto(true);
            });

            return new saveVersioningCommand(this.db, entries).execute();
        };
        return createDefaultSettingsCommand;
    })(commandBase);

    
    return createDefaultSettingsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/createSampleDataClassCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var createSampleDataClassCommand = (function (_super) {
        __extends(createSampleDataClassCommand, _super);
        function createSampleDataClassCommand(db) {
            _super.call(this);
            this.db = db;
        }
        createSampleDataClassCommand.prototype.execute = function () {
            return this.query("/studio-tasks/createSampleDataClass", null, this.db);
        };
        return createSampleDataClassCommand;
    })(commandBase);

    
    return createSampleDataClassCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/createSampleDataCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var createSampleDataCommand = (function (_super) {
        __extends(createSampleDataCommand, _super);
        function createSampleDataCommand(db) {
            _super.call(this);
            this.db = db;
        }
        createSampleDataCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Creating Sample Data, Please wait...");

            return this.post("/studio-tasks/createSampleData", null, this.db, { dataType: 'text' }).fail(function (response) {
                return _this.reportError("Failed to create sample data", response.responseText, response.statusText);
            }).done(function () {
                return _this.reportSuccess("Sample data creation completed");
            });
        };
        return createSampleDataCommand;
    })(commandBase);

    
    return createSampleDataCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/deleteCollectionCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteCollectionCommand = (function (_super) {
        __extends(deleteCollectionCommand, _super);
        function deleteCollectionCommand(collectionName, db) {
            _super.call(this);
            this.collectionName = collectionName;
            this.db = db;

            this.displayCollectionName = (collectionName == "*") ? "All Documents" : collectionName;
        }
        deleteCollectionCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Deleting " + this.displayCollectionName);

            var url = "/bulk_docs/Raven/DocumentsByEntityName";
            var urlParams = "?query=Tag%3A" + encodeURIComponent(this.collectionName) + "&allowStale=true";
            var deleteTask = this.del(url + urlParams, null, this.db);

            // deletion is made asynchronically so we infom user about operation start - not about actual completion.
            deleteTask.done(function () {
                return _this.reportSuccess("Scheduled deletion of " + _this.displayCollectionName);
            });
            deleteTask.fail(function (response) {
                return _this.reportError("Failed to delete " + _this.displayCollectionName, response.responseText, response.statusText);
            });
            return deleteTask;
        };
        return deleteCollectionCommand;
    })(commandBase);

    
    return deleteCollectionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/deleteDocsMatchingQueryCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteDocsMatchingQueryCommand = (function (_super) {
        __extends(deleteDocsMatchingQueryCommand, _super);
        function deleteDocsMatchingQueryCommand(indexName, queryText, db) {
            _super.call(this);
            this.indexName = indexName;
            this.queryText = queryText;
            this.db = db;
        }
        deleteDocsMatchingQueryCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Deleting docs matching query...");

            var args = {
                query: this.queryText,
                pageSize: 128,
                allowStale: false
            };

            var url = "/bulk_docs/" + this.indexName + this.urlEncodeArgs(args);
            var task = this.del(url, null, this.db);
            task.done(function () {
                return _this.reportSuccess("Docs deleted");
            });
            task.fail(function (response) {
                return _this.reportError("Error deleting docs matching query", response.responseText, response.statusText);
            });

            return task;
        };
        return deleteDocsMatchingQueryCommand;
    })(commandBase);

    
    return deleteDocsMatchingQueryCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/deleteDocumentCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteDocumentCommand = (function (_super) {
        __extends(deleteDocumentCommand, _super);
        function deleteDocumentCommand(docId, db) {
            _super.call(this);
            this.docId = docId;
            this.db = db;
        }
        deleteDocumentCommand.prototype.execute = function () {
            return this.del('/docs/' + this.docId, null, this.db);
        };
        return deleteDocumentCommand;
    })(commandBase);

    
    return deleteDocumentCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/deleteDocumentsCommand", ["require", "exports", "commands/executeBulkDocsCommand"], function(require, exports, executeBulkDocsCommand) {
    var deleteDocumentsCommand = (function (_super) {
        __extends(deleteDocumentsCommand, _super);
        function deleteDocumentsCommand(docIds, db) {
            var bulkDocs = docIds.map(function (id) {
                return deleteDocumentsCommand.createDeleteDocument(id);
            });
            _super.call(this, bulkDocs, db);
        }
        deleteDocumentsCommand.prototype.execute = function () {
            var _this = this;
            var docCount = this.docs.length;
            var docsDescription = docCount === 1 ? this.docs[0].Key : docCount + " docs";
            var alertInfoTitle = "Deleting " + docsDescription + "...";
            this.reportInfo(alertInfoTitle);

            var deleteTask = _super.prototype.execute.call(this);

            deleteTask.done(function () {
                return _this.reportSuccess("Deleted " + docsDescription);
            });
            deleteTask.fail(function (response) {
                return _this.reportError("Failed to delete " + docsDescription, response.responseText, response.statusText);
            });

            return deleteTask;
        };

        deleteDocumentsCommand.createDeleteDocument = function (id) {
            return {
                Key: id,
                Method: "DELETE",
                Etag: null,
                AdditionalData: null
            };
        };
        return deleteDocumentsCommand;
    })(executeBulkDocsCommand);

    
    return deleteDocumentsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/deleteIndexCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteIndexCommand = (function (_super) {
        __extends(deleteIndexCommand, _super);
        function deleteIndexCommand(indexName, db) {
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
        }
        deleteIndexCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Deleting " + this.indexName + "...");
            return this.del("/indexes/" + this.indexName, null, this.db).fail(function (response) {
                return _this.reportError("Failed to delete index " + _this.indexName, response.responseText);
            }).done(function () {
                return _this.reportSuccess("Deleted " + _this.indexName);
            });
        };
        return deleteIndexCommand;
    })(commandBase);

    
    return deleteIndexCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/deleteResourceCommand", ["require", "exports", "commands/commandBase", "models/database", "models/filesystem/filesystem", "models/counter/counterStorage"], function(require, exports, commandBase, database, filesystem, counterStorage) {
    var deleteDatabaseCommand = (function (_super) {
        __extends(deleteDatabaseCommand, _super);
        function deleteDatabaseCommand(resources, isHardDelete) {
            _super.call(this);
            this.resources = resources;
            this.isHardDelete = isHardDelete;
            this.oneDatabasePath = "/admin/databases/";
            this.multipleDatabasesPath = "/admin/databases/batch-delete";
            this.oneFileSystemPath = "/admin/fs/";
            this.multipleFileSystemsPath = "/admin/fs/batch-delete";
            this.oneCounterStoragePath = "/admin/counterstorage/";
            this.multipleCounterStoragesPath = "/admin/counterstorage/batch-delete";
        }
        deleteDatabaseCommand.prototype.execute = function () {
            var deleteTask;
            if (this.resources.length == 1) {
                deleteTask = this.deleteOneResource();
            } else {
                deleteTask = this.deleteMultipleResources();
            }

            return deleteTask;
        };

        deleteDatabaseCommand.prototype.deleteOneResource = function () {
            var _this = this;
            var resource = this.resources[0];
            this.reportInfo("Deleting " + resource.name + "...");

            var args = {
                "hard-delete": this.isHardDelete
            };

            var disableOneResourcePath = (resource.type == database.type) ? this.oneDatabasePath : (resource.type == filesystem.type) ? this.oneFileSystemPath : this.oneCounterStoragePath;
            var url = disableOneResourcePath + encodeURIComponent(resource.name) + this.urlEncodeArgs(args);
            var deleteTask = this.del(url, null, null, { dataType: undefined });

            deleteTask.done(function () {
                return _this.reportSuccess("Succefully deleted " + resource.name);
            });
            deleteTask.fail(function (response) {
                return _this.reportError("Failed to delete " + resource.name, response.responseText, response.statusText);
            });
            return deleteTask;
        };

        deleteDatabaseCommand.prototype.deleteMultipleResources = function () {
            var _this = this;
            this.reportInfo("Deleting " + this.resources.length + " resources...");

            var dbToDelete = this.resources.filter(function (r) {
                return r.type == database.type;
            });
            var fsToDelete = this.resources.filter(function (r) {
                return r.type == filesystem.type;
            });
            var cntToDelete = this.resources.filter(function (r) {
                return r.type == counterStorage.type;
            });

            var deleteTasks = [];

            if (dbToDelete.length > 0) {
                deleteTasks.push(this.deleteTask(dbToDelete, this.multipleDatabasesPath));
            }

            if (fsToDelete.length > 0) {
                deleteTasks.push(this.deleteTask(fsToDelete, this.multipleFileSystemsPath));
            }

            if (cntToDelete.length > 0) {
                deleteTasks.push(this.deleteTask(cntToDelete, this.multipleCounterStoragesPath));
            }

            var mergedPromise = $.Deferred();

            var combinedPromise = $.when.apply(null, deleteTasks);
            combinedPromise.done(function () {
                var deletedResources = [].concat.apply([], arguments);
                _this.reportSuccess("Succefully deleted " + deletedResources.length + " resources!");
                mergedPromise.resolve(deletedResources);
            });

            combinedPromise.fail(function (response) {
                _this.reportError("Failed to delete resources", response.responseText, response.statusText);
                mergedPromise.reject(response);
            });
            return mergedPromise;
        };

        deleteDatabaseCommand.prototype.deleteTask = function (resources, deletePath) {
            var args = {
                ids: resources.map(function (d) {
                    return d.name;
                }),
                "hard-delete": this.isHardDelete
            };

            var url = deletePath + this.urlEncodeArgs(args);

            var task = $.Deferred();
            this.del(url, null, null, null, 9000 * resources.length).done(function (resourceNames) {
                task.resolve(resources.filter(function (r) {
                    return resourceNames.contains(r.name);
                }));
            }).fail(function () {
                return task.reject(arguments);
            });
            return task;
        };
        return deleteDatabaseCommand;
    })(commandBase);

    
    return deleteDatabaseCommand;
});
/// <reference path="../models/dto.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/deleteTransformerCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteTransformerCommand = (function (_super) {
        __extends(deleteTransformerCommand, _super);
        function deleteTransformerCommand(transName, db) {
            _super.call(this);
            this.transName = transName;
            this.db = db;
        }
        deleteTransformerCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Deleting " + this.transName + "...");
            return this.del("/transformers/" + this.transName, null, this.db).fail(function (response) {
                return _this.reportError("Failed to delete transformer " + _this.transName, response.responseText);
            }).done(function () {
                return _this.reportSuccess("Deleted " + _this.transName);
            });
        };
        return deleteTransformerCommand;
    })(commandBase);

    
    return deleteTransformerCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/disableIndexingCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var disableIndexingCommand = (function (_super) {
        __extends(disableIndexingCommand, _super);
        /**
        * @param names - The array of resource names to toggle
        * @param isSettingDisabled - Status of disabled to set
        * @param resourceType - The resource type
        */
        function disableIndexingCommand(dbName, isSettingIndexingDisabled) {
            _super.call(this);
            this.dbName = dbName;
            this.isSettingIndexingDisabled = isSettingIndexingDisabled;
        }
        disableIndexingCommand.prototype.execute = function () {
            var _this = this;
            var action = !this.isSettingIndexingDisabled ? "enable" : "disable";
            var args = {
                isSettingIndexingDisabled: this.isSettingIndexingDisabled
            };
            var url = "/admin/databases/toggle-indexing/" + this.dbName + this.urlEncodeArgs(args);
            var toggleTask = this.post(url, null, null, { dataType: undefined });
            toggleTask.done(function () {
                return _this.reportSuccess("Succefully " + action + "d " + " indexing in " + _this.dbName);
            });
            toggleTask.fail(function (response) {
                return _this.reportError("Failed to " + action + " indexing in " + _this.dbName, response.responseText, response.statusText);
            });
            return toggleTask;
        };
        return disableIndexingCommand;
    })(commandBase);

    
    return disableIndexingCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/disableResourceToggleCommand", ["require", "exports", "commands/commandBase", "models/database", "models/filesystem/filesystem", "models/counter/counterStorage"], function(require, exports, commandBase, database, filesystem, counterStorage) {
    var disableResourceToggleCommand = (function (_super) {
        __extends(disableResourceToggleCommand, _super);
        /**
        * @param resources - The array of resources to toggle
        * @param isSettingDisabled - Status of disabled to set
        */
        function disableResourceToggleCommand(resources, isSettingDisabled) {
            _super.call(this);
            this.resources = resources;
            this.isSettingDisabled = isSettingDisabled;
            this.oneDatabasePath = "/admin/databases/";
            this.multipleDatabasesPath = "/admin/databases/batch-toggle-disable";
            this.oneFileSystemPath = "/admin/fs/";
            this.multipleFileSystemsPath = "/admin/fs/batch-toggle-disable";
            this.oneCounterStoragePath = "/admin/counterstorage/";
            this.multipleCounterStoragesPath = "/admin/counterstorage/batch-toggle-disable";
        }
        disableResourceToggleCommand.prototype.execute = function () {
            var action = this.isSettingDisabled ? "disable" : "enable";

            var toggleTask;
            if (this.resources.length == 1) {
                toggleTask = this.disableOneResource(action);
            } else {
                toggleTask = this.disableMultipleResources(action);
            }

            return toggleTask;
        };

        disableResourceToggleCommand.prototype.disableOneResource = function (action) {
            var _this = this;
            var resource = this.resources[0];
            this.reportInfo("Trying to " + action + " " + resource.name + "...");

            var args = {
                isSettingDisabled: this.isSettingDisabled
            };

            var disableOneResourcePath = (resource.type == database.type) ? this.oneDatabasePath : (resource.type == filesystem.type) ? this.oneFileSystemPath : this.oneCounterStoragePath;
            var url = disableOneResourcePath + resource.name + this.urlEncodeArgs(args);
            var toggleTask = this.post(url, null, null, { dataType: undefined });

            toggleTask.done(function () {
                return _this.reportSuccess("Succefully " + action + "d " + name);
            });
            toggleTask.fail(function (response) {
                return _this.reportError("Failed to " + action + " " + name, response.responseText, response.statusText);
            });

            return toggleTask;
        };

        disableResourceToggleCommand.prototype.disableMultipleResources = function (action) {
            var _this = this;
            this.reportInfo("Trying to " + action + " " + this.resources.length + " resources...");

            var dbToToggle = this.resources.filter(function (r) {
                return r.type == database.type;
            });
            var fsToToggle = this.resources.filter(function (r) {
                return r.type == filesystem.type;
            });
            var cntToToggle = this.resources.filter(function (r) {
                return r.type == counterStorage.type;
            });

            var toggleTasks = [];

            if (dbToToggle.length > 0) {
                toggleTasks.push(this.toggleTask(dbToToggle, this.multipleDatabasesPath));
            }

            if (fsToToggle.length > 0) {
                toggleTasks.push(this.toggleTask(fsToToggle, this.multipleFileSystemsPath));
            }

            if (cntToToggle.length > 0) {
                toggleTasks.push(this.toggleTask(cntToToggle, this.multipleCounterStoragesPath));
            }

            var mergedPromise = $.Deferred();

            var combinedPromise = $.when.apply(null, toggleTasks);
            combinedPromise.done(function () {
                var toggledResources = [].concat.apply([], arguments);
                _this.reportSuccess("Succefully " + action + "d " + toggledResources.length + " resources!");
                mergedPromise.resolve(toggledResources);
            });

            combinedPromise.fail(function (response) {
                _this.reportError("Failed to " + action + " resources", response.responseText, response.statusText);
                mergedPromise.reject(response);
            });
            return mergedPromise;
        };

        disableResourceToggleCommand.prototype.toggleTask = function (resources, togglePath) {
            var args = {
                ids: resources.map(function (d) {
                    return d.name;
                }),
                isSettingDisabled: this.isSettingDisabled
            };

            var url = togglePath + this.urlEncodeArgs(args);

            var task = $.Deferred();
            this.post(url, null, null, null, 9000 * resources.length).done(function (resourceNames) {
                task.resolve(resources.filter(function (r) {
                    return resourceNames.contains(r.name);
                }));
            }).fail(function () {
                return task.reject(arguments);
            });
            return task;
        };
        return disableResourceToggleCommand;
    })(commandBase);

    
    return disableResourceToggleCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/dismissAlertCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var dismissAlertCommand = (function (_super) {
        __extends(dismissAlertCommand, _super);
        function dismissAlertCommand(db, alertUniqueKey) {
            _super.call(this);
            this.db = db;
            this.alertUniqueKey = alertUniqueKey;
        }
        dismissAlertCommand.prototype.execute = function () {
            var _this = this;
            var url = "/operation/alert/dismiss";
            var args = {
                key: this.alertUniqueKey
            };
            return this.post(url, JSON.stringify(args), this.db, { dataType: 'text' }).fail(function (response) {
                return _this.reportError("Failed to dismiss alert", response.responseText, response.statusText);
            });
        };
        return dismissAlertCommand;
    })(commandBase);

    
    return dismissAlertCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/executeBulkDocsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var executeBulkDocsCommand = (function (_super) {
        __extends(executeBulkDocsCommand, _super);
        function executeBulkDocsCommand(docs, db) {
            _super.call(this);
            this.docs = docs;
            this.db = db;
        }
        executeBulkDocsCommand.prototype.execute = function () {
            return this.post("/bulk_docs", JSON.stringify(this.docs), this.db);
        };
        return executeBulkDocsCommand;
    })(commandBase);

    
    return executeBulkDocsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/executePatchCommand", ["require", "exports", "commands/executeBulkDocsCommand"], function(require, exports, executeBulkDocsCommand) {
    var executePatchCommand = (function (_super) {
        __extends(executePatchCommand, _super);
        function executePatchCommand(bulkDocsDto, db, test) {
            _super.call(this, bulkDocsDto, db);
            this.test = test;
        }
        executePatchCommand.prototype.execute = function () {
            var _this = this;
            var failInfo = (this.test) ? "Patch test failed." : "Unable to patch documents.";
            var doneInfo = (this.test) ? "Patch tested. See the results below." : "Documents patched.";

            if (!this.test) {
                this.reportInfo("Patching documents...");
            }

            return _super.prototype.execute.call(this).fail(function (result) {
                return _this.reportError(failInfo, result.responseText, result.statusText);
            }).done(function () {
                return _this.reportSuccess(doneInfo);
            });
        };
        return executePatchCommand;
    })(executeBulkDocsCommand);

    
    return executePatchCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/exportDatabaseCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var exportDatabaseCommand = (function (_super) {
        __extends(exportDatabaseCommand, _super);
        function exportDatabaseCommand(smugglerOptions, db) {
            _super.call(this);
            this.smugglerOptions = smugglerOptions;
            this.db = db;
        }
        exportDatabaseCommand.prototype.execute = function () {
            return this.post("/studio-tasks/exportDatabase", this.smugglerOptions, this.db).fail(function (response) {
                debugger;
            }).done(function (res, fs, g) {
                debugger;
            });
        };
        return exportDatabaseCommand;
    })(commandBase);

    
    return exportDatabaseCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/formatIndexCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var formatIndexCommand = (function (_super) {
        __extends(formatIndexCommand, _super);
        function formatIndexCommand(db, mapReduceArray) {
            _super.call(this);
            this.db = db;
            this.mapReduceArray = mapReduceArray;
        }
        formatIndexCommand.prototype.execute = function () {
            var url = "/debug/format-index";
            return this.post(url, JSON.stringify(this.mapReduceArray), this.db);
        };
        return formatIndexCommand;
    })(commandBase);

    
    return formatIndexCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getAlertsCommand", ["require", "exports", "commands/getDocumentWithMetadataCommand"], function(require, exports, getDocumentWithMetadataCommand) {
    var getAlertsCommand = (function (_super) {
        __extends(getAlertsCommand, _super);
        function getAlertsCommand(db) {
            _super.call(this, "Raven/Alerts", db);
        }
        getAlertsCommand.prototype.execute = function () {
            return _super.prototype.execute.call(this);
        };
        return getAlertsCommand;
    })(getDocumentWithMetadataCommand);

    
    return getAlertsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getAllDocumentsCommand", ["require", "exports", "commands/commandBase", "common/pagedResultSet", "models/document"], function(require, exports, commandBase, pagedResultSet, document) {
    /*
    * getAllDocumentsCommand is a specialized command that fetches all the documents in a specified database.
    */
    var getAllDocumentsCommand = (function (_super) {
        __extends(getAllDocumentsCommand, _super);
        function getAllDocumentsCommand(ownerDatabase, skip, take) {
            _super.call(this);
            this.ownerDatabase = ownerDatabase;
            this.skip = skip;
            this.take = take;
        }
        getAllDocumentsCommand.prototype.execute = function () {
            // Getting all documents requires a 2 step process:
            // 1. Fetch /indexes/Raven/DocumentsByEntityName to get the total doc count.
            // 2. Fetch /docs to get the actual documents.
            // Fetching #1 will return a document list, but it won't include the system docs.
            // Therefore, we must fetch /docs as well, which gives us the system docs.
            var docsTask = this.fetchDocs();
            var totalResultsTask = this.fetchTotalResultCount();
            var doneTask = $.Deferred();
            var combinedTask = $.when(docsTask, totalResultsTask);
            combinedTask.done(function (docsResult, resultsCount) {
                return doneTask.resolve(new pagedResultSet(docsResult, resultsCount));
            });
            combinedTask.fail(function (xhr) {
                return doneTask.reject(xhr);
            });
            return doneTask;
        };

        getAllDocumentsCommand.prototype.fetchDocs = function () {
            var args = {
                start: this.skip,
                pageSize: this.take
            };

            var docSelector = function (docs) {
                return docs.map(function (d) {
                    return new document(d);
                });
            };
            return this.query("/docs", args, this.ownerDatabase, docSelector);
        };

        getAllDocumentsCommand.prototype.fetchTotalResultCount = function () {
            var args = {
                query: "",
                start: 0,
                pageSize: 0
            };

            var url = "/indexes/Raven/DocumentsByEntityName";
            var countSelector = function (dto) {
                return dto.TotalResults;
            };
            return this.query(url, args, this.ownerDatabase, countSelector);
        };
        return getAllDocumentsCommand;
    })(commandBase);

    
    return getAllDocumentsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getApiKeysCommand", ["require", "exports", "commands/commandBase", "models/apiKey"], function(require, exports, commandBase, apiKey) {
    var getApiKeysCommand = (function (_super) {
        __extends(getApiKeysCommand, _super);
        function getApiKeysCommand() {
            _super.apply(this, arguments);
        }
        getApiKeysCommand.prototype.execute = function () {
            var args = {
                startsWith: "Raven/ApiKeys/",
                exclude: null,
                start: 0,
                pageSize: 256
            };

            return this.query("/docs", args, null, function (dtos) {
                return dtos.map(function (dto) {
                    return new apiKey(dto);
                });
            });
        };
        return getApiKeysCommand;
    })(commandBase);

    
    return getApiKeysCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getAutomaticConflictResolutionDocumentCommand", ["require", "exports", "commands/getDocumentWithMetadataCommand"], function(require, exports, getDocumentWithMetadataCommand) {
    var getAutomaticConflictResolutionDocumentCommand = (function (_super) {
        __extends(getAutomaticConflictResolutionDocumentCommand, _super);
        function getAutomaticConflictResolutionDocumentCommand(db) {
            _super.call(this, "Raven/Replication/Config", db);
        }
        getAutomaticConflictResolutionDocumentCommand.prototype.execute = function () {
            return _super.prototype.execute.call(this);
        };
        return getAutomaticConflictResolutionDocumentCommand;
    })(getDocumentWithMetadataCommand);

    
    return getAutomaticConflictResolutionDocumentCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getClientBuildVersionCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getClientBuildVersionCommand = (function (_super) {
        __extends(getClientBuildVersionCommand, _super);
        function getClientBuildVersionCommand() {
            _super.apply(this, arguments);
        }
        getClientBuildVersionCommand.prototype.execute = function () {
            return this.query("/studio/version.json", null);
        };
        return getClientBuildVersionCommand;
    })(commandBase);

    
    return getClientBuildVersionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getCollectionInfoCommand", ["require", "exports", "commands/commandBase", "models/collectionInfo"], function(require, exports, commandBase, collectionInfo) {
    var getCollectionInfoCommand = (function (_super) {
        __extends(getCollectionInfoCommand, _super);
        function getCollectionInfoCommand(collection) {
            _super.call(this);
            this.collection = collection;
        }
        getCollectionInfoCommand.prototype.execute = function () {
            var args = {
                query: "Tag:" + (this.collection.isAllDocuments ? '*' : this.collection.name),
                start: 0,
                pageSize: 0
            };

            var resultsSelector = function (dto) {
                return new collectionInfo(dto);
            };
            var url = "/indexes/Raven/DocumentsByEntityName";
            return this.query(url, args, this.collection.ownerDatabase, resultsSelector);
        };
        return getCollectionInfoCommand;
    })(commandBase);

    
    return getCollectionInfoCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getCollectionsCommand", ["require", "exports", "commands/commandBase", "models/collection", "commands/getIndexTermsCommand", "commands/getCollectionsCountCommand"], function(require, exports, commandBase, collection, getIndexTermsCommand, getCollectionsCountCommand) {
    var getCollectionsCommand = (function (_super) {
        __extends(getCollectionsCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getCollectionsCommand(ownerDb) {
            _super.call(this);
            this.ownerDb = ownerDb;

            if (!this.ownerDb) {
                throw new Error("Must specify a database.");
            }
        }
        getCollectionsCommand.prototype.execute = function () {
            var _this = this;
            var finalResult = $.Deferred();
            this.runQuery().fail(function (xhr) {
                return _this.createSystemIndexAndTryAgain(finalResult, xhr);
            }).done(function (results) {
                return finalResult.resolve(results);
            });
            return finalResult;
        };

        getCollectionsCommand.prototype.runQuery = function () {
            var _this = this;
            var task = $.Deferred();

            new getIndexTermsCommand("Raven/DocumentsByEntityName", "Tag", this.ownerDb).execute().done(function (terms) {
                var collections = terms.map(function (term) {
                    return new collection(term, _this.ownerDb, 0);
                });
                new getCollectionsCountCommand(collections, _this.ownerDb).execute().done(function (result) {
                    return task.resolve(result);
                }).fail(function (result) {
                    return task.reject(result);
                });
            }).fail(function (response) {
                _this.reportError("Can't fetch collection names");
                task.reject(response);
            });

            return task;
        };

        getCollectionsCommand.prototype.createSystemIndexAndTryAgain = function (deferred, originalReadError) {
            // Most often, failure to get the collections is due to the missing system index, Raven/DocumentsByEntityName.
            // This appears to be new behavior as of 3.0: Raven doesn't create this index automatically for the system database.
            var _this = this;
            // Calling silverlight/ensureStartup creates the system index.
            this.query("/silverlight/ensureStartup", null, this.ownerDb).done(function () {
                return _this.retryQuery(deferred, originalReadError);
            }).fail(function () {
                return _this.onErrorReadingCollections(deferred, originalReadError);
            });
        };

        getCollectionsCommand.prototype.retryQuery = function (deferred, originalReadError) {
            var _this = this;
            this.runQuery().fail(function () {
                return _this.onErrorReadingCollections(deferred, originalReadError);
            }).done(function (results) {
                return deferred.resolve(results);
            });
        };

        getCollectionsCommand.prototype.onErrorReadingCollections = function (deferred, xhr) {
            this.reportError("Failed to read collections", xhr.responseText, xhr.statusText);
            deferred.reject(xhr);
        };
        return getCollectionsCommand;
    })(commandBase);

    
    return getCollectionsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getCollectionsCountCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getCollectionsCountCommand = (function (_super) {
        __extends(getCollectionsCountCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getCollectionsCountCommand(collections, ownerDb) {
            _super.call(this);
            this.collections = collections;
            this.ownerDb = ownerDb;

            if (!this.ownerDb) {
                throw new Error("Must specify a database.");
            }
        }
        getCollectionsCountCommand.prototype.execute = function () {
            var _this = this;
            var task = $.Deferred();

            var requests = this.collections.map(function (collection) {
                return {
                    Url: "/indexes/Raven/DocumentsByEntityName",
                    Headers: {},
                    Query: "?&query=Tag:" + collection.name + "&pageSize=0"
                };
            });

            this.post("/multi_get?parallel=yes", JSON.stringify(requests), this.ownerDb, null, 0).done(function (result) {
                for (var i = 0; i < _this.collections.length; i++) {
                    _this.collections[i].documentCount(result[i].Result.TotalResults);
                }
                task.resolve(_this.collections);
            }).fail(function (response) {
                _this.reportError("Failed to fetch collections count", response.responseText, response.statusText);
                task.reject(response);
            });

            return task;
        };
        return getCollectionsCountCommand;
    })(commandBase);

    
    return getCollectionsCountCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getConflictsCommand", ["require", "exports", "common/pagedResultSet", "commands/commandBase", "models/conflictsInfo"], function(require, exports, pagedResultSet, commandBase, conflictsInfo) {
    var getConflictsCommand = (function (_super) {
        __extends(getConflictsCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getConflictsCommand(ownerDb, skip, take) {
            _super.call(this);
            this.ownerDb = ownerDb;
            this.skip = skip;
            this.take = take;

            if (!this.ownerDb) {
                throw new Error("Must specify a database.");
            }
        }
        getConflictsCommand.prototype.execute = function () {
            var args = {
                sort: "-ConflictDetectedAt",
                start: this.skip,
                pageSize: this.take,
                resultsTransformer: "Raven/ConflictDocumentsTransformer"
            };

            var resultsSelector = function (dto) {
                return new conflictsInfo(dto);
            };
            var url = "/indexes/Raven/ConflictDocuments";
            var conflictsTask = $.Deferred();
            this.query(url, args, this.ownerDb, resultsSelector).fail(function (response) {
                return conflictsTask.reject(response);
            }).done(function (conflicts) {
                var items = conflicts.results;
                var resultsSet = new pagedResultSet(items, conflicts.totalResults);
                conflictsTask.resolve(resultsSet);
            });

            return conflictsTask;
        };
        return getConflictsCommand;
    })(commandBase);

    
    return getConflictsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getCSharpIndexDefinitionCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getCSharpIndexDefinitionCommand = (function (_super) {
        __extends(getCSharpIndexDefinitionCommand, _super);
        function getCSharpIndexDefinitionCommand(indexName, db) {
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
        }
        getCSharpIndexDefinitionCommand.prototype.execute = function () {
            var url = "/c-sharp-index-definition/" + this.indexName;
            return this.query(url, null, this.db);
        };
        return getCSharpIndexDefinitionCommand;
    })(commandBase);

    
    return getCSharpIndexDefinitionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getCustomColumnsCommand", ["require", "exports", "commands/getDocumentWithMetadataCommand"], function(require, exports, getDocumentWithMetadataCommand) {
    var getCustomColumnsCommand = (function (_super) {
        __extends(getCustomColumnsCommand, _super);
        function getCustomColumnsCommand(db, docName) {
            _super.call(this, docName, db, true);
            this.docName = docName;
        }
        getCustomColumnsCommand.prototype.execute = function () {
            return _super.prototype.execute.call(this);
        };

        getCustomColumnsCommand.forIndex = function (indexName, db) {
            return new getCustomColumnsCommand(db, getCustomColumnsCommand.docsPrefix + "Index/" + indexName);
        };

        getCustomColumnsCommand.forCollection = function (collection, db) {
            return new getCustomColumnsCommand(db, getCustomColumnsCommand.docsPrefix + "Collection/" + collection);
        };

        getCustomColumnsCommand.forAllDocuments = function (db) {
            return new getCustomColumnsCommand(db, getCustomColumnsCommand.docsPrefix + "AllDocuments");
        };
        getCustomColumnsCommand.docsPrefix = "Raven/Studio/Columns/";
        return getCustomColumnsCommand;
    })(getDocumentWithMetadataCommand);

    
    return getCustomColumnsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getCustomFunctionsCommand", ["require", "exports", "models/customFunctions", "commands/commandBase"], function(require, exports, customFunctions, commandBase) {
    var getCustomFunctionsCommand = (function (_super) {
        __extends(getCustomFunctionsCommand, _super);
        function getCustomFunctionsCommand(db) {
            _super.call(this);
            this.db = db;

            if (!db) {
                throw new Error("Must specify database");
            }
        }
        getCustomFunctionsCommand.prototype.execute = function () {
            var resultsSelector = function (queryResult) {
                return new customFunctions(queryResult);
            };
            var url = "/docs/Raven/Javascript/Functions";
            return this.query(url, null, this.db, resultsSelector);
        };
        return getCustomFunctionsCommand;
    })(commandBase);

    
    return getCustomFunctionsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getDatabasesCommand", ["require", "exports", "commands/commandBase", "models/database"], function(require, exports, commandBase, database) {
    var getDatabasesCommand = (function (_super) {
        __extends(getDatabasesCommand, _super);
        function getDatabasesCommand() {
            _super.apply(this, arguments);
        }
        getDatabasesCommand.prototype.execute = function () {
            var args = {
                pageSize: 1024,
                getAdditionalData: true
            };

            var url = "/databases";

            var resultsSelector = function (databases) {
                return databases.map(function (db) {
                    return new database(db.Name, db.Disabled, db.Bundles, db.IndexingDisabled, db.RejectClientsEnabled);
                });
            };
            return this.query(url, args, null, resultsSelector);
        };
        return getDatabasesCommand;
    })(commandBase);

    
    return getDatabasesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getDatabaseSettingsCommand", ["require", "exports", "commands/commandBase", "models/document"], function(require, exports, commandBase, document) {
    var getDatabaseSettingsCommand = (function (_super) {
        __extends(getDatabaseSettingsCommand, _super);
        function getDatabaseSettingsCommand(db, reportRefreshProgress) {
            if (typeof reportRefreshProgress === "undefined") { reportRefreshProgress = false; }
            _super.call(this);
            this.db = db;
            this.reportRefreshProgress = reportRefreshProgress;

            if (!db) {
                throw new Error("Must specify database");
            }
        }
        getDatabaseSettingsCommand.prototype.execute = function () {
            var _this = this;
            if (this.reportRefreshProgress) {
                this.reportInfo("Fetching Database Settings for '" + this.db.name + "'");
            }

            var resultsSelector = function (queryResult) {
                return new document(queryResult);
            };
            var url = "/admin/databases/" + this.db.name;
            var getTask = this.query(url, null, null, resultsSelector);

            if (this.reportRefreshProgress) {
                getTask.done(function () {
                    return _this.reportSuccess("Database Settings of '" + _this.db.name + "' were successfully refreshed!");
                });
                getTask.fail(function (response) {
                    return _this.reportError("Failed to refresh Database Settings!", response.responseText, response.statusText);
                });
            }
            return getTask;
        };
        return getDatabaseSettingsCommand;
    })(commandBase);

    
    return getDatabaseSettingsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getDatabaseStatsCommand", ["require", "exports", "commands/commandBase", "common/appUrl"], function(require, exports, commandBase, appUrl) {
    var getDatabaseStatsCommand = (function (_super) {
        __extends(getDatabaseStatsCommand, _super);
        function getDatabaseStatsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getDatabaseStatsCommand.prototype.execute = function () {
            var url = this.getQueryUrlFragment();
            return this.query(url, null, this.db);
        };

        getDatabaseStatsCommand.prototype.getQueryUrl = function () {
            return appUrl.forResourceQuery(this.db) + this.getQueryUrlFragment();
        };

        getDatabaseStatsCommand.prototype.getQueryUrlFragment = function () {
            return "/stats";
        };
        return getDatabaseStatsCommand;
    })(commandBase);

    
    return getDatabaseStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getDocRefsCommand", ["require", "exports", "common/pagedResultSet", "commands/commandBase"], function(require, exports, pagedResultSet, commandBase) {
    var getDocRefsCommand = (function (_super) {
        __extends(getDocRefsCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getDocRefsCommand(ownerDb, docId, skip, take) {
            _super.call(this);
            this.ownerDb = ownerDb;
            this.docId = docId;
            this.skip = skip;
            this.take = take;

            if (!this.ownerDb) {
                throw new Error("Must specify a database.");
            }
        }
        getDocRefsCommand.prototype.execute = function () {
            var args = {
                id: this.docId,
                start: this.skip,
                pageSize: this.take
            };

            var url = "/debug/docrefs";
            var docRefsTask = $.Deferred();
            this.query(url, args, this.ownerDb).fail(function (response) {
                return docRefsTask.reject(response);
            }).done(function (docRefs) {
                var items = $.map(docRefs.Results, function (r) {
                    return {
                        getId: function () {
                            return r;
                        },
                        getDocumentPropertyNames: function () {
                            return ["Id"];
                        }
                    };
                });
                var resultsSet = new pagedResultSet(items, docRefs.TotalCount);
                docRefsTask.resolve(resultsSet);
            });

            return docRefsTask;
        };
        return getDocRefsCommand;
    })(commandBase);

    
    return getDocRefsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getDocumentsByEntityNameCommand", ["require", "exports", "commands/commandBase", "models/collectionInfo", "common/pagedResultSet"], function(require, exports, commandBase, collectionInfo, pagedResultSet) {
    var getDocumentsByEntityNameCommand = (function (_super) {
        __extends(getDocumentsByEntityNameCommand, _super);
        function getDocumentsByEntityNameCommand(collection, skip, take) {
            _super.call(this);
            this.collection = collection;
            this.skip = skip;
            this.take = take;
        }
        getDocumentsByEntityNameCommand.prototype.execute = function () {
            var _this = this;
            var args = {
                query: "Tag:" + this.collection.name,
                start: this.skip,
                pageSize: this.take,
                sort: "-LastModifiedTicks"
            };

            var resultsSelector = function (dto) {
                return new collectionInfo(dto);
            };
            var url = "/indexes/Raven/DocumentsByEntityName";
            var documentsTask = $.Deferred();
            this.query(url, args, this.collection.ownerDatabase, resultsSelector).fail(function (response) {
                if (response.status == 500) {
                    // old style index, probably, try again without the LastModifiedTicks
                    args.sort = "-LastModified";
                    _this.query(url, args, _this.collection.ownerDatabase, resultsSelector).fail(function (_) {
                        return documentsTask.reject();
                    }).then(function (collection) {
                        var items = collection.results;
                        var resultSet = new pagedResultSet(items, collection.totalResults);
                        documentsTask.resolve(resultSet);
                    });
                    return;
                }
                documentsTask.reject();
            }).then(function (collection) {
                var items = collection.results;
                var resultSet = new pagedResultSet(items, collection.totalResults);
                documentsTask.resolve(resultSet);
            });
            return documentsTask;
        };
        return getDocumentsByEntityNameCommand;
    })(commandBase);

    
    return getDocumentsByEntityNameCommand;
});
/// <reference path="../models/dto.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getDocumentsMetadataByIDPrefixCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getDocumentsMetadataByIDPrefixCommand = (function (_super) {
        __extends(getDocumentsMetadataByIDPrefixCommand, _super);
        function getDocumentsMetadataByIDPrefixCommand(prefix, resultsAmount, db) {
            _super.call(this);
            this.prefix = prefix;
            this.resultsAmount = resultsAmount;
            this.db = db;
        }
        getDocumentsMetadataByIDPrefixCommand.prototype.execute = function () {
            var url = '/docs';
            var arguments = {
                'startsWith': this.prefix,
                'exclude': null,
                'start': 0,
                'pageSize': this.resultsAmount,
                'metadata-only': true
            };
            return this.query(url, arguments, this.db);
        };
        return getDocumentsMetadataByIDPrefixCommand;
    })(commandBase);

    
    return getDocumentsMetadataByIDPrefixCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getDocumentWithMetadataCommand", ["require", "exports", "commands/commandBase", "models/document"], function(require, exports, commandBase, document) {
    var getDocumentWithMetadataCommand = (function (_super) {
        __extends(getDocumentWithMetadataCommand, _super);
        function getDocumentWithMetadataCommand(id, db, shouldResolveNotFoundAsNull) {
            _super.call(this);
            this.id = id;
            this.db = db;

            if (!id) {
                throw new Error("Must specify ID");
            }

            if (!db) {
                throw new Error("Must specify database");
            }
            this.shouldResolveNotFoundAsNull = shouldResolveNotFoundAsNull || false;
        }
        getDocumentWithMetadataCommand.prototype.execute = function () {
            var _this = this;
            // Executing /queries will return the doc with the metadata.
            // We can do a GET call to /docs/<id>, however, it returns the metadata only as headers,
            // which can have some issues when querying via CORS.
            var documentResult = $.Deferred();
            var postResult = this.post("/queries", JSON.stringify([this.id]), this.db);
            postResult.fail(function (xhr) {
                return documentResult.fail(xhr);
            });
            postResult.done(function (queryResult) {
                if (queryResult.Results.length === 0) {
                    if (_this.shouldResolveNotFoundAsNull) {
                        documentResult.resolve(null);
                    } else {
                        documentResult.reject("Unable to find document with ID " + _this.id);
                    }
                } else {
                    documentResult.resolve(new document(queryResult.Results[0]));
                }
            });

            return documentResult;
        };
        return getDocumentWithMetadataCommand;
    })(commandBase);

    
    return getDocumentWithMetadataCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIdentitiesCommand", ["require", "exports", "common/pagedResultSet", "commands/commandBase"], function(require, exports, pagedResultSet, commandBase) {
    var getIdentitiesCommand = (function (_super) {
        __extends(getIdentitiesCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getIdentitiesCommand(ownerDb, skip, take) {
            _super.call(this);
            this.ownerDb = ownerDb;
            this.skip = skip;
            this.take = take;

            if (!this.ownerDb) {
                throw new Error("Must specify a database.");
            }
        }
        getIdentitiesCommand.prototype.execute = function () {
            var args = {
                start: this.skip,
                pageSize: this.take
            };

            var url = "/debug/identities";
            var identitiesTask = $.Deferred();
            this.query(url, args, this.ownerDb).fail(function (response) {
                return identitiesTask.reject(response);
            }).done(function (identities) {
                var items = $.map(identities.Identities, function (r) {
                    return {
                        getId: function () {
                            return r.Key;
                        },
                        'Value': r.Value,
                        'Key': r.Key,
                        getDocumentPropertyNames: function () {
                            return ["Key", "Value"];
                        }
                    };
                });
                console.log(items); //TODO: dlete me
                var resultsSet = new pagedResultSet(items, identities.TotalCount);
                identitiesTask.resolve(resultsSet);
            });

            return identitiesTask;
        };
        return getIdentitiesCommand;
    })(commandBase);

    
    return getIdentitiesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIndexDefinitionCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getIndexDefinitionCommand = (function (_super) {
        __extends(getIndexDefinitionCommand, _super);
        function getIndexDefinitionCommand(indexName, db) {
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
        }
        getIndexDefinitionCommand.prototype.execute = function () {
            var url = "/indexes/" + this.indexName + "?definition=yes";
            return this.query(url, null, this.db);
        };
        return getIndexDefinitionCommand;
    })(commandBase);

    
    return getIndexDefinitionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIndexesDefinitionsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getIndexesDefinitionsCommand = (function (_super) {
        __extends(getIndexesDefinitionsCommand, _super);
        function getIndexesDefinitionsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getIndexesDefinitionsCommand.prototype.execute = function () {
            var url = "/indexes";
            return this.query(url, null, this.db);
        };
        return getIndexesDefinitionsCommand;
    })(commandBase);

    
    return getIndexesDefinitionsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIndexingPerfStatsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getIndexingPerfStatsCommand = (function (_super) {
        __extends(getIndexingPerfStatsCommand, _super);
        function getIndexingPerfStatsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getIndexingPerfStatsCommand.prototype.execute = function () {
            var url = "/debug/indexing-perf-stats";
            return this.query(url, null, this.db);
        };
        return getIndexingPerfStatsCommand;
    })(commandBase);

    
    return getIndexingPerfStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIndexingStatusCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getIndexingStatusCommand = (function (_super) {
        __extends(getIndexingStatusCommand, _super);
        function getIndexingStatusCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getIndexingStatusCommand.prototype.execute = function () {
            var url = '/admin/indexingStatus';
            var result = this.query(url, null, this.db);
            return result;
        };
        return getIndexingStatusCommand;
    })(commandBase);

    
    return getIndexingStatusCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIndexMergeSuggestionsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getIndexMergeSuggestionsCommand = (function (_super) {
        __extends(getIndexMergeSuggestionsCommand, _super);
        function getIndexMergeSuggestionsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getIndexMergeSuggestionsCommand.prototype.execute = function () {
            var url = "/debug/suggest-index-merge";
            return this.query(url, null, this.db);
        };
        return getIndexMergeSuggestionsCommand;
    })(commandBase);

    
    return getIndexMergeSuggestionsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIndexSuggestionsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getIndexSuggestionsCommand = (function (_super) {
        __extends(getIndexSuggestionsCommand, _super);
        function getIndexSuggestionsCommand(db, indexName, field, term, distance, accuracy, maxSuggestions, popularity) {
            if (typeof distance === "undefined") { distance = "Default"; }
            if (typeof accuracy === "undefined") { accuracy = 0.4; }
            if (typeof maxSuggestions === "undefined") { maxSuggestions = 5; }
            if (typeof popularity === "undefined") { popularity = true; }
            _super.call(this);
            this.db = db;
            this.indexName = indexName;
            this.field = field;
            this.term = term;
            this.distance = distance;
            this.accuracy = accuracy;
            this.maxSuggestions = maxSuggestions;
            this.popularity = popularity;
        }
        getIndexSuggestionsCommand.prototype.execute = function () {
            var url = '/suggest/' + this.indexName;
            var args = {
                term: this.term,
                field: this.field,
                max: this.maxSuggestions,
                distance: this.distance,
                accuracy: this.accuracy,
                popularity: this.popularity
            };

            return this.query(url, args, this.db);
        };
        return getIndexSuggestionsCommand;
    })(commandBase);

    
    return getIndexSuggestionsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getIndexTermsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getIndexTermsCommand = (function (_super) {
        __extends(getIndexTermsCommand, _super);
        function getIndexTermsCommand(indexName, field, db) {
            _super.call(this);
            this.indexName = indexName;
            this.field = field;
            this.db = db;
        }
        getIndexTermsCommand.prototype.execute = function () {
            var urlArgs = {
                field: this.field,
                pageSize: 1024
            };
            var url = "/terms/" + this.indexName + this.urlEncodeArgs(urlArgs);
            return this.query(url, null, this.db);
        };
        return getIndexTermsCommand;
    })(commandBase);

    
    return getIndexTermsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getInfoPackage", ["require", "exports", "commands/commandBase", 'jszip/jszip-utils.min', 'common/appUrl', "d3/d3"], function(require, exports, commandBase, zipUtils, appUrl, d3) {
    var getInfoPackage = (function (_super) {
        __extends(getInfoPackage, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getInfoPackage(db, withStackTrace) {
            _super.call(this);
            this.db = db;
            this.withStackTrace = withStackTrace;
        }
        getInfoPackage.prototype.execute = function () {
            var task = $.Deferred();
            var url = appUrl.forResourceQuery(this.db) + (this.db.isSystem ? '/admin/debug/info-package' : '/debug/info-package');
            if (this.withStackTrace && this.db.isSystem) {
                url += "?stacktrace";
            }
            var now = d3.time.format("%Y-%m-%d_%H:%M:%S")(new Date());
            var filename = this.db.isSystem ? "Admin-Debug-Info-" + now + ".zip" : "Debug-Info-" + this.db.name + "-" + now + ".zip";

            zipUtils.getBinaryContent(url, function (err, data) {
                if (err) {
                    task.reject(err);
                } else {
                    task.resolve(data, filename);
                }
            });

            return task.promise();
        };
        return getInfoPackage;
    })(commandBase);

    
    return getInfoPackage;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getKillQueryCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getKillQueryCommand = (function (_super) {
        __extends(getKillQueryCommand, _super);
        function getKillQueryCommand(db, queryId) {
            _super.call(this);
            this.db = db;
            this.queryId = queryId;
        }
        getKillQueryCommand.prototype.execute = function () {
            var _this = this;
            var url = "/admin/killQuery";
            var args = {
                id: this.queryId
            };
            return this.query(url, args, this.db).fail(function (response) {
                return _this.reportError("Failed to kill query", response.responseText, response.statusText);
            });
        };
        return getKillQueryCommand;
    })(commandBase);

    
    return getKillQueryCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getLatestServerBuildVersionCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getLatestServerBuildVersionCommand = (function (_super) {
        __extends(getLatestServerBuildVersionCommand, _super);
        function getLatestServerBuildVersionCommand(stableOnly) {
            if (typeof stableOnly === "undefined") { stableOnly = true; }
            _super.call(this);
            this.stableOnly = stableOnly;
        }
        getLatestServerBuildVersionCommand.prototype.execute = function () {
            var args = {
                stableOnly: this.stableOnly
            };

            return this.query("/studio-tasks/latest-server-build-version", args);
        };
        return getLatestServerBuildVersionCommand;
    })(commandBase);

    
    return getLatestServerBuildVersionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getLicenseStatusCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getLicenseStatusCommand = (function (_super) {
        __extends(getLicenseStatusCommand, _super);
        function getLicenseStatusCommand() {
            _super.apply(this, arguments);
        }
        getLicenseStatusCommand.prototype.execute = function () {
            return this.query("/license/status", null);
        };
        return getLicenseStatusCommand;
    })(commandBase);

    
    return getLicenseStatusCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getLogsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getLogsCommand = (function (_super) {
        __extends(getLogsCommand, _super);
        function getLogsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getLogsCommand.prototype.execute = function () {
            var url = "/logs";
            return this.query(url, null, this.db);
        };
        return getLogsCommand;
    })(commandBase);

    
    return getLogsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getNewEncryptionKey", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getNewEncryptionKey = (function (_super) {
        __extends(getNewEncryptionKey, _super);
        function getNewEncryptionKey() {
            _super.call(this);
        }
        getNewEncryptionKey.prototype.execute = function () {
            var key = this.query("/studio-tasks/new-encryption-key", null, null);
            return key;
        };
        return getNewEncryptionKey;
    })(commandBase);

    
    return getNewEncryptionKey;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getOperationAlertsCommand", ["require", "exports", "commands/commandBase", "models/alert"], function(require, exports, commandBase, alert) {
    var getOperationAlertsCommand = (function (_super) {
        __extends(getOperationAlertsCommand, _super);
        function getOperationAlertsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getOperationAlertsCommand.prototype.execute = function () {
            var url = "/operation/alerts";

            return this.query(url, null, this.db, function (result) {
                return result.map(function (a) {
                    return new alert(a);
                });
            });
        };
        return getOperationAlertsCommand;
    })(commandBase);

    
    return getOperationAlertsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getOperationStatusCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getOperationStatusCommand = (function (_super) {
        __extends(getOperationStatusCommand, _super);
        /**
        * @param db - The database the collection belongs to.
        * @param operationId - The id of the operation.
        */
        function getOperationStatusCommand(db, operationId) {
            _super.call(this);
            this.db = db;
            this.operationId = operationId;

            if (!this.db) {
                throw new Error("Must specify a database.");
            }
        }
        getOperationStatusCommand.prototype.execute = function () {
            var url = "/operation/status";

            var args = {
                id: this.operationId
            };

            return this.query(url, args, this.db);
        };
        return getOperationStatusCommand;
    })(commandBase);

    
    return getOperationStatusCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getPatchesCommand", ["require", "exports", "commands/commandBase", "models/patchDocument"], function(require, exports, commandBase, patchDocument) {
    var getPatchesCommand = (function (_super) {
        __extends(getPatchesCommand, _super);
        function getPatchesCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getPatchesCommand.prototype.execute = function () {
            var args = {
                startsWith: "Studio/Patch/",
                exclude: null,
                start: 0,
                pageSize: 256
            };

            return this.query("/docs", args, this.db, function (dtos) {
                return dtos.map(function (dto) {
                    return new patchDocument(dto);
                });
            });
        };
        return getPatchesCommand;
    })(commandBase);

    
    return getPatchesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getPeriodicExportSetupCommand", ["require", "exports", "commands/getDocumentWithMetadataCommand"], function(require, exports, getDocumentWithMetadataCommand) {
    var getPeriodicExportSetupCommand = (function (_super) {
        __extends(getPeriodicExportSetupCommand, _super);
        function getPeriodicExportSetupCommand(db) {
            _super.call(this, "Raven/Backup/Periodic/Setup", db);
        }
        getPeriodicExportSetupCommand.prototype.execute = function () {
            return _super.prototype.execute.call(this);
        };
        return getPeriodicExportSetupCommand;
    })(getDocumentWithMetadataCommand);

    
    return getPeriodicExportSetupCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getReplicationPerfStatsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getReplicationPerfStatsCommand = (function (_super) {
        __extends(getReplicationPerfStatsCommand, _super);
        function getReplicationPerfStatsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getReplicationPerfStatsCommand.prototype.execute = function () {
            var url = "/debug/replication-perf-stats";
            return this.query(url, null, this.db);
        };
        return getReplicationPerfStatsCommand;
    })(commandBase);

    
    return getReplicationPerfStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getReplicationsCommand", ["require", "exports", "commands/getDocumentWithMetadataCommand"], function(require, exports, getDocumentWithMetadataCommand) {
    var getReplicationsCommand = (function (_super) {
        __extends(getReplicationsCommand, _super);
        function getReplicationsCommand(db) {
            _super.call(this, "Raven/Replication/Destinations", db);
        }
        getReplicationsCommand.prototype.execute = function () {
            return _super.prototype.execute.call(this);
        };
        return getReplicationsCommand;
    })(getDocumentWithMetadataCommand);

    
    return getReplicationsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getReplicationSourcesCommand", ["require", "exports", "commands/commandBase", "models/database"], function(require, exports, commandBase, database) {
    var getReplicationSourcesCommand = (function (_super) {
        __extends(getReplicationSourcesCommand, _super);
        function getReplicationSourcesCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getReplicationSourcesCommand.prototype.execute = function () {
            var _this = this;
            var args = {
                startsWith: "Raven/Replication/Sources",
                exclude: null,
                start: 0,
                pageSize: 1024
            };

            return this.query("/docs", args, this.db, function (dtos) {
                var result = {};

                // insert remote databases info
                dtos.forEach(function (v) {
                    return result[v.ServerInstanceId] = database.getNameFromUrl(v.Source);
                });

                // ... and insert local database instance id
                result[_this.db.statistics().DatabaseId] = _this.db.name;

                return result;
            });
        };
        return getReplicationSourcesCommand;
    })(commandBase);

    
    return getReplicationSourcesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getReplicationStatsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getReplicationStatsCommand = (function (_super) {
        __extends(getReplicationStatsCommand, _super);
        function getReplicationStatsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getReplicationStatsCommand.prototype.execute = function () {
            return this.query("/replication/info", null, this.db);
        };
        return getReplicationStatsCommand;
    })(commandBase);

    
    return getReplicationStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getReplicationTopology", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getReplicationTopology = (function (_super) {
        __extends(getReplicationTopology, _super);
        function getReplicationTopology(db) {
            _super.call(this);
            this.db = db;
        }
        getReplicationTopology.prototype.execute = function () {
            return this.post("/admin/replication/topology/view", null, this.db).then(function (result) {
                return result;
            });
        };
        return getReplicationTopology;
    })(commandBase);

    
    return getReplicationTopology;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getRunningTasksCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getRunningTasksCommand = (function (_super) {
        __extends(getRunningTasksCommand, _super);
        function getRunningTasksCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getRunningTasksCommand.prototype.execute = function () {
            var url = "/operations";
            return this.query(url, null, this.db);
        };
        return getRunningTasksCommand;
    })(commandBase);

    
    return getRunningTasksCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getScriptedIndexesCommand", ["require", "exports", "commands/commandBase", "models/scriptedIndex"], function(require, exports, commandBase, scriptedIndex) {
    var getScriptedIndexesCommand = (function (_super) {
        __extends(getScriptedIndexesCommand, _super);
        function getScriptedIndexesCommand(db, indexName) {
            if (typeof indexName === "undefined") { indexName = ""; }
            _super.call(this);
            this.db = db;
            this.indexName = indexName;
        }
        getScriptedIndexesCommand.prototype.execute = function () {
            var args = {
                startsWith: "Raven/ScriptedIndexResults/" + this.indexName,
                exclude: null,
                start: 0,
                pageSize: 256
            };

            return this.query("/docs", args, this.db, function (dtos) {
                return dtos.map(function (dto) {
                    return new scriptedIndex(dto);
                });
            });
        };
        return getScriptedIndexesCommand;
    })(commandBase);

    
    return getScriptedIndexesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getServerBuildVersionCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getServerBuildVersionCommand = (function (_super) {
        __extends(getServerBuildVersionCommand, _super);
        function getServerBuildVersionCommand() {
            _super.apply(this, arguments);
        }
        getServerBuildVersionCommand.prototype.execute = function () {
            return this.query("/build/version", null);
        };
        return getServerBuildVersionCommand;
    })(commandBase);

    
    return getServerBuildVersionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getServerPrefixForHiLoCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getServerPrefixForHiLoCommand = (function (_super) {
        __extends(getServerPrefixForHiLoCommand, _super);
        function getServerPrefixForHiLoCommand(db) {
            _super.call(this);
            this.db = db;

            if (!db) {
                throw new Error("Must specify database");
            }
        }
        getServerPrefixForHiLoCommand.prototype.execute = function () {
            var resultsSelector = function (queryResult) {
                return queryResult.ServerPrefix;
            };
            var url = "/docs/Raven/ServerPrefixForHilo";
            return this.query(url, null, this.db, resultsSelector);
        };
        return getServerPrefixForHiLoCommand;
    })(commandBase);

    
    return getServerPrefixForHiLoCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getSingleAuthTokenCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getSingleAuthTokenCommand = (function (_super) {
        __extends(getSingleAuthTokenCommand, _super);
        function getSingleAuthTokenCommand(resource, checkIfMachineAdmin) {
            if (typeof checkIfMachineAdmin === "undefined") { checkIfMachineAdmin = false; }
            _super.call(this);
            this.resource = resource;
            this.checkIfMachineAdmin = checkIfMachineAdmin;

            if (this.resource == null) {
                throw new Error("Must specify resource");
            }
        }
        getSingleAuthTokenCommand.prototype.execute = function () {
            var url = "/singleAuthToken";
            var args = null;

            if (this.checkIfMachineAdmin) {
                args = {
                    CheckIfMachineAdmin: true
                };
            }

            var getTask = this.query(url, args, this.resource);

            return getTask;
        };
        return getSingleAuthTokenCommand;
    })(commandBase);

    
    return getSingleAuthTokenCommand;
});
/// <reference path="../models/dto.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getSingleTransformerCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getSingleTransformerCommand = (function (_super) {
        __extends(getSingleTransformerCommand, _super);
        function getSingleTransformerCommand(tranName, db) {
            _super.call(this);
            this.tranName = tranName;
            this.db = db;
        }
        getSingleTransformerCommand.prototype.execute = function () {
            var getTransformerUrl = "/transformers/" + this.tranName;
            return this.query(getTransformerUrl, null, this.db);
        };
        return getSingleTransformerCommand;
    })(commandBase);

    
    return getSingleTransformerCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getSqlReplicationPerfStatsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getSqlReplicationPerfStatsCommand = (function (_super) {
        __extends(getSqlReplicationPerfStatsCommand, _super);
        function getSqlReplicationPerfStatsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getSqlReplicationPerfStatsCommand.prototype.execute = function () {
            var url = "/debug/sql-replication-perf-stats";
            return this.query(url, null, this.db);
        };
        return getSqlReplicationPerfStatsCommand;
    })(commandBase);

    
    return getSqlReplicationPerfStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getSqlReplicationsCommand", ["require", "exports", "commands/commandBase", "models/sqlReplication"], function(require, exports, commandBase, sqlReplication) {
    var getSqlReplicationsCommand = (function (_super) {
        __extends(getSqlReplicationsCommand, _super);
        function getSqlReplicationsCommand(db, sqlReplicationName) {
            if (typeof sqlReplicationName === "undefined") { sqlReplicationName = null; }
            _super.call(this);
            this.db = db;
            this.sqlReplicationName = sqlReplicationName;
        }
        getSqlReplicationsCommand.prototype.execute = function () {
            var args = {
                startsWith: "Raven/SqlReplication/Configuration/",
                exclude: null,
                start: 0,
                pageSize: 256
            };

            return this.query("/docs", args, this.db, function (dtos) {
                return dtos.map(function (dto) {
                    return new sqlReplication(dto);
                });
            });
        };
        return getSqlReplicationsCommand;
    })(commandBase);

    
    return getSqlReplicationsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getSqlReplicationStatsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getSqlReplicationStatsCommand = (function (_super) {
        __extends(getSqlReplicationStatsCommand, _super);
        function getSqlReplicationStatsCommand(ownerDb, sqlReplicationName) {
            _super.call(this);
            this.ownerDb = ownerDb;
            this.sqlReplicationName = sqlReplicationName;

            if (!this.ownerDb) {
                throw new Error("Must specify a database.");
            }
        }
        getSqlReplicationStatsCommand.prototype.execute = function () {
            var args = {
                sqlReplicationName: this.sqlReplicationName
            };

            var url = "/studio-tasks/get-sql-replication-stats";

            var resultsSelector = function (result) {
                result.Value["Name"] = result.Key;
                var replicationDto = result.Value;
                return replicationDto;
            };
            return this.query(url, args, this.ownerDb, resultsSelector);
        };
        return getSqlReplicationStatsCommand;
    })(commandBase);

    
    return getSqlReplicationStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugChangesCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugChangesCommand = (function (_super) {
        __extends(getStatusDebugChangesCommand, _super);
        function getStatusDebugChangesCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugChangesCommand.prototype.execute = function () {
            var url = "/debug/changes";
            return this.query(url, null, this.db);
        };
        return getStatusDebugChangesCommand;
    })(commandBase);

    
    return getStatusDebugChangesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugConfigCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugConfigCommand = (function (_super) {
        __extends(getStatusDebugConfigCommand, _super);
        function getStatusDebugConfigCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugConfigCommand.prototype.execute = function () {
            var url = "/debug/config";
            return this.query(url, null, this.db);
        };
        return getStatusDebugConfigCommand;
    })(commandBase);

    
    return getStatusDebugConfigCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugCurrentlyIndexingCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugCurrentlyIndexingCommand = (function (_super) {
        __extends(getStatusDebugCurrentlyIndexingCommand, _super);
        function getStatusDebugCurrentlyIndexingCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugCurrentlyIndexingCommand.prototype.execute = function () {
            var url = "/debug/currently-indexing";
            return this.query(url, null, this.db);
        };
        return getStatusDebugCurrentlyIndexingCommand;
    })(commandBase);

    
    return getStatusDebugCurrentlyIndexingCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugIndexFieldsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugIndexFieldsCommand = (function (_super) {
        __extends(getStatusDebugIndexFieldsCommand, _super);
        function getStatusDebugIndexFieldsCommand(db, indexStr) {
            _super.call(this);
            this.db = db;
            this.indexStr = indexStr;
        }
        getStatusDebugIndexFieldsCommand.prototype.execute = function () {
            var url = "/debug/index-fields";
            return this.post(url, this.indexStr, this.db);
        };
        return getStatusDebugIndexFieldsCommand;
    })(commandBase);

    
    return getStatusDebugIndexFieldsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugMetricsCommand", ["require", "exports", "commands/commandBase", "common/appUrl"], function(require, exports, commandBase, appUrl) {
    var getStatusDebugMetricsCommand = (function (_super) {
        __extends(getStatusDebugMetricsCommand, _super);
        function getStatusDebugMetricsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugMetricsCommand.prototype.execute = function () {
            var url = this.getQueryUrlFragment();
            return this.query(url, null, this.db);
        };

        getStatusDebugMetricsCommand.prototype.getQueryUrl = function () {
            return appUrl.forResourceQuery(this.db) + this.getQueryUrlFragment();
        };

        getStatusDebugMetricsCommand.prototype.getQueryUrlFragment = function () {
            return "/debug/metrics";
        };
        return getStatusDebugMetricsCommand;
    })(commandBase);

    
    return getStatusDebugMetricsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugQueriesCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugQueriesCommand = (function (_super) {
        __extends(getStatusDebugQueriesCommand, _super);
        function getStatusDebugQueriesCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugQueriesCommand.prototype.execute = function () {
            var url = "/debug/queries";
            var resultSelector = function (result) {
                return $.map(result, function (queries, key) {
                    return { "IndexName": key, "Queries": queries };
                });
            };
            return this.query(url, null, this.db, resultSelector);
        };
        return getStatusDebugQueriesCommand;
    })(commandBase);

    
    return getStatusDebugQueriesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugRequestTracingCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugRequestTracingommand = (function (_super) {
        __extends(getStatusDebugRequestTracingommand, _super);
        function getStatusDebugRequestTracingommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugRequestTracingommand.prototype.execute = function () {
            var url = "/debug/request-tracing";
            return this.query(url, null, this.db);
        };
        return getStatusDebugRequestTracingommand;
    })(commandBase);

    
    return getStatusDebugRequestTracingommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugRoutesCommand", ["require", "exports", "commands/commandBase", "common/appUrl"], function(require, exports, commandBase, appUrl) {
    var getStatusDebugConfigCommand = (function (_super) {
        __extends(getStatusDebugConfigCommand, _super);
        function getStatusDebugConfigCommand() {
            _super.call(this);
        }
        getStatusDebugConfigCommand.prototype.execute = function () {
            var url = "/debug/routes";
            var db = appUrl.getSystemDatabase();
            return this.query(url, null, db);
        };
        return getStatusDebugConfigCommand;
    })(commandBase);

    
    return getStatusDebugConfigCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugSlowDocCountsCommand", ["require", "exports", "commands/commandBase", "models/debugDocumentStats"], function(require, exports, commandBase, debugDocumentStats) {
    var getStatusDebugSlowDocCountsCommand = (function (_super) {
        __extends(getStatusDebugSlowDocCountsCommand, _super);
        function getStatusDebugSlowDocCountsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugSlowDocCountsCommand.prototype.execute = function () {
            var url = "/debug/sl0w-d0c-c0unts";
            var resultSelector = function (result) {
                return new debugDocumentStats(result);
            };
            return this.query(url, null, this.db, resultSelector);
        };
        return getStatusDebugSlowDocCountsCommand;
    })(commandBase);

    
    return getStatusDebugSlowDocCountsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugSqlReplicationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugSqlReplicationCommand = (function (_super) {
        __extends(getStatusDebugSqlReplicationCommand, _super);
        function getStatusDebugSqlReplicationCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugSqlReplicationCommand.prototype.execute = function () {
            var url = "/debug/sql-replication-stats";
            return this.query(url, null, this.db);
        };
        return getStatusDebugSqlReplicationCommand;
    })(commandBase);

    
    return getStatusDebugSqlReplicationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getStatusDebugTasksCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getStatusDebugTasksCommand = (function (_super) {
        __extends(getStatusDebugTasksCommand, _super);
        function getStatusDebugTasksCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getStatusDebugTasksCommand.prototype.execute = function () {
            var url = "/debug/tasks";
            return this.query(url, null, this.db);
        };
        return getStatusDebugTasksCommand;
    })(commandBase);

    
    return getStatusDebugTasksCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getSystemDocumentCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getSystemDocumentCommand = (function (_super) {
        __extends(getSystemDocumentCommand, _super);
        function getSystemDocumentCommand(id) {
            _super.call(this);
            this.id = id;
        }
        getSystemDocumentCommand.prototype.execute = function () {
            var deferred = $.Deferred();

            var url = "/docs/" + this.id;
            var docQuery = this.query(url, null, null);
            docQuery.done(function (dto) {
                return deferred.resolve(dto);
            });
            docQuery.fail(function (response) {
                return deferred.reject(response);
            });

            return deferred;
        };
        return getSystemDocumentCommand;
    })(commandBase);

    
    return getSystemDocumentCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getSystemDocumentsCommand", ["require", "exports", "commands/commandBase", "models/document", "common/pagedResultSet"], function(require, exports, commandBase, document, pagedResultSet) {
    var getSystemDocumentsCommand = (function (_super) {
        __extends(getSystemDocumentsCommand, _super);
        function getSystemDocumentsCommand(db, skip, take) {
            _super.call(this);
            this.db = db;
            this.skip = skip;
            this.take = take;
        }
        getSystemDocumentsCommand.prototype.execute = function () {
            // To get system docs, we just call /docs asking for docs that start with "Raven/".
            // Unfortunately, this returns a plain array; it doesn't tell how many *total* system docs there are.
            // This means we can't really do proper paging.
            var args = {
                startsWith: "Raven/",
                exclude: null,
                start: this.skip,
                pageSize: this.take
            };

            var deferred = $.Deferred();
            var docsQuery = this.query("/docs", args, this.db, function (dtos) {
                return dtos.map(function (dto) {
                    return new document(dto);
                });
            });
            docsQuery.done(function (results) {
                var documents = results.map(function (dto) {
                    return new document(dto);
                });
                var totalResultCount = documents.length;
                var resultSet = new pagedResultSet(documents, totalResultCount);
                deferred.resolve(resultSet);
            });
            docsQuery.fail(function (response) {
                return deferred.reject(response);
            });

            return deferred;
        };
        return getSystemDocumentsCommand;
    })(commandBase);

    
    return getSystemDocumentsCommand;
});
/// <reference path="../models/dto.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getTransformersCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getTransformersCommand = (function (_super) {
        __extends(getTransformersCommand, _super);
        function getTransformersCommand(db, skip, take) {
            if (typeof skip === "undefined") { skip = 0; }
            if (typeof take === "undefined") { take = 256; }
            _super.call(this);
            this.db = db;
            this.skip = skip;
            this.take = take;
        }
        getTransformersCommand.prototype.execute = function () {
            var args = {
                start: this.skip,
                pageSize: this.take
            };
            var url = "/transformers" + this.urlEncodeArgs(args);
            return this.query(url, null, this.db);
        };
        return getTransformersCommand;
    })(commandBase);

    
    return getTransformersCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getUserInfoCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getUserInfoCommand = (function (_super) {
        __extends(getUserInfoCommand, _super);
        function getUserInfoCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getUserInfoCommand.prototype.execute = function () {
            var url = "/debug/user-info";
            return this.query(url, null, this.db);
        };
        return getUserInfoCommand;
    })(commandBase);

    
    return getUserInfoCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getVersioningsCommand", ["require", "exports", "commands/commandBase", "models/versioningEntry"], function(require, exports, commandBase, versioningEntry) {
    var getVersioningsCommand = (function (_super) {
        __extends(getVersioningsCommand, _super);
        function getVersioningsCommand(db) {
            _super.call(this);
            this.db = db;
        }
        getVersioningsCommand.prototype.execute = function () {
            var documentResult = $.Deferred();
            var resultsSelector = function (result) {
                return result.map(function (dto) {
                    return new versioningEntry(dto, true);
                });
            };
            var url = "/docs";
            var args = {
                startsWith: "Raven/Versioning",
                start: 0,
                pageSize: 1024
            };

            var postResult = this.query(url, args, this.db, resultsSelector);
            postResult.fail(function (xhr) {
                return documentResult.fail(xhr);
            });
            postResult.done(function (entries) {
                return documentResult.resolve(entries);
            });
            return documentResult;
        };
        return getVersioningsCommand;
    })(commandBase);

    
    return getVersioningsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/getWindowsAuthCommand", ["require", "exports", "commands/commandBase", "models/windowsAuthSetup"], function(require, exports, commandBase, windowsAuthSetup) {
    var getWindowsAuthCommand = (function (_super) {
        __extends(getWindowsAuthCommand, _super);
        function getWindowsAuthCommand() {
            _super.apply(this, arguments);
        }
        getWindowsAuthCommand.prototype.execute = function () {
            return this.query("/docs", { id: "Raven/Authorization/WindowsSettings" }, null, function (dto) {
                return new windowsAuthSetup(dto);
            });
        };
        return getWindowsAuthCommand;
    })(commandBase);

    
    return getWindowsAuthCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/importDatabaseCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var importDatabaseCommand = (function (_super) {
        __extends(importDatabaseCommand, _super);
        function importDatabaseCommand(fileData, batchSize, includeExpiredDocuments, operateOnTypes, filters, transformScript, db) {
            _super.call(this);
            this.fileData = fileData;
            this.batchSize = batchSize;
            this.includeExpiredDocuments = includeExpiredDocuments;
            this.operateOnTypes = operateOnTypes;
            this.filters = filters;
            this.transformScript = transformScript;
            this.db = db;
        }
        importDatabaseCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Importing data...");

            var args = {
                batchSize: this.batchSize,
                includeExpiredDocuments: this.includeExpiredDocuments,
                operateOnTypes: this.operateOnTypes.reduce(function (first, second) {
                    return first | second;
                }, 0),
                filtersPipeDelimited: this.filters.map(function (f) {
                    return f.Path + ";;;" + f.Values[0] + ";;;" + f.ShouldMatch;
                }).join("|||") || "",
                transformScript: this.transformScript || ""
            };

            var url = "/studio-tasks/import" + this.urlEncodeArgs(args);
            var ajaxOptions = {
                processData: false,
                contentType: false
            };
            var importTask = this.post(url, this.fileData, this.db, ajaxOptions);
            importTask.done(function () {
                return _this.reportInfo("Data was uploaded successfully, processing...");
            });
            importTask.fail(function (response) {
                return _this.reportError("Failed to upload data", response.responseText, response.statusText);
            });
            return importTask;
        };
        return importDatabaseCommand;
    })(commandBase);

    
    return importDatabaseCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/ioTestCommand", ["require", "exports", "commands/commandBase", "common/appUrl", 'commands/getOperationStatusCommand'], function(require, exports, commandBase, appUrl, getOperationStatusCommand) {
    var ioTestCommand = (function (_super) {
        __extends(ioTestCommand, _super);
        function ioTestCommand(db, testParameters) {
            _super.call(this);
            this.db = db;
            this.testParameters = testParameters;
            this.operationIdTask = $.Deferred();
        }
        ioTestCommand.prototype.execute = function () {
            var _this = this;
            var promise = $.Deferred();
            var url = '/admin/ioTest';
            this.post(url, ko.toJSON(this.testParameters), null).done(function (result) {
                _this.operationIdTask.resolve(result.OperationId);
                _this.monitorIoTest(promise, result.OperationId);
            }).fail(function (response) {
                _this.reportError("Failed to start disk IO test!", response.responseText, response.statusText);
                promise.reject();
            });
            return promise;
        };

        ioTestCommand.prototype.monitorIoTest = function (parentPromise, operationId) {
            var _this = this;
            new getOperationStatusCommand(appUrl.getSystemDatabase(), operationId).execute().done(function (result) {
                if (result.Completed) {
                    if (result.Faulted) {
                        _this.reportError("Failed to perform disk IO test!", result.State.Error);
                        parentPromise.reject();
                    } else {
                        _this.reportSuccess("Disk IO test completed");
                        parentPromise.resolve();
                    }
                } else {
                    setTimeout(function () {
                        return _this.monitorIoTest(parentPromise, operationId);
                    }, 500);
                }
            });
        };
        return ioTestCommand;
    })(commandBase);

    
    return ioTestCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/killRunningTaskCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var killRunningTaskCommand = (function (_super) {
        __extends(killRunningTaskCommand, _super);
        function killRunningTaskCommand(db, taskId) {
            _super.call(this);
            this.db = db;
            this.taskId = taskId;
        }
        killRunningTaskCommand.prototype.execute = function () {
            var url = "/operation/kill";
            var args = {
                id: this.taskId
            };
            return this.query(url, args, this.db);
        };
        return killRunningTaskCommand;
    })(commandBase);

    
    return killRunningTaskCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/monitorRestoreCommand", ["require", "exports", "commands/commandBase", "models/database", "commands/getDocumentWithMetadataCommand"], function(require, exports, commandBase, database, getDocumentWithMetadataCommand) {
    var monitorRestoreCommand = (function (_super) {
        __extends(monitorRestoreCommand, _super);
        function monitorRestoreCommand(parentPromise, updateRestoreStatus) {
            _super.call(this);
            this.parentPromise = parentPromise;
            this.updateRestoreStatus = updateRestoreStatus;
            this.db = new database("<system>");
        }
        monitorRestoreCommand.prototype.execute = function () {
            var _this = this;
            new getDocumentWithMetadataCommand("Raven/Restore/Status", this.db).execute().fail(function (response) {
                setTimeout(function () {
                    return _this.execute();
                }, 1000);
            }).done(function (restoreStatus) {
                var lastMessage = restoreStatus.Messages.last();
                var isRestoreFinished = lastMessage.contains("The new database was created") || lastMessage.contains("Restore Canceled") || lastMessage.contains("A database name must be supplied if the restore location does not contain a valid Database.Document file") || lastMessage.contains("Cannot do an online restore for the <system> database") || lastMessage.contains("Restore ended but could not create the datebase document, in order to access the data create a database with the appropriate name");

                restoreStatus.IsRunning = !isRestoreFinished;
                _this.updateRestoreStatus(restoreStatus);

                if (!isRestoreFinished) {
                    setTimeout(function () {
                        return _this.execute();
                    }, 1000);
                } else {
                    _this.reportSuccess("Database was successfully restored!");
                    _this.parentPromise.resolve();
                }
            });
            return this.parentPromise;
        };
        return monitorRestoreCommand;
    })(commandBase);

    
    return monitorRestoreCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/queryFacetsCommand", ["require", "exports", "commands/commandBase", "common/pagedResultSet", "models/facet", "models/document"], function(require, exports, commandBase, pagedResultSet, facet, document) {
    var queryFacetsCommand = (function (_super) {
        __extends(queryFacetsCommand, _super);
        function queryFacetsCommand(indexName, queryText, skip, take, facets, db) {
            _super.call(this);
            this.indexName = indexName;
            this.queryText = queryText;
            this.skip = skip;
            this.take = take;
            this.facets = facets;
            this.db = db;
        }
        queryFacetsCommand.prototype.execute = function () {
            var _this = this;
            var argsUrl = this.urlEncodeArgs({
                query: this.queryText ? this.queryText : undefined,
                facetStart: this.skip,
                facetPageSize: this.take,
                facets: JSON.stringify(this.facets)
            });
            var url = "/facets/" + this.indexName + argsUrl;

            // Querying facets returns a facetResultSetDto. We need to massage that
            // data into something that can be displayed in the grid: the pagedResultSet.
            var finishedTask = $.Deferred();
            this.query(url, null, this.db).fail(function (response) {
                _this.reportError("Unable to run query.", response.responseText, response.statusText);
                finishedTask.reject(response);
            }).done(function (results) {
                finishedTask.resolve(_this.parseResults(results));
            });

            return finishedTask;
        };

        queryFacetsCommand.prototype.parseResults = function (resultSet) {
            var items = [];
            var totalItemCount = 0;

            // The .Results property contains properties in the form of [facet name]-[facet aggregation field].
            // For example: Company-Total
            // Each of these properties will be of type facetResultDto.
            // In the UI, we display these as "[facet aggregation] of [facet aggregation field]", e.g. "Count of Total".
            var propIndex = 0;
            for (var prop in resultSet.Results) {
                var facetResult = resultSet.Results[prop];
                var propNameParts = prop.split('-');
                var facetName = propNameParts[0];
                var aggregateField = propNameParts[1];
                var correspondingFacet = this.facets[propIndex];
                var facetAggregationLabel = facet.getLabelForAggregation(correspondingFacet.Aggregation);
                totalItemCount = facetResult.Values.length + facetResult.RemainingTermsCount + this.skip;

                for (var i = 0; i < facetResult.Values.length; i++) {
                    var facetValue = facetResult.Values[i];
                    var item = items[i];
                    if (!item) {
                        item = new document({});
                        items[i] = item;
                    }

                    item['Key'] = facetValue.Range;

                    for (var power = 0; power < 5; power++) {
                        var curFieldName = facet.getLabelForAggregation(Math.pow(2, power));
                        var curFieldVal = facetValue[curFieldName];

                        if (!!curFieldVal) {
                            if (typeof curFieldVal === "number") {
                                var fixedVal = curFieldVal.toFixed(2);
                                if (fixedVal != curFieldVal) {
                                    curFieldVal = fixedVal;
                                }
                            }
                            item[curFieldName + " of " + aggregateField] = curFieldVal;
                        }
                    }
                    //  item[facetAggregationLabel + " of " + aggregateField] = facetValue[facetAggregationLabel];
                }

                propIndex++;
            }

            return new pagedResultSet(items, totalItemCount, resultSet.Duration);
        };
        return queryFacetsCommand;
    })(commandBase);

    
    return queryFacetsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/queryIndexCommand", ["require", "exports", "commands/commandBase", "models/document", "common/pagedResultSet"], function(require, exports, commandBase, document, pagedResultSet) {
    var queryIndexCommand = (function (_super) {
        __extends(queryIndexCommand, _super);
        function queryIndexCommand(indexName, db, skip, take, queryText, sorts, transformerQuery, showFields, indexEntries, useAndOperator) {
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
            this.skip = skip;
            this.take = take;
            this.queryText = queryText;
            this.sorts = sorts;
            this.transformerQuery = transformerQuery;
            this.showFields = showFields;
            this.indexEntries = indexEntries;
            this.useAndOperator = useAndOperator;
        }
        queryIndexCommand.prototype.execute = function () {
            var _this = this;
            var selector = function (results) {
                return new pagedResultSet(results.Results.map(function (d) {
                    return new document(d);
                }), results.TotalResults, results);
            };
            var queryTask = this.query(this.getUrl(), null, this.db, selector);
            queryTask.fail(function (response) {
                return _this.reportError("Error querying index", response.responseText, response.statusText);
            });

            return queryTask;
        };

        queryIndexCommand.prototype.getUrl = function () {
            var url = "/indexes/" + this.indexName;

            //var resultsTransformerUrlFragment = this.transformer && this.transformer.name() ? "&resultsTransformer=" + this.transformer.name() : ""; // This should not be urlEncoded, as it breaks the query.
            var resultsTransformerUrlFragment = (this.transformerQuery ? this.transformerQuery.toUrl() : "");
            var urlArgs = this.urlEncodeArgs({
                query: this.queryText ? this.queryText : undefined,
                start: this.skip,
                pageSize: this.take,
                sort: this.sorts.map(function (s) {
                    return s.toQuerySortString();
                }),
                fetch: this.showFields ? "__all_fields" : undefined,
                debug: this.indexEntries ? "entries" : undefined,
                operator: this.useAndOperator ? "AND" : undefined
            }) + resultsTransformerUrlFragment;

            return url + urlArgs;
        };

        queryIndexCommand.prototype.getCsvUrl = function () {
            var url = "/streams/query/" + this.indexName;
            var resultsTransformerUrlFragment = (this.transformerQuery ? this.transformerQuery.toUrl() : "");
            var urlArgs = this.urlEncodeArgs({
                query: this.queryText ? this.queryText : undefined,
                sort: this.sorts.map(function (s) {
                    return s.toQuerySortString();
                }),
                fetch: this.showFields ? "__all_fields" : undefined,
                debug: this.indexEntries ? "entries" : undefined,
                operator: this.useAndOperator ? "AND" : undefined,
                format: "excel",
                download: true
            }) + resultsTransformerUrlFragment;

            return url + urlArgs;
        };
        return queryIndexCommand;
    })(commandBase);

    
    return queryIndexCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/queryIndexDebugAfterReduceCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var queryIndexDebugAfterReduceCommand = (function (_super) {
        __extends(queryIndexDebugAfterReduceCommand, _super);
        function queryIndexDebugAfterReduceCommand(indexName, db, reduceKeys) {
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
            this.reduceKeys = reduceKeys;
        }
        queryIndexDebugAfterReduceCommand.prototype.execute = function () {
            var args = {
                debug: "entries",
                reduceKeys: this.reduceKeys.join(",")
            };
            var url = "/indexes/" + this.indexName;
            return this.query(url, args, this.db, function (r) {
                return r.Results;
            });
        };
        return queryIndexDebugAfterReduceCommand;
    })(commandBase);

    
    return queryIndexDebugAfterReduceCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/queryIndexDebugDocsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var queryIndexDebugDocsCommand = (function (_super) {
        __extends(queryIndexDebugDocsCommand, _super);
        function queryIndexDebugDocsCommand(indexName, db, startsWith, skip, take) {
            if (typeof skip === "undefined") { skip = 0; }
            if (typeof take === "undefined") { take = 256; }
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
            this.startsWith = startsWith;
            this.skip = skip;
            this.take = take;
        }
        queryIndexDebugDocsCommand.prototype.execute = function () {
            var args = {
                start: this.skip,
                pageSize: this.take,
                debug: "docs",
                startsWith: this.startsWith
            };

            var url = "/indexes/" + this.indexName;
            return this.query(url, args, this.db, function (r) {
                return r.Results;
            });
        };
        return queryIndexDebugDocsCommand;
    })(commandBase);

    
    return queryIndexDebugDocsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/queryIndexDebugMapCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var queryIndexDebugMapCommand = (function (_super) {
        __extends(queryIndexDebugMapCommand, _super);
        function queryIndexDebugMapCommand(indexName, db, args, skip, take) {
            if (typeof skip === "undefined") { skip = 0; }
            if (typeof take === "undefined") { take = 256; }
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
            this.args = args;
            this.skip = skip;
            this.take = take;
        }
        queryIndexDebugMapCommand.prototype.execute = function () {
            var baseArgs = {
                start: this.skip,
                pageSize: this.take,
                debug: "map"
            };

            var url = "/indexes/" + this.indexName;
            return this.query(url, $.extend({}, baseArgs, this.args), this.db, function (r) {
                return r.Results;
            });
        };
        return queryIndexDebugMapCommand;
    })(commandBase);

    
    return queryIndexDebugMapCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/queryIndexDebugReduceCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var queryIndexDebugReduceCommand = (function (_super) {
        __extends(queryIndexDebugReduceCommand, _super);
        function queryIndexDebugReduceCommand(indexName, db, level, key, skip, take) {
            if (typeof skip === "undefined") { skip = 0; }
            if (typeof take === "undefined") { take = 256; }
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
            this.level = level;
            this.key = key;
            this.skip = skip;
            this.take = take;
        }
        queryIndexDebugReduceCommand.prototype.execute = function () {
            var args = {
                start: this.skip,
                pageSize: this.take,
                debug: "reduce",
                key: this.key,
                level: this.level
            };
            var url = "/indexes/" + this.indexName;
            return this.query(url, args, this.db, function (r) {
                return r.Results;
            });
        };
        return queryIndexDebugReduceCommand;
    })(commandBase);

    
    return queryIndexDebugReduceCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/resetIndexCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var resetIndexCommand = (function (_super) {
        __extends(resetIndexCommand, _super);
        function resetIndexCommand(indexNameToReset, db) {
            _super.call(this);
            this.indexNameToReset = indexNameToReset;
            this.db = db;
        }
        resetIndexCommand.prototype.execute = function () {
            var _this = this;
            var url = "/indexes/" + this.indexNameToReset;
            return this.reset(url, null, this.db).done(function () {
                return _this.reportSuccess("Index " + _this.indexNameToReset + " successfully reset");
            }).fail(function (response) {
                return _this.reportError("Failed to reset index: " + _this.indexNameToReset, response.responseText, response.statusText);
            });
        };
        return resetIndexCommand;
    })(commandBase);

    
    return resetIndexCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/resetSqlReplicationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var resetSqlReplicationCommand = (function (_super) {
        __extends(resetSqlReplicationCommand, _super);
        function resetSqlReplicationCommand(db, sqlReplicationName) {
            _super.call(this);
            this.db = db;
            this.sqlReplicationName = sqlReplicationName;
        }
        resetSqlReplicationCommand.prototype.execute = function () {
            var args = { sqlReplicationName: this.sqlReplicationName };
            var url = "/studio-tasks/reset-sql-replication" + _super.prototype.urlEncodeArgs.call(this, args);
            return this.post(url, null, this.db);
        };
        return resetSqlReplicationCommand;
    })(commandBase);
    
    return resetSqlReplicationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/resolveMergeCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var resolveMergeCommand = (function (_super) {
        __extends(resolveMergeCommand, _super);
        function resolveMergeCommand(db, documentId) {
            _super.call(this);
            this.db = db;
            this.documentId = documentId;
        }
        resolveMergeCommand.prototype.execute = function () {
            var url = "/databases/" + this.db.name + "/studio-tasks/resolveMerge";
            var args = {
                documentId: this.documentId
            };
            var task = this.query(url, args);
            return task;
        };
        return resolveMergeCommand;
    })(commandBase);

    
    return resolveMergeCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveAlertsCommand", ["require", "exports", "commands/saveDocumentCommand", "models/document"], function(require, exports, saveDocumentCommand, document) {
    var saveAlertsCommand = (function (_super) {
        __extends(saveAlertsCommand, _super);
        function saveAlertsCommand(alertDoc, db) {
            var doc = new document(alertDoc);
            _super.call(this, "Raven/Alerts", doc, db);
        }
        return saveAlertsCommand;
    })(saveDocumentCommand);

    
    return saveAlertsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveApiKeysCommand", ["require", "exports", "commands/executeBulkDocsCommand", "models/database"], function(require, exports, executeBulkDocsCommand, database) {
    var saveApiKeysCommand = (function (_super) {
        __extends(saveApiKeysCommand, _super);
        function saveApiKeysCommand(apiKeys, deletedApiKeys, db) {
            var newApiKeysBulkDocs = apiKeys.map(function (k) {
                return k.toBulkDoc("PUT");
            });
            var deletedApiKeysBulkDocs = deletedApiKeys.map(function (k) {
                return k.toBulkDoc("DELETE");
            });
            _super.call(this, newApiKeysBulkDocs.concat(deletedApiKeysBulkDocs), new database("<system>"));
        }
        saveApiKeysCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving API keys...");

            return _super.prototype.execute.call(this).fail(function (result) {
                return _this.reportError("Unable to save API keys.", result.responseText, result.statusText);
            }).done(function () {
                return _this.reportSuccess("Saved API keys.");
            });
        };
        return saveApiKeysCommand;
    })(executeBulkDocsCommand);

    
    return saveApiKeysCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveAutomaticConflictResolutionDocument", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveAutomaticConflictResolutionDocument = (function (_super) {
        __extends(saveAutomaticConflictResolutionDocument, _super);
        function saveAutomaticConflictResolutionDocument(dto, db) {
            _super.call(this);
            this.dto = dto;
            this.db = db;
        }
        saveAutomaticConflictResolutionDocument.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving automatic conflict resolution settings.");
            return this.saveConfig().done(function () {
                return _this.reportSuccess("Saved automatic conflict resolution settings.");
            }).fail(function (response) {
                return _this.reportError("Failed to save automatic conflict resolution settings.", response.responseText);
            });
        };

        saveAutomaticConflictResolutionDocument.prototype.saveConfig = function () {
            var id = "Raven/Replication/Config";
            var url = "/docs/" + id;
            var putArgs = JSON.stringify(this.dto);
            return this.put(url, putArgs, this.db);
        };
        return saveAutomaticConflictResolutionDocument;
    })(commandBase);

    
    return saveAutomaticConflictResolutionDocument;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveAutomaticConflictResolutionDocumentCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveAutomaticConflictResolutionDocumentCommand = (function (_super) {
        __extends(saveAutomaticConflictResolutionDocumentCommand, _super);
        function saveAutomaticConflictResolutionDocumentCommand(dto, db) {
            _super.call(this);
            this.dto = dto;
            this.db = db;
        }
        saveAutomaticConflictResolutionDocumentCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving automatic conflict resolution settings.");
            return this.saveConfig().done(function () {
                return _this.reportSuccess("Saved automatic conflict resolution settings.");
            }).fail(function (response) {
                return _this.reportError("Failed to save automatic conflict resolution settings.", response.responseText, response.statusText);
            });
        };

        saveAutomaticConflictResolutionDocumentCommand.prototype.saveConfig = function () {
            var id = "Raven/Replication/Config";
            var url = "/docs/" + id;
            var putArgs = JSON.stringify(this.dto);
            return this.put(url, putArgs, this.db);
        };
        return saveAutomaticConflictResolutionDocumentCommand;
    })(commandBase);

    
    return saveAutomaticConflictResolutionDocumentCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveBulkOfDocuments", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveBulkOfDocuments = (function (_super) {
        __extends(saveBulkOfDocuments, _super);
        function saveBulkOfDocuments(dataTypes, bulkDocuments, db) {
            _super.call(this);
            this.dataTypes = dataTypes;
            this.bulkDocuments = bulkDocuments;
            this.db = db;
        }
        // performs bulk save of an array of objects
        saveBulkOfDocuments.prototype.execute = function () {
            var _this = this;
            var saveBulkTask = this.post("/bulk_docs", ko.toJSON(this.bulkDocuments), this.db);
            this.reportInfo("Performing bulk save of " + this.dataTypes);

            saveBulkTask.done(function () {
                return _this.reportSuccess("Saved all bulk of documents");
            });
            saveBulkTask.fail(function (response) {
                return _this.reportError("Failed to save bulk of documents", response.responseText, response.statusText);
            });

            return saveBulkTask;
        };
        return saveBulkOfDocuments;
    })(commandBase);

    
    return saveBulkOfDocuments;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveCsvFileCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveCsvFileCommand = (function (_super) {
        __extends(saveCsvFileCommand, _super);
        function saveCsvFileCommand(fileData, fileName, db) {
            _super.call(this);
            this.fileData = fileData;
            this.fileName = fileName;
            this.db = db;
        }
        saveCsvFileCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Importing...");

            var customHeaders = {
                'X-FileName': this.fileName
            };

            var jQueryOptions = {
                headers: customHeaders,
                processData: false,
                contentType: false,
                dataType: 'text'
            };
            var saveTask = this.post("/studio-tasks/loadCsvFile", this.fileData, this.db, jQueryOptions);
            saveTask.done(function () {
                return _this.reportSuccess("CSV file imported");
            });
            saveTask.fail(function (response) {
                return _this.reportError("Failed to import CSV file", response.responseText, response.statusText);
            });
            return saveTask;
        };
        return saveCsvFileCommand;
    })(commandBase);

    
    return saveCsvFileCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveCustomFunctionsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveCustomFunctionsCommand = (function (_super) {
        __extends(saveCustomFunctionsCommand, _super);
        function saveCustomFunctionsCommand(db, toSave) {
            _super.call(this);
            this.db = db;
            this.toSave = toSave;

            if (!db) {
                throw new Error("Must specify database");
            }
        }
        saveCustomFunctionsCommand.prototype.validateCustomFunctions = function (document) {
            return this.post("/studio-tasks/validateCustomFunctions", document, this.db, { dataType: 'text' });
        };

        saveCustomFunctionsCommand.prototype.execute = function () {
            var _this = this;
            var args = JSON.stringify(this.toSave.toDto());

            return this.validateCustomFunctions(args).fail(function (response) {
                return _this.reportError("Failed to validate custom functions!", response.responseText, response.statusText);
            }).then(function () {
                var url = "/docs/Raven/Javascript/Functions";
                var saveTask = _this.put(url, args, _this.db, null);

                saveTask.done(function () {
                    return _this.reportSuccess("Custom functions saved!");
                });
                saveTask.fail(function (response) {
                    return _this.reportError("Failed to save custom functions!", response.responseText, response.statusText);
                });
                return saveTask;
            });
        };
        return saveCustomFunctionsCommand;
    })(commandBase);

    
    return saveCustomFunctionsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveDatabaseSettingsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveDatabaseSettingsCommand = (function (_super) {
        __extends(saveDatabaseSettingsCommand, _super);
        function saveDatabaseSettingsCommand(db, document) {
            _super.call(this);
            this.db = db;
            this.document = document;

            if (!db) {
                throw new Error("Must specify database");
            }
        }
        saveDatabaseSettingsCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving Database Settings for '" + this.db.name + "'...");

            var jQueryOptions = {
                headers: {
                    'If-None-Match': this.document.__metadata.etag,
                    'Raven-Temp-Allow-Bundles-Change': this.document.__metadata['Raven-Temp-Allow-Bundles-Change']
                }
            };

            var args = JSON.stringify(this.document.toDto());
            var url = "/admin/databases/" + this.db.name;
            var saveTask = this.put(url, args, null, jQueryOptions);

            saveTask.done(function () {
                return _this.reportSuccess("Database Settings of '" + _this.db.name + "' were successfully saved!");
            });
            saveTask.fail(function (response) {
                return _this.reportError("Failed to save Database Settings!", response.responseText, response.statusText);
            });
            return saveTask;
        };
        return saveDatabaseSettingsCommand;
    })(commandBase);

    
    return saveDatabaseSettingsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveDocumentCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveDocumentCommand = (function (_super) {
        __extends(saveDocumentCommand, _super);
        function saveDocumentCommand(id, document, db, reportSaveProgress) {
            if (typeof reportSaveProgress === "undefined") { reportSaveProgress = true; }
            _super.call(this);
            this.id = id;
            this.document = document;
            this.db = db;
            this.reportSaveProgress = reportSaveProgress;
        }
        saveDocumentCommand.prototype.execute = function () {
            var _this = this;
            if (this.reportSaveProgress) {
                this.reportInfo("Saving " + this.id + "...");
            }

            var customHeaders = {
                'Raven-Client-Version': commandBase.ravenClientVersion
            };

            var metadataDto = this.document.__metadata.toDto();

            for (var key in metadataDto) {
                if (key.indexOf('@') !== 0) {
                    customHeaders[key] = metadataDto[key];
                }
            }

            var jQueryOptions = {
                headers: customHeaders
            };

            var documentDto = this.document.toDto(false);

            var commands = [];
            commands.push({
                Method: "PUT",
                Key: this.id,
                Document: documentDto,
                Metadata: metadataDto
            });

            var args = ko.toJSON(commands);
            var url = "/bulk_docs";
            var saveTask = this.post(url, args, this.db, jQueryOptions);

            if (this.reportSaveProgress) {
                saveTask.done(function () {
                    return _this.reportSuccess("Saved " + _this.id);
                });
                saveTask.fail(function (response) {
                    return _this.reportError("Failed to save " + _this.id, response.responseText, response.statusText);
                });
            }

            return saveTask;
        };
        return saveDocumentCommand;
    })(commandBase);

    
    return saveDocumentCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveIndexAsPersistentCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveIndexAsPersistentCommand = (function (_super) {
        __extends(saveIndexAsPersistentCommand, _super);
        function saveIndexAsPersistentCommand(indexToPersist, db) {
            _super.call(this);
            this.indexToPersist = indexToPersist;
            this.db = db;
        }
        saveIndexAsPersistentCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Persisting " + this.indexToPersist.name + "...");

            // Deliberately not URL-encoding index name, as it causes the operation to fail on the server.
            var url = "/indexes/" + this.indexToPersist.name + "?op=forceWriteToDisk";
            var saveTask = this.post(url, null, this.db);
            saveTask.done(function () {
                _this.reportSuccess("Persisted " + _this.indexToPersist.name);
                _this.indexToPersist.isOnRam("false");
            });
            saveTask.fail(function (response) {
                return _this.reportError("Failed to persist " + _this.indexToPersist.name, response.responseText, response.statusText);
            });

            return saveTask;
        };
        return saveIndexAsPersistentCommand;
    })(commandBase);

    
    return saveIndexAsPersistentCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveIndexDefinitionCommand", ["require", "exports", "commands/commandBase", "models/index"], function(require, exports, commandBase, index) {
    var saveIndexDefinitionCommand = (function (_super) {
        __extends(saveIndexDefinitionCommand, _super);
        function saveIndexDefinitionCommand(index, priority, db) {
            _super.call(this);
            this.index = index;
            this.priority = priority;
            this.db = db;
        }
        saveIndexDefinitionCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving " + this.index.Name + "...");

            // Saving an index definition requires 2 steps:
            // 1. PUT the index definition to / indexes / [index name]? definition = yes
            // 2. POST the index priority to / indexes / set - priority / [indexname]? priority = [priority]
            //
            // These must be done in sequence because the index definition may be brand new, and thus setting the priority must wait for index creation.
            var result = $.Deferred();
            var runSavePriority = function () {
                return _this.savePriority().fail(function (response) {
                    _this.reportWarning("Index was saved, but failed to set its priority.", response.responseText, response.statusText);
                    result.reject(response);
                }).done(function () {
                    _this.reportSuccess("Saved " + _this.index.Name + ".");
                    result.resolve();
                });
            };

            this.saveDefinition().fail(function (response) {
                _this.reportError("Failed to save " + _this.index.Name, response.responseText, response.statusText);
                result.reject(response);
            }).done(function () {
                return runSavePriority();
            });

            return result;
        };

        saveIndexDefinitionCommand.prototype.savePriority = function () {
            // Note: don't URL encode the priority. Doing so busts Raven's handler.
            var url = "/indexes/set-priority/" + this.index.Name + "?priority=" + index.priorityToString(this.priority);
            return this.post(url, null, this.db, { dataType: undefined });
        };

        saveIndexDefinitionCommand.prototype.saveDefinition = function () {
            var urlArgs = {
                definition: "yes"
            };
            var putArgs = JSON.stringify(this.index);
            var url = "/indexes/" + this.index.Name + this.urlEncodeArgs(urlArgs);
            return this.put(url, putArgs, this.db);
        };
        return saveIndexDefinitionCommand;
    })(commandBase);

    
    return saveIndexDefinitionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveIndexLockModeCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveIndexLockModeCommand = (function (_super) {
        __extends(saveIndexLockModeCommand, _super);
        /*
        * @param lockMode Should be either "Unlock", "LockedIngore", or "LockedError".
        */
        function saveIndexLockModeCommand(index, lockMode, db) {
            _super.call(this);
            this.index = index;
            this.lockMode = lockMode;
            this.db = db;
        }
        saveIndexLockModeCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving " + this.index.name + "...");
            var args = {
                op: "lockModeChange",
                mode: this.lockMode
            };

            // Deliberately not encoding index name in URI. Doing this breaks Raven's URL handling, resulting in a 400 bad request.
            var url = "/indexes/" + this.index.name + this.urlEncodeArgs(args);
            var saveTask = this.post(url, JSON.stringify(args), this.db, { dataType: 'text' });
            saveTask.done(function () {
                return _this.reportSuccess("Saved " + _this.index.name);
            });
            saveTask.fail(function (response) {
                return _this.reportError("Failed to save this" + _this.index.name, response.responseText);
            });

            return saveTask;
        };
        return saveIndexLockModeCommand;
    })(commandBase);

    
    return saveIndexLockModeCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/savePatchCommand", ["require", "exports", "commands/commandBase", 'commands/saveDocumentCommand'], function(require, exports, commandBase, saveDocumentCommand) {
    var savePatchCommand = (function (_super) {
        __extends(savePatchCommand, _super);
        function savePatchCommand(patchName, patchDocument, db) {
            _super.call(this);
            this.patchName = patchName;
            this.patchDocument = patchDocument;
            this.db = db;
        }
        savePatchCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving Patch.");
            return new saveDocumentCommand("Studio/Patch/" + this.patchName, this.patchDocument, this.db, false).execute().done(function () {
                return _this.reportSuccess("Saved Patch.");
            }).fail(function (response) {
                return _this.reportError("Failed to save Patch.", response.responseText, response.statusText);
            });
        };
        return savePatchCommand;
    })(commandBase);
    
    return savePatchCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/savePeriodicExportSetupCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var savePeriodicExportSetupCommand = (function (_super) {
        __extends(savePeriodicExportSetupCommand, _super);
        function savePeriodicExportSetupCommand(setupToPersist, db) {
            _super.call(this);
            this.setupToPersist = setupToPersist;
            this.db = db;
        }
        savePeriodicExportSetupCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving Periodic Export setup.");
            return $.when(this.saveAccountInformation(), this.saveSetup()).done(function () {
                return _this.reportSuccess("Saved Periodic Export setup.");
            }).fail(function (response) {
                return _this.reportError("Failed to save Periodic Export setup.", response.responseText);
            });
        };

        savePeriodicExportSetupCommand.prototype.saveAccountInformation = function () {
            var jQueryOptions = {
                headers: {
                    'If-None-Match': this.setupToPersist.getEtag()
                }
            };
            var url = "/admin/databases/" + this.db.name;
            var putArgs = JSON.stringify(this.setupToPersist.toDatabaseSettingsDto());
            return this.put(url, putArgs, null, jQueryOptions);
        };

        savePeriodicExportSetupCommand.prototype.saveSetup = function () {
            var url = "/docs/Raven/Backup/Periodic/Setup";
            var putArgs = JSON.stringify(this.setupToPersist.toDto());
            return this.put(url, putArgs, this.db);
        };
        return savePeriodicExportSetupCommand;
    })(commandBase);
    
    return savePeriodicExportSetupCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveReplicationDocument", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveReplicationDocument = (function (_super) {
        __extends(saveReplicationDocument, _super);
        function saveReplicationDocument(dto, db) {
            _super.call(this);
            this.dto = dto;
            this.db = db;
        }
        saveReplicationDocument.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving Replication settings.");
            return this.saveSetup().done(function () {
                return _this.reportSuccess("Saved Replication settings.");
            }).fail(function (response) {
                return _this.reportError("Failed to save Replication settings.", response.responseText);
            });
        };

        saveReplicationDocument.prototype.saveSetup = function () {
            var id = "Raven/Replication/Destinations";
            var url = "/docs/" + id;
            var putArgs = JSON.stringify(this.dto);
            return this.put(url, putArgs, this.db);
        };
        return saveReplicationDocument;
    })(commandBase);

    
    return saveReplicationDocument;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveReplicationDocumentCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveReplicationDocumentCommand = (function (_super) {
        __extends(saveReplicationDocumentCommand, _super);
        function saveReplicationDocumentCommand(dto, db) {
            _super.call(this);
            this.dto = dto;
            this.db = db;
        }
        saveReplicationDocumentCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving Replication settings.");
            return this.saveSetup().done(function () {
                return _this.reportSuccess("Saved Replication settings.");
            }).fail(function (response) {
                return _this.reportError("Failed to save Replication settings.", response.responseText, response.statusText);
            });
        };

        saveReplicationDocumentCommand.prototype.saveSetup = function () {
            var id = "Raven/Replication/Destinations";
            var url = "/docs/" + id;
            var putArgs = JSON.stringify(this.dto);
            return this.put(url, putArgs, this.db);
        };
        return saveReplicationDocumentCommand;
    })(commandBase);

    
    return saveReplicationDocumentCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveScriptedIndexesCommand", ["require", "exports", "commands/executeBulkDocsCommand"], function(require, exports, executeBulkDocsCommand) {
    var saveScriptedIndexesCommand = (function (_super) {
        __extends(saveScriptedIndexesCommand, _super);
        function saveScriptedIndexesCommand(scriptedIndexes, db) {
            _super.call(this, scriptedIndexes.map(function (idx) {
                return (idx.isMarkedToDelete()) ? idx.toBulkDoc("DELETE") : idx.toBulkDoc("PUT");
            }), db);
            this.scriptedIndexes = scriptedIndexes;
        }
        saveScriptedIndexesCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving Scripted Index...");

            return _super.prototype.execute.call(this).fail(function (result) {
                return _this.reportError("Unable to save Scripted Index.", result.responseText, result.statusText);
            }).done(function () {
                return _this.reportSuccess("Saved Scripted Index.");
            });
        };
        return saveScriptedIndexesCommand;
    })(executeBulkDocsCommand);

    
    return saveScriptedIndexesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveSqlReplicationsCommand", ["require", "exports", "commands/executeBulkDocsCommand"], function(require, exports, executeBulkDocsCommand) {
    var saveSqlReplicationsCommand = (function (_super) {
        __extends(saveSqlReplicationsCommand, _super);
        function saveSqlReplicationsCommand(onScreenReplications, deletedReplications, db) {
            var bulkPutReplications = onScreenReplications.map(function (sr) {
                return sr.toBulkDoc("PUT");
            });
            var bulkDeleteReplications = deletedReplications.map(function (sr) {
                return sr.toBulkDoc("DELETE");
            });
            _super.call(this, bulkPutReplications.concat(bulkDeleteReplications), db);
        }
        saveSqlReplicationsCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving SQL replications...");

            return _super.prototype.execute.call(this).fail(function (result) {
                return _this.reportError("Unable to save SQL replications.", result.responseText, result.statusText);
            }).done(function () {
                return _this.reportSuccess("Saved SQL replications.");
            });
        };
        return saveSqlReplicationsCommand;
    })(executeBulkDocsCommand);

    
    return saveSqlReplicationsCommand;
});
/// <reference path="../models/dto.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveTransformerCommand", ["require", "exports", "commands/commandBase", "commands/getSingleTransformerCommand", "models/transformer"], function(require, exports, commandBase, getSingleTransformerCommand, transformer) {
    var saveTransformerCommand = (function (_super) {
        __extends(saveTransformerCommand, _super);
        function saveTransformerCommand(trans, db) {
            _super.call(this);
            this.trans = trans;
            this.db = db;
        }
        saveTransformerCommand.prototype.execute = function () {
            var _this = this;
            var doneTask = $.Deferred();

            var saveTransformerUrl = "/transformers/" + this.trans.name();
            var saveTransformerPutArgs = JSON.stringify(this.trans.toSaveDto());

            this.put(saveTransformerUrl, saveTransformerPutArgs, this.db).fail(function (result) {
                _this.reportError("Unable to save transformer", result.responseText, result.statusText);
                doneTask.reject(result);
            }).done(function (result) {
                doneTask.resolve();
                new getSingleTransformerCommand(result.Transformer, _this.db).execute().fail(function (xhr) {
                    return doneTask.reject(xhr);
                }).done(function (savedTransformer) {
                    _this.reportSuccess("Saved " + _this.trans.name());
                    doneTask.resolve(new transformer().initFromSave(savedTransformer));
                });
            });

            return doneTask;
        };
        return saveTransformerCommand;
    })(commandBase);

    
    return saveTransformerCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveVersioningCommand", ["require", "exports", "models/document", "commands/commandBase", "commands/saveBulkOfDocuments"], function(require, exports, document, commandBase, saveBulkOfDocuments) {
    var saveVersioningCommand = (function (_super) {
        __extends(saveVersioningCommand, _super);
        function saveVersioningCommand(db, versioningEntries, removeEntries) {
            if (typeof removeEntries === "undefined") { removeEntries = []; }
            _super.call(this);
            this.db = db;
            this.versioningEntries = versioningEntries;
            this.removeEntries = removeEntries;
        }
        saveVersioningCommand.prototype.execute = function () {
            var commands = [];

            this.versioningEntries.forEach(function (dto) {
                var entry = new document(dto);
                commands.push({
                    Key: "Raven/Versioning/" + entry["Id"],
                    Method: "PUT",
                    Document: entry.toDto(false),
                    Metadata: entry.__metadata.toDto(),
                    Etag: entry.__metadata.etag
                });
            });

            this.removeEntries.forEach(function (dto) {
                var entry = new document(dto);
                commands.push({
                    Key: "Raven/Versioning/" + entry["Id"],
                    Method: "DELETE",
                    Etag: entry.__metadata.etag
                });
            });

            var saveTask = new saveBulkOfDocuments("versioning", commands, this.db).execute();
            return saveTask;
        };
        return saveVersioningCommand;
    })(commandBase);

    
    return saveVersioningCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/saveWindowsAuthCommand", ["require", "exports", "commands/commandBase", "commands/getLicenseStatusCommand"], function(require, exports, commandBase, getLicenseStatusCommand) {
    var saveWindowsAuthCommand = (function (_super) {
        __extends(saveWindowsAuthCommand, _super);
        function saveWindowsAuthCommand(dto) {
            _super.call(this);
            this.dto = dto;
        }
        saveWindowsAuthCommand.prototype.execute = function () {
            return this.fetchLicenseStatus();
        };

        saveWindowsAuthCommand.prototype.fetchLicenseStatus = function () {
            var _this = this;
            return new getLicenseStatusCommand().execute().done(function (result) {
                return _this.handleLicenseStatus(result);
            });
        };

        saveWindowsAuthCommand.prototype.handleLicenseStatus = function (licenseStatus) {
            //if (licenseStatus.IsCommercial || licenseStatus.ValidCommercialLicenseSeen) {
            this.performWithCommercialLicense();
            //} else {
            //this.reportWarning("Cannot setup Windows Authentication without a valid commercial license.");
            //}
        };

        saveWindowsAuthCommand.prototype.performWithCommercialLicense = function () {
            if (this.dto.RequiredUsers.concat(this.dto.RequiredGroups).every(function (element) {
                return (element.Name.indexOf("\\") !== -1);
            })) {
                this.performSave();
            } else {
                this.reportWarning("Windows Authentication not saved! All names must have \"\\\" in them.");
            }
        };

        saveWindowsAuthCommand.prototype.performSave = function () {
            var _this = this;
            this.reportInfo("Saving Windows Authentication settings.");
            this.saveSetup().done(function () {
                return _this.reportSuccess("Saved Windows Authentication settings.");
            }).fail(function (response) {
                return _this.reportError("Failed to save Windows Authentication settings.", response.responseText, response.statusText);
            });
        };

        saveWindowsAuthCommand.prototype.saveSetup = function () {
            var id = "Raven/Authorization/WindowsSettings";
            var url = "/docs/" + id;
            var putArgs = JSON.stringify(this.dto);
            return this.put(url, putArgs, null);
        };
        return saveWindowsAuthCommand;
    })(commandBase);

    
    return saveWindowsAuthCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/simulateSqlReplicationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var simulateSqlReplicationCommand = (function (_super) {
        __extends(simulateSqlReplicationCommand, _super);
        function simulateSqlReplicationCommand(db, simulatedSqlReplication, documentId, performRolledbackTransaction) {
            _super.call(this);
            this.db = db;
            this.simulatedSqlReplication = simulatedSqlReplication;
            this.documentId = documentId;
            this.performRolledbackTransaction = performRolledbackTransaction;
        }
        simulateSqlReplicationCommand.prototype.execute = function () {
            var args = {
                documentId: this.documentId,
                performRolledBackTransaction: this.performRolledbackTransaction,
                sqlReplication: JSON.stringify(this.simulatedSqlReplication.toDto())
            };

            return this.query("/studio-tasks/simulate-sql-replication", args, this.db, null, 60000);
        };
        return simulateSqlReplicationCommand;
    })(commandBase);

    
    return simulateSqlReplicationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/startIndexingCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var startIndexingCommand = (function (_super) {
        __extends(startIndexingCommand, _super);
        function startIndexingCommand(db) {
            _super.call(this);
            this.db = db;
        }
        startIndexingCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Enabling indexing...");

            var url = '/admin/startIndexing';
            var createTask = this.post(url, null, this.db);
            createTask.done(function () {
                return _this.reportSuccess("Indexing was enabled");
            });
            createTask.fail(function (response) {
                return _this.reportError("Failed to enable indexing", response.responseText, response.statusText);
            });

            return createTask;
        };
        return startIndexingCommand;
    })(commandBase);

    
    return startIndexingCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/startRestoreCommand", ["require", "exports", "commands/deleteDocumentCommand", "commands/commandBase", "models/database", "commands/monitorRestoreCommand"], function(require, exports, deleteDocumentCommand, commandBase, database, monitorRestoreCommand) {
    var startRestoreCommand = (function (_super) {
        __extends(startRestoreCommand, _super);
        function startRestoreCommand(defrag, restoreRequest, updateRestoreStatus) {
            _super.call(this);
            this.defrag = defrag;
            this.restoreRequest = restoreRequest;
            this.updateRestoreStatus = updateRestoreStatus;
            this.db = new database("<system>");
        }
        startRestoreCommand.prototype.execute = function () {
            var _this = this;
            var result = $.Deferred();

            new deleteDocumentCommand('Raven/Restore/Status', this.db).execute().fail(function (response) {
                _this.reportError("Failed to delete restore status document!", response.responseText, response.statusText);
                result.reject();
            }).done(function (_) {
                _this.post('/admin/restore?defrag=' + _this.defrag, ko.toJSON(_this.restoreRequest), null, { dataType: 'text' }).fail(function (response) {
                    _this.reportError("Failed to restore backup!", response.responseText, response.statusText);
                    _this.logError(response, result);
                }).done(function () {
                    return new monitorRestoreCommand(result, _this.updateRestoreStatus).execute();
                });
            });

            return result;
        };

        startRestoreCommand.prototype.logError = function (response, result) {
            var r = JSON.parse(response.responseText);
            var restoreStatus = { Messages: [r.Error], IsRunning: false };
            this.updateRestoreStatus(restoreStatus);
            result.reject();
        };
        return startRestoreCommand;
    })(commandBase);

    
    return startRestoreCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/stopIndexingCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var stopIndexingCommand = (function (_super) {
        __extends(stopIndexingCommand, _super);
        function stopIndexingCommand(db) {
            _super.call(this);
            this.db = db;
        }
        stopIndexingCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Disabling Indexing... (will wait for current indexing batch to complete)");

            var url = '/admin/stopIndexing';
            var createTask = this.post(url, null, this.db);
            createTask.done(function () {
                return _this.reportSuccess("Indexing was disabled");
            });
            createTask.fail(function (response) {
                return _this.reportError("Failed to disable indexing", response.responseText, response.statusText);
            });

            return createTask;
        };
        return stopIndexingCommand;
    })(commandBase);

    
    return stopIndexingCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/testSqlConnectionCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var testSqlConnectionCommand = (function (_super) {
        __extends(testSqlConnectionCommand, _super);
        function testSqlConnectionCommand(db, factoryName, connectionString) {
            _super.call(this);
            this.db = db;
            this.factoryName = factoryName;
            this.connectionString = connectionString;
        }
        testSqlConnectionCommand.prototype.execute = function () {
            var args = {
                factoryName: this.factoryName,
                connectionString: this.connectionString
            };
            return this.query("/studio-tasks/test-sql-replication-connection", args, this.db, null, 60000);
        };
        return testSqlConnectionCommand;
    })(commandBase);

    
    return testSqlConnectionCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/toggleRejectDatabaseClients", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var toggleRejectDatabaseClients = (function (_super) {
        __extends(toggleRejectDatabaseClients, _super);
        /**
        * @param names - The array of resource names to toggle
        * @param isSettingDisabled - Status of disabled to set
        * @param resourceType - The resource type
        */
        function toggleRejectDatabaseClients(dbName, rejectClientsEnabled) {
            _super.call(this);
            this.dbName = dbName;
            this.rejectClientsEnabled = rejectClientsEnabled;
        }
        toggleRejectDatabaseClients.prototype.execute = function () {
            var _this = this;
            var action = this.rejectClientsEnabled ? "reject clients mode" : "accept clients mode";
            var args = {
                isRejectClientsEnabled: this.rejectClientsEnabled
            };
            var url = "/admin/databases/toggle-reject-clients/" + this.dbName + this.urlEncodeArgs(args);
            var toggleTask = this.post(url, null, null, { dataType: undefined });
            toggleTask.done(function () {
                return _this.reportSuccess("Successfully switched to " + action + " in " + _this.dbName);
            });
            toggleTask.fail(function (response) {
                return _this.reportError("Failed switching to " + action + " in " + _this.dbName, response.responseText, response.statusText);
            });
            return toggleTask;
        };
        return toggleRejectDatabaseClients;
    })(commandBase);

    
    return toggleRejectDatabaseClients;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/updateServerPrefixHiLoCommand", ["require", "exports", "commands/commandBase", "commands/deleteDocumentCommand"], function(require, exports, commandBase, deleteDocumentCommand) {
    var updateServerPrefixHiLoCommand = (function (_super) {
        __extends(updateServerPrefixHiLoCommand, _super);
        function updateServerPrefixHiLoCommand(serverPrefix, db) {
            _super.call(this);
            this.serverPrefix = serverPrefix;
            this.db = db;
        }
        updateServerPrefixHiLoCommand.prototype.execute = function () {
            var _this = this;
            if (this.serverPrefix) {
                var doc = {
                    ServerPrefix: this.serverPrefix
                };
                return this.put("/docs/Raven/ServerPrefixForHilo", JSON.stringify(doc), this.db).done(function () {
                    return _this.reportSuccess("Saved ServerPrefix configuration");
                }).fail(function (response) {
                    return _this.reportError("Failed to save ServerPrefix configuration", response.responseText, response.statusText);
                });
            } else {
                return new deleteDocumentCommand("Raven/ServerPrefixForHilo", this.db).execute().done(function () {
                    return _this.reportSuccess("Saved ServerPrefix configuration");
                }).fail(function (response) {
                    return _this.reportError("Failed to save ServerPrefix configuration", response.responseText, response.statusText);
                });
            }
        };
        return updateServerPrefixHiLoCommand;
    })(commandBase);

    
    return updateServerPrefixHiLoCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/verifyDocumentsIDsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var verifyDocumentsIDsCommand = (function (_super) {
        __extends(verifyDocumentsIDsCommand, _super);
        function verifyDocumentsIDsCommand(docIDs, db, queryLocalStorage, storeResultsInLocalStorage) {
            _super.call(this);
            this.docIDs = docIDs;
            this.db = db;
            this.queryLocalStorage = queryLocalStorage;
            this.storeResultsInLocalStorage = storeResultsInLocalStorage;

            if (!docIDs) {
                throw new Error("Must specify IDs");
            }

            if (!db) {
                throw new Error("Must specify database");
            }
        }
        verifyDocumentsIDsCommand.prototype.execute = function () {
            var _this = this;
            var verifyResult = $.Deferred();
            var verifiedIDs = [];

            // if required to check with locally stored document ids first, remove known non existing documet ids first and confirm verified ids later
            if (this.queryLocalStorage === true) {
                if (!!verifyDocumentsIDsCommand.InvalidIDsLocal && verifyDocumentsIDsCommand.InvalidIDsLocal.length > 0) {
                    this.docIDs.removeAll(verifyDocumentsIDsCommand.InvalidIDsLocal);
                }

                if (!!verifyDocumentsIDsCommand.IDsLocalStorage && verifyDocumentsIDsCommand.IDsLocalStorage.length > 0) {
                    this.docIDs.forEach(function (curId) {
                        if (!!verifyDocumentsIDsCommand.IDsLocalStorage.first(function (x) {
                            return x === curId;
                        })) {
                            verifiedIDs.push(curId);
                        }
                    });

                    this.docIDs.removeAll(verifyDocumentsIDsCommand.IDsLocalStorage);
                }
            }

            if (this.docIDs.length > 0) {
                var postResult = this.post("/queries?metadata-only=true", JSON.stringify(this.docIDs), this.db);
                postResult.fail(function (xhr) {
                    return verifyResult.fail(xhr);
                });
                postResult.done(function (queryResult) {
                    if (!!queryResult && !!queryResult.Results) {
                        queryResult.Results.forEach(function (curVerifiedID) {
                            verifiedIDs.push(curVerifiedID['@metadata']['@id']);
                            if (_this.queryLocalStorage === true) {
                                verifyDocumentsIDsCommand.IDsLocalStorage.push(curVerifiedID);
                            }
                        });

                        if (_this.queryLocalStorage === true) {
                            _this.docIDs.removeAll(queryResult.Results.map(function (curResult) {
                                return curResult['@metadata']['@id'];
                            }));
                            verifyDocumentsIDsCommand.InvalidIDsLocal.pushAll(_this.docIDs);
                        }
                    }
                    verifyResult.resolve(verifiedIDs);
                });
                return verifyResult;
            } else {
                return verifiedIDs;
            }
        };
        verifyDocumentsIDsCommand.IDsLocalStorage = [];
        verifyDocumentsIDsCommand.InvalidIDsLocal = [];
        return verifyDocumentsIDsCommand;
    })(commandBase);

    
    return verifyDocumentsIDsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/createCounterStorageCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var createCounterStorageCommand = (function (_super) {
        __extends(createCounterStorageCommand, _super);
        /**
        * @param filesystemName The file system name we are creating.
        */
        function createCounterStorageCommand(counterStorageName, counterStoragePath) {
            _super.call(this);
            this.counterStorageName = counterStorageName;
            this.counterStoragePath = counterStoragePath;

            if (!counterStorageName) {
                this.reportError("Counter Storage must have a name!");
                throw new Error("Counter Storage must have a name!");
            }

            if (this.counterStoragePath == null) {
                this.counterStoragePath = "~\\Counters\\" + this.counterStorageName;
            }
        }
        createCounterStorageCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Creating Counter Storage '" + this.counterStorageName + "'");

            var filesystemDoc = {
                "Settings": { "Raven/Counters/DataDir": this.counterStoragePath },
                "Disabled": false
            };

            var url = "/counterstorage/admin/" + this.counterStorageName;

            var createTask = this.put(url, JSON.stringify(filesystemDoc), null, { dataType: undefined });
            createTask.done(function () {
                return _this.reportSuccess(_this.counterStorageName + " created");
            });
            createTask.fail(function (response) {
                return _this.reportError("Failed to create counter storage", response.responseText, response.statusText);
            });

            return createTask;
        };
        return createCounterStorageCommand;
    })(commandBase);

    
    return createCounterStorageCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/deleteCounterStorageCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteCounterStorageCommand = (function (_super) {
        __extends(deleteCounterStorageCommand, _super);
        function deleteCounterStorageCommand(counterStorageName, isHardDelete) {
            _super.call(this);
            this.counterStorageName = counterStorageName;
            this.isHardDelete = isHardDelete;
        }
        deleteCounterStorageCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Deleting " + this.counterStorageName + "...");

            var url = "/counterstorage/admin/" + encodeURIComponent(this.counterStorageName) + "?hard-delete=" + this.isHardDelete;
            var deleteTask = this.del(url, null, null, { dataType: undefined });
            deleteTask.fail(function (response) {
                return _this.reportError("Failed to delete counter storage", response.responseText, response.statusText);
            });
            deleteTask.done(function () {
                return _this.reportSuccess("Deleted " + _this.counterStorageName);
            });
            return deleteTask;
        };
        return deleteCounterStorageCommand;
    })(commandBase);

    
    return deleteCounterStorageCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/getCounterGroupsCommand", ["require", "exports", "commands/commandBase", "models/counter/counterGroup"], function(require, exports, commandBase, counterGroup) {
    var getCounterGroupsCommand = (function (_super) {
        __extends(getCounterGroupsCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getCounterGroupsCommand(storage) {
            _super.call(this);
            this.storage = storage;
        }
        getCounterGroupsCommand.prototype.execute = function () {
            var selector = function (groups) {
                return groups.map(function (g) {
                    return new counterGroup(g);
                });
            };
            return this.query("/groups", null, this.storage, selector);
        };
        return getCounterGroupsCommand;
    })(commandBase);

    
    return getCounterGroupsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/getCounterOverallTotalCommand", ["require", "exports", "commands/commandBase", "models/counter/counter"], function(require, exports, commandBase, counter) {
    var getCounterOverallTotalCommand = (function (_super) {
        __extends(getCounterOverallTotalCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function getCounterOverallTotalCommand(storage, counterToReceive) {
            _super.call(this);
            this.storage = storage;
            this.counterToReceive = counterToReceive;
        }
        getCounterOverallTotalCommand.prototype.execute = function () {
            var args = {
                group: this.counterToReceive.group(),
                counterName: this.counterToReceive.id()
            };

            var url = "/getCounterOverallTotal";
            var selector = function (dto) {
                return new counter(dto);
            };
            return this.query(url, args, this.storage, selector);
        };
        return getCounterOverallTotalCommand;
    })(commandBase);

    
    return getCounterOverallTotalCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/getCountersCommand", ["require", "exports", "commands/commandBase", "models/counter/counter"], function(require, exports, commandBase, counter) {
    var getCountersCommand = (function (_super) {
        __extends(getCountersCommand, _super);
        /**
        * @param counterStorage - the counter storage that is being used
        * @param skip - number of entries to skip
        * @param take - number of entries to take
        * @param counterGroupName - the counter group to take the entries from
        */
        function getCountersCommand(storage, skip, take, counterGroupName) {
            _super.call(this);
            this.storage = storage;
            this.skip = skip;
            this.take = take;
            this.counterGroupName = counterGroupName;
        }
        getCountersCommand.prototype.execute = function () {
            var args = {
                skip: this.skip,
                take: this.take,
                counterGroupName: this.counterGroupName
            };

            var url = "/counters";
            var selector = function (dtos) {
                return dtos.map(function (d) {
                    return new counter(d);
                });
            };
            return this.query(url, args, this.storage, selector);
        };
        return getCountersCommand;
    })(commandBase);

    
    return getCountersCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/getCounterStorageReplicationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getCounterStorageReplicationCommand = (function (_super) {
        __extends(getCounterStorageReplicationCommand, _super);
        function getCounterStorageReplicationCommand(counterStorage, reportRefreshProgress) {
            if (typeof reportRefreshProgress === "undefined") { reportRefreshProgress = false; }
            _super.call(this);
            this.counterStorage = counterStorage;
            this.reportRefreshProgress = reportRefreshProgress;
            if (!counterStorage) {
                throw new Error("Must specify counter storage");
            }
        }
        getCounterStorageReplicationCommand.prototype.execute = function () {
            var _this = this;
            var url = "/replications/get";
            var getTask = this.query(url, null, this.counterStorage);

            if (this.reportRefreshProgress) {
                getTask.done(function () {
                    return _this.reportSuccess("Replication Destionations of '" + _this.counterStorage.name + "' were successfully refreshed!");
                });
                getTask.fail(function (response) {
                    return _this.reportWarning("There are no saved replication destionations on the server!", response.responseText, response.statusText);
                });
            }
            return getTask;
        };
        return getCounterStorageReplicationCommand;
    })(commandBase);

    
    return getCounterStorageReplicationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/getCounterStoragesCommand", ["require", "exports", "models/counter/counterStorage", "commands/commandBase"], function(require, exports, counterStorage, commandBase) {
    var getCounterStoragesCommand = (function (_super) {
        __extends(getCounterStoragesCommand, _super);
        function getCounterStoragesCommand() {
            _super.apply(this, arguments);
        }
        getCounterStoragesCommand.prototype.execute = function () {
            var resultsSelector = function (counterStorageNames) {
                return counterStorageNames.map(function (n) {
                    return new counterStorage(n);
                });
            };
            return this.query("/counterStorage/conterStorages", { pageSize: 1024 }, null, resultsSelector);
        };
        return getCounterStoragesCommand;
    })(commandBase);

    
    return getCounterStoragesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/resetCounterCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var resetCounterCommand = (function (_super) {
        __extends(resetCounterCommand, _super);
        /**
        * @param counterStorage - the counter storage that is being used
        * @param editedCounter - the edited counter
        */
        function resetCounterCommand(storage, counterToReset) {
            _super.call(this);
            this.storage = storage;
            this.counterToReset = counterToReset;
        }
        resetCounterCommand.prototype.execute = function () {
            var args = {
                group: this.counterToReset.group(),
                counterName: this.counterToReset.id()
            };

            var url = "/reset" + this.urlEncodeArgs(args);
            return this.post(url, null, this.storage, { dataType: undefined });
        };
        return resetCounterCommand;
    })(commandBase);

    
    return resetCounterCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/saveCounterStorageReplicationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveCounterStorageReplicationCommand = (function (_super) {
        __extends(saveCounterStorageReplicationCommand, _super);
        function saveCounterStorageReplicationCommand(dto, counterStorage) {
            _super.call(this);
            this.dto = dto;
            this.counterStorage = counterStorage;
        }
        saveCounterStorageReplicationCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving counters replication");

            return this.saveSetup().done(function () {
                return _this.reportSuccess("Saved counters replication");
            }).fail(function (response) {
                return _this.reportError("Failed to save counters replication", response.responseText, response.statusText);
            });
        };

        saveCounterStorageReplicationCommand.prototype.saveSetup = function () {
            var url = "/replications/save";
            var putArgs = JSON.stringify(this.dto);
            return this.post(url, putArgs, this.counterStorage, { dataType: undefined });
        };
        return saveCounterStorageReplicationCommand;
    })(commandBase);

    
    return saveCounterStorageReplicationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/counter/updateCounterCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var updateCounterCommand = (function (_super) {
        __extends(updateCounterCommand, _super);
        /**
        * @param counterStorage - the counter storage that is being used
        * @param editedCounter - the edited counter
        * @param delta - the change to apply to the counter
        */
        function updateCounterCommand(storage, editedCounter, delta) {
            _super.call(this);
            this.storage = storage;
            this.editedCounter = editedCounter;
            this.delta = delta;
        }
        updateCounterCommand.prototype.execute = function () {
            var args = {
                counterName: this.editedCounter.id(),
                group: this.editedCounter.group(),
                delta: this.delta
            };

            var url = "/change" + this.urlEncodeArgs(args);
            return this.post(url, null, this.storage, { dataType: undefined });
        };
        return updateCounterCommand;
    })(commandBase);

    
    return updateCounterCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/backupFilesystemCommand", ["require", "exports", "commands/commandBase", "commands/filesystem/getConfigurationByKeyCommand"], function(require, exports, commandBase, getConfigurationByKeyCommand) {
    var backupFilesystemCommand = (function (_super) {
        __extends(backupFilesystemCommand, _super);
        function backupFilesystemCommand(fs, backupLocation, updateBackupStatus, incremental) {
            _super.call(this);
            this.fs = fs;
            this.backupLocation = backupLocation;
            this.updateBackupStatus = updateBackupStatus;
            this.incremental = incremental;
        }
        backupFilesystemCommand.prototype.execute = function () {
            var _this = this;
            var result = $.Deferred();

            var args = {
                BackupLocation: this.backupLocation,
                DatabaseDocument: null
            };
            this.post('/admin/fs/backup?incremental=' + this.incremental, JSON.stringify(args), this.fs, { dataType: 'text' }).fail(function (response) {
                _this.reportError("Failed to create backup!", response.responseText, response.statusText);
                result.reject();
            }).done(function () {
                return _this.getBackupStatus(result);
            });

            return result;
        };

        backupFilesystemCommand.prototype.getBackupStatus = function (result) {
            var _this = this;
            new getConfigurationByKeyCommand(this.fs, "Raven/Backup/Status").execute().fail(function (response) {
                _this.reportError("Failed to fetch backup status!", response.responseText, response.statusText);
                result.reject();
            }).done(function (backupStatusAsString) {
                var backupStatus = JSON.parse(backupStatusAsString);
                _this.updateBackupStatus(backupStatus);
                if (backupStatus.IsRunning) {
                    setTimeout(function () {
                        return _this.getBackupStatus(result);
                    }, 1000);
                } else {
                    _this.reportSuccess("Filesystem backup was successfully created!");
                    result.resolve();
                }
            });
        };
        return backupFilesystemCommand;
    })(commandBase);

    
    return backupFilesystemCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/compactFilesystemCommand", ["require", "exports", "commands/commandBase", "common/appUrl", 'commands/getOperationStatusCommand'], function(require, exports, commandBase, appUrl, getOperationStatusCommand) {
    var compactFilesystemCommand = (function (_super) {
        __extends(compactFilesystemCommand, _super);
        function compactFilesystemCommand(fs) {
            _super.call(this);
            this.fs = fs;
        }
        compactFilesystemCommand.prototype.execute = function () {
            var _this = this;
            var promise = $.Deferred();
            var url = '/admin/fs/compact' + this.urlEncodeArgs({ filesystem: this.fs.name });
            this.post(url, null, appUrl.getSystemDatabase()).done(function (result) {
                return _this.monitorCompact(promise, result.OperationId);
            }).fail(function (response) {
                _this.reportError("Failed to compact filesystem!", response.responseText, response.statusText);
                promise.reject();
            });
            return promise;
        };

        compactFilesystemCommand.prototype.monitorCompact = function (parentPromise, operationId) {
            var _this = this;
            new getOperationStatusCommand(appUrl.getSystemDatabase(), operationId).execute().done(function (result) {
                if (result.Completed) {
                    if (result.Faulted) {
                        _this.reportError("Failed to compact filesystem!", result.State.Error);
                        parentPromise.reject();
                    } else {
                        _this.reportSuccess("Compact completed");
                        parentPromise.resolve();
                    }
                } else {
                    setTimeout(function () {
                        return _this.monitorCompact(parentPromise, operationId);
                    }, 500);
                }
            });
        };
        return compactFilesystemCommand;
    })(commandBase);

    
    return compactFilesystemCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/createFilesystemCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var createFilesystemCommand = (function (_super) {
        __extends(createFilesystemCommand, _super);
        /**
        * @param filesystemName The file system name we are creating.
        */
        function createFilesystemCommand(fsSettings) {
            _super.call(this);
            this.fsSettings = fsSettings;

            if (!fsSettings.name) {
                this.reportError("File System must have a name!");
                throw new Error("File System must have a name!");
            }

            if (!$.trim(this.fsSettings.path)) {
                this.fsSettings.path = "~\\Filesystems\\" + this.fsSettings.name;
            }
        }
        createFilesystemCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Creating File System '" + this.fsSettings.name + "'");

            var filesystemDoc = {
                "Settings": {
                    "Raven/FileSystem/DataDir": this.fsSettings.path
                },
                "Disabled": false
            };
            if (this.fsSettings.storageEngine) {
                filesystemDoc.Settings["Raven/FileSystem/Storage"] = this.fsSettings.storageEngine;
            }

            if ($.trim(this.fsSettings.logsPath)) {
                filesystemDoc.Settings["Raven/TransactionJournalsPath"] = this.fsSettings.logsPath;
            }

            var url = "/admin/fs/" + this.fsSettings.name;
            var createTask = this.put(url, JSON.stringify(filesystemDoc), null, { dataType: undefined });
            createTask.done(function () {
                return _this.reportSuccess(_this.fsSettings.name + " created");
            });
            createTask.fail(function (response) {
                return _this.reportError("Failed to create file system", response.responseText, response.statusText);
            });

            return createTask;
        };
        return createFilesystemCommand;
    })(commandBase);

    
    return createFilesystemCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/createFolderCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var createFilesystemFolderCommand = (function (_super) {
        __extends(createFilesystemFolderCommand, _super);
        function createFilesystemFolderCommand(fs) {
            _super.call(this);
            this.fs = fs;

            throw new Error("Not Implemented");
        }
        createFilesystemFolderCommand.prototype.execute = function () {
            throw new Error("Not Implemented");
        };
        return createFilesystemFolderCommand;
    })(commandBase);

    
    return createFilesystemFolderCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/deleteConfigurationKeyCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteConfigurationKeyCommand = (function (_super) {
        __extends(deleteConfigurationKeyCommand, _super);
        function deleteConfigurationKeyCommand(fs, name) {
            _super.call(this);
            this.fs = fs;
            this.name = name;
        }
        deleteConfigurationKeyCommand.prototype.execute = function () {
            var url = "/config?name=" + this.name;
            return this.del(url, null, this.fs);
        };
        return deleteConfigurationKeyCommand;
    })(commandBase);

    
    return deleteConfigurationKeyCommand;
});
/// <reference path="../../../Scripts/typings/jquery/jquery.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/deleteDestinationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteDestinationCommand = (function (_super) {
        __extends(deleteDestinationCommand, _super);
        function deleteDestinationCommand(fs, destination) {
            _super.call(this);
            this.fs = fs;
            this.destination = destination;
        }
        deleteDestinationCommand.prototype.execute = function () {
            var _this = this;
            var result = $.Deferred();

            var serverUrl = this.destination.ServerUrl;
            var fileSystem = this.destination.FileSystem;

            this.query("/config", { name: "Raven/Synchronization/Destinations" }, this.fs).done(function (data) {
                if (data && data.hasOwnProperty('Destinations')) {
                    var value = data['Destinations'];
                    if (!(value instanceof Array))
                        value = [value];

                    var dtos = value.map(function (x) {
                        return x;
                    });

                    dtos = dtos.filter(function (x) {
                        return x.ServerUrl != serverUrl || x.FileSystem != fileSystem;
                    });

                    data.Destinations = dtos;

                    var url = "/config?name=" + encodeURIComponent("Raven/Synchronization/Destinations");
                    _this.put(url, JSON.stringify(data), _this.fs).done(function () {
                        return result.resolve(data);
                    }).fail(function (xhr, statusText, error) {
                        _this.reportError("Could not delete destination (server: " + serverUrl + ", filesystem: " + fileSystem + ")", error, statusText);
                    });
                }
            });

            return result;
        };
        return deleteDestinationCommand;
    })(commandBase);

    
    return deleteDestinationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/deleteFilesCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var deleteFilesCommand = (function (_super) {
        __extends(deleteFilesCommand, _super);
        function deleteFilesCommand(fileIds, fs) {
            _super.call(this);
            this.fileIds = fileIds;
            this.fs = fs;
        }
        deleteFilesCommand.prototype.execute = function () {
            var _this = this;
            var deletionTasks = new Array();
            ;
            for (var i = 0; i < this.fileIds.length; i++) {
                var deleteCommand = this.deleteFile(this.fileIds[i]);
                deletionTasks.push(deleteCommand);
            }

            var successMessage = this.fileIds.length > 1 ? "Deleted " + this.fileIds.length + " files" : "Deleted " + this.fileIds[0];

            var combinedTask = $.when.apply($, deletionTasks).done(function (x) {
                return _this.reportSuccess(successMessage);
            }).fail(function (response) {
                return _this.reportError("Failed to delete files", response.responseText, response.statusText);
            });

            return combinedTask;
        };

        deleteFilesCommand.prototype.deleteFile = function (fileId) {
            var url = "/files/" + fileId;
            return this.del(url, null, this.fs, null, 9000 * this.fileIds.length);
        };
        return deleteFilesCommand;
    })(commandBase);

    
    return deleteFilesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getConfigurationByKeyCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getConfigurationByKeyCommand = (function (_super) {
        __extends(getConfigurationByKeyCommand, _super);
        function getConfigurationByKeyCommand(fs, name) {
            _super.call(this);
            this.fs = fs;
            this.name = name;
        }
        getConfigurationByKeyCommand.prototype.execute = function () {
            var _this = this;
            var url = "/config";
            var args = {
                name: this.name
            };

            var task = $.Deferred();
            this.query(url, args, this.fs).done(function (data) {
                var prettifySpacing = 4;
                var configText = JSON.stringify(data, null, prettifySpacing);
                task.resolve(configText);
            }).fail(function (response) {
                return _this.reportError("Failed to retrieve filesystem configuration key. Does exist in this filesystem?", response.responseText, response.statusText);
            });

            return task;
        };
        return getConfigurationByKeyCommand;
    })(commandBase);

    
    return getConfigurationByKeyCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getConfigurationCommand", ["require", "exports", "commands/commandBase", "models/filesystem/configurationKey"], function(require, exports, commandBase, configurationKey) {
    var getConfigurationCommand = (function (_super) {
        __extends(getConfigurationCommand, _super);
        function getConfigurationCommand(fs) {
            _super.call(this);
            this.fs = fs;
        }
        getConfigurationCommand.prototype.execute = function () {
            var _this = this;
            var url = "/config/non-generated";

            return this.query(url, null, this.fs, function (results) {
                return results.map(function (x) {
                    return new configurationKey(_this.fs, x);
                });
            }).fail(function (response) {
                return _this.reportError("Failed to retrieve filesystem configuration.", response.responseText, response.statusText);
            });
        };
        return getConfigurationCommand;
    })(commandBase);

    
    return getConfigurationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getDestinationsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getDestinationsCommand = (function (_super) {
        __extends(getDestinationsCommand, _super);
        function getDestinationsCommand(fs, shouldResolveNotFoundAsNull) {
            _super.call(this);
            this.fs = fs;
            if (!fs) {
                throw new Error("Must specify filesystem");
            }
            this.shouldResolveNotFoundAsNull = shouldResolveNotFoundAsNull || false;
        }
        getDestinationsCommand.prototype.execute = function () {
            var url = "/config";
            var args = {
                name: "Raven/Synchronization/Destinations"
            };

            return this.query(url, args, this.fs);
        };
        return getDestinationsCommand;
    })(commandBase);

    
    return getDestinationsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getFileCommand", ["require", "exports", "commands/commandBase", "models/filesystem/file", "models/filesystem/fileMetadata"], function(require, exports, commandBase, file, fileMetadata) {
    var getFileCommand = (function (_super) {
        __extends(getFileCommand, _super);
        function getFileCommand(fs, name) {
            _super.call(this);
            this.fs = fs;
            this.name = name;
        }
        getFileCommand.prototype.execute = function () {
            var _this = this;
            var url = "/files/" + this.name;
            var resultsSelector = function (metadata) {
                var fileHeaders = new file();
                fileHeaders.id = _this.name;

                for (var property in metadata) {
                    var value = metadata[property];
                    if (value[0] === "{" || value[0] === "[")
                        metadata[property] = JSON.parse(value);
                }

                fileHeaders.__metadata = new fileMetadata(metadata);
                return fileHeaders;
            };
            return this.head(url, null, this.fs, resultsSelector);
        };
        return getFileCommand;
    })(commandBase);

    
    return getFileCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getFilesCommand", ["require", "exports", "commands/commandBase", "models/filesystem/file", "common/pagedResultSet"], function(require, exports, commandBase, file, pagedResultSet) {
    var getFilesystemFilesCommand = (function (_super) {
        __extends(getFilesystemFilesCommand, _super);
        function getFilesystemFilesCommand(fs, directory, skip, take) {
            _super.call(this);
            this.fs = fs;
            this.directory = directory;
            this.skip = skip;
            this.take = take;
        }
        getFilesystemFilesCommand.prototype.execute = function () {
            var filesTask = this.fetchFiles();
            var doneTask = $.Deferred();

            filesTask.done(function (results) {
                var files = results.Files.map(function (d) {
                    return new file(d, true);
                });
                var totalCount = results.FileCount;
                doneTask.resolve(new pagedResultSet(files, totalCount));
            });
            filesTask.fail(function (xhr) {
                return doneTask.reject(xhr);
            });

            return doneTask;
        };

        getFilesystemFilesCommand.prototype.fetchFiles = function () {
            var level = 1;
            if (this.directory) {
                var slashMatches = this.directory.count("/");
                if (slashMatches) {
                    level = level + slashMatches;
                }
            }

            var levelQuery = "__level:" + level;
            var args = {
                query: this.directory ? "__directoryName:" + this.directory + " AND " + levelQuery : levelQuery,
                start: this.skip,
                pageSize: this.take
            };

            var url = "/search";
            var task = this.query(url, args, this.fs, null);

            return task;
        };
        return getFilesystemFilesCommand;
    })(commandBase);

    
    return getFilesystemFilesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getFilesConflictsCommand", ["require", "exports", "commands/commandBase", "models/filesystem/conflictItem"], function(require, exports, commandBase, conflictItem) {
    var getFilesConflictsCommand = (function (_super) {
        __extends(getFilesConflictsCommand, _super);
        function getFilesConflictsCommand(fs) {
            _super.call(this);
            this.fs = fs;
        }
        getFilesConflictsCommand.prototype.execute = function () {
            var url = "/synchronization/Conflicts";

            var resultsSelector = function (page) {
                return page.Items.map(function (x) {
                    return conflictItem.fromConflictItemDto(x);
                });
            };
            return this.query(url, null, this.fs, resultsSelector);
        };
        return getFilesConflictsCommand;
    })(commandBase);

    
    return getFilesConflictsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getFileSystemsCommand", ["require", "exports", "commands/commandBase", "models/filesystem/filesystem"], function(require, exports, commandBase, filesystem) {
    var getFileSystemsCommand = (function (_super) {
        __extends(getFileSystemsCommand, _super);
        function getFileSystemsCommand() {
            _super.apply(this, arguments);
        }
        getFileSystemsCommand.prototype.execute = function () {
            var args = {
                pageSize: 1024,
                getAdditionalData: true
            };

            var url = "/fs";

            var resultsSelector = function (fileSystems) {
                return fileSystems.map(function (fs) {
                    return new filesystem(fs.Name, fs.Disabled);
                });
            };
            return this.query(url, args, null, resultsSelector);
        };
        return getFileSystemsCommand;
    })(commandBase);

    
    return getFileSystemsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getFileSystemsStatusCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getFileSystemsStatusCommand = (function (_super) {
        __extends(getFileSystemsStatusCommand, _super);
        function getFileSystemsStatusCommand() {
            _super.apply(this, arguments);
        }
        getFileSystemsStatusCommand.prototype.execute = function () {
            var url = "/fs/status";

            var resultsSelector = function (response) {
                return response.Status;
            };
            return this.query(url, null, null, resultsSelector);
        };
        return getFileSystemsStatusCommand;
    })(commandBase);

    
    return getFileSystemsStatusCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getFileSystemStatsCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getFileSystemStatsCommand = (function (_super) {
        __extends(getFileSystemStatsCommand, _super);
        function getFileSystemStatsCommand(fs) {
            _super.call(this);
            this.fs = fs;
        }
        getFileSystemStatsCommand.prototype.execute = function () {
            var url = "/stats";
            return this.query(url, null, this.fs);
        };
        return getFileSystemStatsCommand;
    })(commandBase);

    
    return getFileSystemStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getFoldersCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var getFoldersStatsCommand = (function (_super) {
        __extends(getFoldersStatsCommand, _super);
        function getFoldersStatsCommand(fs, skip, take, directory) {
            _super.call(this);
            this.fs = fs;
            this.skip = skip;
            this.take = take;
            this.directory = directory;
        }
        getFoldersStatsCommand.prototype.execute = function () {
            var url = "/folders/Subdirectories";
            if (this.directory) {
                url += "?directory=" + this.directory;
            }
            var args = {
                start: this.skip,
                pageSize: this.take
            };

            return this.query(url, args, this.fs, function (result) {
                return result.map(function (x) {
                    return {
                        key: x,
                        title: x.substring(x.lastIndexOf("/") + 1),
                        isLazy: true,
                        isFolder: true
                    };
                });
            });
        };
        return getFoldersStatsCommand;
    })(commandBase);

    
    return getFoldersStatsCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getSyncIncomingActivitiesCommand", ["require", "exports", "commands/commandBase", "models/filesystem/synchronizationDetail"], function(require, exports, commandBase, synchronizationDetail) {
    var getSyncIncomingActivitiesCommand = (function (_super) {
        __extends(getSyncIncomingActivitiesCommand, _super);
        function getSyncIncomingActivitiesCommand(fs) {
            _super.call(this);
            this.fs = fs;
        }
        getSyncIncomingActivitiesCommand.prototype.execute = function () {
            var _this = this;
            var doneTask = $.Deferred();
            var start = 0;
            var pageSize = 50;

            this.getIncomingActivity(start, pageSize).done(function (x) {
                return doneTask.resolve(x.Items.map(function (x) {
                    return new synchronizationDetail(x, "Pending", x.Type);
                }));
            }).fail(function (xhr) {
                _this.reportError("Failed to get synchronization incoming activities.");
                doneTask.reject(xhr);
            });

            return doneTask;
        };

        getSyncIncomingActivitiesCommand.prototype.getIncomingActivity = function (skip, take) {
            var incomingUrl = "/synchronization/incoming";
            var resultsSelector = function (x) {
                x.Items.map(function (item) {
                    return item.Direction = 1 /* Incoming */;
                });
                return x;
            };
            return this.query(incomingUrl, { start: skip, pageSize: take }, this.fs, resultsSelector);
        };
        return getSyncIncomingActivitiesCommand;
    })(commandBase);

    
    return getSyncIncomingActivitiesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/getSyncOutgoingActivitiesCommand", ["require", "exports", "commands/commandBase", "models/filesystem/synchronizationDetail"], function(require, exports, commandBase, synchronizationDetail) {
    var getSyncOutgoingActivitiesCommand = (function (_super) {
        __extends(getSyncOutgoingActivitiesCommand, _super);
        function getSyncOutgoingActivitiesCommand(fs) {
            _super.call(this);
            this.fs = fs;
        }
        getSyncOutgoingActivitiesCommand.prototype.execute = function () {
            var _this = this;
            // Outgoing: All the pending and active activities.
            var pendingTask = this.getPendingActivity(0, 50);
            var activeTask = this.getActiveActivity(0, 50);

            var doneTask = $.Deferred();
            var start = 0;
            var pageSize = 50;

            var combinedTask = $.when(pendingTask, activeTask);
            combinedTask.done(function (pendingList, activeList) {
                var activePageSize = pageSize - pendingList.TotalCount;

                var page = [];
                page.pushAll(pendingList.Items.map(function (item) {
                    return new synchronizationDetail({
                        FileSystemName: _this.fs.name,
                        FileName: item.FileName,
                        DestinationFileSystemUrl: item.DestinationUrl,
                        SourceServerId: "",
                        SourceFileSystemUrl: "",
                        Type: 0 /* Unknown */,
                        Direction: item.Direction,
                        Action: 0 /* Enqueue */
                    }, "Pending", item.Type);
                }));

                if (activePageSize > 0) {
                    page.pushAll(activeList.Items.slice(0, activePageSize - 1).map(function (item) {
                        return new synchronizationDetail({
                            FileSystemName: _this.fs.name,
                            FileName: item.FileName,
                            DestinationFileSystemUrl: item.DestinationUrl,
                            SourceServerId: "",
                            SourceFileSystemUrl: "",
                            Type: 0 /* Unknown */,
                            Direction: item.Direction,
                            Action: 1 /* Start */
                        }, "Active", item.Type);
                    }));
                }

                doneTask.resolve(page);
            });
            combinedTask.fail(function (xhr) {
                _this.reportError("Failed to get synchronization outgoing activities.");
                doneTask.reject(xhr);
            });

            return doneTask;
        };

        getSyncOutgoingActivitiesCommand.prototype.getPendingActivity = function (skip, take) {
            var pendingUrl = "/synchronization/pending";
            var resultsSelector = function (x) {
                x.Items.map(function (item) {
                    return item.Direction = 0 /* Outgoing */;
                });
                return x;
            };
            return this.query(pendingUrl, { start: skip, pageSize: take }, this.fs, resultsSelector, 15000);
        };

        getSyncOutgoingActivitiesCommand.prototype.getActiveActivity = function (skip, take) {
            var activeUrl = "/synchronization/active";
            var resultsSelector = function (x) {
                x.Items.map(function (item) {
                    return item.Direction = 0 /* Outgoing */;
                });
                return x;
            };
            return this.query(activeUrl, { start: skip, pageSize: take }, this.fs, resultsSelector, 15000);
        };
        return getSyncOutgoingActivitiesCommand;
    })(commandBase);

    
    return getSyncOutgoingActivitiesCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/monitorRestoreCommand", ["require", "exports", "commands/commandBase", "models/database", "commands/getDocumentWithMetadataCommand"], function(require, exports, commandBase, database, getDocumentWithMetadataCommand) {
    var monitorRestoreCommand = (function (_super) {
        __extends(monitorRestoreCommand, _super);
        function monitorRestoreCommand(parentPromise, filesystemName, updateRestoreStatus) {
            _super.call(this);
            this.parentPromise = parentPromise;
            this.filesystemName = filesystemName;
            this.updateRestoreStatus = updateRestoreStatus;
            this.db = new database("<system>");
        }
        monitorRestoreCommand.prototype.execute = function () {
            var _this = this;
            new getDocumentWithMetadataCommand("Raven/FileSystem/Restore/Status/" + this.filesystemName, this.db).execute().fail(function (response) {
                setTimeout(function () {
                    return _this.execute();
                }, 1000);
            }).done(function (restoreStatus) {
                var lastMessage = restoreStatus.Messages.last();
                var isRestoreFinished = lastMessage.contains("The new filesystem was created") || lastMessage.contains("Restore Canceled") || lastMessage.contains("A filesystem name must be supplied if the restore location does not contain a valid") || lastMessage.contains("Restore ended but could not create the datebase document, in order to access the data create a database with the appropriate name");

                restoreStatus.IsRunning = !isRestoreFinished;
                _this.updateRestoreStatus(restoreStatus);

                if (!isRestoreFinished) {
                    setTimeout(function () {
                        return _this.execute();
                    }, 1000);
                } else {
                    _this.reportSuccess("Filesystem was successfully restored!");
                    _this.parentPromise.resolve();
                }
            });
            return this.parentPromise;
        };
        return monitorRestoreCommand;
    })(commandBase);

    
    return monitorRestoreCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/resolveConflictCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var resolveConflictCommand = (function (_super) {
        __extends(resolveConflictCommand, _super);
        function resolveConflictCommand(fileName, strategy, fs, reportResolveProgress) {
            if (typeof reportResolveProgress === "undefined") { reportResolveProgress = true; }
            _super.call(this);
            this.fileName = fileName;
            this.strategy = strategy;
            this.fs = fs;
            this.reportResolveProgress = reportResolveProgress;
        }
        resolveConflictCommand.prototype.execute = function () {
            var _this = this;
            if (this.reportResolveProgress) {
                this.reportInfo("Resolving conflicts for file " + this.fileName + "...");
            }

            var url = "/synchronization/resolveConflict/" + encodeURIComponent(this.fileName) + "?strategy=" + this.strategy;
            var resolveTask = this.patch(url, null, this.fs);

            if (this.reportResolveProgress) {
                resolveTask.done(function () {
                    return _this.reportSuccess("Resolved conflicts for file " + _this.fileName);
                });
                resolveTask.fail(function (response) {
                    _this.reportError("Failed to resolve conflicts for file " + _this.fileName, response.responseText, response.statusText);
                });
            }

            return resolveTask;
        };
        return resolveConflictCommand;
    })(commandBase);

    
    return resolveConflictCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/saveConfigurationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveFilesystemConfigurationCommand = (function (_super) {
        __extends(saveFilesystemConfigurationCommand, _super);
        function saveFilesystemConfigurationCommand(fs, key, args) {
            _super.call(this);
            this.fs = fs;
            this.key = key;
            this.args = args;
        }
        saveFilesystemConfigurationCommand.prototype.execute = function () {
            var _this = this;
            var url = "/config?name=" + encodeURIComponent(this.key.key);
            return this.put(url, JSON.stringify(this.args), this.fs).done(function () {
                return _this.reportSuccess("Saved configuration");
            });
        };
        return saveFilesystemConfigurationCommand;
    })(commandBase);

    
    return saveFilesystemConfigurationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/saveDestinationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var saveDestinationCommand = (function (_super) {
        __extends(saveDestinationCommand, _super);
        function saveDestinationCommand(dto, fs) {
            _super.call(this);
            this.dto = dto;
            this.fs = fs;
        }
        saveDestinationCommand.prototype.execute = function () {
            var _this = this;
            this.reportInfo("Saving Replication destinations.");
            return this.saveSetup().done(function () {
                return _this.reportSuccess("Saved Replication destinations.");
            }).fail(function (response) {
                return _this.reportError("Failed to save Replication destinations.", response.responseText, response.statusText);
            });
        };

        saveDestinationCommand.prototype.saveSetup = function () {
            var name = "Raven/Synchronization/Destinations";
            var url = "/config?name=" + encodeURIComponent(name);
            var putArgs = JSON.stringify(this.dto);
            return this.put(url, putArgs, this.fs);
        };
        return saveDestinationCommand;
    })(commandBase);

    
    return saveDestinationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/searchByQueryCommand", ["require", "exports", "commands/commandBase", "common/pagedResultSet", "models/filesystem/file"], function(require, exports, commandBase, pagedResultSet, file) {
    var searchByQueryCommand = (function (_super) {
        __extends(searchByQueryCommand, _super);
        function searchByQueryCommand(fs, queryParameter, skip, take, sortParameter) {
            _super.call(this);
            this.fs = fs;
            this.queryParameter = queryParameter;
            this.skip = skip;
            this.take = take;
            this.sortParameter = sortParameter;
        }
        searchByQueryCommand.prototype.execute = function () {
            var filesTask = this.fetchFiles();

            var doneTask = $.Deferred();

            filesTask.done(function (results) {
                return doneTask.resolve(new pagedResultSet(results.Files.map(function (d) {
                    return new file(d, false);
                }), results.FileCount));
            });
            filesTask.fail(function (xhr) {
                return doneTask.reject(xhr);
            });

            return doneTask;
        };

        searchByQueryCommand.prototype.fetchFiles = function () {
            var args = {
                query: this.queryParameter,
                start: this.skip,
                pageSize: this.take
            };

            var url = "/search";
            return this.query(url, args, this.fs);
        };
        return searchByQueryCommand;
    })(commandBase);

    
    return searchByQueryCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/searchByTermCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var searchFilesystemByTermCommand = (function (_super) {
        __extends(searchFilesystemByTermCommand, _super);
        function searchFilesystemByTermCommand(fs, queryParameter) {
            _super.call(this);
            this.fs = fs;
            this.queryParameter = queryParameter;
        }
        searchFilesystemByTermCommand.prototype.execute = function () {
            var url = "/search/Terms";
            return this.query(url, { query: this.queryParameter }, this.fs);
        };
        return searchFilesystemByTermCommand;
    })(commandBase);

    
    return searchFilesystemByTermCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/searchConfigurationByPrefixCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var searchFilesystemConfigurationByPrefixCommand = (function (_super) {
        __extends(searchFilesystemConfigurationByPrefixCommand, _super);
        function searchFilesystemConfigurationByPrefixCommand(fs, prefix) {
            _super.call(this);
            this.fs = fs;
            this.prefix = prefix;
        }
        searchFilesystemConfigurationByPrefixCommand.prototype.execute = function () {
            var url = "/config";
            var args = {
                prefix: this.prefix
            };

            return this.query(url, args, this.fs);
        };
        return searchFilesystemConfigurationByPrefixCommand;
    })(commandBase);

    
    return searchFilesystemConfigurationByPrefixCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/startRestoreCommand", ["require", "exports", "commands/deleteDocumentCommand", "commands/commandBase", "models/database", "commands/filesystem/monitorRestoreCommand"], function(require, exports, deleteDocumentCommand, commandBase, database, monitorRestoreCommand) {
    var startRestoreCommand = (function (_super) {
        __extends(startRestoreCommand, _super);
        function startRestoreCommand(defrag, restoreRequest, updateRestoreStatus) {
            _super.call(this);
            this.defrag = defrag;
            this.restoreRequest = restoreRequest;
            this.updateRestoreStatus = updateRestoreStatus;
            this.db = new database("<system>");
        }
        startRestoreCommand.prototype.execute = function () {
            var _this = this;
            var result = $.Deferred();

            new deleteDocumentCommand('Raven/FileSystem/Restore/Status/' + this.restoreRequest.FilesystemName, this.db).execute().fail(function (response) {
                _this.reportError("Failed to delete restore status document!", response.responseText, response.statusText);
                result.reject();
            }).done(function (_) {
                _this.post('/admin/fs/restore?defrag=' + _this.defrag, ko.toJSON(_this.restoreRequest), null, { dataType: 'text' }).fail(function (response) {
                    _this.reportError("Failed to restore backup!", response.responseText, response.statusText);
                    _this.logError(response, result);
                }).done(function () {
                    return new monitorRestoreCommand(result, _this.restoreRequest.FilesystemName, _this.updateRestoreStatus).execute();
                });
            });

            return result;
        };

        startRestoreCommand.prototype.logError = function (response, result) {
            var r = JSON.parse(response.responseText);
            var restoreStatus = { Messages: [r.Error], IsRunning: false };
            this.updateRestoreStatus(restoreStatus);
            result.reject();
        };
        return startRestoreCommand;
    })(commandBase);

    
    return startRestoreCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/synchronizeNowCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var synchronizeNowCommand = (function (_super) {
        __extends(synchronizeNowCommand, _super);
        function synchronizeNowCommand(fs) {
            _super.call(this);
            this.fs = fs;
        }
        synchronizeNowCommand.prototype.execute = function () {
            var _this = this;
            var synchronizeUrl = "/synchronization/ToDestinations?forceSyncingAll=true";

            return this.post(synchronizeUrl, null, this.fs).fail(function (x) {
                _this.reportError("Synchronization endpoint returned with an error.");
            });
        };
        return synchronizeNowCommand;
    })(commandBase);

    
    return synchronizeNowCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/synchronizeWithDestinationCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var synchronizeWithDestinationCommand = (function (_super) {
        __extends(synchronizeWithDestinationCommand, _super);
        function synchronizeWithDestinationCommand(fs, destination) {
            _super.call(this);
            this.fs = fs;
            this.destination = destination;
        }
        synchronizeWithDestinationCommand.prototype.execute = function () {
            var _this = this;
            var synchronizeUrl = "/synchronization/ToDestination?destination=" + this.destination + "&forceSyncingAll=true";

            return this.post(synchronizeUrl, null, this.fs).fail(function (x) {
                _this.reportError("Synchronization endpoint returned with an error.");
            });
        };
        return synchronizeWithDestinationCommand;
    })(commandBase);

    
    return synchronizeWithDestinationCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/updateFileMetadataCommand", ["require", "exports", "commands/commandBase"], function(require, exports, commandBase) {
    var updateFileMetadataCommand = (function (_super) {
        __extends(updateFileMetadataCommand, _super);
        function updateFileMetadataCommand(fileName, metadata, fs, reportSaveProgress) {
            if (typeof reportSaveProgress === "undefined") { reportSaveProgress = true; }
            _super.call(this);
            this.fileName = fileName;
            this.metadata = metadata;
            this.fs = fs;
            this.reportSaveProgress = reportSaveProgress;
        }
        updateFileMetadataCommand.prototype.execute = function () {
            var _this = this;
            if (this.reportSaveProgress) {
                this.reportInfo("Saving " + this.fileName + "...");
            }

            var customHeaders = {};

            for (var key in this.metadata) {
                var value = this.metadata[key];
                if (typeof (value) != "string" && typeof (value) != "number")
                    customHeaders[key] = JSON.stringify(value);
                else {
                    customHeaders[key] = this.metadata[key];
                }
            }

            var jQueryOptions = {
                headers: customHeaders
            };

            var url = "/files/" + this.fileName;
            var updateTask = this.post(url, null, this.fs, jQueryOptions);

            if (this.reportSaveProgress) {
                updateTask.done(function () {
                    return _this.reportSuccess("Saved " + _this.fileName);
                });
                updateTask.fail(function (response) {
                    _this.reportError("Failed to save " + _this.fileName, response.responseText, response.statusText);
                });
            }

            return updateTask;
        };
        return updateFileMetadataCommand;
    })(commandBase);

    
    return updateFileMetadataCommand;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("commands/filesystem/uploadFileToFilesystemCommand", ["require", "exports", "commands/commandBase", "models/uploadItem"], function(require, exports, commandBase, uploadItem) {
    var uploadFileToFilesystemCommand = (function (_super) {
        __extends(uploadFileToFilesystemCommand, _super);
        /**
        * @param ownerDb The database the collections will belong to.
        */
        function uploadFileToFilesystemCommand(source, directory, uploadId, fs, progressHandlingFunction, reportUploadProgress) {
            if (typeof reportUploadProgress === "undefined") { reportUploadProgress = true; }
            _super.call(this);
            this.source = source;
            this.directory = directory;
            this.uploadId = uploadId;
            this.fs = fs;
            this.reportUploadProgress = reportUploadProgress;
        }
        uploadFileToFilesystemCommand.prototype.execute = function () {
            var _this = this;
            if (this.reportUploadProgress) {
                this.reportInfo("File " + this.source.name + "queued for upload...");
            }

            var fileName = this.directory + "/" + this.source.name;
            var url = '/files?name=' + fileName + '&uploadId=' + this.uploadId;

            var customHeaders = {
                'RavenFS-Size': this.source.size
            };

            var deferred = $.Deferred();

            var jQueryOptions = {
                headers: customHeaders,
                processData: false,
                xhr: function () {
                    var myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.addEventListener('progress', this.progressHandlingFunction, false); // For handling the progress of the upload
                    }
                    if (myXhr.upload) {
                        myXhr.upload.onprogress = this.progressHandlingFunction;
                    }
                    return myXhr;
                },
                cache: false,
                contentType: "application/json; charset=UTF-8",
                dataType: ''
            };

            var uploadTask = this.put(url, this.source, this.fs, jQueryOptions, 0);

            if (this.reportUploadProgress) {
                uploadTask.done(function () {
                    _this.reportSuccess("Uploaded " + fileName);
                    return deferred.resolve(new uploadItem(_this.uploadId, fileName, "Uploaded", _this.fs));
                });
                uploadTask.fail(function (response) {
                    _this.reportError("Failed to upload " + fileName, response.responseText, response.statusText);
                    return deferred.reject(new uploadItem(_this.uploadId, fileName, "Failed", _this.fs));
                });
            }

            return deferred;
        };
        return uploadFileToFilesystemCommand;
    })(commandBase);

    
    return uploadFileToFilesystemCommand;
});
define("common/aceEditorBindingHandler", ["require", "exports", "durandal/composition", "ace/ace", "ace/ext/language_tools", "ace/mode/lucene", "ace/theme/xcode", "ace/mode/json_newline_friendly", "ace/mode/json"], function(require, exports, composition, ace) {
    /*
    * A custom Knockout binding handler transforms the target element (usually a <pre>) into a code editor, powered by Ace. http://ace.c9.io
    * Usage: data-bind="aceEditor: { code: someObservableString, lang: 'ace/mode/csharp', theme: 'ace/theme/xcode', fontSize: '16px' }"
    * All params are optional, except code.
    */
    var aceEditorBindingHandler = (function () {
        function aceEditorBindingHandler() {
            this.defaults = {
                theme: "ace/theme/xcode",
                fontSize: "16px",
                lang: "ace/mode/csharp",
                readOnly: false,
                selectAll: false,
                bubbleEscKey: false,
                bubbleEnterKey: false
            };
            this.previousLinesCount = -1;
        }
        aceEditorBindingHandler.install = function () {
            if (!ko.bindingHandlers["aceEditor"]) {
                ko.bindingHandlers["aceEditor"] = new aceEditorBindingHandler();

                // This tells Durandal to fire this binding handler only after composition
                // is complete and attached to the DOM.
                // See http://durandaljs.com/documentation/Interacting-with-the-DOM/
                composition.addBindingHandler("aceEditor");

                var Editor = require("ace/editor").Editor;
                require("ace/config").defineOptions(Editor.prototype, "editor", {
                    editorType: {
                        set: function (val) {
                        },
                        value: "general"
                    }
                });

                /// taken from https://github.com/ajaxorg/ace-demos/blob/master/scrolling-editor.html
                aceEditorBindingHandler.commands.push({
                    name: "Toggle Fullscreen",
                    bindKey: "Shift+F11",
                    exec: function (editor) {
                        aceEditorBindingHandler.dom.toggleCssClass(document.body, "fullScreen");
                        aceEditorBindingHandler.dom.toggleCssClass(editor.container, "fullScreen-editor");
                        editor.resize();

                        if (aceEditorBindingHandler.dom.hasCssClass(document.body, "fullScreen") === true) {
                            $(".fullScreenModeLabel").text(aceEditorBindingHandler.leaveFullScreenText);
                            $(".fullScreenModeLabel").hide();
                            $(editor.container).find(".fullScreenModeLabel").show();
                            editor.setOption("maxLines", null);
                        } else {
                            $(".fullScreenModeLabel").text(aceEditorBindingHandler.goToFullScreenText);
                            $(".fullScreenModeLabel").show();
                            editor.setOption("maxLines", 10 * 1000);
                        }
                    }
                });

                aceEditorBindingHandler.commands.push({
                    name: "Exit FullScreen",
                    bindKey: "Esc",
                    exec: function (editor) {
                        if (aceEditorBindingHandler.dom.hasCssClass(document.body, "fullScreen") === true) {
                            aceEditorBindingHandler.dom.toggleCssClass(document.body, "fullScreen");
                            aceEditorBindingHandler.dom.toggleCssClass(editor.container, "fullScreen-editor");
                            $(".fullScreenModeLabel").text(aceEditorBindingHandler.goToFullScreenText);
                            $(".fullScreenModeLabel").show();
                        }
                        editor.resize();
                    }
                });
                ///
            }
        };

        aceEditorBindingHandler.autoCompleteHub = function (editor, session, pos, prefix, callback) {
            var curEditorType = editor.getOption("editorType");
            var completerThreesome = aceEditorBindingHandler.customCompleters.first(function (x) {
                return x.editorType === curEditorType;
            });

            if (!!completerThreesome) {
                completerThreesome.completer.call(completerThreesome.completerHostObject, editor, session, pos, prefix, callback);
            }
        };

        // Called by Knockout a single time when the binding handler is setup.
        aceEditorBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var self = this;
            var bindingValues = valueAccessor();
            var theme = bindingValues.theme || this.defaults.theme;
            var fontSize = bindingValues.fontSize || this.defaults.fontSize;
            var lang = bindingValues.lang || this.defaults.lang;
            var readOnly = bindingValues.readOnly || this.defaults.readOnly;
            var typeName = bindingValues.typeName;
            var code = typeof bindingValues.code === "function" ? bindingValues.code : bindingContext.$rawData;
            var langTools = null;
            var completerHostObject = bindingValues.completerHostObject;
            this.minHeight = bindingValues.minHeight ? bindingValues.minHeight : 140;
            this.maxHeight = bindingValues.maxHeight ? bindingValues.maxHeight : 400;
            this.allowResize = bindingValues.allowResize ? bindingValues.allowResize : false;
            var selectAll = bindingValues.selectAll || this.defaults.selectAll;
            var bubbleEscKey = bindingValues.bubbleEscKey || this.defaults.bubbleEscKey;
            var bubbleEnterKey = bindingValues.bubbleEnterKey || this.defaults.bubbleEnterKey;
            var getFocus = bindingValues.getFocus;

            if (typeof code !== "function") {
                throw new Error("code should be an observable");
            }

            if (!!bindingValues.completer) {
                langTools = ace.require("ace/ext/language_tools");
            }

            var aceEditor = ace.edit(element);

            aceEditor.setOption("enableBasicAutocompletion", true);
            aceEditor.setOption("newLineMode", "windows");
            aceEditor.setTheme(theme);
            aceEditor.setFontSize(fontSize);
            aceEditor.getSession().setMode(lang);
            aceEditor.setReadOnly(readOnly);

            // Setup key bubbling
            if (bubbleEscKey) {
                aceEditor.commands.addCommand({
                    name: "RavenStudioBubbleEsc",
                    bindKey: "esc",
                    exec: function () {
                        return false;
                    }
                });
            }

            // setup the autocomplete mechanism, bind recieved function with recieved type, will only work if both were recieved
            if (!!typeName) {
                aceEditor.setOption("editorType", typeName);

                if (!!langTools) {
                    if (!aceEditorBindingHandler.customCompleters.first(function (x) {
                        return x.editorType === typeName;
                    })) {
                        aceEditorBindingHandler.customCompleters.push({ editorType: typeName, completerHostObject: completerHostObject, completer: bindingValues.completer });
                    }
                    if (!!aceEditor.completers) {
                        var completersList = aceEditor.completers;
                        if (!completersList.first(function (x) {
                            return x.moduleId === "aceEditoBindingHandler";
                        })) {
                            langTools.addCompleter({ moduleId: "aceEditoBindingHandler", getCompletions: aceEditorBindingHandler.autoCompleteHub });
                        }
                    } else {
                        langTools.addCompleter({ moduleId: "aceEditoBindingHandler", getCompletions: aceEditorBindingHandler.autoCompleteHub });
                    }
                }
            }

            // In the event of keyup or lose focus, push the value into the observable.
            var aceFocusElement = ".ace_text-input";
            $(element).on('keyup', aceFocusElement, function () {
                code(aceEditor.getSession().getValue());
                self.alterHeight(element, aceEditor);
            });
            $(element).on('focus', aceFocusElement, function () {
                return aceEditorBindingHandler.currentEditor = aceEditor;
            });

            // Initialize ace resizeble text box
            aceEditor.setOption('vScrollBarAlwaysVisible', true);
            aceEditor.setOption('hScrollBarAlwaysVisible', true);

            if ($(element).height() < this.minHeight) {
                $(element).height(this.minHeight);
            }
            $(element).resizable({
                minHeight: this.minHeight,
                handles: "s, se",
                grid: [10000000000000000, 1],
                resize: function (event, ui) {
                    aceEditor.resize();
                }
            });

            this.alterHeight(element, aceEditor);
            $(element).find('.ui-resizable-se').removeClass('ui-icon-gripsmall-diagonal-se');
            $(element).find('.ui-resizable-se').addClass('ui-icon-carat-1-s');
            $('.ui-resizable-se').css('cursor', 's-resize');
            $(element).append('<span class="fullScreenModeLabel" style="font-size:90%; z-index: 1000; position: absolute; bottom: 22px; right: 22px; opacity: 0.4">Press Shift+F11 to enter full screen mode</span>');

            // When the element is removed from the DOM, unhook our keyup and focus event handlers and remove the  resizable functionality completely. lest we leak memory.
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                $(element).off('keyup', aceFocusElement);
                $(element).off('focus', aceFocusElement);
                $(element).resizable("destroy");
            });

            // Keep track of the editor for this element.
            ko.utils.domData.set(element, "aceEditor", aceEditor);

            if (bindingValues.getFocus) {
                setTimeout(function () {
                    return aceEditor.focus();
                }, 0);
            }

            if (selectAll) {
                setTimeout(function () {
                    return aceEditor.selectAll();
                }, 0);
            }
        };

        // Called by Knockout each time the dependent observable value changes.
        aceEditorBindingHandler.prototype.update = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var bindingValues = valueAccessor();
            var code = ko.unwrap(bindingValues.code);
            var aceEditor = ko.utils.domData.get(element, "aceEditor");
            var editorCode = aceEditor.getSession().getValue();
            if (code !== editorCode) {
                aceEditor.getSession().setValue(code);
            }
            if (this.allowResize) {
                this.alterHeight(element, aceEditor);
            }
        };

        aceEditorBindingHandler.prototype.alterHeight = function (element, aceEditor) {
            if (!this.allowResize) {
                return;
            }

            // update only if line count changes
            var currentLinesCount = aceEditor.getSession().getScreenLength();
            if (this.previousLinesCount != currentLinesCount) {
                var newHeight = currentLinesCount * aceEditor.renderer.lineHeight + aceEditor.renderer.scrollBar.getWidth();
                +10; // few pixels extra padding

                if (newHeight < this.minHeight) {
                    newHeight = this.minHeight;
                } else if (newHeight > this.maxHeight) {
                    newHeight = this.maxHeight;
                }

                $(element).height(newHeight);
                aceEditor.resize();
                this.previousLinesCount = currentLinesCount;
            }
        };
        aceEditorBindingHandler.dom = require("ace/lib/dom");
        aceEditorBindingHandler.commands = require("ace/commands/default_commands").commands;
        aceEditorBindingHandler.isInFullScreeenMode = ko.observable(false);
        aceEditorBindingHandler.goToFullScreenText = "Press Shift + F11  to enter full screen mode";
        aceEditorBindingHandler.leaveFullScreenText = "Press Shift + F11 or Esc to leave full screen mode";

        aceEditorBindingHandler.customCompleters = [];
        return aceEditorBindingHandler;
    })();

    
    return aceEditorBindingHandler;
});
/// <reference path="../../Scripts/typings/jquery/jquery.d.ts" />
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/adminLogsClient", ["require", "exports", 'common/appUrl', 'models/changeSubscription', 'common/changesCallback', 'commands/commandBase', "common/changesApi", "common/idGenerator", "commands/adminLogsConfigureCommand"], function(require, exports, appUrl, changeSubscription, changesCallback, commandBase, changesApi, idGenerator, adminLogsConfigureCommand) {
    var adminLogsClient = (function () {
        function adminLogsClient(token) {
            this.token = token;
            this.readyStateOpen = 1;
            this.isCleanClose = false;
            this.normalClosureCode = 1000;
            this.normalClosureMessage = "CLOSE_NORMAL";
            this.successfullyConnectedOnce = false;
            this.commandBase = new commandBase();
            this.adminLogsHandlers = ko.observableArray();
            this.eventsId = idGenerator.generateId();
            this.resourcePath = appUrl.forResourceQuery(appUrl.getSystemDatabase());
            this.connectionOpeningTask = $.Deferred();
            this.connectionClosingTask = $.Deferred();
        }
        adminLogsClient.prototype.connect = function () {
            var connectionString = 'singleUseAuthToken=' + this.token + '&id=' + this.eventsId;
            if ("WebSocket" in window && changesApi.isServerSupportingWebSockets) {
                this.connectWebSocket(connectionString);
            } else if ("EventSource" in window) {
                this.connectEventSource(connectionString);
            } else {
                //The browser doesn't support nor websocket nor eventsource
                //or we are in IE10 or IE11 and the server doesn't support WebSockets.
                //Anyway, at this point a warning message was already shown.
                this.connectionOpeningTask.reject();
            }
        };

        adminLogsClient.prototype.connectWebSocket = function (connectionString) {
            var _this = this;
            var connectionOpened = false;

            var wsProtocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            this.webSocket = new WebSocket(wsProtocol + window.location.host + this.resourcePath + '/admin/logs/events?' + connectionString);

            this.webSocket.onmessage = function (e) {
                return _this.onMessage(e);
            };
            this.webSocket.onerror = function (e) {
                if (connectionOpened == false) {
                    _this.connectionOpeningTask.reject();
                } else {
                    _this.connectionClosingTask.resolve({ Error: e });
                }
            };
            this.webSocket.onclose = function (e) {
                _this.connectionClosingTask.resolve();
            };
            this.webSocket.onopen = function () {
                console.log("Connected to WebSocket admin logs");
                _this.successfullyConnectedOnce = true;
                connectionOpened = true;
                _this.connectionOpeningTask.resolve();
            };
        };

        adminLogsClient.prototype.connectEventSource = function (connectionString) {
            var _this = this;
            var connectionOpened = false;

            this.eventSource = new EventSource(this.resourcePath + '/admin/logs/events?' + connectionString);

            this.eventSource.onmessage = function (e) {
                return _this.onMessage(e);
            };
            this.eventSource.onerror = function (e) {
                if (connectionOpened == false) {
                    _this.connectionOpeningTask.reject();
                } else {
                    _this.eventSource.close();
                    _this.connectionClosingTask.resolve(e);
                }
            };
            this.eventSource.onopen = function () {
                console.log("Connected to WebSocket admin logs");
                _this.successfullyConnectedOnce = true;
                connectionOpened = true;
                _this.connectionOpeningTask.resolve();
            };
        };

        adminLogsClient.prototype.send = function (command, value, needToSaveSentMessages) {
            var _this = this;
            if (typeof needToSaveSentMessages === "undefined") { needToSaveSentMessages = true; }
            this.connectionOpeningTask.done(function () {
                var args = {
                    id: _this.eventsId,
                    command: command
                };
                if (value !== undefined) {
                    args["value"] = value;
                }

                //TODO: exception handling?
                _this.commandBase.query('/admin/logs/configure', args, appUrl.getSystemDatabase());
            });
        };

        adminLogsClient.prototype.fireEvents = function (events, param, filter) {
            for (var i = 0; i < events.length; i++) {
                if (filter(param)) {
                    events[i].fire(param);
                }
            }
        };

        adminLogsClient.prototype.onMessage = function (e) {
            var eventDto = JSON.parse(e.data);
            if (!!eventDto.Type && eventDto.Type == 'Heartbeat') {
                return;
            }
            this.fireEvents(this.adminLogsHandlers(), eventDto, function (e) {
                return true;
            });
        };

        adminLogsClient.prototype.watchAdminLogs = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            this.adminLogsHandlers.push(callback);
            return new changeSubscription(function () {
                _this.adminLogsHandlers.remove(callback);
            });
        };

        adminLogsClient.prototype.configureCategories = function (categoriesConfig) {
            new adminLogsConfigureCommand(appUrl.getSystemDatabase(), categoriesConfig, this.eventsId).execute();
        };

        adminLogsClient.prototype.dispose = function () {
            var _this = this;
            this.connectionOpeningTask.done(function () {
                var isCloseNeeded;

                if (isCloseNeeded = _this.webSocket && _this.webSocket.readyState == _this.readyStateOpen) {
                    console.log("Disconnecting from WebSocket Logs API");
                    _this.webSocket.close(_this.normalClosureCode, _this.normalClosureMessage);
                } else if (isCloseNeeded = _this.eventSource && _this.eventSource.readyState == _this.readyStateOpen) {
                    console.log("Disconnecting from EventSource Logs API");
                    _this.eventSource.close();
                    _this.connectionClosingTask.resolve();
                }

                if (isCloseNeeded) {
                    _this.send('disconnect', undefined, false);
                    _this.isCleanClose = true;
                }
            });
        };
        adminLogsClient.messageWasShownOnce = false;
        return adminLogsClient;
    })();

    
    return adminLogsClient;
});
define("common/alertArgs", ["require", "exports", "common/alertType"], function(require, exports, alertType) {
    var alertArgs = (function () {
        function alertArgs(type, title, details, httpStatusText, displayInRecentErrors) {
            if (typeof details === "undefined") { details = ""; }
            if (typeof httpStatusText === "undefined") { httpStatusText = ""; }
            if (typeof displayInRecentErrors === "undefined") { displayInRecentErrors = true; }
            this.type = type;
            this.title = title;
            this.details = details;
            this.httpStatusText = httpStatusText;
            this.displayInRecentErrors = displayInRecentErrors;
            var hashString = (title + details).hashCode().toString();

            this.id = "alert_" + hashString;
        }
        Object.defineProperty(alertArgs.prototype, "errorMessage", {
            get: function () {
                var error = this.errorInfo;
                if (error && error.message) {
                    return error.message;
                }

                return null;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(alertArgs.prototype, "errorInfo", {
            get: function () {
                if (this.parsedErrorInfo) {
                    return this.parsedErrorInfo;
                }

                if (this.type !== 3 /* danger */ && this.type !== 2 /* warning */) {
                    return null;
                }

                // See if we can tease out an error message from the details string.
                var detailsObj = this.getDetailsObject();
                if (detailsObj) {
                    var error = detailsObj.Error;
                    if (error && typeof error === "string") {
                        var indexOfStackTrace = error.indexOf("\r\n");

                        if (indexOfStackTrace !== -1) {
                            this.parsedErrorInfo = {
                                message: detailsObj.Message ? detailsObj.Message : error.substr(0, indexOfStackTrace),
                                stackTrace: detailsObj.Message ? error : error.substr(indexOfStackTrace + "\r\n".length),
                                url: detailsObj.Url || ""
                            };
                        } else {
                            this.parsedErrorInfo = {
                                message: detailsObj.Message ? detailsObj.Message : error,
                                stackTracke: error,
                                url: detailsObj.Url
                            };
                        }
                    }
                }

                return this.parsedErrorInfo;
            },
            enumerable: true,
            configurable: true
        });

        alertArgs.prototype.getDetailsObject = function () {
            if (this.detailsObject) {
                return this.detailsObject;
            }

            if (this.details) {
                try  {
                    this.detailsObject = JSON.parse(this.details);
                } catch (error) {
                    return null;
                }
            }

            return this.detailsObject;
        };
        return alertArgs;
    })();

    
    return alertArgs;
});
define("common/alertType", ["require", "exports"], function(require, exports) {
    var alertType;
    (function (alertType) {
        alertType[alertType["info"] = 0] = "info";
        alertType[alertType["success"] = 1] = "success";
        alertType[alertType["warning"] = 2] = "warning";
        alertType[alertType["danger"] = 3] = "danger";
    })(alertType || (alertType = {}));

    
    return alertType;
});
define("common/appUrl", ["require", "exports", "models/database", "models/filesystem/filesystem", "models/counter/counterStorage", "plugins/router", "common/messagePublisher"], function(require, exports, database, filesystem, counterStorage, router, messagePublisher) {
    // Helper class with static methods for generating app URLs.
    var appUrl = (function () {
        function appUrl() {
        }
        appUrl.detectAppUrl = function () {
            var path = window.location.pathname.replace("\\", "/").replace("%5C", "/");
            var suffix = "studio/index.html";
            if (path.indexOf(suffix, path.length - suffix.length) !== -1) {
                return path.substring(0, path.length - suffix.length - 1);
            }
            return "";
        };

        appUrl.checkIsAreaActive = function (routeRoot) {
            var items = router.routes.filter(function (m) {
                return m.isActive() && m.route != null && m.route != '';
            });
            var isThereAny = items.some(function (m) {
                return m.route.substring(0, routeRoot.length) === routeRoot;
            });
            return isThereAny;
        };

        appUrl.getEncodedCounterStoragePart = function (counterStorage) {
            return counterStorage ? "&counterstorage=" + encodeURIComponent(counterStorage.name) : "";
        };

        appUrl.forCounterStorageCounters = function (counterStorage) {
            var counterStroragePart = appUrl.getEncodedCounterStoragePart(counterStorage);
            return "#counterstorages/counters?" + counterStroragePart;
        };

        appUrl.forCounterStorageReplication = function (counterStorage) {
            var counterStroragePart = appUrl.getEncodedCounterStoragePart(counterStorage);
            return "#counterstorages/replication?" + counterStroragePart;
        };

        appUrl.forCounterStorageStats = function (counterStorage) {
            var counterStroragePart = appUrl.getEncodedCounterStoragePart(counterStorage);
            return "#counterstorages/stats?" + counterStroragePart;
        };

        appUrl.forCounterStorageConfiguration = function (counterStorage) {
            var counterStroragePart = appUrl.getEncodedCounterStoragePart(counterStorage);
            return "#counterstorages/configuration?" + counterStroragePart;
        };

        appUrl.forUpgrade = function (db) {
            return "#databases/upgrade?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forAdminSettings = function () {
            return "#admin/settings";
        };
        appUrl.forApiKeys = function () {
            return "#admin/settings/apiKeys";
        };

        appUrl.forWindowsAuth = function () {
            return "#admin/settings/windowsAuth";
        };

        appUrl.forBackupDatabase = function () {
            return "#admin/settings/backupDatabase";
        };

        appUrl.forCompactDatabase = function () {
            return "#admin/settings/compactDatabase";
        };

        appUrl.forRestoreDatabase = function () {
            return "#admin/settings/restoreDatabase";
        };

        appUrl.forBackupFilesystem = function () {
            return "#admin/settings/backupFilesystem";
        };

        appUrl.forCompactFilesystem = function () {
            return "#admin/settings/compactFilesystem";
        };

        appUrl.forRestoreFilesystem = function () {
            return "#admin/settings/restoreFilesystem";
        };

        appUrl.forAdminLogs = function () {
            return "#admin/settings/adminLogs";
        };

        appUrl.forTrafficWatch = function () {
            return "#admin/settings/trafficWatch";
        };

        appUrl.forDebugInfo = function () {
            return "#admin/settings/debugInfo";
        };

        appUrl.forIoTest = function () {
            return "#admin/settings/ioTest";
        };

        appUrl.forStudioConfig = function () {
            return "#admin/settings/studioConfig";
        };

        appUrl.forResources = function () {
            return "#resources";
        };

        appUrl.forCounterStorages = function () {
            return "#counterstorages";
        };

        /**
        * Gets the URL for edit document.
        * @param id The ID of the document to edit, or null to edit a new document.
        * @param collectionName The name of the collection to page through on the edit document, or null if paging will be disabled.
        * @param docIndexInCollection The 0-based index of the doc to edit inside the paged collection, or null if paging will be disabled.
        * @param database The database to use in the URL. If null, the current database will be used.
        */
        appUrl.forEditDoc = function (id, collectionName, docIndexInCollection, db) {
            var databaseUrlPart = appUrl.getEncodedDbPart(db);
            var docIdUrlPart = id ? "&id=" + encodeURIComponent(id) : "";
            var pagedListInfo = collectionName && docIndexInCollection != null ? "&list=" + encodeURIComponent(collectionName) + "&item=" + docIndexInCollection : "";
            return "#databases/edit?" + docIdUrlPart + databaseUrlPart + pagedListInfo;
        };

        appUrl.forEditItem = function (itemId, res, itemIndex, collectionName) {
            var databaseUrlPart = appUrl.getEncodedResourcePart(res);
            var itemIdUrlPart = itemId ? "&id=" + encodeURIComponent(itemId) : "";

            var pagedListInfo = collectionName && itemIndex != null ? "&list=" + encodeURIComponent(collectionName) + "&item=" + itemIndex : "";
            var resourceTag = res instanceof filesystem ? "#filesystems" : "#databases";
            return resourceTag + "/edit?" + itemIdUrlPart + databaseUrlPart + pagedListInfo;
        };

        appUrl.forEditQueryItem = function (itemNumber, res, index, query, sort) {
            var databaseUrlPart = appUrl.getEncodedResourcePart(res);
            var indexUrlPart = "&index=" + index;
            var itemNumberUrlPart = "&item=" + itemNumber;
            var queryInfoUrlPart = query ? "&query=" + encodeURIComponent(query) : "";
            var sortInfoUrlPart = sort ? "&sorts=" + sort : "";
            var resourceTag = res instanceof filesystem ? "#filesystems" : "#databases";
            return resourceTag + "/edit?" + databaseUrlPart + indexUrlPart + itemNumberUrlPart + queryInfoUrlPart + sortInfoUrlPart;
        };

        appUrl.forNewDoc = function (db) {
            var databaseUrlPart = appUrl.getEncodedDbPart(db);
            return "#databases/edit?" + databaseUrlPart;
        };

        /**
        * Gets the URL for status page.
        * @param database The database to use in the URL. If null, the current database will be used.
        */
        appUrl.forStatus = function (db) {
            return "#databases/status?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forIndexStats = function (db) {
            return "#databases/status/indexStats?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forReplicationPerfStats = function (db) {
            return "#databases/status/replicationPerfStats?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forSqlReplicationPerfStats = function (db) {
            return "#databases/status/sqlReplicationPerfStats?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forMetrics = function (db) {
            return "#databases/status/metrics?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forMetricsRequests = function (db) {
            return "#databases/status/metrics?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forMetricsIndexing = function (db) {
            return "#databases/status/metrics/indexing?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forMetricsIndexBatchSize = function (db) {
            return "#databases/status/metrics/indexBatchSize?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forMetricsPrefetches = function (db) {
            return "#databases/status/metrics/prefetches?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebug = function (db) {
            return "#databases/status/debug?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugChanges = function (db) {
            return "#databases/status/debug?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugMetrics = function (db) {
            return "#databases/status/debug/metrics?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugConfig = function (db) {
            return "#databases/status/debug/config?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugDocrefs = function (db) {
            return "#databases/status/debug/docrefs?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugCurrentlyIndexing = function (db) {
            return "#databases/status/debug/currentlyIndexing?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugQueries = function (db) {
            return "#databases/status/debug/queries?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugTasks = function (db) {
            return "#databases/status/debug/tasks?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugRoutes = function (db) {
            return "#databases/status/debug/routes?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugRequestTracing = function (db) {
            return "#databases/status/debug/requestTracing?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugSqlReplication = function (db) {
            return "#databases/status/debug/sqlReplication?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugIndexFields = function (db) {
            return "#databases/status/debug/indexFields?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugSlowDocCounts = function (db) {
            return "#databases/status/debug/slowDocCounts?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugIdentities = function (db) {
            return "#databases/status/debug/identities?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forStatusDebugWebSocket = function (db) {
            return "#databases/status/debug/webSocket?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forInfoPackage = function (db) {
            return '#databases/status/infoPackage?' + appUrl.getEncodedDbPart(db);
        };

        appUrl.forSettings = function (db) {
            return "#databases/settings/databaseSettings?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forLogs = function (db) {
            return "#databases/status/logs?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forRunningTasks = function (db) {
            return "#databases/status/runningTasks?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forAlerts = function (db) {
            return "#databases/status/alerts?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forIndexErrors = function (db) {
            return "#databases/status/indexErrors?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forReplicationStats = function (db) {
            return "#databases/status/replicationStats?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forUserInfo = function (db) {
            return "#databases/status/userInfo?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forVisualizer = function (db, index) {
            if (typeof index === "undefined") { index = null; }
            var url = "#databases/status/visualizer?" + appUrl.getEncodedDbPart(db);
            if (index) {
                url += "&index=" + index;
            }
            return url;
        };

        appUrl.forIndexingPerfStats = function (db, index) {
            if (typeof index === "undefined") { index = null; }
            var url = "#databases/status/metrics/indexing?" + appUrl.getEncodedDbPart(db);
            if (index) {
                url += "&index=" + index;
            }
            return url;
        };

        appUrl.forDatabaseSettings = function (db) {
            return "#databases/settings/databaseSettings?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forQuotas = function (db) {
            return "#databases/settings/quotas?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forPeriodicExport = function (db) {
            return "#databases/settings/periodicExport?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forReplications = function (db) {
            return "#databases/settings/replication?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forVersioning = function (db) {
            return "#databases/settings/versioning?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forSqlReplications = function (db) {
            return "#databases/settings/sqlReplication?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forEditSqlReplication = function (sqlReplicationName, db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/settings/editSqlReplication/" + encodeURIComponent(sqlReplicationName) + "?" + databasePart;
        };

        appUrl.forSqlReplicationConnections = function (db) {
            return "#databases/settings/sqlReplicationConnectionStringsManagement?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forScriptedIndexes = function (db) {
            return "#databases/settings/scriptedIndex?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forCustomFunctionsEditor = function (db) {
            return "#databases/settings/customFunctionsEditor?" + appUrl.getEncodedDbPart(db);
        };

        appUrl.forDocuments = function (collection, db) {
            var collectionPart = collection ? "collection=" + encodeURIComponent(collection) : "";
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/documents?" + collectionPart + databasePart;
        };

        appUrl.forConflicts = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/conflicts?" + databasePart;
        };

        appUrl.forPatch = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/patch?" + databasePart;
        };

        appUrl.forIndexes = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/indexes?" + databasePart;
        };

        appUrl.forNewIndex = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/indexes/edit?" + databasePart;
        };

        appUrl.forEditIndex = function (indexName, db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/indexes/edit/" + encodeURIComponent(indexName) + "?" + databasePart;
        };

        appUrl.forEditMerged = function (indexName, db) {
            return appUrl.forEditIndex(indexName, db) + "&";
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/indexes/edit/" + encodeURIComponent(indexName) + "?" + databasePart;
        };

        appUrl.forNewTransformer = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/transformers/edit?" + databasePart;
        };

        appUrl.forEditTransformer = function (transformerName, db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/transformers/edit/" + encodeURIComponent(transformerName) + "?" + databasePart;
        };

        appUrl.forTransformers = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/transformers?" + databasePart;
        };

        appUrl.forQuery = function (db, indexNameOrHashToQuery) {
            var databasePart = appUrl.getEncodedDbPart(db);
            var indexToQueryComponent = indexNameOrHashToQuery;
            if (typeof indexNameOrHashToQuery === "number") {
                indexToQueryComponent = "recentquery-" + indexNameOrHashToQuery;
            }

            var indexPart = indexToQueryComponent ? "/" + encodeURIComponent(indexToQueryComponent) : "";
            return "#databases/query/index" + indexPart + "?" + databasePart;
        };

        appUrl.forReporting = function (db, indexName) {
            var databasePart = appUrl.getEncodedDbPart(db);
            var indexPart = indexName ? "/" + encodeURIComponent(indexName) : "";
            return "#databases/query/reporting" + indexPart + "?" + databasePart;
        };

        appUrl.forTasks = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/tasks?" + databasePart;
        };

        appUrl.forResourceQuery = function (res) {
            if (res && res instanceof database && !res.isSystem) {
                return appUrl.baseUrl + "/databases/" + res.name;
            } else if (res && res instanceof filesystem) {
                return appUrl.baseUrl + "/fs/" + res.name;
            } else if (res && res instanceof counterStorage) {
                return appUrl.baseUrl + "/counters/" + res.name;
            }

            return this.baseUrl;
        };

        appUrl.forTerms = function (indexName, db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/indexes/terms/" + encodeURIComponent(indexName) + "?" + databasePart;
        };

        appUrl.forMegeSuggestions = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/indexes/mergeSuggestions?" + databasePart;
        };

        appUrl.forImportDatabase = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/tasks/importDatabase?" + databasePart;
        };

        appUrl.forExportDatabase = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/tasks/exportDatabase?" + databasePart;
        };

        appUrl.forExportCollectionCsv = function (collection, db) {
            if (collection.isAllDocuments || collection.isSystemDocuments) {
                return null;
            }
            return appUrl.forResourceQuery(db) + "/streams/query/Raven/DocumentsByEntityName?format=excel&download=true&query=Tag:" + encodeURIComponent(collection.name);
        };

        appUrl.forToggleIndexing = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/tasks/toggleIndexing?" + databasePart;
        };

        appUrl.forSampleData = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/tasks/sampleData?" + databasePart;
        };

        appUrl.forCsvImport = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases/tasks/csvImport?" + databasePart;
        };

        appUrl.forDatabase = function (db) {
            var databasePart = appUrl.getEncodedDbPart(db);
            return "#databases?" + databasePart;
        };

        appUrl.forFilesystem = function (fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            return "#filesystems?" + filesystemPart;
        };

        appUrl.forCounterStorage = function (cs) {
            var counterStoragePart = appUrl.getEncodedCounterPart(cs);
            return "#counterstorages?" + counterStoragePart;
        };

        appUrl.forIndexesRawData = function (db) {
            return window.location.protocol + "//" + window.location.host + "/databases/" + db.name + "/indexes";
        };

        appUrl.forIndexQueryRawData = function (db, indexName) {
            return window.location.protocol + "//" + window.location.host + "/databases/" + db.name + "/indexes/" + indexName;
        };

        appUrl.forTransformersRawData = function (db) {
            return window.location.protocol + "//" + window.location.host + "/databases/" + db.name + "/transformers";
        };

        appUrl.forDatabasesRawData = function () {
            return window.location.protocol + "//" + window.location.host + "/databases";
        };

        appUrl.forDocumentRawData = function (db, docId) {
            return window.location.protocol + "//" + window.location.host + "/databases/" + db.name + "/docs/" + docId;
        };

        appUrl.forFilesystemFiles = function (fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            return "#filesystems/files?" + filesystemPart;
        };

        appUrl.forFilesystemSearch = function (fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            return "#filesystems/search?" + filesystemPart;
        };

        appUrl.forFilesystemSynchronization = function (fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            return "#filesystems/synchronization?" + filesystemPart;
        };

        appUrl.forFilesystemSynchronizationDestinations = function (fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            return "#filesystems/synchronization/destinations?" + filesystemPart;
        };

        appUrl.forFilesystemStatus = function (fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            return "#filesystems/status?" + filesystemPart;
        };

        appUrl.forFilesystemConfiguration = function (fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            return "#filesystems/configuration?" + filesystemPart;
        };

        appUrl.forFilesystemConfigurationWithKey = function (fs, key) {
            var filesystemPart = appUrl.getEncodedFsPart(fs) + "&key=" + encodeURIComponent(key);
            return "#filesystems/configuration?" + filesystemPart;
        };

        appUrl.forEditFile = function (id, fs) {
            var filesystemPart = appUrl.getEncodedFsPart(fs);
            var fileIdPart = id ? "&id=" + encodeURIComponent(id) : "";
            return "#filesystems/edit?" + fileIdPart + filesystemPart;
        };

        /**
        * Gets the resource from the current web browser address. Returns the system database if no resource name is found.
        */
        appUrl.getResource = function () {
            var appFileSystem = appUrl.getFileSystem();
            var appCounterStorage = appUrl.getCounterStorage();

            if (!!appFileSystem) {
                return appFileSystem;
            } else if (!!appCounterStorage) {
                return appCounterStorage;
            } else {
                return appUrl.getDatabase();
            }
        };

        /**
        * Gets the database from the current web browser address. Returns the system database if no database name was found.
        */
        appUrl.getDatabase = function () {
            // TODO: instead of string parsing, can we pull this from durandal.activeInstruction()?
            var dbIndicator = "database=";
            var hash = window.location.hash;
            var dbIndex = hash.indexOf(dbIndicator);
            if (dbIndex >= 0) {
                // A database is specified in the address.
                var dbSegmentEnd = hash.indexOf("&", dbIndex);
                if (dbSegmentEnd === -1) {
                    dbSegmentEnd = hash.length;
                }

                var databaseName = hash.substring(dbIndex + dbIndicator.length, dbSegmentEnd);
                var unescapedDatabaseName = decodeURIComponent(databaseName);
                var db = new database(unescapedDatabaseName);
                db.isSystem = unescapedDatabaseName === "<system>";
                return db;
            } else {
                // No database is specified in the URL. Assume it's the system database.
                return null;
            }
        };

        appUrl.getSystemDatabase = function () {
            var db = new database("<system>");
            db.isSystem = true;
            return db;
        };

        /**
        * Gets the file system from the current web browser address. Returns null if no file system name was found.
        */
        appUrl.getFileSystem = function () {
            // TODO: instead of string parsing, can we pull this from durandal.activeInstruction()?
            var fileSystemIndicator = "filesystem=";
            var hash = window.location.hash;
            var fsIndex = hash.indexOf(fileSystemIndicator);
            if (fsIndex >= 0) {
                // A database is specified in the address.
                var fsSegmentEnd = hash.indexOf("&", fsIndex);
                if (fsSegmentEnd === -1) {
                    fsSegmentEnd = hash.length;
                }

                var fileSystemName = hash.substring(fsIndex + fileSystemIndicator.length, fsSegmentEnd);
                var unescapedFileSystemName = decodeURIComponent(fileSystemName);
                var fs = new filesystem(unescapedFileSystemName);
                return fs;
            } else {
                // No file system is specified in the URL.
                return null;
            }
        };

        /**
        * Gets the counter storage from the current web browser address. Returns null if no counter storage name was found.
        */
        appUrl.getCounterStorage = function () {
            // TODO: instead of string parsing, can we pull this from durandal.activeInstruction()?
            var counterStorageIndicator = "counterstorage=";
            var hash = window.location.hash;
            var csIndex = hash.indexOf(counterStorageIndicator);
            if (csIndex >= 0) {
                // A database is specified in the address.
                var csSegmentEnd = hash.indexOf("&", csIndex);
                if (csSegmentEnd === -1) {
                    csSegmentEnd = hash.length;
                }

                var counterStorageName = hash.substring(csIndex + counterStorageIndicator.length, csSegmentEnd);
                var unescapedCounterStorageName = decodeURIComponent(counterStorageName);
                var cs = new counterStorage(unescapedCounterStorageName);
                return cs;
            } else {
                // No counter storage is specified in the URL.
                return null;
            }
        };

        /**
        * Gets the server URL.
        */
        appUrl.forServer = function () {
            // Ported this code from old Silverlight Studio. Do we still need this?
            if (window.location.protocol === "file:") {
                if (window.location.search.indexOf("fiddler")) {
                    return "http://localhost.fiddler:8080";
                } else {
                    return "http://localhost:8080";
                }
            }

            return window.location.protocol + "//" + window.location.host;
        };

        /**
        * Gets the address for the current page but for the specified resource.
        */
        appUrl.forCurrentPage = function (rs) {
            var routerInstruction = router.activeInstruction();
            if (routerInstruction) {
                var currentResourceName = null;
                var currentResourceType = null;
                var dbInUrl = routerInstruction.queryParams[database.type];
                if (dbInUrl) {
                    currentResourceName = dbInUrl;
                    currentResourceType = database.type;
                } else {
                    var fsInUrl = routerInstruction.queryParams[filesystem.type];
                    if (fsInUrl) {
                        currentResourceName = fsInUrl;
                        currentResourceType = filesystem.type;
                    } else {
                        var cntInUrl = routerInstruction.queryParams[counterStorage.type];
                        if (cntInUrl) {
                            currentResourceName = cntInUrl;
                            currentResourceType = counterStorage.type;
                        }
                    }
                }

                if (currentResourceType && currentResourceType != rs.type) {
                    // user changed resource type - navigate to resources page and preselect resource
                    return appUrl.forResources() + "?" + rs.type + "=" + encodeURIComponent(rs.name);
                }
                var isDifferentDbInAddress = !currentResourceName || currentResourceName !== rs.name.toLowerCase();
                if (isDifferentDbInAddress) {
                    var existingAddress = window.location.hash;
                    var existingDbQueryString = currentResourceName ? rs.type + "=" + encodeURIComponent(currentResourceName) : null;
                    var newDbQueryString = rs.type + "=" + encodeURIComponent(rs.name);
                    var newUrlWithDatabase = existingDbQueryString ? existingAddress.replace(existingDbQueryString, newDbQueryString) : existingAddress + (window.location.hash.indexOf("?") >= 0 ? "&" : "?") + rs.type + "=" + encodeURIComponent(rs.name);

                    return newUrlWithDatabase;
                }
            }
        };

        /**
        * Gets an object containing computed URLs that update when the current database updates.
        */
        appUrl.forCurrentDatabase = function () {
            return appUrl.currentDbComputeds;
        };

        appUrl.forCurrentFilesystem = function () {
            return appUrl.currentDbComputeds;
        };

        appUrl.getEncodedResourcePart = function (res) {
            if (!res)
                return "";
            if (res instanceof filesystem) {
                return appUrl.getEncodedFsPart(res);
            } else {
                return appUrl.getEncodedDbPart(res);
            }
        };

        appUrl.getEncodedDbPart = function (db) {
            return db ? "&database=" + encodeURIComponent(db.name) : "";
        };

        appUrl.getEncodedFsPart = function (fs) {
            return fs ? "&filesystem=" + encodeURIComponent(fs.name) : "";
        };

        appUrl.getEncodedCounterPart = function (cs) {
            return cs ? "&counterstorage=" + encodeURIComponent(cs.name) : "";
        };

        appUrl.mapUnknownRoutes = function (router) {
            router.mapUnknownRoutes(function (instruction) {
                var queryString = !!instruction.queryString ? ("?" + instruction.queryString) : "";
                messagePublisher.reportError("Unknown route", "The route " + instruction.fragment + queryString + " doesn't exist, redirecting...");

                var fragment = instruction.fragment;
                var appUrls = appUrl.currentDbComputeds;
                var newLoationHref;
                if (fragment.indexOf("admin/settings") == 0) {
                    newLoationHref = appUrls.adminSettings();
                } else {
                    newLoationHref = appUrls.resourcesManagement();
                }
                location.href = newLoationHref;
            });
        };
        appUrl.baseUrl = appUrl.detectAppUrl();
        appUrl.currentDatabase = ko.observable().subscribeTo("ActivateDatabase", true);
        appUrl.currentFilesystem = ko.observable().subscribeTo("ActivateFilesystem", true);
        appUrl.currentCounterStorage = ko.observable().subscribeTo("ActivateCounterStorage", true);

        appUrl.currentDbComputeds = {
            adminSettings: ko.computed(function () {
                return appUrl.forAdminSettings();
            }),
            resources: ko.computed(function () {
                return appUrl.forResources();
            }),
            documents: ko.computed(function () {
                return appUrl.forDocuments(null, appUrl.currentDatabase());
            }),
            conflicts: ko.computed(function () {
                return appUrl.forConflicts(appUrl.currentDatabase());
            }),
            patch: ko.computed(function () {
                return appUrl.forPatch(appUrl.currentDatabase());
            }),
            indexes: ko.computed(function () {
                return appUrl.forIndexes(appUrl.currentDatabase());
            }),
            megeSuggestions: ko.computed(function () {
                return appUrl.forMegeSuggestions(appUrl.currentDatabase());
            }),
            upgrade: ko.computed(function () {
                return appUrl.forUpgrade(appUrl.currentDatabase());
            }),
            transformers: ko.computed(function () {
                return appUrl.forTransformers(appUrl.currentDatabase());
            }),
            newIndex: ko.computed(function () {
                return appUrl.forNewIndex(appUrl.currentDatabase());
            }),
            editIndex: function (indexName) {
                return ko.computed(function () {
                    return appUrl.forEditIndex(indexName, appUrl.currentDatabase());
                });
            },
            newTransformer: ko.computed(function () {
                return appUrl.forNewTransformer(appUrl.currentDatabase());
            }),
            editTransformer: function (transformerName) {
                return ko.computed(function () {
                    return appUrl.forEditTransformer(transformerName, appUrl.currentDatabase());
                });
            },
            query: function (indexName) {
                return ko.computed(function () {
                    return appUrl.forQuery(appUrl.currentDatabase(), indexName);
                });
            },
            reporting: ko.computed(function () {
                return appUrl.forReporting(appUrl.currentDatabase());
            }),
            tasks: ko.computed(function () {
                return appUrl.forTasks(appUrl.currentDatabase());
            }),
            status: ko.computed(function () {
                return appUrl.forStatus(appUrl.currentDatabase());
            }),
            indexStats: ko.computed(function () {
                return appUrl.forIndexStats(appUrl.currentDatabase());
            }),
            replicationPerfStats: ko.computed(function () {
                return appUrl.forReplicationPerfStats(appUrl.currentDatabase());
            }),
            sqlReplicationPerfStats: ko.computed(function () {
                return appUrl.forSqlReplicationPerfStats(appUrl.currentDatabase());
            }),
            metrics: ko.computed(function () {
                return appUrl.forMetrics(appUrl.currentDatabase());
            }),
            metricsIndexing: ko.computed(function () {
                return appUrl.forMetricsIndexing(appUrl.currentDatabase());
            }),
            metricsRequests: ko.computed(function () {
                return appUrl.forMetricsRequests(appUrl.currentDatabase());
            }),
            metricsIndexBatchSize: ko.computed(function () {
                return appUrl.forMetricsIndexBatchSize(appUrl.currentDatabase());
            }),
            metricsPrefetches: ko.computed(function () {
                return appUrl.forMetricsPrefetches(appUrl.currentDatabase());
            }),
            settings: ko.computed(function () {
                return appUrl.forSettings(appUrl.currentDatabase());
            }),
            logs: ko.computed(function () {
                return appUrl.forLogs(appUrl.currentDatabase());
            }),
            runningTasks: ko.computed(function () {
                return appUrl.forRunningTasks(appUrl.currentDatabase());
            }),
            alerts: ko.computed(function () {
                return appUrl.forAlerts(appUrl.currentDatabase());
            }),
            indexErrors: ko.computed(function () {
                return appUrl.forIndexErrors(appUrl.currentDatabase());
            }),
            replicationStats: ko.computed(function () {
                return appUrl.forReplicationStats(appUrl.currentDatabase());
            }),
            userInfo: ko.computed(function () {
                return appUrl.forUserInfo(appUrl.currentDatabase());
            }),
            visualizer: ko.computed(function () {
                return appUrl.forVisualizer(appUrl.currentDatabase());
            }),
            databaseSettings: ko.computed(function () {
                return appUrl.forDatabaseSettings(appUrl.currentDatabase());
            }),
            quotas: ko.computed(function () {
                return appUrl.forQuotas(appUrl.currentDatabase());
            }),
            periodicExport: ko.computed(function () {
                return appUrl.forPeriodicExport(appUrl.currentDatabase());
            }),
            replications: ko.computed(function () {
                return appUrl.forReplications(appUrl.currentDatabase());
            }),
            versioning: ko.computed(function () {
                return appUrl.forVersioning(appUrl.currentDatabase());
            }),
            sqlReplications: ko.computed(function () {
                return appUrl.forSqlReplications(appUrl.currentDatabase());
            }),
            editSqlReplication: ko.computed(function (sqlReplicationName) {
                return appUrl.forEditSqlReplication(sqlReplicationName, appUrl.currentDatabase());
            }),
            sqlReplicationsConnections: ko.computed(function () {
                return appUrl.forSqlReplicationConnections(appUrl.currentDatabase());
            }),
            scriptedIndexes: ko.computed(function () {
                return appUrl.forScriptedIndexes(appUrl.currentDatabase());
            }),
            customFunctionsEditor: ko.computed(function () {
                return appUrl.forCustomFunctionsEditor(appUrl.currentDatabase());
            }),
            statusDebug: ko.computed(function () {
                return appUrl.forStatusDebug(appUrl.currentDatabase());
            }),
            statusDebugChanges: ko.computed(function () {
                return appUrl.forStatusDebugChanges(appUrl.currentDatabase());
            }),
            statusDebugMetrics: ko.computed(function () {
                return appUrl.forStatusDebugMetrics(appUrl.currentDatabase());
            }),
            statusDebugConfig: ko.computed(function () {
                return appUrl.forStatusDebugConfig(appUrl.currentDatabase());
            }),
            statusDebugDocrefs: ko.computed(function () {
                return appUrl.forStatusDebugDocrefs(appUrl.currentDatabase());
            }),
            statusDebugCurrentlyIndexing: ko.computed(function () {
                return appUrl.forStatusDebugCurrentlyIndexing(appUrl.currentDatabase());
            }),
            statusDebugQueries: ko.computed(function () {
                return appUrl.forStatusDebugQueries(appUrl.currentDatabase());
            }),
            statusDebugTasks: ko.computed(function () {
                return appUrl.forStatusDebugTasks(appUrl.currentDatabase());
            }),
            statusDebugRoutes: ko.computed(function () {
                return appUrl.forStatusDebugRoutes(appUrl.currentDatabase());
            }),
            statusDebugRequestTracing: ko.computed(function () {
                return appUrl.forStatusDebugRequestTracing(appUrl.currentDatabase());
            }),
            statusDebugSqlReplication: ko.computed(function () {
                return appUrl.forStatusDebugSqlReplication(appUrl.currentDatabase());
            }),
            statusDebugIndexFields: ko.computed(function () {
                return appUrl.forStatusDebugIndexFields(appUrl.currentDatabase());
            }),
            statusDebugSlowDocCounts: ko.computed(function () {
                return appUrl.forStatusDebugSlowDocCounts(appUrl.currentDatabase());
            }),
            statusDebugIdentities: ko.computed(function () {
                return appUrl.forStatusDebugIdentities(appUrl.currentDatabase());
            }),
            statusDebugWebSocket: ko.computed(function () {
                return appUrl.forStatusDebugWebSocket(appUrl.currentDatabase());
            }),
            infoPackage: ko.computed(function () {
                return appUrl.forInfoPackage(appUrl.currentDatabase());
            }),
            isAreaActive: function (routeRoot) {
                return ko.computed(function () {
                    return appUrl.checkIsAreaActive(routeRoot);
                });
            },
            isActive: function (routeTitle) {
                return ko.computed(function () {
                    return router.navigationModel().first(function (m) {
                        return m.isActive() && m.title === routeTitle;
                    }) != null;
                });
            },
            resourcesManagement: ko.computed(function () {
                return appUrl.forResources();
            }),
            filesystemFiles: ko.computed(function () {
                return appUrl.forFilesystemFiles(appUrl.currentFilesystem());
            }),
            filesystemSearch: ko.computed(function () {
                return appUrl.forFilesystemSearch(appUrl.currentFilesystem());
            }),
            filesystemSynchronization: ko.computed(function () {
                return appUrl.forFilesystemSynchronization(appUrl.currentFilesystem());
            }),
            filesystemStatus: ko.computed(function () {
                return appUrl.forFilesystemStatus(appUrl.currentFilesystem());
            }),
            filesystemSynchronizationDestinations: ko.computed(function () {
                return appUrl.forFilesystemSynchronizationDestinations(appUrl.currentFilesystem());
            }),
            filesystemConfiguration: ko.computed(function () {
                return appUrl.forFilesystemConfiguration(appUrl.currentFilesystem());
            }),
            couterStorages: ko.computed(function () {
                return appUrl.forCounterStorages();
            }),
            counterStorageCounters: ko.computed(function () {
                return appUrl.forCounterStorageCounters(appUrl.currentCounterStorage());
            }),
            counterStorageReplication: ko.computed(function () {
                return appUrl.forCounterStorageReplication(appUrl.currentCounterStorage());
            }),
            counterStorageStats: ko.computed(function () {
                return appUrl.forCounterStorageStats(appUrl.currentCounterStorage());
            }),
            counterStorageConfiguration: ko.computed(function () {
                return appUrl.forCounterStorageConfiguration(appUrl.currentCounterStorage());
            })
        };

        appUrl.warnWhenUsingSystemDatabase = true;
        return appUrl;
    })();

    
    return appUrl;
});
define("common/autoCompleteBindingHandler", ["require", "exports", "durandal/composition"], function(require, exports, composition) {
    /*
    * A KnockoutJS binding handler that transforms a div into the auto-complete items container for a text box.
    *
    * Usage:
    *           <input id="myAutoComplete" type="text" data-bind="value: mySearchValue, valueUpdate: 'afterkeydown'" />
    *           <div style="display: none" data-bind="autoComplete: '#myAutoComplete', foreach: yourOwnResults">
    *               <div data-bind="text: name"></div>
    *           </div>
    *
    * In the above sample, yourOwnResults is an array that you are responsible for populating. And 'name' is the property on the items in that array.
    */
    var autoCompleteBindingHandler = (function () {
        function autoCompleteBindingHandler() {
        }
        autoCompleteBindingHandler.install = function () {
            if (!ko.bindingHandlers["autoComplete"]) {
                ko.bindingHandlers["autoComplete"] = new autoCompleteBindingHandler();

                // This tells Durandal to fire this binding handler only after composition
                // is complete and attached to the DOM.
                // See http://durandaljs.com/documentation/Interacting-with-the-DOM/
                composition.addBindingHandler("autoComplete");
            }
        };

        // Called by Knockout a single time when the binding handler is setup.
        autoCompleteBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var _this = this;
            var inputId = valueAccessor();
            var input = $(inputId);
            if (input.length !== 1) {
                // Don't throw an error here, because we may cancel navigation, and Durandal may pull the element out.
                // Instead, we'll just issue a warning in the console and return.
                //throw new Error("Expected 1 auto complete element, '" + inputId + "', but found " + input.length);
                console.warn("Expected 1 auto complete element, '" + inputId + "', but found " + input.length);
                return;
            }

            // Hide the auto complete container and size it to the same size as the textbox.
            var $element = $(element);
            element.style.display = "none";
            element.style.position = "absolute";
            element.style.left = "auto";
            element.style.top = (input.height() + 20) + "px";

            //This makes elements with long names overflow the container... commenting it for the moment
            //element.style.width = input.width() + "px";
            // Clicking an element in the auto complete list should hide it.
            $element.on('click', function () {
                return setTimeout(function () {
                    return element.style.display = "none";
                }, 0);
            });

            // Leaving the textbox should hide the auto complete list.
            input.on('blur', function (args) {
                return setTimeout(function () {
                    return element.style.display = "none";
                }, 200);
            });

            // Putting the focus back on the textbox should show the auto complete list if we have items.
            input.on('focus', function (args) {
                return setTimeout(function () {
                    return element.style.display = _this.getAllAutoCompleteItems($element).length > 0 ? "block" : "none";
                });
            });

            // Up, down, enter all have special meaning.
            input.on('keydown', function (args) {
                return _this.handleKeyPress(element, $element, input, args);
            });

            // When the results change and we have 1 or more, display the auto complete container.
            var results = allBindings()['foreach'];
            if (!results) {
                throw new Error("Unable to find results list for auto complete.");
            }
            var subscription = results.subscribe(function (array) {
                element.style.display = array.length === 0 || !input.is(":focus") ? "none" : "block";
            });

            // Clean up after ourselves when the node is removed from the DOM.
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                input.off('blur');
                $element.off('click');
                input.off('keydown');
                subscription.dispose();
            });
        };

        autoCompleteBindingHandler.prototype.getAllAutoCompleteItems = function (resultContainer) {
            return resultContainer.children("li");
        };

        autoCompleteBindingHandler.prototype.findAutoCompleteItemMatching = function (resultContainer, text) {
            var textLower = text.toLowerCase();
            return this.getAllAutoCompleteItems(resultContainer).toArray().filter(function (el) {
                return el.textContent && el.textContent.trim().toLowerCase().indexOf(textLower) >= 0;
            })[0];
        };

        autoCompleteBindingHandler.prototype.handleKeyPress = function (element, $element, $input, args) {
            var enter = 13;
            var downArrow = 40;
            var upArrow = 38;

            var lis, curSelected;
            if (element.style.display == "none" && args.which === downArrow) {
                if ($element.children("li").length > 0 && $input.is(":focus")) {
                    setTimeout(function () {
                        return element.style.display = "block";
                    }, 0);
                    return true;
                }
            }

            if (args.which === downArrow || args.which === upArrow || args.which === enter) {
                lis = this.getAllAutoCompleteItems($element);
                curSelected = $element.find('.selected');
            }

            if (args.which === downArrow) {
                if (curSelected.length > 0) {
                    curSelected.removeClass("selected");
                    var nextSelected = curSelected.next();

                    if (nextSelected.length) {
                        nextSelected.addClass("selected");
                    } else {
                        lis.first().addClass('selected');
                    }
                } else {
                    curSelected = lis.first().addClass("selected");
                }
            } else if (args.which === upArrow) {
                if (curSelected.length > 0) {
                    curSelected.removeClass("selected");
                    var prevSelected = curSelected.prev();

                    if (prevSelected.length) {
                        prevSelected.addClass("selected");
                    } else {
                        lis.last().addClass('selected');
                    }
                } else {
                    curSelected = lis.last().addClass("selected");
                }
            } else if (args.which === enter) {
                var itemToSelect = curSelected.length ? curSelected : $(this.findAutoCompleteItemMatching($element, $input.val()));
                if (itemToSelect.length) {
                    itemToSelect.click();
                }
            }
        };
        return autoCompleteBindingHandler;
    })();

    
    return autoCompleteBindingHandler;
});
define("common/autoCompleterSupport", ["require", "exports", 'common/inputCursor'], function(require, exports, inputCursor) {
    var autoCompleterSupport = (function () {
        function autoCompleterSupport(autoCompleteBase, autoCompleteResults) {
            this.autoCompleteBase = autoCompleteBase;
            this.autoCompleteResults = autoCompleteResults;
        }
        autoCompleterSupport.prototype.searchForCompletions = function (input) {
            this.autoCompleteResults([]);

            var typedWord = this.getWordUserIsTyping(input);

            if (typedWord.length >= 1) {
                this.autoCompleteResults(this.autoCompleteBase().filter(function (value) {
                    return autoCompleterSupport.wordMatches(typedWord, value()) && (value() !== input.val()) && (value() !== typedWord) && (value().indexOf(' ') === -1);
                }));
            }
        };

        autoCompleterSupport.prototype.completeTheWord = function (input, selectedCompletion) {
            if (input.length > 0) {
                var inputValue = input.val();
                var typedWord = this.getWordUserIsTyping(input);

                var cursorPosition = inputCursor.getPosition(input);
                var beginIndex = this.findWordStartWithEndPosition(inputValue, cursorPosition - 1) + 1;

                input.val(inputValue.substring(0, beginIndex) + selectedCompletion + inputValue.substring(cursorPosition));

                var positionCorrection = 0;
                if (selectedCompletion[selectedCompletion.length - 1] === ")") {
                    positionCorrection = -1;
                }
                inputCursor.setPosition(input, beginIndex + selectedCompletion.length + positionCorrection);
                this.autoCompleteResults([]);
            }
        };

        autoCompleterSupport.prototype.findWordStartWithEndPosition = function (inputValue, endPosition) {
            var beginIndex = 0;
            for (beginIndex = endPosition; beginIndex >= 0; beginIndex--) {
                var charCode = inputValue.charCodeAt(beginIndex);

                // going back skip every alphanumeric characters
                if ((48 <= charCode && charCode <= 57) || (65 <= charCode && charCode <= 90) || (97 <= charCode && charCode <= 122) || (charCode == 95)) {
                    continue;
                } else {
                    break;
                }
            }
            return beginIndex;
        };
        autoCompleterSupport.prototype.getWordUserIsTyping = function ($input) {
            var cursorPosition = inputCursor.getPosition($input);

            //var beginIndex = $input.val().lastIndexOf(' ', cursorPosition-1);
            var beginIndex = this.findWordStartWithEndPosition($input.val(), cursorPosition - 1) + 1;

            var endIndex = $input.val().indexOf(' ', cursorPosition);
            if (endIndex === -1) {
                endIndex = $input.val().length;
            }
            return $input.val().substring(beginIndex, cursorPosition).trim();
        };

        autoCompleterSupport.wordMatches = function (toCheck, toMatch) {
            // ignore the case
            toCheck = toCheck.toLowerCase();
            toMatch = toMatch.toLowerCase();

            // match as long as the letters are in correct order
            var matchedChars = 0;
            for (var i = 0; i < toMatch.length; i++) {
                if (toCheck[matchedChars] === toMatch[i]) {
                    matchedChars++;
                }
                if (matchedChars >= toCheck.length) {
                    return true;
                }
            }
            return false;
        };
        return autoCompleterSupport;
    })();

    
    return autoCompleterSupport;
});
/// <reference path="../../Scripts/typings/jquery/jquery.d.ts" />
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/changesApi", ["require", "exports", 'common/appUrl', 'models/changeSubscription', 'common/changesCallback', 'commands/commandBase', "models/filesystem/folder", "commands/getSingleAuthTokenCommand", "common/idGenerator"], function(require, exports, appUrl, changeSubscription, changesCallback, commandBase, folder, getSingleAuthTokenCommand, idGenerator) {
    var changesApi = (function () {
        function changesApi(rs, coolDownWithDataLoss, isMultyTenantTransport) {
            if (typeof coolDownWithDataLoss === "undefined") { coolDownWithDataLoss = 0; }
            if (typeof isMultyTenantTransport === "undefined") { isMultyTenantTransport = false; }
            this.rs = rs;
            this.readyStateOpen = 1;
            this.isCleanClose = false;
            this.normalClosureCode = 1000;
            this.normalClosureMessage = "CLOSE_NORMAL";
            this.successfullyConnectedOnce = false;
            this.sentMessages = [];
            this.allReplicationConflicts = ko.observableArray();
            this.allDocsHandlers = ko.observableArray();
            this.allIndexesHandlers = ko.observableArray();
            this.allTransformersHandlers = ko.observableArray();
            this.watchedPrefixes = {};
            this.allBulkInsertsHandlers = ko.observableArray();
            this.allFsSyncHandlers = ko.observableArray();
            this.allFsConflictsHandlers = ko.observableArray();
            this.allFsConfigHandlers = ko.observableArray();
            this.allFsDestinationsHandlers = ko.observableArray();
            this.watchedFolders = {};
            this.commandBase = new commandBase();
            this.eventsId = idGenerator.generateId();
            this.coolDownWithDataLoss = coolDownWithDataLoss;
            this.isMultyTenantTransport = isMultyTenantTransport;
            this.resourcePath = appUrl.forResourceQuery(this.rs);
            this.connectToChangesApiTask = $.Deferred();

            if ("WebSocket" in window && changesApi.isServerSupportingWebSockets) {
                this.connect(this.connectWebSocket);
            } else if ("EventSource" in window) {
                this.connect(this.connectEventSource);
            } else {
                //The browser doesn't support nor websocket nor eventsource
                //or we are in IE10 or IE11 and the server doesn't support WebSockets.
                //Anyway, at this point a warning message was already shown.
                this.connectToChangesApiTask.reject();
            }
        }
        changesApi.prototype.connect = function (action, needToReconnect) {
            var _this = this;
            if (typeof needToReconnect === "undefined") { needToReconnect = false; }
            this.connectToChangesApiTask = $.Deferred();
            var getTokenTask = new getSingleAuthTokenCommand(this.rs).execute();

            getTokenTask.done(function (tokenObject) {
                var token = tokenObject.Token;
                var connectionString = 'singleUseAuthToken=' + token + '&id=' + _this.eventsId + '&coolDownWithDataLoss=' + _this.coolDownWithDataLoss + '&isMultyTenantTransport=' + _this.isMultyTenantTransport;
                action.call(_this, connectionString);
            }).fail(function (e) {
                if (e.status == 0) {
                    // Connection has closed so try to reconnect every 3 seconds.
                    setTimeout(function () {
                        return _this.connect(action);
                    }, 3 * 1000);
                } else if (e.status != 403) {
                    _this.commandBase.reportError(e.responseJSON.Error);
                    _this.connectToChangesApiTask.reject();
                }
            });
        };

        changesApi.prototype.connectWebSocket = function (connectionString) {
            var _this = this;
            var connectionOpened = false;

            var wsProtocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            var url = wsProtocol + window.location.host + this.resourcePath + '/changes/websocket?' + connectionString;
            this.webSocket = new WebSocket(url);

            this.webSocket.onmessage = function (e) {
                return _this.onMessage(e);
            };
            this.webSocket.onerror = function (e) {
                if (connectionOpened == false) {
                    _this.serverNotSupportingWebsocketsErrorHandler();
                } else {
                    _this.onError(e);
                }
            };
            this.webSocket.onclose = function (e) {
                if (_this.isCleanClose == false && changesApi.isServerSupportingWebSockets) {
                    // Connection has closed uncleanly, so try to reconnect.
                    _this.connect(_this.connectWebSocket);
                }
            };
            this.webSocket.onopen = function () {
                console.log("Connected to WebSocket changes API (rs = " + _this.rs.name + ")");
                _this.reconnect();
                _this.successfullyConnectedOnce = true;
                connectionOpened = true;
                _this.connectToChangesApiTask.resolve();
            };
        };

        changesApi.prototype.connectEventSource = function (connectionString) {
            var _this = this;
            var connectionOpened = false;

            this.eventSource = new EventSource(this.resourcePath + '/changes/events?' + connectionString);

            this.eventSource.onmessage = function (e) {
                return _this.onMessage(e);
            };
            this.eventSource.onerror = function (e) {
                if (connectionOpened == false) {
                    _this.connectToChangesApiTask.reject();
                } else {
                    _this.onError(e);
                    _this.eventSource.close();
                    _this.connect(_this.connectEventSource);
                }
            };
            this.eventSource.onopen = function () {
                console.log("Connected to EventSource changes API (rs = " + _this.rs.name + ")");
                _this.reconnect();
                _this.successfullyConnectedOnce = true;
                connectionOpened = true;
                _this.connectToChangesApiTask.resolve();
            };
        };

        changesApi.prototype.reconnect = function () {
            var _this = this;
            if (this.successfullyConnectedOnce) {
                //send changes connection args after reconnecting
                this.sentMessages.forEach(function (args) {
                    return _this.send(args.command, args.value, false);
                });

                ko.postbox.publish("ChangesApiReconnected", this.rs);

                if (changesApi.messageWasShownOnce) {
                    this.commandBase.reportSuccess("Successfully reconnected to changes stream!");
                    changesApi.messageWasShownOnce = false;
                }
            }
        };

        changesApi.prototype.onError = function (e) {
            if (changesApi.messageWasShownOnce == false) {
                this.commandBase.reportError("Changes stream was disconnected!", "Retrying connection shortly.");
                changesApi.messageWasShownOnce = true;
            }
        };

        changesApi.prototype.serverNotSupportingWebsocketsErrorHandler = function () {
            var warningMessage;
            var details;

            if ("EventSource" in window) {
                this.connect(this.connectEventSource);
                warningMessage = "Your server doesn't support the WebSocket protocol!";
                details = "EventSource API is going to be used instead. However, multi tab usage isn't supported.\r\n" + "WebSockets are only supported on servers running on Windows Server 2012 and equivalent. \r\n" + " If you have issues with WebSockets on Windows Server 2012 and equivalent use Status > Debug > WebSocket to debug.";
            } else {
                this.connectToChangesApiTask.reject();
                warningMessage = "Changes API is Disabled!";
                details = "Your server doesn't support the WebSocket protocol and your browser doesn't support the EventSource API.\r\n" + "In order to use it, please use a browser that supports the EventSource API.";
            }

            this.showWarning(warningMessage, details);
        };

        changesApi.prototype.showWarning = function (message, details) {
            if (changesApi.isServerSupportingWebSockets) {
                changesApi.isServerSupportingWebSockets = false;
                this.commandBase.reportWarning(message, details);
            }
        };

        changesApi.prototype.send = function (command, value, needToSaveSentMessages) {
            var _this = this;
            if (typeof needToSaveSentMessages === "undefined") { needToSaveSentMessages = true; }
            this.connectToChangesApiTask.done(function () {
                var args = {
                    id: _this.eventsId,
                    command: command
                };
                if (value !== undefined) {
                    args["value"] = value;
                }

                //TODO: exception handling?
                _this.commandBase.query('/changes/config', args, _this.rs).done(function () {
                    return _this.saveSentMessages(needToSaveSentMessages, command, args);
                });
            });
        };

        changesApi.prototype.saveSentMessages = function (needToSaveSentMessages, command, args) {
            if (needToSaveSentMessages) {
                if (command.slice(0, 2) == "un") {
                    var commandName = command.slice(2, command.length);
                    this.sentMessages = this.sentMessages.filter(function (msg) {
                        return msg.command != commandName;
                    });
                } else {
                    this.sentMessages.push(args);
                }
            }
        };

        changesApi.prototype.fireEvents = function (events, param, filter) {
            for (var i = 0; i < events.length; i++) {
                if (filter(param)) {
                    events[i].fire(param);
                }
            }
        };

        changesApi.prototype.onMessage = function (e) {
            var eventDto = JSON.parse(e.data);
            var type = eventDto.Type;
            var value = eventDto.Value;

            if (type !== "Heartbeat") {
                if (type === "DocumentChangeNotification") {
                    this.fireEvents(this.allDocsHandlers(), value, function (e) {
                        return true;
                    });
                    for (var key in this.watchedPrefixes) {
                        var docCallbacks = this.watchedPrefixes[key];
                        this.fireEvents(docCallbacks(), value, function (e) {
                            return e.Id != null && e.Id.match("^" + key);
                        });
                    }
                } else if (type === "IndexChangeNotification") {
                    this.fireEvents(this.allIndexesHandlers(), value, function (e) {
                        return true;
                    });
                } else if (type === "TransformerChangeNotification") {
                    this.fireEvents(this.allTransformersHandlers(), value, function (e) {
                        return true;
                    });
                } else if (type === "BulkInsertChangeNotification") {
                    this.fireEvents(this.allBulkInsertsHandlers(), value, function (e) {
                        return true;
                    });
                } else if (type === "SynchronizationUpdateNotification") {
                    this.fireEvents(this.allFsSyncHandlers(), value, function (e) {
                        return true;
                    });
                } else if (type === "ReplicationConflictNotification") {
                    this.fireEvents(this.allReplicationConflicts(), value, function (e) {
                        return true;
                    });
                } else if (type === "ConflictNotification") {
                    this.fireEvents(this.allFsConflictsHandlers(), value, function (e) {
                        return true;
                    });
                } else if (type === "FileChangeNotification") {
                    for (var key in this.watchedFolders) {
                        var folderCallbacks = this.watchedFolders[key];
                        this.fireEvents(folderCallbacks(), value, function (e) {
                            var notifiedFolder = folder.getFolderFromFilePath(e.File);
                            var match = null;
                            if (notifiedFolder && notifiedFolder.path) {
                                match = notifiedFolder.path.match(key);
                            }
                            return match && match.length > 0;
                        });
                    }
                } else if (type === "ConfigurationChangeNotification") {
                    if (value.Name.indexOf("Raven/Synchronization/Destinations") >= 0) {
                        this.fireEvents(this.allFsDestinationsHandlers(), value, function (e) {
                            return true;
                        });
                    }
                    this.fireEvents(this.allFsConfigHandlers(), value, function (e) {
                        return true;
                    });
                } else {
                    console.log("Unhandled Changes API notification type: " + type);
                }
            }
        };

        changesApi.prototype.watchAllIndexes = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allIndexesHandlers().length == 0) {
                this.send('watch-indexes');
            }
            this.allIndexesHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allIndexesHandlers.remove(callback);
                if (_this.allIndexesHandlers().length == 0) {
                    _this.send('unwatch-indexes');
                }
            });
        };

        changesApi.prototype.watchAllTransformers = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allTransformersHandlers().length == 0) {
                this.send('watch-transformers');
            }
            this.allTransformersHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allTransformersHandlers.remove(callback);
                if (_this.allTransformersHandlers().length == 0) {
                    _this.send('unwatch-transformers');
                }
            });
        };

        changesApi.prototype.watchAllReplicationConflicts = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allReplicationConflicts().length == 0) {
                this.send('watch-replication-conflicts');
            }
            this.allReplicationConflicts.push(callback);
            return new changeSubscription(function () {
                _this.allReplicationConflicts.remove(callback);
                if (_this.allReplicationConflicts().length == 0) {
                    _this.send('unwatch-replication-conflicts');
                }
            });
        };

        changesApi.prototype.watchAllDocs = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allDocsHandlers().length == 0) {
                this.send('watch-docs');
            }
            this.allDocsHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allDocsHandlers.remove(callback);
                if (_this.allDocsHandlers().length == 0) {
                    _this.send('unwatch-docs');
                }
            });
        };

        changesApi.prototype.watchDocsStartingWith = function (docIdPrefix, onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (typeof (this.watchedPrefixes[docIdPrefix]) === "undefined") {
                this.send('watch-prefix', docIdPrefix);
                this.watchedPrefixes[docIdPrefix] = ko.observableArray();
            }
            this.watchedPrefixes[docIdPrefix].push(callback);

            return new changeSubscription(function () {
                _this.watchedPrefixes[docIdPrefix].remove(callback);
                if (_this.watchedPrefixes[docIdPrefix]().length == 0) {
                    delete _this.watchedPrefixes[docIdPrefix];
                    _this.send('unwatch-prefix', docIdPrefix);
                }
            });
        };

        changesApi.prototype.watchBulks = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allBulkInsertsHandlers().length == 0) {
                this.send('watch-bulk-operation');
            }
            this.allBulkInsertsHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allBulkInsertsHandlers.remove(callback);
                if (_this.allDocsHandlers().length == 0) {
                    _this.send('unwatch-bulk-operation');
                }
            });
        };

        changesApi.prototype.watchFsSync = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allFsSyncHandlers().length == 0) {
                this.send('watch-sync');
            }
            this.allFsSyncHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allFsSyncHandlers.remove(callback);
                if (_this.allFsSyncHandlers().length == 0) {
                    _this.send('unwatch-sync');
                }
            });
        };

        changesApi.prototype.watchFsConflicts = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allFsConflictsHandlers().length == 0) {
                this.send('watch-conflicts');
            }
            this.allFsConflictsHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allFsConflictsHandlers.remove(callback);
                if (_this.allFsConflictsHandlers().length == 0) {
                    _this.send('unwatch-conflicts');
                }
            });
        };

        changesApi.prototype.watchFsFolders = function (folder, onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (typeof (this.watchedFolders[folder]) === "undefined") {
                this.send('watch-folder', folder);
                this.watchedFolders[folder] = ko.observableArray();
            }
            this.watchedFolders[folder].push(callback);
            return new changeSubscription(function () {
                _this.watchedFolders[folder].remove(callback);
                if (_this.watchedFolders[folder].length == 0) {
                    delete _this.watchedFolders[folder];
                    _this.send('unwatch-folder', folder);
                }
            });
        };

        changesApi.prototype.watchFsConfig = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allFsConfigHandlers().length == 0) {
                this.send('watch-config');
            }
            this.allFsConfigHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allFsConfigHandlers.remove(callback);
                if (_this.allFsConfigHandlers().length == 0) {
                    _this.send('unwatch-config');
                }
            });
        };

        changesApi.prototype.watchFsDestinations = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            if (this.allFsDestinationsHandlers().length == 0) {
                this.send('watch-config');
            }
            this.allFsDestinationsHandlers.push(callback);
            return new changeSubscription(function () {
                _this.allFsDestinationsHandlers.remove(callback);
                if (_this.allFsDestinationsHandlers().length == 0) {
                    _this.send('unwatch-config');
                }
            });
        };

        changesApi.prototype.dispose = function () {
            var _this = this;
            this.connectToChangesApiTask.done(function () {
                var isCloseNeeded;

                if (isCloseNeeded = _this.webSocket && _this.webSocket.readyState == _this.readyStateOpen) {
                    console.log("Disconnecting from WebSocket changes API for (rs = " + _this.rs.name + ")");
                    _this.webSocket.close(_this.normalClosureCode, _this.normalClosureMessage);
                } else if (isCloseNeeded = _this.eventSource && _this.eventSource.readyState == _this.readyStateOpen) {
                    console.log("Disconnecting from EventSource changes API for (rs = " + _this.rs.name + ")");
                    _this.eventSource.close();
                }

                if (isCloseNeeded) {
                    _this.send('disconnect', undefined, false);
                    _this.isCleanClose = true;
                }
            });
        };

        changesApi.prototype.getResourceName = function () {
            return this.rs.name;
        };
        changesApi.isServerSupportingWebSockets = true;

        changesApi.messageWasShownOnce = false;
        return changesApi;
    })();

    
    return changesApi;
});
/// <reference path="../../Scripts/typings/jquery/jquery.d.ts" />
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/changesCallback", ["require", "exports"], function(require, exports) {
    // we use this function wrapper as knockout calls functions stored directly in observableArray
    var changesCallback = (function () {
        function changesCallback(onFire) {
            this.onFire = onFire;
        }
        changesCallback.prototype.fire = function (arg) {
            this.onFire(arg);
        };
        return changesCallback;
    })();

    
    return changesCallback;
});
define("common/chunkFetcher", ["require", "exports"], function(require, exports) {
    var chunkFetcher = (function () {
        function chunkFetcher(fetcher) {
            this.fetcher = fetcher;
            this.task = $.Deferred();
            this.result = [];
            if (!fetcher) {
                throw new Error("Fetcher must be specified.");
            }
        }
        chunkFetcher.prototype.execute = function () {
            var skip = 0;
            var take = 1024;
            this.fetchChunk(skip, take);
            return this.task;
        };

        chunkFetcher.prototype.fetchChunk = function (skip, take) {
            var _this = this;
            this.fetcher(skip, take).fail(function (x) {
                return _this.task.reject(x);
            }).done(function (data) {
                _this.result.pushAll(data);
                if (data.length == take) {
                    _this.fetchChunk(skip + take, take);
                } else {
                    _this.task.resolve(_this.result);
                }
            });
        };
        return chunkFetcher;
    })();

    
    return chunkFetcher;
});
/// <reference path="../../Scripts/typings/bootstrap.v3.datetimepicker/bootstrap.v3.datetimepicker.d.ts" />
define("common/datePickerBindingHandler", ["require", "exports", "durandal/composition", "moment"], function(require, exports, composition, moment) {
    var datePickerBindingHandler = (function () {
        function datePickerBindingHandler() {
        }
        datePickerBindingHandler.install = function () {
            if (!ko.bindingHandlers["datePicker"]) {
                ko.bindingHandlers["datePicker"] = new datePickerBindingHandler();

                // This tells Durandal to fire this binding handler only after composition
                // is complete and attached to the DOM.
                // See http://durandaljs.com/documentation/Interacting-with-the-DOM/
                composition.addBindingHandler("datePicker");
            }
        };

        // Called by Knockout a single time when the binding handler is setup.
        datePickerBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var options = allBindings().datepickerOptions || {};
            var dpicker = $(element).datetimepicker();

            $(element).data("DateTimePicker").setMaxDate(moment(new Date()));
            dpicker.on('dp.change', function (ev) {
                if (options.endDateElement) {
                    $("#" + options.endDateElement).data("DateTimePicker").setMinDate(ev.date);
                }
                if (options.startDateElement) {
                    $("#" + options.startDateElement).data("DateTimePicker").setMaxDate(ev.date);
                }

                var newDate = moment(ev.date);
                var value = valueAccessor();
                value(newDate);
            });
        };

        // Called by Knockout each time the dependent observable value changes.
        datePickerBindingHandler.prototype.update = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var date = ko.unwrap(valueAccessor());
            if (date) {
                $(element).data("DateTimePicker").setDate(date);
            }
        };
        return datePickerBindingHandler;
    })();

    
    return datePickerBindingHandler;
});
define("common/dialogResult", ["require", "exports"], function(require, exports) {
    var dialogResult = (function () {
        function dialogResult(cancelled, task) {
            this.cancelled = cancelled;
            this.task = task;
        }
        return dialogResult;
    })();

    
    return dialogResult;
});
define("common/dynamicHeightBindingHandler", ["require", "exports", "durandal/composition"], function(require, exports, composition) {
    /*
    * A custom Knockout binding handler that causes a DOM element to change its height so that its bottom reaches to a target element.
    * Usage: data-bind="dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: 'footer' }"
    * Target can be whatever element you choose.
    */
    var dynamicHeightBindingHandler = (function () {
        function dynamicHeightBindingHandler() {
            var _this = this;
            this.throttleTimeMs = 100;
            var $window = $(window);
            this.windowHeightObservable = ko.observable($window.height());
            window['ravenStudioWindowHeight'] = this.windowHeightObservable.throttle(this.throttleTimeMs);
            $window.resize(function (ev) {
                return _this.windowHeightObservable($window.height());
            });
        }
        dynamicHeightBindingHandler.install = function () {
            if (!ko.bindingHandlers["dynamicHeight"]) {
                ko.bindingHandlers["dynamicHeight"] = new dynamicHeightBindingHandler();

                // This tells Durandal to fire this binding handler only after composition
                // is complete and attached to the DOM.
                // This is required so that we know the correct height for the element.
                // See http://durandaljs.com/documentation/Interacting-with-the-DOM/
                composition.addBindingHandler('dynamicHeight');
            }
        };

        // Called by Knockout a single time when the binding handler is setup.
        dynamicHeightBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            if (valueAccessor().target) {
                //element.style.overflowY = "auto";
                element.style.overflowX = "hidden";
            }
        };

        // Called by Knockout each time the dependent observable value changes.
        dynamicHeightBindingHandler.prototype.update = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var bindingValue = valueAccessor();
            if (bindingValue.target) {
                var newWindowHeight = bindingValue.resizeTrigger;
                var targetSelector = bindingValue.target || "footer";
                var bottomMargin = bindingValue.bottomMargin || 0;

                // Check what was the last dispatched height to this element.
                var lastWindowHeightKey = "ravenStudioLastDispatchedHeight";
                var lastWindowHeight = ko.utils.domData.get(element, lastWindowHeightKey);
                if (lastWindowHeight !== newWindowHeight) {
                    ko.utils.domData.set(element, lastWindowHeightKey, newWindowHeight);
                    dynamicHeightBindingHandler.stickToTarget(element, targetSelector, bottomMargin);
                }
            }
        };

        dynamicHeightBindingHandler.stickToTarget = function (element, targetSelector, bottomMargin) {
            var targetElement = $(targetSelector);
            if (targetSelector.length === 0) {
                throw new Error("Couldn't configure dynamic height because the target element isn't on the page. Target element: " + targetSelector);
            }

            var $element = $(element);
            var isVisible = $element.is(":visible");

            if (isVisible) {
                var elementTop = $element.offset().top;
                var footerTop = $(targetSelector).position().top;
                var padding = 5 + bottomMargin;
                var desiredElementHeight = footerTop - elementTop - padding;
                if ($(document).fullScreen()) {
                    var windowHeightKey = "ravenStudioLastDispatchedHeight";
                    var windowHeight = ko.utils.domData.get(element, windowHeightKey);
                    desiredElementHeight = windowHeight - elementTop - padding;
                }
                var minimumHeight = 100;
                if (desiredElementHeight >= minimumHeight) {
                    $element.height(desiredElementHeight);
                    $element.trigger("DynamicHeightSet", desiredElementHeight);
                }
            }
        };
        return dynamicHeightBindingHandler;
    })();

    
    return dynamicHeightBindingHandler;
});
define("common/execJs", ["require", "exports"], function(require, exports) {
    var execJs = (function () {
        function execJs() {
        }
        execJs.createSimpleCallableCode = function (script, context) {
            return new Function("with(this) { try { " + script + " } catch(err) { console.log('Evaluation Error:', err); } }").bind(context);
        };
        return execJs;
    })();

    
    return execJs;
});
define("common/extensions", ["require", "exports", "moment"], function(require, exports, moment) {
    var extensions = (function () {
        function extensions() {
        }
        extensions.install = function () {
            extensions.installArrayExtensions();
            extensions.installDateExtensions();
            extensions.installFunctionExtensions();
            extensions.installObservableExtensions();
            extensions.installStringExtension();
            extensions.installStorageExtension();

            extensions.installBindingHandlers();
            // Want Intellisense for your extensions?
            // Go to extensionInterfaces.ts and add the function signature there.
        };

        extensions.installDateExtensions = function () {
            var datePrototype = Date.prototype;

            var formatNumber = function (num) {
                return num < 10 ? '0' + num : num;
            };

            datePrototype.getUTCDateFormatted = function () {
                var date = this.getUTCDate();
                return formatNumber(date);
            };

            datePrototype.getUTCMonthFormatted = function () {
                var month = this.getUTCMonth() + 1;
                return formatNumber(month);
            };

            datePrototype.getUTCHoursFormatted = function () {
                var hours = this.getUTCHours();
                return formatNumber(hours);
            };

            datePrototype.getUTCMinutesFormatted = function () {
                var minutes = this.getUTCMinutes();
                return formatNumber(minutes);
            };

            datePrototype.getUTCSecondsFormatted = function () {
                var seconds = this.getUTCSeconds();
                return formatNumber(seconds);
            };
        };

        extensions.installObservableExtensions = function () {
            var subscribableFn = ko.subscribable.fn;
            var observableArrayFn = ko.observableArray.fn;

            // observable.where
            subscribableFn.where = function (predicate) {
                var observable = this;
                var matches = ko.observable();
                observable.subscribe(function (val) {
                    if (predicate(val)) {
                        matches(val);
                    }
                });
                return matches;
            };

            // observable.distinctUntilChanged
            subscribableFn.distinctUntilChanged = function () {
                var observable = this;
                var matches = ko.observable();
                var lastMatch = observable();
                observable.subscribe(function (val) {
                    if (val !== lastMatch) {
                        lastMatch = val;
                        matches(val);
                    }
                });
                return matches;
            };

            // observable.throttled
            subscribableFn.throttle = function (throttleTimeMs) {
                var observable = this;
                return ko.computed(function () {
                    return observable();
                }).extend({ throttle: throttleTimeMs });
            };

            // observable.select
            subscribableFn.select = function (selector) {
                var observable = this;
                var selectedResults = ko.observable();
                observable.subscribe(function (val) {
                    return selectedResults(selector(val));
                });
                return selectedResults;
            };

            // observable.toggle
            subscribableFn.toggle = function () {
                var observable = this;
                observable(!observable());
                return observable;
            };

            // observableArray.pushAll
            observableArrayFn.pushAll = function (items) {
                this.push.apply(this, items);
            };

            // observableArray.contains
            observableArrayFn.contains = function (item) {
                return this.indexOf(item) !== -1;
            };

            // observableArray.first
            observableArrayFn.first = function (filter) {
                return this().first(filter);
            };

            // observableArray.last
            observableArrayFn.last = function (filter) {
                return this().last(filter);
            };
        };

        extensions.installArrayExtensions = function () {
            // Array.remove
            var arrayPrototype = Array.prototype;
            arrayPrototype.remove = function (item) {
                var self = this;
                var index = self.indexOf(item);
                if (index >= 0) {
                    self.splice(index, 1);
                }
                return index;
            };

            // Array.removeAll
            arrayPrototype.removeAll = function (items) {
                var i = 0;
                var self = this;
                for (var i = self.length - 1; i >= 0 && items.length > 0; i--) {
                    var itemsIndex = items.indexOf(self[i]);
                    if (itemsIndex >= 0) {
                        self.splice(i, 1);
                        items.splice(itemsIndex);
                    }
                }
            };

            // Array.first
            arrayPrototype.first = function (filter) {
                var self = this;
                if (self.length > 0) {
                    if (filter) {
                        return ko.utils.arrayFirst(self, filter);
                    } else if (self.length > 0) {
                        return self[0];
                    }
                }

                return null;
            };

            // Array.last
            arrayPrototype.last = function (filter) {
                var self = this;
                if (filter) {
                    for (var i = self.length - 1; i > 0; i--) {
                        if (filter(self[i])) {
                            return self[i];
                        }
                    }
                } else if (self.length > 0) {
                    return self[self.length - 1];
                }

                return null;
            };

            // Array.pushAll
            arrayPrototype.pushAll = function (items) {
                this.push.apply(this, items);
            };

            // Array.contains
            arrayPrototype.contains = function (item) {
                var self = this;
                return self.indexOf(item) !== -1;
            };

            // Array.count
            arrayPrototype.count = function (filter) {
                var self = this;
                if (filter) {
                    var matches = 0;
                    for (var i = 0; i < self.length; i++) {
                        if (filter(self[i])) {
                            matches++;
                        }
                    }

                    return matches;
                }

                return self.length;
            };

            // Array.count
            arrayPrototype.distinct = function () {
                var distinctElements = [];
                for (var i = 0; i < this.length; i++) {
                    var element = this[i];
                    if (!distinctElements.contains(element)) {
                        distinctElements.push(element);
                    }
                }

                return distinctElements;
            };
        };

        extensions.installStringExtension = function () {
            String.prototype.fixedCharCodeAt = function (idx) {
                idx = idx || 0;
                var code = this.charCodeAt(idx);
                var hi, low;
                if (0xD800 <= code && code <= 0xDBFF) {
                    hi = code;
                    low = this.charCodeAt(idx + 1);
                    if (isNaN(low)) {
                        throw 'No valid character or memory error!';
                    }
                    return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
                }
                if (0xDC00 <= code && code <= 0xDFFF) {
                    // We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration
                    return false;
                }
                return code;
            };

            String.prototype.getSizeInBytesAsUTF8 = function () {
                var result = 0;
                for (var n = 0; n < this.length; n++) {
                    var charCode = this.fixedCharCodeAt(n);
                    if (typeof charCode === "number") {
                        if (charCode < 128) {
                            result = result + 1;
                        } else if (charCode < 2048) {
                            result = result + 2;
                        } else if (charCode < 65536) {
                            result = result + 3;
                        } else if (charCode < 2097152) {
                            result = result + 4;
                        } else if (charCode < 67108864) {
                            result = result + 5;
                        } else {
                            result = result + 6;
                        }
                    }
                }
                return result;
            };

            String.prototype.hashCode = function () {
                var hash = 0;
                if (this.length == 0)
                    return hash;
                for (var i = 0; i < this.length; i++) {
                    var char = this.charCodeAt(i);
                    hash = ((hash << 5) - hash) + char;
                    hash |= 0; // Convert to 32bit integer
                }
                return hash;
            };

            String.prototype.replaceAll = function (find, replace) {
                return this.replace(new RegExp(find, 'g'), replace);
            };

            String.prototype.reverse = function (input) {
                var chars = new Array;
                if (input != null) {
                    chars = input.split('');
                }
                return chars.reverse().join('');
            };

            String.prototype.count = function (regex) {
                var re = new RegExp(regex, 'g');
                var results = this.match(re);

                return results ? results.length : 0;
            };

            String.prototype.startsWith = String.prototype.startsWith || function (str) {
                return this.indexOf(str) == 0;
            };

            String.prototype.contains = String.prototype.contains || function (str) {
                return this.indexOf(str) > -1;
            };

            String.prototype.multiply = function (amount) {
                var returnedString = new Array(amount + 1).join(this);
                return returnedString;
            };

            String.prototype.paddingLeft = function (paddingChar, paddingLength) {
                var paddingString = paddingChar.multiply(paddingLength);
                return String(paddingString + this).slice(-paddingString.length);
            };

            String.prototype.paddingRight = function (paddingChar, paddingLength) {
                var paddingString = paddingChar.multiply(paddingLength);
                return String(paddingString + this).slice(paddingString.length);
            };

            String.prototype.toHumanizedDate = function () {
                var dateMoment = moment(this.toString());
                if (dateMoment.isValid()) {
                    var now = moment();
                    var agoInMs = dateMoment.diff(now);
                    return moment.duration(agoInMs).humanize(true) + dateMoment.format(" (MM/DD/YY, h:mma)");
                }

                return this;
            };
        };

        extensions.installStorageExtension = function () {
            Storage.prototype.getObject = function (key) {
                var value = this.getItem(key);
                return value && JSON.parse(value);
            };

            Storage.prototype.setObject = function (key, value) {
                this.setItem(key, ko.toJSON(value));
            };
        };

        extensions.installFunctionExtensions = function () {
            // Function.memoize
            var functionPrototype = Function.prototype;
            functionPrototype.memoize = function (thisVal) {
                var self = this;
                var cache = {};
                return function (arg) {
                    if (arg in cache) {
                        return cache[arg];
                    } else {
                        return cache[arg] = self.call(thisVal, arg);
                    }
                };
            };
        };

        extensions.installBindingHandlers = function () {
            ko.bindingHandlers['numericValue'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var underlyingObservable = valueAccessor();
                    var interceptor = ko.computed({
                        read: underlyingObservable,
                        write: function (value) {
                            if (!isNaN(value)) {
                                underlyingObservable(parseFloat(value));
                            }
                        },
                        disposeWhenNodeIsRemoved: element
                    });
                    ko.bindingHandlers.value.init(element, function () {
                        return interceptor;
                    }, allBindingsAccessor, viewModel, bindingContext);
                },
                update: ko.bindingHandlers.value.update
            };

            ko.bindingHandlers['customValidity'] = {
                update: function (element, valueAccessor) {
                    var errorMessage = ko.unwrap(valueAccessor());
                    element.setCustomValidity(errorMessage);
                }
            };
        };
        return extensions;
    })();

    
    return extensions;
});
define("common/fileDownloader", ["require", "exports"], function(require, exports) {
    var fileDownloader = (function () {
        function fileDownloader() {
        }
        fileDownloader.cleanup = function (domCacheElementName) {
            // clean previous elements (in any)
            $("#" + domCacheElementName).remove();
        };

        fileDownloader.createLinkAndStartDownload = function (blob, filename, domCacheElementName) {
            if (navigator && navigator.msSaveBlob) {
                navigator.msSaveBlob(blob, filename);
            } else {
                var blobUrl = URL.createObjectURL(blob);
                var a = document.createElement('a');
                a.id = "#" + domCacheElementName;
                a.download = filename;
                a.href = blobUrl;
                document.body.appendChild(a); // required by firefox
                a.click();
            }
        };

        fileDownloader.downloadAsJson = function (object, filename, domCacheElementName) {
            if (typeof domCacheElementName === "undefined") { domCacheElementName = "link"; }
            fileDownloader.cleanup(domCacheElementName);
            var modelAsString = JSON.stringify(object, null, 2);
            var blob = new Blob([modelAsString], { type: 'application/json' });
            fileDownloader.createLinkAndStartDownload(blob, filename, domCacheElementName);
        };

        fileDownloader.downloadAsZip = function (buffer, filename, domCacheElementName) {
            if (typeof domCacheElementName === "undefined") { domCacheElementName = "link"; }
            fileDownloader.cleanup(domCacheElementName);
            var blob = new Blob([buffer], { type: 'application/zip' });
            fileDownloader.createLinkAndStartDownload(blob, filename, domCacheElementName);
        };
        return fileDownloader;
    })();

    
    return fileDownloader;
});
define("common/fileUploadBindingHandler", ["require", "exports", "durandal/composition", "durandal/system", "models/uploadItem", "commands/filesystem/uploadFileToFilesystemCommand", "common/uploadQueueHelper"], function(require, exports, composition, system, uploadItem, uploadFileToFilesystemCommand, uploadQueueHelper) {
    // Usage: <input type="file" data-bind="fileUpload: { files: files, uploads: uploadQueue, success: uploadSuccess.bind($data), fail: uploadFailed.bind($data) }" />
    // files: KnockoutObservable<File[]>
    // uploads: KnockoutObservableArray<uploadItem>
    // success: (i: uploadItem) => void;
    // fail: (i: uploadItem) => void;
    var fileUploadBindingHandler = (function () {
        function fileUploadBindingHandler() {
        }
        fileUploadBindingHandler.install = function () {
            if (!ko.bindingHandlers["fileUpload"]) {
                ko.bindingHandlers["fileUpload"] = new fileUploadBindingHandler();

                // This tells Durandal to fire this binding handler only after composition
                // is complete and attached to the DOM.
                // See http://durandaljs.com/documentation/Interacting-with-the-DOM/
                composition.addBindingHandler("fileUpload");
            }
        };

        fileUploadBindingHandler.prototype.init = function (element, valueAccessor) {
        };

        fileUploadBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var _this = this;
            var options = ko.utils.unwrapObservable(valueAccessor());
            var context = viewModel;
            var filesystem = ko.utils.unwrapObservable(bindingContext.$data["activeFilesystem"]);

            if (options) {
                options.files();

                // Access the files observable now so that .update is called whenever it changes.
                if (element.files.length) {
                    if (options.before) {
                        options.before();
                    }
                    var files = element.files;
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        var guid = system.guid();
                        var directory = options.directory() ? options.directory() : "";
                        var item = new uploadItem(guid, directory + "/" + file.name, uploadQueueHelper.queuedStatus, context.activeFilesystem());
                        options.uploads.push(item);

                        new uploadFileToFilesystemCommand(file, directory, guid, filesystem, function (e) {
                            return _this.uploadProgressReported(e);
                        }, true).execute().done(function (x) {
                            return options.success(x);
                        }).fail(function (x) {
                            return options.fail(x);
                        });

                        item.status(uploadQueueHelper.uploadingStatus);
                        options.uploads(uploadQueueHelper.sortUploadQueue(options.uploads()));
                        options.uploads.notifySubscribers(options.uploads());
                    }
                }

                options.files(null);
            }
        };

        fileUploadBindingHandler.prototype.uploadProgressReported = function (e) {
            if (e.lengthComputable) {
                var percentComplete = e.loaded / e.total;
                //do something
            }
        };
        return fileUploadBindingHandler;
    })();

    
    return fileUploadBindingHandler;
});
define("common/generalUtils", ["require", "exports"], function(require, exports) {
    var genUtils = (function () {
        function genUtils() {
        }
        genUtils.formatAsCommaSeperatedString = function (input, digitsAfterDecimalPoint) {
            var parts = input.toString().split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            if (parts.length == 2 && parts[1].length > digitsAfterDecimalPoint) {
                parts[1] = parts[1].substring(0, digitsAfterDecimalPoint);
            }
            return parts.join(".");
        };

        // replace characters with their char codes, but leave A-Za-z0-9 and - in place.
        genUtils.escape = function (input) {
            var output = "";
            for (var i = 0; i < input.length; i++) {
                var ch = input.charCodeAt(i);
                if (ch == 0x2F) {
                    output += '-';
                } else if (ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A || ch == 0x2D) {
                    output += input[i];
                } else {
                    output += ch;
                }
            }
            return output;
        };
        return genUtils;
    })();
    
    return genUtils;
});
define("common/idGenerator", ["require", "exports"], function(require, exports) {
    var idGenerator = (function () {
        function idGenerator() {
        }
        idGenerator.generateId = function (idLength) {
            if (typeof idLength === "undefined") { idLength = 5; }
            var text = "";
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            for (var i = 0; i < idLength; i++)
                text += chars.charAt(Math.floor(Math.random() * chars.length));

            return text;
        };
        return idGenerator;
    })();

    
    return idGenerator;
});
define("common/inputCursor", ["require", "exports"], function(require, exports) {
    var inputCursor = (function () {
        function inputCursor() {
        }
        inputCursor.setPosition = function ($input, position) {
            var input = $input[0];
            if (!input)
                return null;

            if ('createTextRange' in input) {
                var textRange = input['createTextRange']();
                textRange.collapse(true);
                textRange.moveEnd(position);
                textRange.moveStart(position);
                textRange.select();
            } else if ('setSelectionRange' in input) {
                input['setSelectionRange'](position, position);
            }
        };

        inputCursor.getPosition = function ($input) {
            var input = $input[0];
            if (!input)
                return null;
            var cursorPosition = 0;
            if ('selectionStart' in input) {
                // Normal browsers
                cursorPosition = input["selectionStart"];
            } else {
                // IE
                input.focus();
                var sel = document["selection"].createRange();
                var selLen = document["selection"].createRange().text.length;
                sel.moveStart('character', -input["value"].length);
                cursorPosition = sel.text.length - selLen;
            }
            return cursorPosition;
        };
        return inputCursor;
    })();

    
    return inputCursor;
});
define("common/jsonUtil", ["require", "exports"], function(require, exports) {
    var jsonUtil = (function () {
        function jsonUtil() {
        }
        jsonUtil.syntaxHighlight = function (json) {
            if (typeof json != 'string') {
                json = JSON.stringify(json, undefined, 2);
            }
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
                var cls = 'number';
                if (/^"/.test(match)) {
                    if (/:$/.test(match)) {
                        cls = 'key';
                    } else {
                        cls = 'string';
                    }
                } else if (/true|false/.test(match)) {
                    cls = 'boolean';
                } else if (/null/.test(match)) {
                    cls = 'null';
                }
                return '<span class="' + cls + '">' + match + '</span>';
            });
        };

        jsonUtil.newLineNormalizingHashFunction = function (object) {
            return ko.toJSON(object).replace(/\\r\\n/g, '\\n');
        };

        jsonUtil.newLineNormalizingHashFunctionWithIgnoredFields = function (ignoredFields) {
            return function (object) {
                return ko.toJSON(object, function (k, v) {
                    return ignoredFields.indexOf(k) == -1 ? v : null;
                }).replace(/\\r\\n/g, '\\n');
            };
        };
        return jsonUtil;
    })();

    
    return jsonUtil;
});
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/mergedIndexesStorage", ["require", "exports", "models/indexMergeSuggestion"], function(require, exports, indexMergeSuggestion) {
    var mergedIndexesStorage = (function () {
        function mergedIndexesStorage() {
        }
        mergedIndexesStorage.getMergedIndex = function (db, mergedIndexName) {
            var newSuggestion = null;

            try  {
                if (!!mergedIndexName && mergedIndexName.indexOf(db.mergedIndexLocalStoragePrefix) == 0) {
                    var suggestion = localStorage.getObject(mergedIndexName);
                    localStorage.removeItem(mergedIndexName);
                    newSuggestion = new indexMergeSuggestion(suggestion);
                }
            } catch (e) {
                return null;
            }

            return newSuggestion;
        };

        mergedIndexesStorage.saveMergedIndex = function (db, id, suggestion) {
            var localStorageName = mergedIndexesStorage.getMergedIndexName(db, id);
            localStorage.setObject(localStorageName, suggestion.toDto());
        };

        mergedIndexesStorage.getMergedIndexName = function (db, id) {
            return db.mergedIndexLocalStoragePrefix + '.' + id;
        };
        return mergedIndexesStorage;
    })();

    
    return mergedIndexesStorage;
});
define("common/messagePublisher", ["require", "exports", "common/alertType", "common/alertArgs"], function(require, exports, alertType, alertArgs) {
    var messagePublisher = (function () {
        function messagePublisher() {
        }
        messagePublisher.reportInfo = function (title, details) {
            this.reportProgress(0 /* info */, title, details);
        };

        messagePublisher.reportError = function (title, details, httpStatusText, displayInRecentErrors) {
            if (typeof displayInRecentErrors === "undefined") { displayInRecentErrors = true; }
            this.reportProgress(3 /* danger */, title, details, httpStatusText, displayInRecentErrors);
            if (console && console.log && typeof console.log === "function") {
                console.log("Error during command execution", title, details, httpStatusText);
            }
        };

        messagePublisher.reportSuccess = function (title, details) {
            this.reportProgress(1 /* success */, title, details);
        };

        messagePublisher.reportWarning = function (title, details, httpStatusText) {
            this.reportProgress(2 /* warning */, title, details, httpStatusText);
        };

        messagePublisher.reportProgress = function (type, title, details, httpStatusText, displayInRecentErrors) {
            if (typeof displayInRecentErrors === "undefined") { displayInRecentErrors = true; }
            ko.postbox.publish("Alert", new alertArgs(type, title, details, httpStatusText, displayInRecentErrors));
        };
        return messagePublisher;
    })();

    
    return messagePublisher;
});
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/oauthContext", ["require", "exports"], function(require, exports) {
    var oauthContext = (function () {
        function oauthContext() {
        }
        oauthContext.apiKey = ko.observable(null);

        oauthContext.authHeader = ko.observable(null);

        oauthContext.apiKeyName = ko.computed(function () {
            var key = oauthContext.apiKey();
            if (key === null) {
                return null;
            }
            var slashPos = key.indexOf('/');
            if (slashPos >= 0) {
                return key.substring(0, slashPos);
            }
            return null;
        });

        oauthContext.apiKeySecret = ko.computed(function () {
            var key = oauthContext.apiKey();
            if (key === null) {
                return null;
            }
            var slashPos = key.indexOf('/');
            if (slashPos >= 0) {
                return key.substring(slashPos + 1);
            }
            return null;
        });
        return oauthContext;
    })();

    
    return oauthContext;
});
define("common/optional", ["require", "exports"], function(require, exports) {
    var optional = (function () {
        function optional(instance) {
            this.instance = instance;
        }
        optional.val = function (value) {
            return new optional(value);
        };

        optional.prototype.bind = function (fetcher) {
            if (this.instance !== null && this.instance !== undefined) {
                var val = fetcher(this.instance);
                return new optional(val);
            }

            return new optional(null);
        };

        optional.prototype.toString = function () {
            if (this.instance !== null && this.instance !== undefined) {
                return this.instance.toString();
            }

            return "";
        };
        return optional;
    })();

    
    return optional;
});
/// <reference path="../../Scripts/typings/jquery/jquery.d.ts" />
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/pagedList", ["require", "exports", "common/pagedResultSet"], function(require, exports, pagedResultSet) {
    var pagedList = (function () {
        function pagedList(fetcher) {
            this.fetcher = fetcher;
            this.totalResultCount = ko.observable(0);
            this.items = [];
            this.isFetching = false;
            this.queuedFetch = null;
            this.collectionName = "";
            this.currentItemIndex = ko.observable(0);
            if (!fetcher) {
                throw new Error("Fetcher must be specified.");
            }
        }
        pagedList.prototype.clear = function () {
            if (!!this.queuedFetch) {
                this.queuedFetch.task.reject("data is being reloaded");
                this.queuedFetch = null;
            }

            while (this.items.length > 0) {
                this.items.pop();
            }
        };

        pagedList.prototype.itemCount = function () {
            return this.items.length;
        };

        pagedList.prototype.fetch = function (skip, take) {
            var _this = this;
            if (this.isFetching) {
                this.queuedFetch = { skip: skip, take: take, task: $.Deferred() };
                return this.queuedFetch.task;
            }

            var cachedItemsSlice = this.getCachedSliceOrNull(skip, take);
            if (cachedItemsSlice) {
                // We've already fetched these items. Just return them immediately.
                var deferred = $.Deferred();
                var results = new pagedResultSet(cachedItemsSlice, this.totalResultCount());
                deferred.resolve(results);
                return deferred;
            } else {
                // We haven't fetched some of the items. Fetch them now from remote.
                this.isFetching = true;
                var remoteFetch = this.fetcher(skip, take).done(function (resultSet) {
                    _this.totalResultCount(resultSet.totalResultCount);
                    resultSet.items.forEach(function (r, i) {
                        return _this.items[i + skip] = r;
                    });
                }).always(function () {
                    _this.isFetching = false;
                    _this.runQueuedFetch();
                });
                return remoteFetch;
            }
        };

        pagedList.prototype.getCachedSliceOrNull = function (skip, take) {
            for (var i = skip; i < skip + take; i++) {
                if (!this.items[i]) {
                    return null;
                }
            }

            return this.items.slice(skip, skip + take);
        };

        pagedList.prototype.getNthItem = function (nth) {
            var deferred = $.Deferred();
            var cachedItemArray = this.getCachedSliceOrNull(nth, 1);
            if (cachedItemArray) {
                deferred.resolve(cachedItemArray[0]);
            } else {
                this.fetch(nth, 1).done(function (result) {
                    deferred.resolve(result.items[0]);
                }).fail(function (error) {
                    return deferred.reject(error);
                });
            }
            return deferred;
        };

        pagedList.prototype.getCachedItemsAt = function (indices) {
            var _this = this;
            return indices.filter(function (index) {
                return _this.items[index];
            }).map(function (validIndex) {
                return _this.items[validIndex];
            });
        };

        pagedList.prototype.getCachedIndices = function (indices) {
            var _this = this;
            return indices.filter(function (index) {
                return _this.items[index];
            });
        };

        pagedList.prototype.getAllCachedItems = function () {
            return this.items;
        };

        pagedList.prototype.runQueuedFetch = function () {
            if (this.queuedFetch) {
                var queuedSkip = this.queuedFetch.skip;
                var queuedTake = this.queuedFetch.take;
                var queuedTask = this.queuedFetch.task;
                this.queuedFetch = null;
                var fetchTask = this.fetch(queuedSkip, queuedTake);
                fetchTask.done(function (results) {
                    return queuedTask.resolve(results);
                });
                fetchTask.fail(function (error) {
                    return queuedTask.reject(error);
                });
            }
        };

        pagedList.prototype.invalidateCache = function () {
            this.items.length = 0;
        };

        pagedList.prototype.indexOf = function (item) {
            return this.items.indexOf(item);
        };

        pagedList.prototype.hasIds = function () {
            return this.items && this.items.length > 0 && this.items[0] && this.items[0].getId && this.items[0].getId();
        };
        return pagedList;
    })();

    
    return pagedList;
});
define("common/pagedResultSet", ["require", "exports"], function(require, exports) {
    var pagedResultSet = (function () {
        function pagedResultSet(items, totalResultCount, additionalResultInfo) {
            this.items = items;
            this.totalResultCount = totalResultCount;
            this.additionalResultInfo = additionalResultInfo;
        }
        return pagedResultSet;
    })();

    
    return pagedResultSet;
});
define("common/pair", ["require", "exports"], function(require, exports) {
    var Pair = (function () {
        function Pair(item1, item2) {
            this.item1 = item1;
            this.item2 = item2;
        }
        return Pair;
    })();

    
    return Pair;
});
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/recentQueriesStorage", ["require", "exports"], function(require, exports) {
    var recentQueriesStorage = (function () {
        function recentQueriesStorage() {
        }
        recentQueriesStorage.getRecentQueries = function (db) {
            var localStorageName = db.recentQueriesLocalStorageName;
            var recentQueriesFromLocalStorage = localStorage.getObject(localStorageName);
            var isArray = recentQueriesFromLocalStorage instanceof Array;

            if (recentQueriesFromLocalStorage == null || isArray == false) {
                localStorage.setObject(localStorageName, []);
                recentQueriesFromLocalStorage = [];
            }

            return recentQueriesFromLocalStorage;
        };

        recentQueriesStorage.saveRecentQueries = function (db, recentQueries) {
            var localStorageName = db.recentQueriesLocalStorageName;
            localStorage.setObject(localStorageName, recentQueries);
        };

        recentQueriesStorage.removeIndexFromRecentQueries = function (db, indexName) {
            var localStorageName = db.recentQueriesLocalStorageName;
            var recentQueriesFromLocalStorage = localStorage.getObject(localStorageName);
            var newRecentQueries = recentQueriesFromLocalStorage.filter(function (query) {
                return query.IndexName != indexName;
            });
            localStorage.setObject(localStorageName, newRecentQueries);
        };
        return recentQueriesStorage;
    })();

    
    return recentQueriesStorage;
});
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/serverBuildReminder", ["require", "exports"], function(require, exports) {
    var serverBuildReminder = (function () {
        function serverBuildReminder() {
        }
        serverBuildReminder.get = function () {
            return localStorage.getObject(serverBuildReminder.localStorageName);
        };

        serverBuildReminder.mute = function (isMuteNeeded) {
            if (isMuteNeeded) {
                localStorage.setObject(serverBuildReminder.localStorageName, new Date());
            } else {
                localStorage.removeItem(serverBuildReminder.localStorageName);
            }

            var event = document.createEvent('StorageEvent');
            event.initStorageEvent('storage', false, false, serverBuildReminder.localStorageName, isMuteNeeded, !isMuteNeeded, null, window.sessionStorage);
            window.dispatchEvent(event);
        };

        serverBuildReminder.isReminderNeeded = function () {
            var lastBuildCheck = serverBuildReminder.get();
            var timestamp = Date.parse(lastBuildCheck);
            var difference = 0;

            if (!isNaN(timestamp)) {
                var lastBuildCheckMoment = moment(lastBuildCheck);
                var currentDateMoment = moment(new Date());
                difference = currentDateMoment.diff(lastBuildCheckMoment, 'days', true);
            }

            if (isNaN(timestamp) || difference > 7) {
                serverBuildReminder.mute(false);
                return true;
            }

            return false;
        };
        serverBuildReminder.localStorageName = "LastServerBuildReminder";
        return serverBuildReminder;
    })();

    
    return serverBuildReminder;
});
define("common/sqlReplicationStats", ["require", "exports", "common/generalUtils"], function(require, exports, genUtils) {
    var sqlReplicationStats = (function () {
        function sqlReplicationStats(replicationStats) {
            var _this = this;
            this.statistics = ko.observable();
            this.metrics = ko.observable();
            this.name = ko.observable("");
            if (!!replicationStats.Statistics.LastErrorTime && replicationStats.Statistics.LastErrorTime == "0001-01-01T00:00:00.0000000") {
                replicationStats.Statistics.LastErrorTime = "No Errors";
            }
            this.statistics(replicationStats.Statistics);
            this.name(replicationStats.Name);
            this.metrics(replicationStats.Metrics);
            this.rateMetrics = ko.computed(function () {
                var computedRateMetrics = [];
                var generalMetrics = _this.metrics().GeneralMetrics;
                var tablesMetrics = _this.metrics().TablesMetrics;

                if (!!generalMetrics) {
                    $.map(generalMetrics, function (value, key) {
                        if (value.Type == "Meter") {
                            value["Name"] = key;
                            value["Table"] = "";
                            $.map(value, function (propertyValue, propertyName) {
                                if (!isNaN(propertyValue)) {
                                    value[propertyName] = genUtils.formatAsCommaSeperatedString(propertyValue, 2);
                                }
                            });
                            computedRateMetrics.push(value);
                        }
                    });
                }

                if (!!tablesMetrics) {
                    $.map(tablesMetrics, function (tablesMetricsData, tableMetricsKey) {
                        $.map(tablesMetricsData, function (value, key) {
                            if (value.Type == "Meter") {
                                var newMetric = value;
                                newMetric["Name"] = key;
                                value["Table"] = tableMetricsKey;
                                $.map(value, function (propertyValue, propertyName) {
                                    if (!isNaN(propertyValue)) {
                                        value[propertyName] = genUtils.formatAsCommaSeperatedString(propertyValue, 2);
                                    }
                                });
                                computedRateMetrics.push(newMetric);
                            }
                        });
                    });
                }
                return computedRateMetrics;
            });

            this.histogramMetrics = ko.computed(function () {
                var computedHistogramMetrics = [];
                var generalMetrics = _this.metrics().GeneralMetrics;
                var tablesMetrics = _this.metrics().TablesMetrics;

                if (!!generalMetrics) {
                    $.map(generalMetrics, function (value, key) {
                        if (value.Type == "Historgram") {
                            value["Name"] = key;
                            value["Table"] = "";
                            value["Percentiles"] = $.map(value["Percentiles"], function (percentileValue, percentile) {
                                return {
                                    percentileValue: genUtils.formatAsCommaSeperatedString(percentileValue, 2),
                                    percentile: percentile
                                };
                            });
                            $.map(value, function (propertyValue, propertyName) {
                                if (!isNaN(propertyValue)) {
                                    value[propertyName] = genUtils.formatAsCommaSeperatedString(propertyValue, 2);
                                }
                            });
                            computedHistogramMetrics.push(value);
                        }
                    });
                }

                if (!!tablesMetrics) {
                    $.map(tablesMetrics, function (tablesMetricsData, tableMetricsKey) {
                        $.map(tablesMetricsData, function (value, key) {
                            if (value.Type == "Historgram") {
                                value["Name"] = key;
                                value["Table"] = tableMetricsKey;
                                value["Percentiles"] = $.map(value["Percentiles"], function (percentileValue, percentile) {
                                    return {
                                        percentileValue: genUtils.formatAsCommaSeperatedString(percentileValue, 2),
                                        percentile: percentile
                                    };
                                });
                                $.map(value, function (propertyValue, propertyName) {
                                    if (!isNaN(propertyValue)) {
                                        value[propertyName] = genUtils.formatAsCommaSeperatedString(propertyValue, 2);
                                    }
                                });
                                computedHistogramMetrics.push(value);
                            }
                        });
                    });
                }
                return computedHistogramMetrics;
            });
        }
        sqlReplicationStats.ALL_TABLES = 'All Tables';
        return sqlReplicationStats;
    })();

    
    return sqlReplicationStats;
});
define("common/svgDownloader", ["require", "exports", 'd3/d3'], function(require, exports, d3) {
    var svgDownloader = (function () {
        function svgDownloader() {
        }
        svgDownloader.convertToData = function (svgElement, cssInliner) {
            var svgClone = svgElement.cloneNode(true);

            svgDownloader.fixAttributes(svgClone);
            var svgContainer = document.createElement('div');
            svgContainer.appendChild(svgClone);

            var targetStyles = cssInliner(svgClone);

            var s = document.createElement('style');
            s.setAttribute('type', 'text/css');
            s.innerHTML = "<![CDATA[\n" + targetStyles + "\n]]>";

            var defs = d3.select(svgClone).select('defs').node();
            if (!defs) {
                defs = document.createElement('defs');
                svgClone.insertBefore(defs, svgClone.firstChild);
            }
            defs.appendChild(s);

            return svgDownloader.svgHeader + "\n" + svgContainer.innerHTML;
        };

        svgDownloader.cleanup = function () {
            // clean previous image (in any)
            $("#downloadSvg").remove();
        };

        svgDownloader.b64toBlob = function (b64Data, contentType, sliceSize) {
            contentType = contentType || '';
            sliceSize = sliceSize || 512;

            var byteCharacters = atob(b64Data);
            var byteArrays = [];

            for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                var slice = byteCharacters.slice(offset, offset + sliceSize);

                var byteNumbers = new Array(slice.length);
                for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }

                var byteArray = new Uint8Array(byteNumbers);

                byteArrays.push(byteArray);
            }

            var blob = new Blob(byteArrays, { type: contentType });
            return blob;
        };

        svgDownloader.createLinkAndStartDownload = function (blob, filename) {
            if (navigator && navigator.msSaveBlob) {
                navigator.msSaveBlob(blob, filename);
            } else {
                var blobUrl = URL.createObjectURL(blob);
                var a = document.createElement('a');
                a.id = "downloadSvg";
                a.download = filename;
                a.href = blobUrl;
                document.body.appendChild(a); // required by firefox
                a.click();
            }
        };

        svgDownloader.downloadSvg = function (svgElement, filename, cssInliner) {
            svgDownloader.cleanup();
            var textSvgData = svgDownloader.convertToData(svgElement, cssInliner);
            var encodedImage = window.btoa(textSvgData);
            var blob = svgDownloader.b64toBlob(encodedImage, 'image/svg+xml');
            svgDownloader.createLinkAndStartDownload(blob, filename);
        };

        svgDownloader.downloadPng = function (svgElement, filename, cssInliner) {
            svgDownloader.cleanup();

            var textSvgData = svgDownloader.convertToData(svgElement, cssInliner);
            var image = new Image();
            image.src = 'data:image/svg+xml;base64,' + window.btoa(textSvgData);
            image.onerror = function () {
                alert("Unable to download image!");
            };
            image.onload = function () {
                var canvas = document.createElement('canvas');
                canvas.width = image.width;
                canvas.height = image.height;
                var context = canvas.getContext('2d');
                context.drawImage(image, 0, 0);
                var dataUrlStripped = canvas.toDataURL('image/png').replace(/^data:image\/png;base64,/, "");
                var blob = svgDownloader.b64toBlob(dataUrlStripped, 'image/png');
                svgDownloader.createLinkAndStartDownload(blob, filename);
            };
        };

        // helper method to extract css from element
        svgDownloader.extractInlineCss = function (element) {
            var targetStyles = "";
            var sheets = document.styleSheets;
            for (var i = 0; i < sheets.length; i++) {
                var rules = sheets[i].cssRules;
                for (var j = 0; j < rules.length; j++) {
                    var rule = rules[j];
                    if (typeof (rule.style) != "undefined") {
                        var elems = element.querySelectorAll(rule.selectorText);
                        if (elems.length > 0) {
                            targetStyles += rule.selectorText + " { " + rule.style.cssText + " }\n";
                        }
                    }
                }
            }
            return targetStyles;
        };

        svgDownloader.fixAttributes = function (el) {
            var viewBox = el.getAttribute('viewBox');

            svgDownloader.removeAttributes(el);
            el.setAttribute("version", "1.1");

            el.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', 'http://www.w3.org/2000/svg');
            el.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink');

            if (viewBox) {
                var splitedViewBox = viewBox.split(/\s+|,/);
                el.setAttribute("width", splitedViewBox[2]);
                el.setAttribute("height", splitedViewBox[3]);
            }
        };

        svgDownloader.removeAttributes = function (el) {
            var attributes = $.map(el.attributes, function (item) {
                return item.name;
            });
            var selection = $(el);
            $.each(attributes, function (i, item) {
                selection.removeAttr(item);
            });
        };
        svgDownloader.svgHeader = '<?xml version="1.0" standalone="no"?>\n' + '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';
        return svgDownloader;
    })();

    
    return svgDownloader;
});
/// <reference path="../../Scripts/typings/jquery/jquery.d.ts" />
/// <reference path="../../Scripts/typings/knockout/knockout.d.ts" />
define("common/trafficWatchClient", ["require", "exports", 'models/changeSubscription', 'common/changesCallback', 'commands/commandBase', "common/changesApi", "common/idGenerator"], function(require, exports, changeSubscription, changesCallback, commandBase, changesApi, idGenerator) {
    var trafficWatchClient = (function () {
        function trafficWatchClient(resourcePath, token) {
            this.resourcePath = resourcePath;
            this.token = token;
            this.readyStateOpen = 1;
            this.isCleanClose = false;
            this.normalClosureCode = 1000;
            this.normalClosureMessage = "CLOSE_NORMAL";
            this.successfullyConnectedOnce = false;
            this.sentMessages = [];
            this.commandBase = new commandBase();
            this.adminLogsHandlers = ko.observableArray();
            this.connectionOpeningTask = $.Deferred();
            this.connectionClosingTask = $.Deferred();
            this.eventsId = idGenerator.generateId();
        }
        trafficWatchClient.prototype.connect = function () {
            var connectionString = 'singleUseAuthToken=' + this.token + '&id=' + this.eventsId;
            if ("WebSocket" in window && changesApi.isServerSupportingWebSockets) {
                this.connectWebSocket(connectionString);
            } else if ("EventSource" in window) {
                this.connectEventSource(connectionString);
            } else {
                //The browser doesn't support nor websocket nor eventsource
                //or we are in IE10 or IE11 and the server doesn't support WebSockets.
                //Anyway, at this point a warning message was already shown.
                this.connectionOpeningTask.reject();
            }
        };

        trafficWatchClient.prototype.connectWebSocket = function (connectionString) {
            var _this = this;
            var connectionOpened = false;

            var wsProtocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            this.webSocket = new WebSocket(wsProtocol + window.location.host + this.resourcePath + '/traffic-watch/websocket?' + connectionString);

            this.webSocket.onmessage = function (e) {
                return _this.onMessage(e);
            };
            this.webSocket.onerror = function (e) {
                if (connectionOpened == false) {
                    _this.connectionOpeningTask.reject();
                } else {
                    _this.connectionClosingTask.resolve({ Error: e });
                }
            };
            this.webSocket.onclose = function (e) {
                _this.connectionClosingTask.resolve();
            };
            this.webSocket.onopen = function () {
                console.log("Connected to WebSockets HTTP Trace for " + ((!!_this.resourcePath) ? (_this.resourcePath) : "admin"));
                _this.successfullyConnectedOnce = true;
                connectionOpened = true;
                _this.connectionOpeningTask.resolve();
            };
        };

        trafficWatchClient.prototype.connectEventSource = function (connectionString) {
            var _this = this;
            var connectionOpened = false;

            this.eventSource = new EventSource(this.resourcePath + '/traffic-watch/events?' + connectionString);

            this.eventSource.onmessage = function (e) {
                return _this.onMessage(e);
            };
            this.eventSource.onerror = function (e) {
                if (connectionOpened == false) {
                    _this.connectionOpeningTask.reject();
                } else {
                    _this.eventSource.close();
                    _this.connectionClosingTask.resolve(e);
                }
            };
            this.eventSource.onopen = function () {
                console.log("Connected to EventSource HTTP Trace for " + ((!!_this.resourcePath) ? (_this.resourcePath) : "admin"));
                _this.successfullyConnectedOnce = true;
                connectionOpened = true;
                _this.connectionOpeningTask.resolve();
            };
        };

        trafficWatchClient.prototype.fireEvents = function (events, param, filter) {
            for (var i = 0; i < events.length; i++) {
                if (filter(param)) {
                    events[i].fire(param);
                }
            }
        };

        trafficWatchClient.prototype.onMessage = function (e) {
            var eventDto = JSON.parse(e.data);
            var type = eventDto.Type;
            var value = eventDto.Value;

            if (type !== "Heartbeat") {
                if (type === "LogNotification") {
                    this.fireEvents(this.adminLogsHandlers(), value, function (e) {
                        return true;
                    });
                } else {
                    console.log("Unhandled Changes API notification type: " + type);
                }
            }
        };

        trafficWatchClient.prototype.watchTraffic = function (onChange) {
            var _this = this;
            var callback = new changesCallback(onChange);
            this.adminLogsHandlers.push(callback);
            return new changeSubscription(function () {
                _this.adminLogsHandlers.remove(callback);
            });
        };

        trafficWatchClient.prototype.disconnect = function () {
            var _this = this;
            this.connectionOpeningTask.done(function () {
                if (_this.webSocket && _this.webSocket.readyState == _this.readyStateOpen) {
                    console.log("Disconnecting from WebSocket HTTP Trace for " + ((!!_this.resourcePath) ? (_this.resourcePath) : "admin"));
                    _this.isCleanClose = true;
                    _this.webSocket.close(_this.normalClosureCode, _this.normalClosureMessage);
                } else if (_this.eventSource && _this.eventSource.readyState == _this.readyStateOpen) {
                    console.log("Disconnecting from EventSource HTTP Trace for " + ((!!_this.resourcePath) ? (_this.resourcePath) : "admin"));
                    _this.isCleanClose = true;
                    _this.eventSource.close();
                    _this.connectionClosingTask.resolve();
                }
            });
        };
        trafficWatchClient.isServerSupportingWebSockets = true;

        trafficWatchClient.messageWasShownOnce = false;
        return trafficWatchClient;
    })();

    
    return trafficWatchClient;
});
/// <reference path="../../Scripts/typings/jquery.dynatree/jquery.dynatree.d.ts" />
define("common/treeBindingHandler", ["require", "exports", "durandal/composition", "common/appUrl", "commands/filesystem/getFoldersCommand"], function(require, exports, composition, appUrl, getFoldersCommand) {
    /*
    * A custom Knockout binding handler transforms the target element (a <div>) into a directory tree, powered by jquery-dynatree
    * Usage: data-bind="tree: { value: someObservableTreeObject }"
    */
    var treeBindingHandler = (function () {
        function treeBindingHandler() {
        }
        treeBindingHandler.install = function () {
            if (!ko.bindingHandlers["tree"]) {
                ko.bindingHandlers["tree"] = new treeBindingHandler();

                // This tells Durandal to fire this binding handler only after composition
                // is complete and attached to the DOM.
                // See http://durandaljs.com/documentation/Interacting-with-the-DOM/
                composition.addBindingHandler("tree");
            }
        };

        // Called by Knockout a single time when the binding handler is setup.
        treeBindingHandler.prototype.init = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor());

            var tree = $(element).dynatree({
                children: [{ title: appUrl.getFileSystem().name, key: "/", isLazy: true, isFolder: true }],
                onLazyRead: function (node) {
                    treeBindingHandler.loadNodeChildren("#" + element.id, node, options);
                    node.activate();
                },
                onExpand: function (expanded, node) {
                    if (expanded) {
                        treeBindingHandler.loadNodeChildren("#" + element.id, node, options);
                        node.activate();
                    }
                },
                selectMode: 1,
                onSelect: function (flag, node) {
                    treeBindingHandler.onActivateAndSelect(node, valueAccessor());
                },
                onActivate: function (node) {
                    treeBindingHandler.onActivateAndSelect(node, valueAccessor());
                }
            });

            var firstNode = $(element).dynatree("getRoot", []).getChildren()[0];
            firstNode.activate();
            firstNode.expand(null);
        };

        treeBindingHandler.loadNodeChildren = function (tree, node, options) {
            var dir;
            if (node && node.data && node.data.key != "/") {
                dir = node.data.key;
            }
            var command = new getFoldersCommand(appUrl.getFileSystem(), 0, 1024, dir);
            command.execute().done(function (results) {
                node.setLazyNodeStatus(0);

                var newSet = {};
                var differenceSet = {};

                for (var i = 0; i < results.length; i++) {
                    newSet[results[i].key] = results[i];
                }

                if (node.hasChildren()) {
                    for (var j = 0; j < node.getChildren().length; j++) {
                        if (!newSet[node.getChildren()[j].data.key]) {
                            differenceSet[node.getChildren()[j].data.key] = node.getChildren()[j];
                        }
                    }

                    var nodesToRemove = [];

                    for (var k = 0; k < node.getChildren().length; k++) {
                        var nodeK = node.getChildren()[k];
                        if (!newSet[nodeK.data.key] && differenceSet[nodeK.data.key] && differenceSet[nodeK.data.key].data.addClass != treeBindingHandler.transientNodeStyle) {
                            nodesToRemove.push(k);
                        } else {
                            newSet[nodeK.data.key] = null;
                        }
                    }

                    for (var m = 0; m < nodesToRemove.length; m++) {
                        node.getChildren()[nodesToRemove[m]].remove();
                    }
                }

                for (var key in newSet) {
                    if (newSet[key]) {
                        node.addChild(newSet[key]);
                    }
                }

                if (options && node.hasChildren()) {
                    options.currentLevelNodes.push(node.getChildren().map(function (x) {
                        return x.data.key;
                    }));
                }
            });
        };

        treeBindingHandler.reloadNode = function (tree, nodeKey) {
            var dynaTree = $(tree).dynatree("getTree");
            var node = dynaTree.getNodeByKey(nodeKey);

            treeBindingHandler.loadNodeChildren(tree, node, null);
        };

        treeBindingHandler.onActivateAndSelect = function (node, valueAccessor) {
            var options = ko.utils.unwrapObservable(valueAccessor);

            var selectedNode = node.data && node.data.key != "/" ? node.data.key : null;
            options.selectedNode(selectedNode);
            if (node.data) {
                var siblings = [];
                if (node.hasChildren()) {
                    siblings = node.getChildren();
                }
                var mappedNodes = siblings.map(function (x) {
                    return x.data.title;
                });
                options.currentLevelNodes(mappedNodes);
            }
        };

        // Called by Knockout each time the dependent observable value changes.
        treeBindingHandler.prototype.update = function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor());
            if (options.addedNode()) {
                var newNode = options.addedNode();
                var activeNode = $(element).dynatree("getActiveNode", []);
                var parentOfNewNode = newNode.key.substring(0, newNode.key.lastIndexOf("/"));
                if (parentOfNewNode === "") {
                    parentOfNewNode = "/";
                }
                var parentNode = $(element).dynatree("getTree").getNodeByKey(parentOfNewNode);
                if (parentNode) {
                    parentNode.addChild(newNode);
                    if (parentNode == activeNode) {
                        options.currentLevelNodes(activeNode.getChildren().map(function (x) {
                            return x.data.title;
                        }));
                    }
                    options.addedNode(null);
                }
            }
        };

        treeBindingHandler.updateNodeHierarchyStyle = function (tree, key, styleClass) {
            var theTree = $(tree).dynatree("getTree");
            var slashPosition = key.length;
            while (slashPosition > 0) {
                key = key.substring(0, slashPosition);
                var temporaryNode = theTree.getNodeByKey(key);
                if (temporaryNode && temporaryNode.data.addClass != styleClass) {
                    temporaryNode.data.addClass = styleClass;
                    temporaryNode.reloadChildren();
                }
                slashPosition = key.lastIndexOf("/");
            }
        };

        treeBindingHandler.setNodeLoadStatus = function (tree, key, status) {
            // Set node load status
            // -1 = error
            // 0 = load OK
            // 1 = loading
            var object = $(tree);
            if (!object || object.length <= 0)
                return;

            var theTree = object.dynatree("getTree");
            if (!theTree) {
                return;
            }

            var slashPosition = key.length;
            while (slashPosition > 0) {
                key = key.substring(0, slashPosition);
                var temporaryNode = theTree.getNodeByKey(key);
                if (temporaryNode) {
                    temporaryNode.setLazyNodeStatus(status);
                }

                slashPosition = key.lastIndexOf("/");
            }
        };

        treeBindingHandler.nodeExists = function (tree, key) {
            var dynaTree = $(tree).dynatree("getTree");
            var node = dynaTree.getNodeByKey(key);

            if (node) {
                return true;
            }

            return false;
        };

        treeBindingHandler.isNodeExpanded = function (tree, key) {
            var dynaTree = $(tree).dynatree("getTree");
            if (!dynaTree)
                return false;
            var node = dynaTree.getNodeByKey(key);

            return node && node.isExpanded();
        };
        treeBindingHandler.transientNodeStyle = "temp-folder";
        return treeBindingHandler;
    })();

    
    return treeBindingHandler;
});
define("common/uploadQueueHelper", ["require", "exports", "models/uploadItem"], function(require, exports, uploadItem) {
    var uploadQueueHelper = (function () {
        function uploadQueueHelper() {
        }
        uploadQueueHelper.stringifyUploadQueue = function (queue) {
            return ko.toJSON(queue);
        };

        uploadQueueHelper.parseUploadQueue = function (queue, fs) {
            var stringArray = JSON.parse(queue);
            var uploadQueue = [];

            for (var i = 0; i < stringArray.length; i++) {
                uploadQueue.push(new uploadItem(stringArray[i]["id"], stringArray[i]["fileName"], stringArray[i]["status"], fs));
            }

            return uploadQueueHelper.sortUploadQueue(uploadQueue);
        };

        uploadQueueHelper.sortUploadQueue = function (uploadQueue) {
            return uploadQueue.sort(function (a, b) {
                if (a.status() === uploadQueueHelper.failedStatus) {
                    return -1;
                } else if (a.status() === uploadQueueHelper.uploadingStatus)
                    if (b.status() === uploadQueueHelper.failedStatus)
                        return 1;
                    else
                        return -1;
                else if (a.status() === uploadQueueHelper.queuedStatus) {
                    if (b.status() === uploadQueueHelper.failedStatus || b.status() === uploadQueueHelper.uploadingStatus)
                        return 1;
                    else
                        return -1;
                } else
                    return 1;
            });
        };

        uploadQueueHelper.updateLocalStorage = function (x, fs) {
            window.localStorage.setItem(uploadQueueHelper.localStorageUploadQueueKey + fs.name, uploadQueueHelper.stringifyUploadQueue(x));
        };

        uploadQueueHelper.updateQueueStatus = function (guid, status, queue) {
            var items = ko.utils.arrayFilter(queue, function (i) {
                return i.id() === guid;
            });
            if (items) {
                items[0].status(status);
            }

            queue = uploadQueueHelper.sortUploadQueue(queue);
            ;
        };
        uploadQueueHelper.uploadingStatus = "Uploading...";
        uploadQueueHelper.failedStatus = "Failed";
        uploadQueueHelper.uploadedStatus = "Uploaded";
        uploadQueueHelper.queuedStatus = "Queued";
        uploadQueueHelper.localStorageUploadQueueKey = "ravenFs-uploadQueue.";
        return uploadQueueHelper;
    })();
    
    return uploadQueueHelper;
});
define("models/abstractQueryResult", ["require", "exports"], function(require, exports) {
    var abstractQueryResult = (function () {
        function abstractQueryResult(dto) {
            this.includes = dto.Includes;
            this.isStale = dto.IsStale;
            this.indexTimestamp = new Date(dto.IndexTimestamp);
            this.totalResults = dto.TotalResults;
            this.skippedResults = dto.SkippedResults;
            this.indexName = dto.IndexName;
            this.indexEtag = dto.IndexEtag;
            this.resultEtag = dto.ResultEtag;
            this.highlightings = dto.Highlightings;
            this.nonAuthoritativeInformation = dto.NonAuthoritativeInformation;
            this.lastQueryTime = new Date(dto.LastQueryTime);
            this.durationMilliseconds = dto.DurationMilliseconds;
        }
        return abstractQueryResult;
    })();

    
    return abstractQueryResult;
});
define("models/adminLogsConfig", ["require", "exports"], function(require, exports) {
    var adminLogsConfig = (function () {
        function adminLogsConfig() {
            this.entries = ko.observableArray();
            this.maxEntries = ko.observable();
            this.singleAuthToken = ko.observable();
        }
        adminLogsConfig.prototype.clone = function () {
            var newConfig = new adminLogsConfig();
            newConfig.maxEntries(this.maxEntries());
            newConfig.entries($.map(this.entries() || [], function (e, idx) {
                return e.clone();
            }));
            return newConfig;
        };
        return adminLogsConfig;
    })();

    
    return adminLogsConfig;
});
define("models/adminLogsConfigEntry", ["require", "exports"], function(require, exports) {
    var adminLogsConfigEntry = (function () {
        function adminLogsConfigEntry(category, level) {
            this.category = ko.observable();
            this.level = ko.observable();
            this.category(category);
            this.level(level);
        }
        adminLogsConfigEntry.prototype.clone = function () {
            return new adminLogsConfigEntry(this.category(), this.level());
        };

        adminLogsConfigEntry.empty = function () {
            return new adminLogsConfigEntry(null, null);
        };

        adminLogsConfigEntry.prototype.toDto = function () {
            return {
                category: this.category(),
                level: this.level()
            };
        };
        return adminLogsConfigEntry;
    })();

    
    return adminLogsConfigEntry;
});
define("models/alert", ["require", "exports"], function(require, exports) {
    var alert = (function () {
        function alert(dto) {
            this.observed = ko.observable(false);
            this.alertLevel = dto.AlertLevel;
            this.createdAt = dto.CreatedAt;
            this.exception = dto.Exception;
            this.message = dto.Message;
            this.observed(dto.Observed);
            this.lastDismissedAt = dto.LastDismissedAt;
            this.title = dto.Title;
            this.uniqueKey = dto.UniqueKey;
        }
        alert.prototype.toDto = function () {
            return {
                AlertLevel: this.alertLevel,
                CreatedAt: this.createdAt,
                Exception: this.exception,
                Message: this.message,
                Observed: this.observed(),
                LastDismissedAt: this.lastDismissedAt,
                Title: this.title,
                UniqueKey: this.uniqueKey
            };
        };
        return alert;
    })();

    
    return alert;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/apiKey", ["require", "exports", "models/databaseAccess", "common/appUrl", "models/documentMetadata", "models/document"], function(require, exports, databaseAccess, appUrl, documentMetadata, document) {
    var apiKey = (function (_super) {
        __extends(apiKey, _super);
        function apiKey(dto) {
            var _this = this;
            _super.call(this, dto);
            this.name = ko.observable();
            this.secret = ko.observable();
            this.enabled = ko.observable();
            this.databases = ko.observableArray();
            this.visible = ko.observable(true);
            this.nameCustomValidity = ko.observable('');

            this.name(dto.Name);
            this.savedName = dto.Name;
            this.secret(dto.Secret);
            this.enabled(dto.Enabled);
            this.databases(dto.Databases.map(function (d) {
                return new databaseAccess(d);
            }));
            this.metadata = new documentMetadata(dto['@metadata']);

            this.fullApiKey = ko.computed(function () {
                if (!_this.name() || !_this.secret()) {
                    return "Requires name and secret";
                }

                return _this.name() + "/" + _this.secret();
            });

            this.connectionString = ko.computed(function () {
                if (!_this.name() || !_this.secret()) {
                    return "Requires name and secret";
                }

                return "Url = " + appUrl.forServer() + "; ApiKey = " + _this.fullApiKey() + "; Database = ";
            });

            this.directLink = ko.computed(function () {
                if (!_this.name() || !_this.secret()) {
                    return "Requires name and secret";
                }
                return appUrl.forServer() + "/studio/index.html#api-key=" + _this.fullApiKey();
            });
        }
        apiKey.empty = function () {
            return new apiKey({
                Databases: [databaseAccess.empty().toDto()],
                Enabled: false,
                Name: "",
                Secret: ""
            });
        };

        apiKey.prototype.toDto = function () {
            var meta = this.__metadata.toDto();
            meta['@id'] = "Raven/ApiKeys/" + this.name();
            return {
                '@metadata': meta,
                Databases: this.databases().map(function (db) {
                    return db.toDto();
                }),
                Enabled: this.enabled(),
                Name: this.name(),
                Secret: this.secret()
            };
        };

        apiKey.prototype.enable = function () {
            this.enabled(true);
        };

        apiKey.prototype.disable = function () {
            this.enabled(false);
        };

        apiKey.prototype.generateSecret = function () {
            // The old Silverlight Studio would create a new GUID, strip out the
            // dashes, and convert to base62.
            //
            // For the time being (is there a better way?), we're just creating a
            // random string of alpha numeric characters.
            var minimumLength = 10;
            var maxLength = 32;
            var randomLength = Math.max(minimumLength, Math.random() * maxLength);
            var randomSecret = apiKey.randomString(randomLength, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
            this.secret(randomSecret);
        };

        apiKey.prototype.addEmptyDatabase = function () {
            var newItem = { TenantId: '', Admin: false, ReadOnly: false };
            this.databases.push(new databaseAccess(newItem));
        };

        apiKey.prototype.removeDatabase = function (database) {
            this.databases.remove(database);
        };

        apiKey.prototype.setIdFromName = function () {
            this.__metadata.id = "Raven/ApiKeys/" + this.name();

            if (this.savedName !== this.name()) {
                this.__metadata.etag = null;
                this.savedName = this.name();
            }
        };

        apiKey.prototype.isValid = function (index) {
            var isApiKeyNameValid = this.name().indexOf("\\") == -1;
            var requiredValues = [this.name(), this.secret()];
            return requiredValues.every(function (v) {
                return v != null && v.length > 0;
            }) && isApiKeyNameValid;
        };

        apiKey.randomString = function (length, chars) {
            var result = '';
            for (var i = length; i > 0; --i)
                result += chars[Math.round(Math.random() * (chars.length - 1))];
            return result;
        };

        apiKey.prototype.getKey = function () {
            return "Raven/ApiKeys/" + this.name();
        };
        return apiKey;
    })(document);

    
    return apiKey;
});
define("models/changeSubscription", ["require", "exports"], function(require, exports) {
    var changeSubscription = (function () {
        function changeSubscription(onOff) {
            this.onOff = onOff;
            this.executed = false;
        }
        changeSubscription.prototype.off = function () {
            if (!this.executed) {
                this.executed = true;
                this.onOff();
            }
        };
        return changeSubscription;
    })();

    
    return changeSubscription;
});
define("models/collection", ["require", "exports", "common/pagedList", "commands/getDocumentsByEntityNameCommand", "commands/getSystemDocumentsCommand", "commands/getAllDocumentsCommand"], function(require, exports, pagedList, getDocumentsByEntityNameCommand, getSystemDocumentsCommand, getAllDocumentsCommand) {
    var collection = (function () {
        function collection(name, ownerDatabase, docCount) {
            if (typeof docCount === "undefined") { docCount = 0; }
            var _this = this;
            this.name = name;
            this.ownerDatabase = ownerDatabase;
            this.colorClass = "";
            this.documentCount = ko.observable(0);
            this.documentsCountWithThousandsSeparator = ko.computed(function () {
                return _this.documentCount().toLocaleString();
            });
            this.isAllDocuments = false;
            this.isSystemDocuments = false;
            this.isAllDocuments = name === collection.allDocsCollectionName;
            this.isSystemDocuments = name === collection.systemDocsCollectionName;
            this.colorClass = collection.getCollectionCssClass(name, ownerDatabase);
            this.documentCount(docCount);
        }
        // Notifies consumers that this collection should be the selected one.
        // Called from the UI when a user clicks a collection the documents page.
        collection.prototype.activate = function () {
            ko.postbox.publish("ActivateCollection", this);
        };

        collection.prototype.getDocuments = function () {
            if (!this.documentsList) {
                this.documentsList = this.createPagedList();
            }

            return this.documentsList;
        };

        collection.prototype.clearCollection = function () {
            if (this.isAllDocuments === true && !!this.documentsList) {
                this.documentsList.clear();
            }
        };

        collection.prototype.fetchDocuments = function (skip, take) {
            var _this = this;
            if (this.isSystemDocuments) {
                // System documents don't follow the normal paging rules. See getSystemDocumentsCommand.execute() for more info.
                var task = new getSystemDocumentsCommand(this.ownerDatabase, skip, take).execute();
                task.done(function (results) {
                    return _this.documentCount(results.totalResultCount);
                });
                return task;
            }
            if (this.isAllDocuments) {
                return new getAllDocumentsCommand(this.ownerDatabase, skip, take).execute();
            } else {
                return new getDocumentsByEntityNameCommand(this, skip, take).execute();
            }
        };

        collection.createSystemDocsCollection = function (ownerDatabase) {
            return new collection(collection.systemDocsCollectionName, ownerDatabase);
        };

        collection.createAllDocsCollection = function (ownerDatabase) {
            return new collection(collection.allDocsCollectionName, ownerDatabase);
        };

        collection.getCollectionCssClass = function (entityName, db) {
            if (entityName === collection.allDocsCollectionName) {
                return "all-documents-collection";
            }

            if (!entityName || entityName === collection.systemDocsCollectionName) {
                return "system-documents-collection";
            }

            var databaseStyleMap = this.collectionColorMaps.first(function (map) {
                return map.databaseName == db.name;
            });
            if (!databaseStyleMap) {
                databaseStyleMap = {
                    databaseName: db.name,
                    styleMap: {}
                };
                this.collectionColorMaps.push(databaseStyleMap);
            }

            var existingStyle = databaseStyleMap.styleMap[entityName];
            if (existingStyle) {
                return existingStyle;
            }

            // We don't have an existing style. Assign one in the form of 'collection-style-X', where X is a number between 0 and maxStyleCount. These styles are found in app.less.
            var maxStyleCount = 32;
            var styleNumber = Object.keys(databaseStyleMap.styleMap).length % maxStyleCount;
            var style = "collection-style-" + styleNumber;
            databaseStyleMap.styleMap[entityName] = style;
            return style;
        };

        collection.prototype.createPagedList = function () {
            var _this = this;
            var fetcher = function (skip, take) {
                return _this.fetchDocuments(skip, take);
            };
            var list = new pagedList(fetcher);
            list.collectionName = this.name;
            return list;
        };
        collection.allDocsCollectionName = "All Documents";
        collection.systemDocsCollectionName = "System Documents";
        collection.collectionColorMaps = [];
        return collection;
    })();

    
    return collection;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/collectionInfo", ["require", "exports", "models/document", "models/abstractQueryResult"], function(require, exports, document, abstractQueryResult) {
    var collectionInfo = (function (_super) {
        __extends(collectionInfo, _super);
        function collectionInfo(dto) {
            _super.call(this, dto);
            this.results = dto.Results.map(function (d) {
                return new document(d);
            });
        }
        return collectionInfo;
    })(abstractQueryResult);

    
    return collectionInfo;
});
define("models/conflict", ["require", "exports", "models/conflictVersion"], function(require, exports, conflictVersion) {
    var conflict = (function () {
        function conflict(dto) {
            this.id = dto.Id;
            this.conflictDetectedAt = dto.ConflictDetectedAt;
            this.versions = $.map(dto.Versions, function (v) {
                return new conflictVersion(v);
            });
        }
        conflict.prototype.getId = function () {
            return this.id;
        };

        conflict.prototype.getUrl = function () {
            return this.id;
        };

        conflict.prototype.getDocumentPropertyNames = function () {
            return ["Id", "conflictDetectedAt", "versions"];
        };
        return conflict;
    })();

    
    return conflict;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/conflictsInfo", ["require", "exports", "models/conflict", "models/abstractQueryResult"], function(require, exports, conflict, abstractQueryResult) {
    var conflictsInfo = (function (_super) {
        __extends(conflictsInfo, _super);
        function conflictsInfo(dto) {
            _super.call(this, dto);
            this.results = dto.Results.map(function (d) {
                return new conflict(d);
            });
        }
        return conflictsInfo;
    })(abstractQueryResult);

    
    return conflictsInfo;
});
define("models/conflictVersion", ["require", "exports"], function(require, exports) {
    var conflictVersion = (function () {
        function conflictVersion(dto) {
            this.id = dto.Id;
            this.sourceId = dto.SourceId;
        }
        return conflictVersion;
    })();

    
    return conflictVersion;
});
define("models/customColumnParams", ["require", "exports"], function(require, exports) {
    var customColumnParams = (function () {
        function customColumnParams(dto) {
            this.header = ko.observable();
            this.binding = ko.observable();
            this.template = ko.observable();
            this.width = ko.observable();
            this.header(dto.Header);
            this.binding(dto.Binding);
            this.template(dto.Template || "defaultTemplate");
            this.width(dto.DefaultWidth);
        }
        customColumnParams.empty = function () {
            return new customColumnParams({ Header: '', Binding: '', DefaultWidth: 200 });
        };

        customColumnParams.prototype.toDto = function () {
            return {
                'Header': this.header(),
                'Binding': this.binding(),
                'DefaultWidth': this.width()
            };
        };
        return customColumnParams;
    })();

    
    return customColumnParams;
});
define("models/customColumns", ["require", "exports", "models/customColumnParams"], function(require, exports, customColumnParams) {
    var customColumns = (function () {
        function customColumns(dto) {
            this.columns = ko.observableArray();
            this.customMode = ko.observable(false);
            this.enabled = ko.observable(true);
            this.columns($.map(dto.Columns, function (c) {
                return new customColumnParams(c);
            }));
        }
        customColumns.empty = function () {
            return new customColumns({ Columns: [] });
        };

        customColumns.prototype.copyFrom = function (src) {
            this.columns(src.columns());
            this.customMode(src.customMode());
        };

        customColumns.prototype.clone = function () {
            var copy = new customColumns(this.toDto());
            copy.customMode(this.customMode());
            return copy;
        };

        customColumns.prototype.hasOverrides = function () {
            return this.enabled() && this.customMode() && this.columns().length > 0;
        };

        customColumns.prototype.toDto = function () {
            return {
                'Columns': $.map(this.columns(), function (c) {
                    return c.toDto();
                })
            };
        };

        customColumns.prototype.findConfigFor = function (binding) {
            var colParams = this.columns();
            for (var i = 0; i < colParams.length; i++) {
                var colParam = colParams[i];
                if (colParam.binding() === binding) {
                    return colParam;
                }
            }
            return null;
        };
        return customColumns;
    })();

    
    return customColumns;
});
define("models/customFunctions", ["require", "exports", "models/documentMetadata"], function(require, exports, documentMetadata) {
    var customFunctions = (function () {
        function customFunctions(dto) {
            if (!dto) {
                dto = {
                    Functions: ""
                };
                this.__metadata = new documentMetadata();
            } else {
                this.__metadata = new documentMetadata(dto["@metadata"]);
            }

            this.functions = dto.Functions;
        }
        customFunctions.prototype.toDto = function (includeMetadata) {
            var dto = {
                Functions: this.functions
            };

            if (includeMetadata && this.__metadata) {
                dto['@metadata'] = this.__metadata.toDto();
            }
            return dto;
        };

        customFunctions.prototype.clone = function () {
            var copy = new customFunctions(this.toDto());
            copy.functions = this.functions;
            return copy;
        };

        customFunctions.empty = function () {
            return new customFunctions({
                Functions: ""
            });
        };
        return customFunctions;
    })();

    
    return customFunctions;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/database", ["require", "exports", "models/resource", "models/license"], function(require, exports, resource, license) {
    var database = (function (_super) {
        __extends(database, _super);
        function database(name, isDisabled, bundles, isIndexingDisabled, isRejectClientsMode) {
            if (typeof isDisabled === "undefined") { isDisabled = false; }
            if (typeof bundles === "undefined") { bundles = []; }
            if (typeof isIndexingDisabled === "undefined") { isIndexingDisabled = false; }
            if (typeof isRejectClientsMode === "undefined") { isRejectClientsMode = false; }
            var _this = this;
            _super.call(this, name, database.type);
            this.name = name;
            this.statistics = ko.observable();
            this.activeBundles = ko.observableArray();
            this.isImporting = ko.observable(false);
            this.importStatus = ko.observable('');
            this.indexingDisabled = ko.observable(false);
            this.rejectClientsMode = ko.observable(false);
            this.disabled(isDisabled);
            this.activeBundles(bundles);
            this.indexingDisabled(isIndexingDisabled);
            this.rejectClientsMode(isRejectClientsMode);
            this.itemCount = ko.computed(function () {
                return _this.statistics() ? _this.statistics().CountOfDocuments : 0;
            });
            this.itemCountText = ko.computed(function () {
                var itemCount = _this.itemCount();
                var text = itemCount.toLocaleString() + ' document';
                if (itemCount != 1) {
                    text += 's';
                }
                return text;
            });
            this.isLicensed = ko.computed(function () {
                if (!!license.licenseStatus() && license.licenseStatus().IsCommercial) {
                    var attributes = license.licenseStatus().Attributes;
                    var result = _this.activeBundles().map(function (bundleName) {
                        return _this.attributeValue(attributes, bundleName === "periodicBackup" ? "periodicExport" : bundleName);
                    }).reduce(function (a, b) {
                        return /^true$/i.test(a) && /^true$/i.test(b);
                    }, true);
                    return result;
                }
                return true;
            });
            this.recentQueriesLocalStorageName = 'ravenDB-recentQueries.' + name;
            this.mergedIndexLocalStoragePrefix = 'ravenDB-mergedIndex.' + name;
        }
        database.prototype.attributeValue = function (attributes, bundleName) {
            for (var key in attributes) {
                if (attributes.hasOwnProperty(key) && key.toLowerCase() === bundleName.toLowerCase()) {
                    return attributes[key];
                }
            }
            return "true";
        };

        database.prototype.activate = function () {
            ko.postbox.publish("ActivateDatabase", this);
        };

        database.getNameFromUrl = function (url) {
            var index = url.indexOf("databases/");
            return (index > 0) ? url.substring(index + 10) : "";
        };
        database.type = 'database';
        return database;
    })(resource);

    
    return database;
});
define("models/databaseAccess", ["require", "exports", "viewmodels/shell"], function(require, exports, shell) {
    var databaseAccess = (function () {
        function databaseAccess(dto) {
            var _this = this;
            this.admin = ko.observable();
            this.tenantId = ko.observable();
            this.readOnly = ko.observable();
            this.currentAccessType = ko.computed({
                read: function () {
                    if (_this.admin() === true) {
                        return databaseAccess.adminAccessType;
                    } else if (_this.readOnly() === true) {
                        return databaseAccess.readOnlyAccessType;
                    }

                    return databaseAccess.readWriteAccessType;
                },
                write: function (value) {
                    switch (value) {
                        case databaseAccess.adminAccessType:
                            _this.admin(true);
                            _this.readOnly(false);
                            break;
                        case databaseAccess.readOnlyAccessType:
                            _this.admin(false);
                            _this.readOnly(true);
                            break;
                        case databaseAccess.readWriteAccessType:
                            _this.admin(false);
                            _this.readOnly(false);
                            break;
                        default:
                    }
                }
            });
            this.admin(dto.Admin);
            this.readOnly(dto.ReadOnly);
            this.tenantId(dto.TenantId != null ? dto.TenantId : '');

            this.resourceNames = ko.computed(function () {
                return shell.databases().map(function (db) {
                    return db.name;
                }).concat(shell.fileSystems().map(function (fs) {
                    return fs.name;
                })).concat("*");
            });

            this.searchResults = ko.computed(function () {
                var newResourceName = _this.tenantId();
                return _this.resourceNames().filter(function (name) {
                    return name.toLowerCase().indexOf(newResourceName.toLowerCase()) > -1;
                });
            });

            this.tenantCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newTenantId = _this.tenantId();
                var foundResource = _this.resourceNames().first(function (name) {
                    return newTenantId == name;
                });

                if (!foundResource && newTenantId.length > 0) {
                    errorMessage = "There is no database nor file system with such a name!";
                }

                return errorMessage;
            });
        }
        databaseAccess.prototype.toDto = function () {
            return {
                Admin: this.admin(),
                TenantId: this.tenantId(),
                ReadOnly: this.readOnly()
            };
        };

        databaseAccess.empty = function () {
            return new databaseAccess({
                Admin: false,
                TenantId: "",
                ReadOnly: false
            });
        };

        databaseAccess.prototype.getTypes = function () {
            return databaseAccess.databaseAccessTypes();
        };
        databaseAccess.adminAccessType = 'Admin';
        databaseAccess.readWriteAccessType = 'Read, Write';
        databaseAccess.readOnlyAccessType = 'Read Only';
        databaseAccess.databaseAccessTypes = ko.observableArray([databaseAccess.adminAccessType, databaseAccess.readWriteAccessType, databaseAccess.readOnlyAccessType]);
        return databaseAccess;
    })();
    
    return databaseAccess;
});
define("models/debugDocumentStats", ["require", "exports"], function(require, exports) {
    var debugDocumentStats = (function () {
        function debugDocumentStats(dto) {
            this.total = dto.Total;
            this.totalSize = dto.TotalSize;
            this.tombstones = dto.Tombstones;
            this.system = dto.System;
            this.noCollection = dto.NoCollection;
            this.collections = $.map(dto.Collections, function (data, name) {
                return { "name": name, "stats": data.Stats, "size": data.TotalSize, "topDocs": data.TopDocs };
            });
            this.timeToGenerate = dto.TimeToGenerate;
        }
        return debugDocumentStats;
    })();

    
    return debugDocumentStats;
});
define("models/document", ["require", "exports", "models/documentMetadata"], function(require, exports, documentMetadata) {
    var document = (function () {
        function document(dto) {
            this.__metadata = new documentMetadata(dto['@metadata']);
            for (var property in dto) {
                if (property !== '@metadata') {
                    this[property] = dto[property];
                }
            }
        }
        document.prototype.getEntityName = function () {
            return this.__metadata.ravenEntityName;
        };

        document.prototype.getId = function () {
            return this.__metadata.id;
        };

        document.prototype.getUrl = function () {
            return this.getId();
        };

        document.prototype.getDocumentPropertyNames = function () {
            var propertyNames = [];
            for (var property in this) {
                var isMeta = property === '__metadata' || property === '__moduleId__';
                var isFunction = typeof this[property] === 'function';
                if (!isMeta && !isFunction) {
                    propertyNames.push(property);
                }
            }

            return propertyNames;
        };

        document.prototype.toDto = function (includeMeta) {
            if (typeof includeMeta === "undefined") { includeMeta = false; }
            var dto = { '@metadata': undefined };
            var properties = this.getDocumentPropertyNames();
            for (var i = 0; i < properties.length; i++) {
                var property = properties[i];
                dto[property] = this[property];
            }

            if (includeMeta && this.__metadata) {
                var newDocumentMetadata = new documentMetadata(this.__metadata);
                dto['@metadata'] = newDocumentMetadata.toDto();
            }

            return dto;
        };

        document.prototype.toBulkDoc = function (method) {
            var dto = this.toDto();
            var bulkDoc = {
                Document: dto,
                Key: this.getId(),
                Method: method,
                AdditionalData: null
            };

            var meta = dto["@metadata"];
            if (meta) {
                bulkDoc.Metadata = meta;

                if (meta["@etag"]) {
                    bulkDoc.Etag = meta["@etag"];
                }
            }

            return bulkDoc;
        };

        document.empty = function () {
            var emptyDto = {
                '@metadata': {}
            };

            return new document(emptyDto);
        };

        document.getEntityNameFromId = function (id) {
            if (!id) {
                return null;
            }

            // TODO: is there a better/more reliable way to do this?
            var slashIndex = id.lastIndexOf('/');
            if (slashIndex >= 1) {
                return id.substring(0, 1).toUpperCase() + id.substring(1, slashIndex);
            }

            return id;
        };
        return document;
    })();

    
    return document;
});
/// <reference path="../models/dto.ts" />
define("models/documentMetadata", ["require", "exports"], function(require, exports) {
    var documentMetadata = (function () {
        function documentMetadata(dto) {
            var _this = this;
            this.now = ko.observable(new Date());
            if (dto) {
                this.ravenEntityName = dto['Raven-Entity-Name'];
                this.ravenClrType = dto['Raven-Clr-Type'];
                this.nonAuthoritativeInfo = dto['Non-Authoritative-Information'];
                this.id = dto['@id'];
                this.tempIndexScore = dto['Temp-Index-Score'];
                this.lastModified = dto['Last-Modified'];

                this.lastModifiedFullDate = ko.computed(function () {
                    if (!!_this.lastModified) {
                        var lastModifiedMoment = moment(_this.lastModified);
                        var timeSince = lastModifiedMoment.from(_this.now());
                        var fullTimeSinceUtc = lastModifiedMoment.utc().format("DD/MM/YYYY HH:mm (UTC)");
                        return timeSince + " (" + fullTimeSinceUtc + ")";
                    }
                    return "";
                });
                setInterval(function () {
                    return _this.now(new Date());
                }, 60 * 1000);

                this.ravenLastModified = dto['Raven-Last-Modified'];
                this.etag = dto['@etag'];

                for (var property in dto) {
                    if (property.toUpperCase() !== 'Raven-Entity-Name'.toUpperCase() && property.toUpperCase() !== 'Raven-Clr-Type'.toUpperCase() && property.toUpperCase() !== 'Non-Authoritative-Information'.toUpperCase() && property.toUpperCase() !== '@id'.toUpperCase() && property.toUpperCase() !== 'Temp-Index-Score'.toUpperCase() && property.toUpperCase() !== 'Last-Modified'.toUpperCase() && property.toUpperCase() !== 'Raven-Last-Modified'.toUpperCase() && property.toUpperCase() !== '@etag'.toUpperCase() && property.toUpperCase() !== 'toDto'.toUpperCase()) {
                        this.nonStandardProps = this.nonStandardProps || [];
                        this[property] = dto[property];
                        this.nonStandardProps.push(property);
                    }
                }
            }
        }
        documentMetadata.prototype.toDto = function () {
            var _this = this;
            var dto = {
                'Raven-Entity-Name': this.ravenEntityName,
                'Raven-Clr-Type': this.ravenClrType,
                'Non-Authoritative-Information': this.nonAuthoritativeInfo,
                '@id': this.id,
                'Temp-Index-Score': this.tempIndexScore,
                'Last-Modified': this.lastModified,
                'Raven-Last-Modified': this.ravenLastModified,
                '@etag': this.etag
            };

            if (this.nonStandardProps) {
                this.nonStandardProps.forEach(function (p) {
                    return dto[p] = _this[p];
                });
            }

            return dto;
        };
        return documentMetadata;
    })();

    
    return documentMetadata;
});
define("models/facet", ["require", "exports"], function(require, exports) {
    var facet = (function () {
        function facet(dto) {
            var _this = this;
            this.aggregation = ko.observable();
            this.aggregationLabel = ko.computed(function () {
                return facet.getLabelForAggregation(_this.aggregation());
            });
            this.aggregation(dto.Aggregation);
            this.aggregationField = dto.AggregationField;
            this.aggregationType = dto.AggregationType;
            this.displayName = dto.DisplayName;
            this.includeRemainingTerms = dto.IncludeRemainingTerms;
            this.maxResults = dto.MaxResults;
            this.mode = dto.Mode;
            this.name = dto.Name;
            this.ranges = dto.Ranges;
            this.termSortMode = dto.TermSortMode;
        }
        facet.prototype.toDto = function () {
            return {
                Aggregation: this.aggregation(),
                AggregationField: this.aggregationField,
                AggregationType: this.aggregation() < 2 ? "System.String" : "System.Int32",
                DisplayName: this.displayName,
                IncludeRemainingTerms: this.includeRemainingTerms,
                MaxResults: this.maxResults,
                Mode: this.mode,
                Name: this.name,
                Ranges: this.ranges,
                TermSortMode: this.termSortMode
            };
        };

        facet.fromNameAndAggregation = function (name, aggregationField) {
            var dto = {
                Aggregation: 0,
                AggregationField: aggregationField,
                AggregationType: "System.String",
                DisplayName: name + "-" + aggregationField,
                IncludeRemainingTerms: false,
                MaxResults: null,
                Mode: 0,
                Name: name,
                Ranges: [],
                TermSortMode: 0
            };

            return new facet(dto);
        };

        facet.getLabelForAggregation = function (aggregation) {
            // None = 0, Count = 1, Max = 2, Min = 4, Average = 8, Sum = 16
            return aggregation === 1 ? "Count" : aggregation === 2 ? "Max" : aggregation === 4 ? "Min" : aggregation === 8 ? "Average" : aggregation === 16 ? "Sum" : "None";
        };

        facet.prototype.setAggregationToCount = function () {
            this.aggregation(1);
        };

        facet.prototype.setAggregationToMax = function () {
            this.aggregation(2);
        };

        facet.prototype.setAggregationToMin = function () {
            this.aggregation(4);
        };

        facet.prototype.setAggregationToAverage = function () {
            this.aggregation(8);
        };

        facet.prototype.setAggregationToSum = function () {
            this.aggregation(16);
        };
        return facet;
    })();

    
    return facet;
});
define("models/index", ["require", "exports", "common/appUrl", "models/indexPriority"], function(require, exports, appUrl, indexPriority) {
    var index = (function () {
        function index(dto) {
            this.isOnRam = ko.observable();
            this.lockMode = ko.observable();
            this.isIdle = ko.observable(false);
            this.isAbandoned = ko.observable(false);
            this.isErrored = ko.observable(false);
            this.isDisabled = ko.observable(false);
            this.isInvalid = ko.observable(false);
            this.createdTimestamp = dto.CreatedTimestamp;
            this.docsCount = dto.DocsCount;
            this.forEntityName = dto.ForEntityName;
            this.indexingAttempts = dto.IndexingAttempts;
            this.indexingErrors = dto.IndexingErrors;
            this.indexingSuccesses = dto.IndexingSuccesses;
            this.isOnRam(dto.IsOnRam);
            this.lastIndexedEtag = dto.LastIndexedEtag;
            this.lastIndexedTimestamp = dto.LastIndexedTimestamp;
            this.lastIndexingTime = dto.LastIndexingTime;
            this.lastQueryTimestamp = dto.LastQueryTimestamp;
            this.lastReducedEtag = dto.LastReducedEtag;
            this.lastReducedTimestamp = dto.LastReducedTimestamp;
            this.lockMode(dto.LockMode);
            this.name = dto.Name;
            this.performance = dto.Performance;
            this.priority = dto.Priority;
            this.reduceIndexingAttempts = dto.ReduceIndexingAttempts;
            this.reduceIndexingErrors = dto.ReduceIndexingErrors;
            this.reduceIndexingSuccesses = dto.ReduceIndexingSuccesses;
            this.touchCount = dto.TouchCount;
            this.isInvalid(dto.IsInvalidIndex);

            this.isAbandoned(this.priority && this.priority.indexOf(index.priorityAbandoned) !== -1);
            this.isDisabled(this.priority && this.priority.indexOf(index.priorityDisabled) !== -1);
            this.isErrored(this.priority && this.priority.indexOf(index.priorityErrored) !== -1);
            this.isIdle(this.priority && this.priority.indexOf(index.priorityIdle) !== -1);
            this.editUrl = appUrl.forCurrentDatabase().editIndex(encodeURIComponent(this.name));
            this.queryUrl = appUrl.forCurrentDatabase().query(this.name);
        }
        index.priorityFromString = function (priority) {
            switch (priority) {
                case index.priorityIdle:
                    return 1 /* idle */;
                case index.priorityDisabled:
                    return 2 /* disabled */;
                case index.priorityAbandoned:
                    return 3 /* abandoned */;
                case index.priorityIdleForced:
                    return 4 /* idleForced */;
                case index.priorityDisabledForced:
                    return 5 /* disabledForced */;
                case index.priorityAbandonedForced:
                    return 6 /* abandonedForced */;
                default:
                    return 0 /* normal */;
            }
        };

        index.priorityToString = function (priority) {
            switch (priority) {
                case 3 /* abandoned */:
                    return index.priorityAbandoned;
                case 6 /* abandonedForced */:
                    return index.priorityAbandonedForced;
                case 2 /* disabled */:
                    return index.priorityDisabled;
                case 5 /* disabledForced */:
                    return index.priorityDisabledForced;
                case 1 /* idle */:
                    return index.priorityIdle;
                case 4 /* idleForced */:
                    return index.priorityIdleForced;
                default:
                    return index.priorityNormal;
            }
        };
        index.priorityNormal = "Normal";
        index.priorityIdle = "Idle";
        index.priorityDisabled = "Disabled";
        index.priorityErrored = "Error";
        index.priorityAbandoned = "Abandoned";
        index.priorityIdleForced = "Idle,Forced";
        index.priorityDisabledForced = "Disabled,Forced";
        index.priorityAbandonedForced = "Abandoned,Forced";
        return index;
    })();

    
    return index;
});
define("models/indexAceAutoCompleteProvider", ["require", "exports", "models/collection", "models/document", "commands/getCollectionsCommand", "commands/getDocumentsByEntityNameCommand"], function(require, exports, collection, document, getCollectionsCommand, getDocumentsByEntityNameCommand) {
    var indexAceAutoCompleteProvider = (function () {
        function indexAceAutoCompleteProvider(activeDatabase, editedIndex) {
            this.activeDatabase = activeDatabase;
            this.editedIndex = editedIndex;
        }
        indexAceAutoCompleteProvider.prototype.getCollectionAliasesInsideIndexText = function (session) {
            var aliases = [];

            var curAliasKey = null;
            var curAliasValuePrefix = null;
            var curAliasValueSuffix = null;

            for (var curRow = 0; curRow < session.getLength(); curRow++) {
                var curRowTokens = session.getTokens(curRow);

                for (var curTokenInRow = 0; curTokenInRow < curRowTokens.length; curTokenInRow++) {
                    if (curRowTokens[curTokenInRow].type == "from.alias") {
                        curAliasKey = curRowTokens[curTokenInRow].value.trim();
                    } else if (!!curAliasKey) {
                        if (curRowTokens[curTokenInRow].type == "docs" || curRowTokens[curTokenInRow].type == "collections") {
                            curAliasValuePrefix = curRowTokens[curTokenInRow].value;
                        } else if (curRowTokens[curTokenInRow].type == "collectionName") {
                            curAliasValueSuffix = curRowTokens[curTokenInRow].value;
                            aliases.push({ aliasKey: curAliasKey, aliasValuePrefix: curAliasValuePrefix.replace('.', '').trim(), aliasValueSuffix: curAliasValueSuffix.replace('.', '').trim() });

                            curAliasKey = null;
                            curAliasValuePrefix = null;
                            curAliasValueSuffix = null;
                        }
                    }
                }
            }
            return aliases;
        };

        indexAceAutoCompleteProvider.prototype.getIndexMapCollectionFieldsForAutocomplete = function (session, currentToken) {
            var deferred = $.Deferred();

            var collectionAliases = this.getCollectionAliasesInsideIndexText(session);

            // find the matching alias and get list of fields
            if (collectionAliases.length > 0) {
                var matchingAliasKeyValue = collectionAliases.first(function (x) {
                    return x.aliasKey.replace('.', '').trim() === currentToken.value.replace('.', '').trim();
                });
                if (!!matchingAliasKeyValue) {
                    // get list of fields according to it's collection's first row
                    if (matchingAliasKeyValue.aliasValuePrefix.toLowerCase() === "docs") {
                        new getDocumentsByEntityNameCommand(new collection(matchingAliasKeyValue.aliasValueSuffix, this.activeDatabase), 0, 1).execute().done(function (result) {
                            if (!!result && result.totalResultCount > 0) {
                                var documentPattern = new document(result.items[0]);
                                deferred.resolve(documentPattern.getDocumentPropertyNames());
                            } else {
                                deferred.reject();
                            }
                        }).fail(function () {
                            return deferred.reject();
                        });
                    } else {
                        deferred.reject();
                    }
                }
            } else {
                deferred.reject();
            }

            return deferred;
        };

        indexAceAutoCompleteProvider.prototype.getIndexMapCompleterValues = function (editor, session, pos) {
            var currentToken = session.getTokenAt(pos.row, pos.column);
            var completedToken;
            var TokenIterator = require("ace/token_iterator").TokenIterator;
            var curPosIterator = new TokenIterator(editor.getSession(), pos.row, pos.column);
            var prevToken = curPosIterator.stepBackward();

            var returnedDeferred = $.Deferred();
            var suggestionsArray = [];

            // validation: if is null or it's type is represented by a string
            if (!currentToken || typeof currentToken.type == "string") {
                // if in beginning of text or in free text token
                if (!currentToken || currentToken.type == "text") {
                    suggestionsArray.push("from");
                    suggestionsArray.push("docs");
                } else if (!!currentToken.value && (currentToken.type == "docs" || (!!prevToken && prevToken.type == "docs"))) {
                    new getCollectionsCommand(this.activeDatabase).execute().done(function (collections) {
                        collections.forEach(function (curCollection) {
                            return suggestionsArray.push(curCollection.name);
                        });
                        returnedDeferred.resolve(suggestionsArray);
                    }).fail(function () {
                        return returnedDeferred.reject();
                    });
                } else if (currentToken.type == "collections" || currentToken.type == "collectionName") {
                    if (currentToken.type == "collections") {
                        completedToken = currentToken;
                    } else {
                        completedToken = prevToken;
                    }

                    this.getIndexMapCollectionFieldsForAutocomplete(session, completedToken).done(function (x) {
                        return returnedDeferred.resolve(x);
                    }).fail(function () {
                        return returnedDeferred.reject();
                    });
                } else if (currentToken.type == "data.prefix" || currentToken.type == "data.suffix") {
                    if (currentToken.type == "data.prefix") {
                        completedToken = currentToken;
                    } else {
                        completedToken = prevToken;
                    }

                    var firstToken = session.getTokenAt(0, 0);

                    // treat a "from [foo] in [bar] type of index syntax
                    if (firstToken.value == "from") {
                        var aliases = this.getCollectionAliasesInsideIndexText(session);

                        this.getIndexMapCollectionFieldsForAutocomplete(session, completedToken).done(function (x) {
                            return returnedDeferred.resolve(x);
                        }).fail(function () {
                            return returnedDeferred.reject();
                        });
                    } else {
                        returnedDeferred.resolve(["Methodical Syntax Not Supported"]);
                    }
                } else {
                    returnedDeferred.reject();
                }
            } else {
                returnedDeferred.reject();
            }

            return returnedDeferred;
        };

        indexAceAutoCompleteProvider.prototype.indexMapCompleter = function (editor, session, pos, prefix, callback) {
            this.getIndexMapCompleterValues(editor, session, pos).done(function (x) {
                callback(null, x.map(function (val) {
                    return { name: val, value: val, score: 100, meta: "suggestion" };
                }));
            }).fail(function () {
                callback([{ error: "notext" }], null);
            });
        };

        indexAceAutoCompleteProvider.prototype.getIndexReduceCompleterValues = function () {
            var firstMapSrting = this.editedIndex().maps()[0]();

            var dotPrefixes = firstMapSrting.match(/[.]\w*/g);
            var equalPrefixes = firstMapSrting.match(/\w*\s*=\s*/g);

            var autoCompletes = [];

            if (!!dotPrefixes) {
                dotPrefixes.forEach(function (curPrefix) {
                    autoCompletes.push(curPrefix.replace(".", "").trim());
                });
            }
            if (!!equalPrefixes) {
                equalPrefixes.forEach(function (curPrefix) {
                    autoCompletes.push(curPrefix.replace("=", "").trim());
                });
            }

            return autoCompletes;
        };

        indexAceAutoCompleteProvider.prototype.indexReduceCompleter = function (editor, session, pos, prefix, callback) {
            var autoCompletes = this.getIndexReduceCompleterValues();
            callback(null, autoCompletes.map(function (curField) {
                return { name: curField, value: curField, score: 100, meta: "suggestion" };
            }));
        };
        return indexAceAutoCompleteProvider;
    })();

    
    return indexAceAutoCompleteProvider;
});
define("models/indexDefinition", ["require", "exports", "models/luceneField", "models/spatialIndexField"], function(require, exports, luceneField, spatialIndexField) {
    var indexDefinition = (function () {
        function indexDefinition(dto) {
            var _this = this;
            this.name = ko.observable().extend({ required: true });
            this.map = ko.observable().extend({ required: true });
            this.maps = ko.observableArray().extend({ required: true });
            this.reduce = ko.observable().extend({ required: true });
            this.luceneFields = ko.observableArray();
            this.numOfLuceneFields = ko.computed(function () {
                return _this.luceneFields().length;
            }).extend({ required: true });
            // This is an amalgamation of several properties from the index (Fields, Stores, Indexes, SortOptions, Analyzers, Suggestions, TermVectors)
            // Stored as multiple luceneFields for the sake of data binding.
            // Each luceneField corresponds to a Field box in the index editor UI.
            this.spatialFields = ko.observableArray();
            this.numOfSpatialFields = ko.computed(function () {
                return _this.spatialFields().length;
            }).extend({ required: true });
            this.maxIndexOutputsPerDocument = ko.observable(0).extend({ required: true });
            this.fields = ko.observableArray();
            this.analyzers = dto.Analyzers;
            this.fields(dto.Fields);
            this.indexes = dto.Indexes;
            this.internalFieldsMapping = dto.InternalFieldsMapping;
            this.isCompiled = dto.IsCompiled;
            this.isMapReduce = dto.IsMapReduce;
            this.lockMode = dto.LockMode;
            this.map(dto.Map);
            this.maps(dto.Maps.map(function (m) {
                return ko.observable(m);
            }));
            this.name(dto.Name);
            this.reduce(dto.Reduce);
            this.sortOptions = dto.SortOptions;
            this.spatialIndexes = dto.SpatialIndexes;
            this.stores = dto.Stores;
            this.suggestions = dto.Suggestions;
            this.termVectors = dto.TermVectors;
            this.type = dto.Type;

            this.luceneFields(this.parseFields());
            this.spatialFields(this.parseSpatialFields());

            this.maxIndexOutputsPerDocument(dto.MaxIndexOutputsPerDocument ? dto.MaxIndexOutputsPerDocument : 0);
        }
        indexDefinition.prototype.toDto = function () {
            return {
                Analyzers: this.makeFieldObject(function (f) {
                    return f.indexing() === "Analyzed";
                }, function (f) {
                    return f.analyzer();
                }),
                Fields: this.fields(),
                Indexes: this.makeFieldObject(function (f) {
                    return f.indexing() !== "Default";
                }, function (f) {
                    return f.indexing();
                }),
                InternalFieldsMapping: this.internalFieldsMapping,
                IsCompiled: this.isCompiled,
                IsMapReduce: this.isMapReduce,
                LockMode: this.lockMode,
                Map: this.maps()[0](),
                Maps: this.maps().map(function (m) {
                    return m();
                }).filter(function (m) {
                    return m && m.length > 0;
                }),
                Name: this.name(),
                Reduce: this.reduce(),
                SortOptions: this.makeFieldObject(function (f) {
                    return f.sort() !== "None";
                }, function (f) {
                    return f.sort();
                }),
                SpatialIndexes: this.makeSpatialIndexesObject(),
                Stores: this.makeFieldObject(function (f) {
                    return f.stores() === "Yes";
                }, function (f) {
                    return f.stores();
                }),
                Suggestions: this.makeFieldObject(function (f) {
                    return f.suggestionDistance() !== "None";
                }, function (f) {
                    return f.toSuggestionDto();
                }),
                TermVectors: this.makeFieldObject(function (f) {
                    return f.termVector() !== "No";
                }, function (f) {
                    return f.termVector();
                }),
                Type: this.type,
                MaxIndexOutputsPerDocument: this.maxIndexOutputsPerDocument() ? this.maxIndexOutputsPerDocument() > 0 ? this.maxIndexOutputsPerDocument() : null : null
            };
        };

        indexDefinition.empty = function () {
            return new indexDefinition({
                Analyzers: {},
                Fields: [],
                Indexes: {},
                InternalFieldsMapping: {},
                IsCompiled: false,
                IsMapReduce: false,
                LockMode: "Unlock",
                Map: " ",
                Maps: [" "],
                Name: "",
                Reduce: null,
                SortOptions: {},
                SpatialIndexes: {},
                Stores: {},
                Suggestions: {},
                TermVectors: {},
                Type: "Map",
                MaxIndexOutputsPerDocument: null
            });
        };

        indexDefinition.prototype.makeSpatialIndexesObject = function () {
            var spatialIndexesObj = {};
            this.spatialFields().forEach(function (f) {
                return spatialIndexesObj[f.name()] = f.toDto();
            });
            return spatialIndexesObj;
        };

        indexDefinition.prototype.makeFieldObject = function (filter, selector) {
            var obj = {};
            this.luceneFields().filter(filter).forEach(function (f) {
                return obj[f.name()] = selector(f);
            });
            return obj;
        };

        indexDefinition.prototype.parseFields = function () {
            var _this = this;
            return this.fields().filter(function (name) {
                return _this.analyzers[name] != null || _this.indexes[name] != null || _this.sortOptions[name] != null || _this.stores[name] != null || _this.suggestions[name] != null || _this.termVectors[name] != null;
            }).map(function (fieldName) {
                var suggestion = _this.suggestions && _this.suggestions[fieldName] ? _this.suggestions[fieldName] : {};
                return new luceneField(fieldName, _this.stores[fieldName], _this.indexes[fieldName], _this.sortOptions[fieldName], _this.analyzers[fieldName], suggestion['Distance'], suggestion['Accuracy'], _this.termVectors[fieldName], _this.fields());
            });
        };

        indexDefinition.prototype.parseSpatialFields = function () {
            var _this = this;
            // The spatial fields are stored as properties on the .spatialIndexes object.
            // The property names will be one of the .fields.
            return this.fields().filter(function (fieldName) {
                return _this.spatialIndexes && _this.spatialIndexes[fieldName];
            }).map(function (fieldName) {
                return new spatialIndexField(fieldName, _this.spatialIndexes[fieldName]);
            });
        };
        return indexDefinition;
    })();

    
    return indexDefinition;
});
define("models/indexMergeSuggestion", ["require", "exports", "models/indexDefinition", "common/idGenerator"], function(require, exports, indexDefinition, idGenerator) {
    var indexMergeSuggestion = (function () {
        function indexMergeSuggestion(dto) {
            this.id = ko.observable();
            this.canMerge = dto.CanMerge;
            this.collection = dto.Collection;
            this.mergedIndexDefinition = dto.MergedIndex ? new indexDefinition(dto.MergedIndex) : null;
            this.id(idGenerator.generateId());
            this.canDelete = dto.CanDelete;
            this.surpassingIndex = dto.SurpassingIndex;
        }
        indexMergeSuggestion.prototype.isSurpassingIndex = function () {
            return this.mergedIndexDefinition == null;
        };

        indexMergeSuggestion.prototype.toDto = function () {
            return {
                CanMerge: this.canMerge,
                Collection: this.collection,
                MergedIndex: this.mergedIndexDefinition ? this.mergedIndexDefinition.toDto() : null,
                CanDelete: this.canDelete,
                SurpassingIndex: this.surpassingIndex
            };
        };
        return indexMergeSuggestion;
    })();

    
    return indexMergeSuggestion;
});
define("models/indexPriority", ["require", "exports"], function(require, exports) {
    var indexPriority;
    (function (indexPriority) {
        indexPriority[indexPriority["normal"] = 0] = "normal";
        indexPriority[indexPriority["idle"] = 1] = "idle";
        indexPriority[indexPriority["disabled"] = 2] = "disabled";
        indexPriority[indexPriority["abandoned"] = 3] = "abandoned";
        indexPriority[indexPriority["idleForced"] = 4] = "idleForced";
        indexPriority[indexPriority["disabledForced"] = 5] = "disabledForced";
        indexPriority[indexPriority["abandonedForced"] = 6] = "abandonedForced";
    })(indexPriority || (indexPriority = {}));

    
    return indexPriority;
});
define("models/license", ["require", "exports"], function(require, exports) {
    var license = (function () {
        function license() {
        }
        license.licenseStatus = ko.observable();
        return license;
    })();

    
    return license;
});
define("models/luceneField", ["require", "exports"], function(require, exports) {
    var luceneField = (function () {
        function luceneField(name, stores, indexing, sort, analyzer, suggestionDistance, suggestionAccuracy, termVector, indexFieldNames) {
            if (typeof stores === "undefined") { stores = "No"; }
            if (typeof indexing === "undefined") { indexing = "Default"; }
            if (typeof sort === "undefined") { sort = "None"; }
            if (typeof analyzer === "undefined") { analyzer = null; }
            if (typeof suggestionDistance === "undefined") { suggestionDistance = "None"; }
            if (typeof suggestionAccuracy === "undefined") { suggestionAccuracy = 0.5; }
            if (typeof termVector === "undefined") { termVector = "No"; }
            var _this = this;
            this.indexFieldNames = indexFieldNames;
            this.name = ko.observable().extend({ required: true });
            this.stores = ko.observable().extend({ required: true });
            this.sort = ko.observable().extend({ required: true });
            this.termVector = ko.observable().extend({ required: true });
            this.indexing = ko.observable().extend({ required: true });
            this.analyzer = ko.observable().extend({ required: true });
            this.suggestionDistance = ko.observable().extend({ required: true });
            this.suggestionAccuracy = ko.observable().extend({ required: true });
            this.fieldNameAutocompletes = ko.observableArray();
            this.name(name);
            this.stores(stores);
            this.indexing(indexing);
            this.sort(sort);
            this.analyzer(analyzer);
            this.suggestionAccuracy(suggestionAccuracy);
            this.suggestionDistance(suggestionDistance);
            this.termVector(termVector);
            this.name.subscribe(function () {
                return _this.calculateFieldNamesAutocomplete();
            });
        }
        luceneField.prototype.calculateFieldNamesAutocomplete = function () {
            var _this = this;
            if (!!this.indexFieldNames && this.indexFieldNames.length > 0) {
                if (this.name().length > 0) {
                    this.fieldNameAutocompletes(this.indexFieldNames.filter(function (x) {
                        return x.toLowerCase().indexOf(_this.name().toLowerCase()) >= 0;
                    }));
                } else {
                    this.fieldNameAutocompletes(this.indexFieldNames);
                }
            }
        };

        luceneField.prototype.setName = function (curName) {
            this.name(curName);
        };

        luceneField.prototype.toSuggestionDto = function () {
            return {
                Distance: this.suggestionDistance(),
                Accuracy: this.suggestionAccuracy()
            };
        };
        return luceneField;
    })();

    
    return luceneField;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/patchDocument", ["require", "exports", "models/patchParam", "models/document", "models/documentMetadata"], function(require, exports, patchParam, document, documentMetadata) {
    var patchDocument = (function (_super) {
        __extends(patchDocument, _super);
        function patchDocument(dto) {
            _super.call(this, dto);
            this.patchOnOption = ko.observable();
            this.selectedItem = ko.observable();
            this.query = ko.observable();
            this.script = ko.observable();
            this.parameters = ko.observableArray();
            this.patchOnOption(dto.PatchOnOption);
            this.query(dto.Query);
            this.script(dto.Script);
            this.selectedItem(dto.SelectedItem);
            this.parameters(dto.Values.map(function (val) {
                return new patchParam(val);
            }));
        }
        patchDocument.empty = function () {
            var meta = {};
            meta['Raven-Entity-Name'] = 'PatchDocuments';
            return new patchDocument({
                '@metadata': meta,
                PatchOnOption: "Document",
                Query: "",
                Script: "",
                SelectedItem: "",
                Values: []
            });
        };

        patchDocument.prototype.toDto = function () {
            var meta = this.__metadata.toDto();
            return {
                '@metadata': meta,
                PatchOnOption: this.patchOnOption(),
                Query: this.query(),
                Script: this.script(),
                SelectedItem: this.selectedItem(),
                Values: this.parameters().map(function (val) {
                    return val.toDto();
                })
            };
        };

        patchDocument.prototype.isDocumentPatch = function () {
            return this.patchOnOption() === "Document";
        };

        patchDocument.prototype.isCollectionPatch = function () {
            return this.patchOnOption() === "Collection";
        };

        patchDocument.prototype.isIndexPatch = function () {
            return this.patchOnOption() === "Index";
        };

        patchDocument.prototype.createParameter = function () {
            this.parameters.push(patchParam.empty());
        };

        patchDocument.prototype.removeParameter = function (key) {
            this.parameters.remove(key);
        };

        patchDocument.prototype.name = function () {
            return this.__metadata.id.replace('Studio/Patch/', '');
        };

        patchDocument.prototype.cloneWithoutMetadata = function () {
            var clone = this;
            clone.__metadata = new documentMetadata();
            clone.__metadata.ravenEntityName = 'PatchDocuments';
            return clone;
        };
        return patchDocument;
    })(document);

    
    return patchDocument;
});
define("models/patchDocuments", ["require", "exports", "models/patchParam"], function(require, exports, patchParam) {
    var patchDocuments = (function () {
        function patchDocuments(dto) {
            this.patchOnOption = ko.observable();
            this.selectedItem = ko.observable();
            this.query = ko.observable();
            this.script = ko.observable();
            this.parameters = ko.observableArray();
            this.patchOnOption(dto.PatchOnOption);
            this.query(dto.Query);
            this.script(dto.Script);
            this.selectedItem(dto.SelectedItem);
            this.parameters(dto.Values.map(function (val) {
                return new patchParam(val);
            }));
        }
        patchDocuments.empty = function () {
            return new patchDocuments({
                PatchOnOption: "Document",
                Query: "",
                Script: "",
                SelectedItem: "",
                Values: []
            });
        };

        patchDocuments.prototype.isDocumentPatch = function () {
            return this.patchOnOption() === "Document";
        };

        patchDocuments.prototype.isCollectionPatch = function () {
            return this.patchOnOption() === "Collection";
        };

        patchDocuments.prototype.isIndexPatch = function () {
            return this.patchOnOption() === "Index";
        };

        patchDocuments.prototype.createParameter = function () {
            this.parameters.push(patchParam.empty());
        };

        patchDocuments.prototype.removeParameter = function (key) {
            this.parameters.remove(key);
        };
        return patchDocuments;
    })();

    
    return patchDocuments;
});
define("models/patchParam", ["require", "exports"], function(require, exports) {
    var patchParam = (function () {
        function patchParam(dto) {
            this.key = ko.observable();
            this.value = ko.observable();
            this.key(dto.Key);
            this.value(dto.Value);
        }
        patchParam.empty = function () {
            return new patchParam({ Key: "", Value: "" });
        };

        patchParam.prototype.toDto = function () {
            return {
                Key: this.key(),
                Value: this.value()
            };
        };
        return patchParam;
    })();

    
    return patchParam;
});
define("models/performanceTestRequest", ["require", "exports"], function(require, exports) {
    var performanceTestRequest = (function () {
        function performanceTestRequest(dto) {
            this.path = ko.observable();
            this.fileSize = ko.observable();
            this.operationType = ko.observable();
            this.bufferingType = ko.observable();
            this.sequential = ko.observable();
            this.threadCount = ko.observable();
            this.timeToRunInSeconds = ko.observable();
            //random seed - we don't expose on UI
            this.chunkSize = ko.observable();
            this.path(dto.Path);
            this.fileSize(dto.FileSize);
            this.operationType(dto.OperationType);
            this.bufferingType(dto.BufferingType);
            this.sequential(dto.Sequential);
            this.threadCount(dto.ThreadCount);
            this.timeToRunInSeconds(dto.TimeToRunInSeconds);
            this.chunkSize(dto.ChunkSize);
        }
        performanceTestRequest.empty = function () {
            return new performanceTestRequest({
                Path: "c:\\temp\\",
                FileSize: 1024 * 1024 * 1024,
                OperationType: "Write",
                BufferingType: "None",
                Sequential: true,
                ThreadCount: 4,
                TimeToRunInSeconds: 30,
                ChunkSize: 4 * 1024
            });
        };

        performanceTestRequest.prototype.toDto = function () {
            return {
                Path: this.path(),
                FileSize: this.fileSize(),
                OperationType: this.operationType(),
                BufferingType: this.bufferingType(),
                Sequential: this.sequential(),
                ThreadCount: this.threadCount(),
                TimeToRunInSeconds: this.timeToRunInSeconds(),
                ChunkSize: this.chunkSize()
            };
        };
        return performanceTestRequest;
    })();

    
    return performanceTestRequest;
});
define("models/performanceTestResultWrapped", ["require", "exports", "d3/d3"], function(require, exports, d3) {
    var performanceTestResultWrapped = (function () {
        function performanceTestResultWrapped(dto) {
            var _this = this;
            this.formatter = d3.format(",.2f");
            this.totalRead = ko.computed(function () {
                return _this.formatter(dto.Result.TotalRead / 1024 / 1024) + " MB";
            });
            this.totalWrite = ko.computed(function () {
                return _this.formatter(dto.Result.TotalWrite / 1024 / 1024) + " MB";
            });
            this.hasReads = ko.computed(function () {
                return dto.Request.OperationType == "Read" || dto.Request.OperationType == "Mix";
            });
            this.hasWrites = ko.computed(function () {
                return dto.Request.OperationType == "Write" || dto.Request.OperationType == "Mix";
            });
            this.testTime = ko.computed(function () {
                return dto.Request.TimeToRunInSeconds + "s";
            });
            this.avgRead = ko.computed(function () {
                return _this.formatter(dto.Result.TotalRead / 1024 / 1024 / dto.Request.TimeToRunInSeconds) + "MB/s";
            });
            this.avgWrite = ko.computed(function () {
                return _this.formatter(dto.Result.TotalWrite / 1024 / 1024 / dto.Request.TimeToRunInSeconds) + "MB/s";
            });

            this.readLatencyMin = ko.computed(function () {
                return _this.formatter(dto.Result.ReadLatency.Min) + "ms";
            });
            this.readLatencyMax = ko.computed(function () {
                return _this.formatter(dto.Result.ReadLatency.Max) + "ms";
            });
            this.readLatencyMean = ko.computed(function () {
                return _this.formatter(dto.Result.ReadLatency.Mean) + "ms";
            });
            this.readLatencyStdev = ko.computed(function () {
                return _this.formatter(dto.Result.ReadLatency.Stdev) + "ms";
            });

            this.writeLatencyMin = ko.computed(function () {
                return _this.formatter(dto.Result.WriteLatency.Min) + "ms";
            });
            this.writeLatencyMax = ko.computed(function () {
                return _this.formatter(dto.Result.WriteLatency.Max) + "ms";
            });
            this.writeLatencyMean = ko.computed(function () {
                return _this.formatter(dto.Result.WriteLatency.Mean) + "ms";
            });
            this.writeLatencyStdev = ko.computed(function () {
                return _this.formatter(dto.Result.WriteLatency.Stdev) + "ms";
            });

            this.readPercentiles = ko.computed(function () {
                return $.map(dto.Result.ReadLatency.Percentiles, function (value, key) {
                    return {
                        key: key,
                        value: _this.formatter(value)
                    };
                });
            });
            this.writePercentiles = ko.computed(function () {
                return $.map(dto.Result.WriteLatency.Percentiles, function (value, key) {
                    return {
                        key: key,
                        value: _this.formatter(value)
                    };
                });
            });
        }
        return performanceTestResultWrapped;
    })();

    
    return performanceTestResultWrapped;
});
define("models/periodicExportSetup", ["require", "exports"], function(require, exports) {
    var periodicExportSetup = (function () {
        function periodicExportSetup() {
            var _this = this;
            this.unsupported = ko.observable(false);
            this.disabled = ko.observable(true);
            this.type = ko.observable();
            this.mainValue = ko.observable();
            this.awsAccessKey = ko.observable();
            this.awsSecretKey = ko.observable();
            this.awsRegionEndpoint = ko.observable();
            this.azureStorageAccount = ko.observable();
            this.azureStorageKey = ko.observable();
            this.incrementalBackupInterval = ko.observable();
            this.incrementalBackupIntervalUnit = ko.observable();
            this.fullBackupInterval = ko.observable();
            this.fullBackupIntervalUnit = ko.observable();
            this.FILE_SYSTEM = "fileSystem";
            this.GLACIER_VAULT = "glacierVault";
            this.S3_BUCKET = "s3bucket";
            this.AZURE_STORAGE = "azureStorage";
            this.TU_MINUTES = "minutes";
            this.TU_HOURS = "hours";
            this.TU_DAYS = "days";
            this.availablePeriodicExports = [
                { label: "File System Folder:", value: this.FILE_SYSTEM },
                { label: "Glacier Vault Name:", value: this.GLACIER_VAULT },
                { label: "S3 Bucket Name:", value: this.S3_BUCKET },
                { label: "Azure Storage Container:", value: this.AZURE_STORAGE }
            ];
            this.availableAwsRegionEndpoints = [
                { label: "US East (Virginia)", value: "us-east-1" },
                { label: "US West (N. California)", value: "us-west-1" },
                { label: "US West (Oregon)", value: "us-west-2" },
                { label: "EU West (Ireland)", value: "eu-west-1" },
                { label: "Asia Pacific (Tokyo)", value: "ap-northeast-1" },
                { label: "Asia Pacific (Singapore)", value: "ap-southeast-1" },
                { label: "South America (Sao Paulo)", value: "sa-east-1" }
            ];
            this.availableIntervalUnits = [this.TU_MINUTES, this.TU_HOURS, this.TU_DAYS];
            this.additionalAwsInfoRequired = ko.computed(function () {
                return jQuery.inArray(_this.type(), [_this.GLACIER_VAULT, _this.S3_BUCKET]) !== -1;
            }, this);
            this.additionalAzureInfoRequired = ko.computed(function () {
                return _this.type() === _this.AZURE_STORAGE;
            }, this);
        }
        periodicExportSetup.prototype.fromDto = function (dto) {
            this.awsRegionEndpoint(dto.AwsRegionEndpoint);

            this.setupTypeAndMainValue(dto);

            var incr = this.prepareBackupInterval(dto.IntervalMilliseconds);
            this.incrementalBackupInterval(incr[0]);
            this.incrementalBackupIntervalUnit(incr[1]);

            var full = this.prepareBackupInterval(dto.FullBackupIntervalMilliseconds);
            this.fullBackupInterval(full[0]);
            this.fullBackupIntervalUnit(full[1]);

            this.disabled(dto.Disabled);
        };

        periodicExportSetup.prototype.toDto = function () {
            return {
                Disabled: this.disabled(),
                GlacierVaultName: this.prepareMainValue(this.GLACIER_VAULT),
                S3BucketName: this.prepareMainValue(this.S3_BUCKET),
                AwsRegionEndpoint: this.awsRegionEndpoint(),
                AzureStorageContainer: this.prepareMainValue(this.AZURE_STORAGE),
                LocalFolderName: this.prepareMainValue(this.FILE_SYSTEM),
                IntervalMilliseconds: this.convertToMilliseconds(this.incrementalBackupInterval(), this.incrementalBackupIntervalUnit()),
                FullBackupIntervalMilliseconds: this.convertToMilliseconds(this.fullBackupInterval(), this.fullBackupIntervalUnit())
            };
        };

        periodicExportSetup.prototype.prepareMainValue = function (expectedType) {
            return ((this.type() === expectedType) ? this.mainValue() : null);
        };

        periodicExportSetup.prototype.convertToMilliseconds = function (value, unit) {
            if (value && unit) {
                switch (unit) {
                    case this.TU_MINUTES:
                        return value * 1000 * 60;
                    case this.TU_HOURS:
                        return value * 1000 * 60 * 60;
                    case this.TU_DAYS:
                        return value * 1000 * 60 * 60 * 24;
                }
            }
            return null;
        };

        periodicExportSetup.prototype.fromDatabaseSettingsDto = function (dbSettingsDto) {
            this.dbSettingsDto = dbSettingsDto;
            this.awsAccessKey(dbSettingsDto['Settings']['Raven/AWSAccessKey']);
            this.awsSecretKey(dbSettingsDto['SecuredSettings']['Raven/AWSSecretKey']);
            this.azureStorageAccount(dbSettingsDto['Settings']['Raven/AzureStorageAccount']);
            this.azureStorageKey(dbSettingsDto['SecuredSettings']['Raven/AzureStorageKey']);
        };

        periodicExportSetup.prototype.toDatabaseSettingsDto = function () {
            this.dbSettingsDto['Settings']['Raven/AWSAccessKey'] = this.awsAccessKey();
            this.dbSettingsDto['SecuredSettings']['Raven/AWSSecretKey'] = this.awsSecretKey();
            this.dbSettingsDto['Settings']['Raven/AzureStorageAccount'] = this.azureStorageAccount();
            this.dbSettingsDto['SecuredSettings']['Raven/AzureStorageKey'] = this.azureStorageKey();
            return this.dbSettingsDto;
        };

        periodicExportSetup.prototype.getEtag = function () {
            return this.toDatabaseSettingsDto()['@metadata']['@etag'];
        };

        periodicExportSetup.prototype.setEtag = function (newEtag) {
            this.toDatabaseSettingsDto()['@metadata']['@etag'] = newEtag;
        };

        periodicExportSetup.prototype.setupTypeAndMainValue = function (dto) {
            var count = 0;
            if (dto.LocalFolderName) {
                count += 1;
                this.type(this.FILE_SYSTEM);
                this.mainValue(dto.LocalFolderName);
            }
            if (dto.GlacierVaultName) {
                count += 1;
                this.type(this.GLACIER_VAULT);
                this.mainValue(dto.GlacierVaultName);
            }
            if (dto.S3BucketName) {
                count += 1;
                this.type(this.S3_BUCKET);
                this.mainValue(dto.S3BucketName);
            }
            if (dto.AzureStorageContainer) {
                count += 1;
                this.type(this.AZURE_STORAGE);
                this.mainValue(dto.AzureStorageContainer);
            }
            this.unsupported(count > 1);
        };

        periodicExportSetup.prototype.prepareBackupInterval = function (milliseconds) {
            if (milliseconds) {
                var seconds = milliseconds / 1000;
                var minutes = seconds / 60;
                var hours = minutes / 60;
                if (this.isValidTimeValue(hours)) {
                    var days = hours / 24;
                    if (this.isValidTimeValue(days)) {
                        return [days, this.TU_DAYS];
                    }
                    return [hours, this.TU_HOURS];
                }
                return [minutes, this.TU_MINUTES];
            }
            return [0, this.TU_MINUTES];
        };

        periodicExportSetup.prototype.isValidTimeValue = function (value) {
            return value >= 1 && value % 1 === 0;
        };
        return periodicExportSetup;
    })();

    
    return periodicExportSetup;
});
define("models/predefinedSqlConnection", ["require", "exports", "durandal/app", "commands/testSqlConnectionCommand"], function(require, exports, app, testSqlConnectionCommand) {
    var predefinedSqlConnection = (function () {
        function predefinedSqlConnection(dto) {
            this.name = ko.observable();
            this.factoryName = ko.observable();
            this.connectionString = ko.observable();
            this.connectionTestState = ko.observable(this.CONNECTION_STATE_STAND_BY);
            this.CONNECTION_STATE_STAND_BY = "stand-by";
            this.CONNECTION_STATE_CONNECTING = "connecting";
            this.CONNECTION_STATE_CONNECTED = "connected";
            this.name(dto.Name);
            this.factoryName(dto.FactoryName);
            this.connectionString(dto.ConnectionString);
            this.connectionTestState = ko.observable(this.CONNECTION_STATE_STAND_BY);
        }
        predefinedSqlConnection.empty = function () {
            return new predefinedSqlConnection({
                Name: "",
                FactoryName: "",
                ConnectionString: ""
            });
        };

        predefinedSqlConnection.prototype.toDto = function () {
            return {
                Name: this.name(),
                FactoryName: this.factoryName(),
                ConnectionString: this.connectionString()
            };
        };

        predefinedSqlConnection.prototype.testConnection = function (db) {
            var _this = this;
            this.connectionTestState(this.CONNECTION_STATE_CONNECTING);
            new testSqlConnectionCommand(db, this.factoryName(), this.connectionString()).execute().done(function () {
                _this.connectionTestState(_this.CONNECTION_STATE_CONNECTED);
                app.showMessage("Connection " + _this.name() + " is valid", "SQL Connection test");
            }).fail(function (request, status, error) {
                var errorText = !!request.responseJSON ? !!request.responseJSON.Exception ? request.responseJSON.Exception.Message : error : error;
                app.showMessage("Connection " + _this.name() + " is not valid, error: " + errorText, "SQL Connection test");
            }).always(function () {
                return setTimeout(_this.connectionTestState, 500, _this.CONNECTION_STATE_STAND_BY);
            });
        };
        return predefinedSqlConnection;
    })();

    
    return predefinedSqlConnection;
});
define("models/querySort", ["require", "exports"], function(require, exports) {
    var querySort = (function () {
        function querySort() {
            var _this = this;
            this.fieldName = ko.observable();
            this.sortDirection = ko.observable(0);
            this.isRange = ko.observable(false);
            this.isAscending = ko.observable(true);
            this.fieldNameOrDefault = ko.computed(function () {
                return _this.fieldName() ? _this.fieldName() : "Select a field";
            });
        }
        querySort.prototype.toggleAscending = function () {
            this.isAscending.toggle();
        };

        querySort.prototype.toggleRange = function () {
            this.isRange.toggle();
        };

        querySort.prototype.toQuerySortString = function () {
            if (this.isRange() === true) {
                if (this.isAscending() === true) {
                    return this.fieldName() + querySort.rangeIndicator;
                } else {
                    return "-" + this.fieldName() + querySort.rangeIndicator;
                }
            } else {
                if (this.isAscending() === true) {
                    return this.fieldName();
                } else {
                    return "-" + this.fieldName();
                }
            }
        };

        querySort.prototype.toHumanizedString = function () {
            if (this.isRange() === true) {
                if (this.isAscending() === true) {
                    return this.fieldName() + " range";
                } else {
                    return this.fieldName() + " range descending";
                }
            } else {
                if (this.isAscending() === true) {
                    return this.fieldName();
                } else {
                    return this.fieldName() + " descending";
                }
            }
        };

        querySort.fromQuerySortString = function (querySortText) {
            var sortDirection = 0;
            var sortField = "";

            var isDescending = querySortText.slice(0, 1) === "-";
            var isRange = querySortText.length > querySort.rangeIndicator.length && querySortText.substr(querySortText.length - querySort.rangeIndicator.length) === querySort.rangeIndicator;
            if (isRange && isDescending) {
                sortField = querySortText.substr(1, querySortText.length - 1 - querySort.rangeIndicator.length);
            } else if (isRange && !isDescending) {
                sortField = querySortText.substr(0, querySortText.length - 1 - querySort.rangeIndicator.length);
            } else if (!isRange && isDescending) {
                sortField = querySortText.substr(1, querySortText.length - 1);
            } else {
                sortField = querySortText;
            }

            var q = new querySort();
            q.isAscending(!isDescending);
            q.isRange(isRange);
            q.fieldName(sortField);
            return q;
        };
        querySort.rangeIndicator = "_Range";
        return querySort;
    })();

    
    return querySort;
});
define("models/replicationConfig", ["require", "exports"], function(require, exports) {
    var replicationConfig = (function () {
        function replicationConfig(dto) {
            var _this = this;
            this.documentConflictResolution = ko.observable().extend({ required: true });
            this.attachmentConflictResolution = ko.observable().extend({ required: true });
            this.documentConflictResolution(dto.DocumentConflictResolution);
            this.attachmentConflictResolution(dto.AttachmentConflictResolution);

            this.documentConflictResolution.subscribe(function (val) {
                return _this.attachmentConflictResolution(val);
            }); // todo: remove that if decided to treat attachments differently
        }
        replicationConfig.prototype.toDto = function () {
            return {
                DocumentConflictResolution: this.documentConflictResolution(),
                AttachmentConflictResolution: this.attachmentConflictResolution()
            };
        };
        replicationConfig.DO_NOT_RESOLVE_AUTOMATICALLY = "None";
        replicationConfig.RESOLVE_TO_LOCAL = "ResolveToLocal";
        replicationConfig.RESOLVE_TO_REMOTE = "ResolveToRemote";
        replicationConfig.RESOLVE_TO_LATEST = "ResolveToLatest";
        return replicationConfig;
    })();

    
    return replicationConfig;
});
define("models/replicationDestination", ["require", "exports"], function(require, exports) {
    var replicationDestination = (function () {
        function replicationDestination(dto) {
            var _this = this;
            this.url = ko.observable().extend({ required: true });
            this.username = ko.observable().extend({ required: true });
            this.password = ko.observable().extend({ required: true });
            this.domain = ko.observable().extend({ required: true });
            this.apiKey = ko.observable().extend({ required: true });
            this.database = ko.observable().extend({ required: true });
            this.transitiveReplicationBehavior = ko.observable().extend({ required: true });
            this.ignoredClient = ko.observable().extend({ required: true });
            this.disabled = ko.observable().extend({ required: true });
            this.clientVisibleUrl = ko.observable().extend({ required: true });
            this.name = ko.computed(function () {
                var prefix = _this.disabled() ? "[disabled]" : null;
                var database = _this.database();
                var on = _this.database() && _this.url() ? "on" : null;
                var url = _this.url();

                return [prefix, database, on, url].filter(function (s) {
                    return !!s;
                }).join(" ") || "[empty]";
            });
            this.isValid = ko.computed(function () {
                return _this.url() != null && _this.url().length > 0;
            });
            // data members for the ui
            this.isUserCredentials = ko.observable(false);
            this.isApiKeyCredentials = ko.observable(false);
            this.credentialsType = ko.computed(function () {
                if (_this.isUserCredentials()) {
                    return "user";
                } else if (_this.isApiKeyCredentials()) {
                    return "api-key";
                } else {
                    return "none";
                }
            });
            this.url(dto.Url);
            this.username(dto.Username);
            this.password(dto.Password);
            this.domain(dto.Domain);
            this.apiKey(dto.ApiKey);
            this.database(dto.Database);
            this.transitiveReplicationBehavior(dto.TransitiveReplicationBehavior);
            this.ignoredClient(dto.IgnoredClient);
            this.disabled(dto.Disabled);
            this.clientVisibleUrl(dto.ClientVisibleUrl);

            if (this.username()) {
                this.isUserCredentials(true);
            } else if (this.apiKey()) {
                this.isApiKeyCredentials(true);
            }
        }
        replicationDestination.prototype.useUserCredentials = function () {
            this.isUserCredentials(true);
            this.isApiKeyCredentials(false);
        };

        replicationDestination.prototype.useApiKeyCredentials = function () {
            this.isApiKeyCredentials(true);
            this.isUserCredentials(false);
        };

        replicationDestination.prototype.useNoCredentials = function () {
            this.isUserCredentials(false);
            this.isApiKeyCredentials(false);
        };

        replicationDestination.prototype.toggleIsAdvancedShows = function (item, event) {
            $(event.target).next().toggle();
        };

        replicationDestination.empty = function (databaseName) {
            return new replicationDestination({
                Url: null,
                Username: null,
                Password: null,
                Domain: null,
                ApiKey: null,
                Database: databaseName,
                TransitiveReplicationBehavior: "Replicate",
                IgnoredClient: false,
                Disabled: false,
                ClientVisibleUrl: null
            });
        };

        replicationDestination.prototype.enable = function () {
            this.disabled(false);
        };

        replicationDestination.prototype.disable = function () {
            this.disabled(true);
        };

        replicationDestination.prototype.includeFailover = function () {
            this.ignoredClient(false);
        };

        replicationDestination.prototype.skipFailover = function () {
            this.ignoredClient(true);
        };

        replicationDestination.prototype.toDto = function () {
            return {
                Url: this.prepareUrl(),
                Username: this.username(),
                Password: this.password(),
                Domain: this.domain(),
                ApiKey: this.apiKey(),
                Database: this.database(),
                TransitiveReplicationBehavior: this.transitiveReplicationBehavior(),
                IgnoredClient: this.ignoredClient(),
                Disabled: this.disabled(),
                ClientVisibleUrl: this.clientVisibleUrl()
            };
        };

        replicationDestination.prototype.prepareUrl = function () {
            var url = this.url();
            if (url && url.charAt(url.length - 1) === "/") {
                url = url.substring(0, url.length - 1);
            }
            return url;
        };
        return replicationDestination;
    })();

    
    return replicationDestination;
});
define("models/replicationsSetup", ["require", "exports", "models/replicationDestination"], function(require, exports, replicationDestination) {
    var replicationsSetup = (function () {
        function replicationsSetup(dto) {
            this.source = ko.observable();
            this.destinations = ko.observableArray().extend({ required: true });
            this.clientFailoverBehaviour = ko.observable(null);
            this.source(dto.Source);
            this.destinations(dto.Destinations.map(function (dest) {
                return new replicationDestination(dest);
            }));
            if (dto.ClientConfiguration && dto.ClientConfiguration.FailoverBehavior) {
                this.clientFailoverBehaviour(dto.ClientConfiguration.FailoverBehavior);
            }
        }
        replicationsSetup.prototype.toDto = function () {
            var dto = {
                Destinations: this.destinations().map(function (dest) {
                    return dest.toDto();
                }),
                Source: this.source()
            };

            if (this.clientFailoverBehaviour()) {
                dto.ClientConfiguration = { FailoverBehavior: this.clientFailoverBehaviour() };
            }

            return dto;
        };
        return replicationsSetup;
    })();

    
    return replicationsSetup;
});
define("models/resource", ["require", "exports"], function(require, exports) {
    var resource = (function () {
        function resource(name, type) {
            this.name = name;
            this.type = type;
            this.isSystem = false;
            this.isSelected = ko.observable(false);
            this.isChecked = ko.observable(false);
            this.isVisible = ko.observable(true);
            this.disabled = ko.observable(false);
        }
        resource.prototype.activate = function () {
            throw new Error("Activate must be overridden.");
        };

        resource.prototype.checkboxToggle = function () {
            this.isChecked.toggle();
        };

        resource.prototype.isDatabase = function () {
            return this.type == "database";
        };

        resource.prototype.isFilesystem = function () {
            return this.type == 'filesystem';
        };
        return resource;
    })();

    
    return resource;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/scriptedIndex", ["require", "exports", "models/document", "common/aceEditorBindingHandler"], function(require, exports, document, aceEditorBindingHandler) {
    var scriptedIndex = (function (_super) {
        __extends(scriptedIndex, _super);
        function scriptedIndex(dto) {
            _super.call(this, dto);
            this.indexName = ko.observable();
            this.indexScript = ko.observable();
            this.deleteScript = ko.observable();
            this.deleteLater = ko.observable();

            var scriptedIndexName = dto['@metadata']['@id'].slice(scriptedIndex.PREFIX.length);
            this.indexName(scriptedIndexName);
            this.indexScript(dto.IndexScript);
            this.deleteScript(dto.DeleteScript);

            this.subscribeToObservable(this.indexScript);
            this.subscribeToObservable(this.deleteScript);
        }
        scriptedIndex.emptyForIndex = function (indexName) {
            var meta = [];
            meta['@id'] = this.PREFIX + indexName;
            meta['Raven-Entity-Name'] = 'ScriptedIndexResults';
            return new scriptedIndex({
                '@metadata': meta,
                IndexScript: "",
                DeleteScript: ""
            });
        };

        scriptedIndex.prototype.toDto = function () {
            var meta = this.__metadata.toDto();
            return {
                '@metadata': meta,
                IndexScript: this.indexScript(),
                DeleteScript: this.deleteScript()
            };
        };

        scriptedIndex.prototype.markToDelete = function () {
            this.indexScript("");
            this.deleteScript("");
            this.deleteLater(true);
        };

        scriptedIndex.prototype.cancelDeletion = function () {
            this.deleteLater(false);
        };

        scriptedIndex.prototype.isMarkedToDelete = function () {
            return this.deleteLater();
        };

        scriptedIndex.prototype.subscribeToObservable = function (observable) {
            observable.subscribe(function (newValue) {
                var message = "";
                var currentEditor = aceEditorBindingHandler.currentEditor;
                if (currentEditor != undefined) {
                    var textarea = $(currentEditor.container).find('textarea')[0];

                    if (newValue === "") {
                        message = "Please fill out this field.";
                    }
                    textarea.setCustomValidity(message);
                    setTimeout(function () {
                        var annotations = currentEditor.getSession().getAnnotations();
                        var isErrorExists = false;
                        for (var i = 0; i < annotations.length; i++) {
                            var annotationType = annotations[i].type;
                            if (annotationType === "error" || annotationType === "warning") {
                                isErrorExists = true;
                                break;
                            }
                        }
                        if (isErrorExists) {
                            message = "The script isn't a javascript legal expression!";
                            textarea.setCustomValidity(message);
                        }
                    }, 700);
                }
            });
        };
        scriptedIndex.PREFIX = 'Raven/ScriptedIndexResults/';
        return scriptedIndex;
    })(document);

    
    return scriptedIndex;
});
define("models/spatialIndexField", ["require", "exports"], function(require, exports) {
    var spatialIndexField = (function () {
        function spatialIndexField(fieldName, dto) {
            var _this = this;
            this.name = ko.observable().extend({ required: true });
            this.type = ko.observable().extend({ required: true });
            this.strategy = ko.observable().extend({ required: true });
            this.minX = ko.observable().extend({ required: true });
            this.maxX = ko.observable().extend({ required: true });
            this.circleRadiusUnits = ko.observable().extend({ required: true });
            this.maxTreeLevel = ko.observable().extend({ required: true });
            this.minY = ko.observable().extend({ required: true });
            this.maxY = ko.observable().extend({ required: true });
            this.units = ko.observable();
            this.availableStrategies = ko.observableArray();
            this.name(fieldName);
            this.type(dto.Type);
            this.strategy(dto.Strategy);
            this.maxTreeLevel(dto.MaxTreeLevel);
            this.minX(dto.MinX);
            this.maxX(dto.MaxX);
            this.minY(dto.MinY);
            this.maxY(dto.MaxY);
            this.units(dto.Units);

            this.availableStrategies(this.getAvailableStrategies());
            this.canSpecifyUnits = ko.computed(function () {
                return _this.type() === spatialIndexField.typeGeo;
            });
            this.canSpecifyTreeLevel = ko.computed(function () {
                return _this.strategy() !== spatialIndexField.strategyBounding;
            });
            this.precision = ko.computed(function () {
                return _this.getPrecisionString();
            });
            this.canSpecifyCoordinates = ko.computed(function () {
                return _this.type() === spatialIndexField.typeCart;
            });
            this.type.subscribe(function (newType) {
                return _this.resetCoordinates();
            });
            this.type.subscribe(function () {
                return _this.availableStrategies(_this.getAvailableStrategies());
            });
            this.strategy.subscribe(function (newStrategy) {
                return _this.updateMaxTreeLevelFromStrategy(newStrategy);
            });
        }
        spatialIndexField.prototype.toDto = function () {
            return {
                Type: this.type(),
                Strategy: this.strategy(),
                MaxTreeLevel: this.maxTreeLevel(),
                MinX: this.minX(),
                MaxX: this.maxX(),
                MinY: this.minY(),
                MaxY: this.maxY(),
                Units: this.units()
            };
        };

        spatialIndexField.empty = function () {
            var dto = {
                Type: spatialIndexField.typeGeo,
                MaxTreeLevel: 9,
                MinX: -180,
                MaxX: 180,
                MinY: -90,
                MaxY: 90,
                Strategy: spatialIndexField.strategyGeo,
                Units: "Kilometers"
            };
            return new spatialIndexField("", dto);
        };

        spatialIndexField.prototype.resetCoordinates = function () {
            this.minX(-180);
            this.maxX(180);
            this.minY(-90);
            this.maxY(90);
        };

        spatialIndexField.prototype.getPrecisionString = function () {
            var strategy = this.strategy();
            var minX = this.minX();
            var maxX = this.maxX();
            var minY = this.minY();
            var maxY = this.maxY();
            var maxTreeLevel = this.maxTreeLevel();
            var type = this.type();
            var units = this.units();

            if (strategy === spatialIndexField.strategyBounding) {
                return "";
            }

            var x = maxX - minX;
            var y = maxY - minY;
            for (var i = 0; i < maxTreeLevel; i++) {
                if (strategy === spatialIndexField.strategyGeo) {
                    if (i % 2 == 0) {
                        x /= 8;
                        y /= 4;
                    } else {
                        x /= 4;
                        y /= 8;
                    }
                } else if (strategy === spatialIndexField.strategyQuad) {
                    x /= 2;
                    y /= 2;
                }
            }

            if (type === spatialIndexField.typeGeo) {
                var earthMeanRadiusKm = 6371.0087714;
                var milesToKm = 1.60934;

                var factor = (earthMeanRadiusKm * Math.PI * 2) / 360;
                x = x * factor;
                y = y * factor;
                if (units === "Miles") {
                    x /= milesToKm;
                    y /= milesToKm;
                }

                return "Precision at equator; X: " + x.toFixed(6) + ", Y: " + y.toFixed(6) + " " + units.toLowerCase();
            } else {
                return "Precision; X: " + x.toFixed(6) + ", Y: " + y.toFixed(6);
            }
        };

        spatialIndexField.prototype.getAvailableStrategies = function () {
            if (this.type() === spatialIndexField.typeGeo) {
                return [spatialIndexField.strategyGeo, spatialIndexField.strategyQuad, spatialIndexField.strategyBounding];
            } else {
                return [spatialIndexField.strategyQuad, spatialIndexField.strategyBounding];
            }
        };

        spatialIndexField.prototype.updateMaxTreeLevelFromStrategy = function (strategy) {
            if (strategy === spatialIndexField.strategyGeo) {
                this.maxTreeLevel(9);
            } else if (strategy === spatialIndexField.strategyQuad) {
                this.maxTreeLevel(23);
            }
        };
        spatialIndexField.strategyGeo = "GeohashPrefixTree";
        spatialIndexField.strategyBounding = "BoundingBox";
        spatialIndexField.strategyQuad = "QuadPrefixTree";
        spatialIndexField.typeGeo = "Geography";
        spatialIndexField.typeCart = "Cartesian";
        return spatialIndexField;
    })();

    
    return spatialIndexField;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/sqlReplication", ["require", "exports", "models/sqlReplicationTable", "models/document", "models/documentMetadata", "common/aceEditorBindingHandler"], function(require, exports, sqlReplicationTable, document, documentMetadata, aceEditorBindingHandler) {
    var sqlReplication = (function (_super) {
        __extends(sqlReplication, _super);
        function sqlReplication(dto) {
            var _this = this;
            _super.call(this, dto);
            this.CONNECTION_STRING = "Connection String";
            this.PREDEFINED_CONNECTION_STRING_NAME = "Predefined Connection String Name";
            this.CONNECTION_STRING_NAME = "Connection String Name";
            this.CONNECTION_STRING_SETTING_NAME = "Connection String Setting Name";
            this.availableConnectionStringTypes = [
                this.PREDEFINED_CONNECTION_STRING_NAME,
                this.CONNECTION_STRING,
                this.CONNECTION_STRING_NAME,
                this.CONNECTION_STRING_SETTING_NAME
            ];
            this.name = ko.observable().extend({ required: true });
            this.disabled = ko.observable().extend({ required: true });
            this.factoryName = ko.observable().extend({ required: true });
            this.connectionStringType = ko.observable().extend({ required: true });
            this.connectionStringValue = ko.observable(null).extend({ required: true });
            this.ravenEntityName = ko.observable("").extend({ required: true });
            this.parameterizeDeletesDisabled = ko.observable(false).extend({ required: true });
            this.forceSqlServerQueryRecompile = ko.observable(false);
            this.performTableQuatation = ko.observable(true);
            this.sqlReplicationTables = ko.observableArray().extend({ required: true });
            this.script = ko.observable("").extend({ required: true });
            this.connectionString = ko.observable(null);
            this.connectionStringName = ko.observable(null);
            this.connectionStringSettingName = ko.observable(null);
            this.collections = ko.observableArray();
            this.showReplicationConfiguration = ko.observable(false);

            this.name(dto.Name);
            this.disabled(dto.Disabled);
            this.factoryName(dto.FactoryName);
            this.ravenEntityName(dto.RavenEntityName != null ? dto.RavenEntityName : '');
            this.parameterizeDeletesDisabled(dto.ParameterizeDeletesDisabled);
            this.sqlReplicationTables(dto.SqlReplicationTables.map(function (tab) {
                return new sqlReplicationTable(tab);
            }));
            this.script(dto.Script);
            this.forceSqlServerQueryRecompile(!!dto.ForceSqlServerQueryRecompile ? dto.ForceSqlServerQueryRecompile : false);
            this.performTableQuatation(!!dto.PerformTableQuatation ? dto.PerformTableQuatation : true);
            this.setupConnectionString(dto);

            this.metadata = new documentMetadata(dto['@metadata']);

            this.connectionStringSourceFieldName = ko.computed(function () {
                if (_this.connectionStringType() == _this.CONNECTION_STRING) {
                    return "Connection String Text";
                } else if (_this.connectionStringType() == _this.PREDEFINED_CONNECTION_STRING_NAME) {
                    return "Predefined connection string name";
                } else if (_this.connectionStringType() == _this.CONNECTION_STRING_NAME) {
                    return "Setting name in local machine configuration";
                } else {
                    return "Setting name in memory/remote configuration";
                }
            });

            this.searchResults = ko.computed(function () {
                var newRavenEntityName = _this.ravenEntityName();
                return _this.collections().filter(function (name) {
                    return name.toLowerCase().indexOf(newRavenEntityName.toLowerCase()) > -1;
                });
            });

            this.script.subscribe(function (newValue) {
                var message = "";
                var currentEditor = aceEditorBindingHandler.currentEditor;
                var textarea = $(currentEditor.container).find('textarea')[0];

                if (newValue === "") {
                    message = "Please fill out this field.";
                }
                textarea.setCustomValidity(message);
                setTimeout(function () {
                    var annotations = currentEditor.getSession().getAnnotations();
                    var isErrorExists = false;
                    for (var i = 0; i < annotations.length; i++) {
                        var annotationType = annotations[i].type;
                        if (annotationType === "error" || annotationType === "warning") {
                            isErrorExists = true;
                            break;
                        }
                    }
                    if (isErrorExists) {
                        message = "The script isn't a javascript legal expression!";
                        textarea.setCustomValidity(message);
                    }
                }, 700);
            });
        }
        sqlReplication.prototype.setupConnectionString = function (dto) {
            if (dto.ConnectionStringName) {
                this.connectionStringType(this.CONNECTION_STRING_NAME);
                this.connectionStringValue(dto.ConnectionStringName);
            } else if (dto.ConnectionStringSettingName) {
                this.connectionStringType(this.CONNECTION_STRING_SETTING_NAME);
                this.connectionStringValue(dto.ConnectionStringSettingName);
            } else if (dto.ConnectionString) {
                this.connectionStringType(this.CONNECTION_STRING);
                this.connectionStringValue(dto.ConnectionString);
            } else {
                this.connectionStringType(this.PREDEFINED_CONNECTION_STRING_NAME);
                this.connectionStringValue(dto.PredefinedConnectionStringSettingName);
            }
        };

        sqlReplication.prototype.setConnectionStringType = function (strType) {
            this.connectionStringType(strType);
        };

        sqlReplication.empty = function () {
            return new sqlReplication({
                Name: "",
                Disabled: true,
                ParameterizeDeletesDisabled: false,
                RavenEntityName: "",
                Script: "",
                FactoryName: null,
                ConnectionString: null,
                PredefinedConnectionStringSettingName: null,
                ConnectionStringName: null,
                ConnectionStringSettingName: null,
                SqlReplicationTables: [sqlReplicationTable.empty().toDto()],
                ForceSqlServerQueryRecompile: false,
                PerformTableQuatation: true
            });
        };

        sqlReplication.prototype.toDto = function () {
            var meta = this.__metadata.toDto();
            meta['@id'] = "Raven/SqlReplication/Configuration/" + this.name();
            return {
                '@metadata': meta,
                Name: this.name(),
                Disabled: this.disabled(),
                ParameterizeDeletesDisabled: this.parameterizeDeletesDisabled(),
                RavenEntityName: this.ravenEntityName(),
                Script: this.script(),
                FactoryName: this.factoryName(),
                ConnectionString: this.prepareConnectionString(this.CONNECTION_STRING),
                PredefinedConnectionStringSettingName: this.prepareConnectionString(this.PREDEFINED_CONNECTION_STRING_NAME),
                ConnectionStringName: this.prepareConnectionString(this.CONNECTION_STRING_NAME),
                ConnectionStringSettingName: this.prepareConnectionString(this.CONNECTION_STRING_SETTING_NAME),
                ForceSqlServerQueryRecompile: this.forceSqlServerQueryRecompile(),
                PerformTableQuatation: this.performTableQuatation(),
                SqlReplicationTables: this.sqlReplicationTables().map(function (tab) {
                    return tab.toDto();
                })
            };
        };

        sqlReplication.prototype.prepareConnectionString = function (expectedType) {
            return ((this.connectionStringType() === expectedType) ? this.connectionStringValue() : null);
        };

        sqlReplication.prototype.enable = function () {
            this.disabled(false);
        };

        sqlReplication.prototype.disable = function () {
            this.disabled(true);
        };

        sqlReplication.prototype.enableParameterizeDeletes = function () {
            this.parameterizeDeletesDisabled(false);
        };

        sqlReplication.prototype.disableParameterizeDeletes = function () {
            this.parameterizeDeletesDisabled(true);
        };

        sqlReplication.prototype.addNewTable = function () {
            this.sqlReplicationTables.push(sqlReplicationTable.empty());
        };

        sqlReplication.prototype.removeTable = function (table) {
            this.sqlReplicationTables.remove(table);
        };

        sqlReplication.prototype.setIdFromName = function () {
            this.__metadata.id = "Raven/SqlReplication/Configuration/" + this.name();
        };

        sqlReplication.prototype.saveNewRavenEntityName = function (newRavenEntityName) {
            this.ravenEntityName(newRavenEntityName);
        };

        sqlReplication.prototype.isSqlServerKindOfFactory = function (factoryName) {
            if (factoryName == 'System.Data.SqlClient' || factoryName == 'System.Data.SqlServerCe.4.0' || factoryName == 'System.Data.SqlServerCe.3.5') {
                return true;
            }
            return false;
        };
        return sqlReplication;
    })(document);

    
    return sqlReplication;
});
/// <reference path="../models/dto.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/sqlReplicationConnections", ["require", "exports", "models/document", "models/predefinedSqlConnection"], function(require, exports, document, predefinedConnection) {
    var sqlReplicationConnections = (function (_super) {
        __extends(sqlReplicationConnections, _super);
        function sqlReplicationConnections(dto) {
            _super.call(this, dto);
            this.predefinedConnections = ko.observableArray();
            this.predefinedConnections(dto.PredefinedConnections.map(function (x) {
                return new predefinedConnection(x);
            }));
        }
        sqlReplicationConnections.empty = function () {
            return new sqlReplicationConnections({
                PredefinedConnections: []
            });
        };

        sqlReplicationConnections.prototype.toDto = function () {
            var meta = this.__metadata.toDto();
            meta['@id'] = "Raven/SqlReplication/Connections/";
            return {
                PredefinedConnections: this.predefinedConnections().map(function (x) {
                    return x.toDto();
                })
            };
        };
        return sqlReplicationConnections;
    })(document);

    
    return sqlReplicationConnections;
});
define("models/sqlReplicationSimulatedCommand", ["require", "exports"], function(require, exports) {
    var sqlReplicationSimulatedCommand = (function () {
        function sqlReplicationSimulatedCommand(showParamsValues, commandData) {
            var _this = this;
            this.showParamsValues = ko.observable(false);
            this.commandData = ko.observable();
            this.showParamsValues(showParamsValues);
            this.commandData(commandData);
            this.commandText = ko.computed(function () {
                if (_this.showParamsValues() && !!_this.commandData().Params) {
                    var processedCommandText = _this.commandData().CommandText.slice(0);
                    _this.commandData().Params.forEach(function (x) {
                        if (x.Key.slice(0, 1) === '@') {
                            processedCommandText = processedCommandText.replace(x.Key, x.Value);
                        } else {
                            processedCommandText = processedCommandText.replace('@' + x.Key, x.Value);
                        }
                    });
                    return processedCommandText;
                } else {
                    return _this.commandData().CommandText;
                }
            });
        }
        return sqlReplicationSimulatedCommand;
    })();

    
    return sqlReplicationSimulatedCommand;
});
define("models/sqlReplicationTable", ["require", "exports"], function(require, exports) {
    var sqlReplicationTable = (function () {
        function sqlReplicationTable(dto) {
            this.tableName = ko.observable().extend({ required: true });
            this.documentKeyColumn = ko.observable().extend({ required: true });
            this.tableName(dto.TableName);
            this.documentKeyColumn(dto.DocumentKeyColumn);
        }
        sqlReplicationTable.empty = function () {
            return new sqlReplicationTable({
                TableName: null,
                DocumentKeyColumn: null
            });
        };

        sqlReplicationTable.prototype.toDto = function () {
            return {
                TableName: this.tableName(),
                DocumentKeyColumn: this.documentKeyColumn()
            };
        };
        return sqlReplicationTable;
    })();

    
    return sqlReplicationTable;
});
define("models/statusDebugQueriesGroup", ["require", "exports", "models/statusDebugQueriesQuery"], function(require, exports, statusDebugQueriesQuery) {
    var statusDebugQueriesGroup = (function () {
        function statusDebugQueriesGroup(dto) {
            this.queries = ko.observableArray();
            this.indexName = dto.IndexName;
            this.queries($.map(dto.Queries, function (q) {
                return new statusDebugQueriesQuery(q);
            }));
        }
        return statusDebugQueriesGroup;
    })();

    
    return statusDebugQueriesGroup;
});
define("models/statusDebugQueriesQuery", ["require", "exports"], function(require, exports) {
    var statusDebugQueriesQuery = (function () {
        function statusDebugQueriesQuery(dto) {
            this.queryInfo = ko.observable();
            this.duration = ko.observable(null);
            this.startTime = dto.StartTime;
            this.queryInfo(JSON.stringify(dto.QueryInfo, null, 4));
            this.queryId = dto.QueryId;
            this.duration(dto.Duration);
        }
        return statusDebugQueriesQuery;
    })();

    
    return statusDebugQueriesQuery;
});
/// <reference path="../models/dto.ts" />
define("models/transformer", ["require", "exports", "common/appUrl"], function(require, exports, appUrl) {
    var transformer = (function () {
        function transformer() {
            var _this = this;
            this.name = ko.observable().extend({ required: true });
            this.transformResults = ko.observable().extend({ required: true });
            this.originalName = ko.observable();
            this.wasNameChanged = ko.computed(function () {
                return _this.name() != _this.originalName();
            });
        }
        transformer.prototype.initFromLoad = function (dto) {
            this.originalName(dto.name.toString());
            this.name(dto.name);
            this.editUrl = appUrl.forCurrentDatabase().editTransformer(encodeURIComponent(this.name()));
            this.transformResults(dto.definition.TransformResults);
            return this;
        };

        transformer.prototype.initFromSave = function (dto) {
            this.originalName(dto.Transformer.Name.toString());
            this.name(dto.Transformer.Name);
            this.editUrl = appUrl.forCurrentDatabase().editTransformer(encodeURIComponent(this.name()));
            this.transformResults(dto.Transformer.TransformResults);
            return this;
        };

        transformer.prototype.toDto = function () {
            return {
                'name': this.name(),
                'definition': {
                    'Name': this.name(),
                    'TransformResults': this.transformResults()
                }
            };
        };

        transformer.prototype.toSaveDto = function () {
            return {
                'Name': this.name(),
                'TransformResults': this.transformResults()
            };
        };

        transformer.prototype.extractInputs = function () {
            var matcher = /(Query|Parameter)\(["'].*?["']\)/g;
            var defaultMatcher = /(Query|Parameter)OrDefault\(["'].*?["'],\s+["'].*?["']\)/g;
            if (this.transformResults()) {
                var parameters = this.transformResults().match(matcher);
                var parametersWithDefault = this.transformResults().match(defaultMatcher);
                var results = [];

                if (parameters !== null) {
                    parameters.forEach(function (value) {
                        return results.push({
                            name: value.substring(value.indexOf('(') + 2, value.length - 2),
                            hasDefault: false
                        });
                    });
                }

                if (parametersWithDefault !== null) {
                    parametersWithDefault.forEach(function (value) {
                        return results.push({
                            name: value.substring(value.indexOf('(') + 2, value.indexOf(',') - 1),
                            hasDefault: true
                        });
                    });
                }
                return results;
            }

            return [];
        };

        transformer.empty = function () {
            return new transformer().initFromLoad({
                'name': "",
                'definition': {
                    'Name': "",
                    'TransformResults': ""
                }
            });
        };
        return transformer;
    })();

    
    return transformer;
});
define("models/transformerParam", ["require", "exports"], function(require, exports) {
    var transformerParam = (function () {
        function transformerParam(name, value) {
            this.name = name;
            this.value = value;
        }
        return transformerParam;
    })();

    
    return transformerParam;
});
define("models/transformerQuery", ["require", "exports", "models/transformerParam"], function(require, exports, transformerParam) {
    var transformerQuery = (function () {
        function transformerQuery(dto) {
            this.transformerName = dto.transformerName;
            this.queryParams = dto.queryParams;
        }
        transformerQuery.prototype.addParamByNameAndValue = function (name, value) {
            this.queryParams.push(new transformerParam(name, value));
        };

        transformerQuery.prototype.addParam = function (param) {
            this.queryParams.push(param);
        };

        transformerQuery.prototype.toUrl = function () {
            if (this.transformerName) {
                var paramsUrl = this.queryParams.map(function (param) {
                    return "tp-" + param.name + "=" + param.value;
                }).join("&");

                return "&resultsTransformer=" + this.transformerName + (paramsUrl.length > 0 ? "&" + paramsUrl : "");
            } else {
                return "";
            }
        };

        transformerQuery.prototype.toDto = function () {
            return {
                transformerName: this.transformerName,
                queryParams: this.queryParams
            };
        };
        return transformerQuery;
    })();

    
    return transformerQuery;
});
define("models/uploadItem", ["require", "exports"], function(require, exports) {
    var uploadItem = (function () {
        function uploadItem(id, fileName, status, filesystem) {
            this.id = ko.observable("");
            this.fileName = ko.observable("");
            this.status = ko.observable("");
            this.id(id);
            this.fileName(fileName);
            this.status(status);
            this.filesystem = filesystem;
        }
        return uploadItem;
    })();

    
    return uploadItem;
});
define("models/versioningEntry", ["require", "exports", "models/documentMetadata"], function(require, exports, documentMetadata) {
    var versioningEntry = (function () {
        function versioningEntry(dto, fromDatabse) {
            if (typeof fromDatabse === "undefined") { fromDatabse = false; }
            var _this = this;
            this.collection = ko.observable().extend({ required: true });
            this.maxRevisions = ko.observable().extend({ required: true });
            this.exclude = ko.observable().extend({ required: true });
            this.fromDatabase = ko.observable();
            if (!dto) {
                // Default settings for new entries
                dto = {
                    Id: "",
                    MaxRevisions: 214748368,
                    Exclude: false
                };
                this.__metadata = new documentMetadata();
            } else {
                this.__metadata = new documentMetadata(dto["@metadata"]);
            }

            this.fromDatabase(fromDatabse);
            this.collection(dto.Id);
            this.maxRevisions(dto.MaxRevisions);
            this.exclude(dto.Exclude);
            this.removable = ko.computed(function () {
                return (_this.collection() !== "DefaultConfiguration");
            });

            this.isValid = ko.computed(function () {
                return _this.collection() != null && _this.collection().length > 0 && _this.collection().indexOf(' ') === -1;
            });

            this.disabled = ko.computed(function () {
                return _this.exclude();
            });
        }
        versioningEntry.prototype.makeExcluded = function () {
            this.exclude(true);
        };

        versioningEntry.prototype.makeIncluded = function () {
            this.exclude(false);
        };

        versioningEntry.prototype.toDto = function (includeMetadata) {
            var dto = {
                '@metadata': undefined,
                Id: this.collection(),
                MaxRevisions: this.maxRevisions(),
                Exclude: this.exclude()
            };

            if (includeMetadata && this.__metadata) {
                dto['@metadata'] = this.__metadata.toDto();
            }

            return dto;
        };
        return versioningEntry;
    })();

    
    return versioningEntry;
});
define("models/windowsAuthData", ["require", "exports", "models/databaseAccess"], function(require, exports, databaseAccess) {
    var windowsAuthData = (function () {
        function windowsAuthData(dto) {
            this.name = ko.observable();
            this.enabled = ko.observable();
            this.databases = ko.observableArray();
            this.nameCustomValidity = ko.observable('');
            this.name(dto.Name);
            this.enabled(dto.Enabled);
            this.databases(dto.Databases.map(function (dbDto) {
                return new databaseAccess(dbDto);
            }));
        }
        windowsAuthData.prototype.toDto = function () {
            return {
                Name: this.name(),
                Enabled: this.enabled(),
                Databases: this.databases().map(function (db) {
                    return db.toDto();
                })
            };
        };

        windowsAuthData.empty = function () {
            return new windowsAuthData({
                Name: "",
                Enabled: false,
                Databases: [databaseAccess.empty().toDto()]
            });
        };

        windowsAuthData.prototype.enable = function () {
            this.enabled(true);
        };

        windowsAuthData.prototype.disable = function () {
            this.enabled(false);
        };

        windowsAuthData.prototype.addEmptyDatabase = function () {
            this.databases.push(databaseAccess.empty());
        };

        windowsAuthData.prototype.removeDatabase = function (dba) {
            this.databases.remove(dba);
        };
        return windowsAuthData;
    })();
    
    return windowsAuthData;
});
define("models/windowsAuthSetup", ["require", "exports", "models/windowsAuthData"], function(require, exports, windowsAuthData) {
    var windowsAuthSetup = (function () {
        function windowsAuthSetup(dto) {
            var _this = this;
            this.requiredUsers = ko.observableArray();
            this.requiredGroups = ko.observableArray();
            this.requiredUsers(dto.RequiredUsers.map(function (winAuthDto) {
                return new windowsAuthData(winAuthDto);
            }));
            this.requiredGroups(dto.RequiredGroups.map(function (winAuthDto) {
                return new windowsAuthData(winAuthDto);
            }));

            this.requiredUsers().forEach(function (data) {
                return windowsAuthSetup.subscribeToObservableName(data, _this.requiredUsers);
            });
            this.requiredGroups().forEach(function (data) {
                return windowsAuthSetup.subscribeToObservableName(data, _this.requiredGroups);
            });
        }
        windowsAuthSetup.prototype.toDto = function () {
            return {
                RequiredGroups: this.requiredGroups().map(function (grp) {
                    return grp.toDto();
                }),
                RequiredUsers: this.requiredUsers().map(function (usr) {
                    return usr.toDto();
                })
            };
        };

        windowsAuthSetup.subscribeToObservableName = function (data, observableArray) {
            data.name.subscribe(function (previousName) {
                var existingWindowsAuthDataExceptCurrent = observableArray().filter(function (w) {
                    return w !== data && w.name() == previousName;
                });
                if (existingWindowsAuthDataExceptCurrent.length == 1) {
                    existingWindowsAuthDataExceptCurrent[0].nameCustomValidity('');
                }
            }, this, "beforeChange");
            data.name.subscribe(function (newName) {
                var errorMessage = '';
                var isApiKeyNameValid = newName.indexOf("\\") > 0;
                var existingApiKeys = observableArray().filter(function (w) {
                    return w !== data && w.name() == newName;
                });

                if (isApiKeyNameValid == false) {
                    errorMessage = "Name must contain '\\'";
                } else if (existingApiKeys.length > 0) {
                    errorMessage = "Name already exists!";
                }

                data.nameCustomValidity(errorMessage);
            });
        };
        return windowsAuthSetup;
    })();
    
    return windowsAuthSetup;
});
define("models/counter/counter", ["require", "exports", 'models/counter/counterServerValue'], function(require, exports, counterServerValue) {
    var counter = (function () {
        function counter(dto) {
            this.id = ko.observable('');
            this.group = ko.observable('');
            this.overallTotal = ko.observable(0);
            this.servers = ko.observableArray([]);
            this.id(dto.Name);
            this.group(dto.Group);
            this.overallTotal(dto.OverallTotal);
            this.servers(dto.Servers.map(function (s) {
                return new counterServerValue(s);
            }));
        }
        return counter;
    })();

    
    return counter;
});
define("models/counter/counterGroup", ["require", "exports"], function(require, exports) {
    var counterGroup = (function () {
        function counterGroup(dto) {
            this.name = ko.observable('');
            this.numOfCounters = ko.observable(0);
            this.counters = ko.observableArray([]);
            this.name(dto.Name);
            this.numOfCounters(dto.NumOfCounters);
        }
        return counterGroup;
    })();

    
    return counterGroup;
});
define("models/counter/counterServerValue", ["require", "exports"], function(require, exports) {
    var counterServerValue = (function () {
        function counterServerValue(dto) {
            this.name = ko.observable('');
            this.posCount = ko.observable(0);
            this.negCount = ko.observable(0);
            this.name(dto.Name);
            this.posCount(dto.Positive);
            this.negCount(dto.Negative);
        }
        return counterServerValue;
    })();

    
    return counterServerValue;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/counter/counterStorage", ["require", "exports", "models/resource"], function(require, exports, resource) {
    var counterStorage = (function (_super) {
        __extends(counterStorage, _super);
        function counterStorage(name, isDisabled) {
            if (typeof isDisabled === "undefined") { isDisabled = false; }
            _super.call(this, name, counterStorage.type);
            this.name = name;
            this.isDisabled = isDisabled;
            this.disabled(isDisabled);
            this.name = name;
        }
        counterStorage.prototype.activate = function () {
            ko.postbox.publish("ActivateCounterStorage", this);
        };
        counterStorage.type = 'counterstorage';
        return counterStorage;
    })(resource);

    
    return counterStorage;
});
define("models/counter/counterStorageReplicationDestination", ["require", "exports"], function(require, exports) {
    var counterStorageReplicationDestination = (function () {
        function counterStorageReplicationDestination(dto) {
            var _this = this;
            this.disabled = ko.observable().extend({ required: true });
            this.serverUrl = ko.observable().extend({ required: true });
            this.counterStorageName = ko.observable().extend({ required: true });
            this.username = ko.observable().extend({ required: true });
            this.password = ko.observable().extend({ required: true });
            this.domain = ko.observable().extend({ required: true });
            this.apiKey = ko.observable().extend({ required: true });
            this.name = ko.computed(function () {
                if (_this.serverUrl() && _this.counterStorageName()) {
                    return _this.counterStorageName() + " on " + _this.serverUrl();
                } else if (_this.serverUrl()) {
                    return _this.serverUrl();
                } else if (_this.counterStorageName()) {
                    return _this.counterStorageName();
                }

                return "[empty]";
            });
            this.isValid = ko.computed(function () {
                return _this.serverUrl() != null && _this.serverUrl().length > 0;
            });
            // data members for the ui
            this.isUserCredentials = ko.observable(false);
            this.isApiKeyCredentials = ko.observable(false);
            this.credentialsType = ko.computed(function () {
                if (_this.isUserCredentials()) {
                    return "user";
                } else if (_this.isApiKeyCredentials()) {
                    return "api-key";
                } else {
                    return "none";
                }
            });
            this.disabled(dto.Disabled);
            this.serverUrl(dto.ServerUrl);
            this.counterStorageName(dto.CounterStorageName);
            this.username(dto.Username);
            this.password(dto.Password);
            this.domain(dto.Domain);
            this.apiKey(dto.ApiKey);

            if (this.username()) {
                this.isUserCredentials(true);
            } else if (this.apiKey()) {
                this.isApiKeyCredentials(true);
            }
        }
        counterStorageReplicationDestination.prototype.toggleUserCredentials = function () {
            this.isUserCredentials.toggle();
            if (this.isUserCredentials()) {
                this.isApiKeyCredentials(false);
            }
        };

        counterStorageReplicationDestination.prototype.toggleApiKeyCredentials = function () {
            this.isApiKeyCredentials.toggle();
            if (this.isApiKeyCredentials()) {
                this.isUserCredentials(false);
            }
        };

        counterStorageReplicationDestination.empty = function (counterStorageName) {
            return new counterStorageReplicationDestination({
                Disabled: false,
                ServerUrl: null,
                CounterStorageName: counterStorageName,
                Username: null,
                Password: null,
                Domain: null,
                ApiKey: null
            });
        };

        counterStorageReplicationDestination.prototype.enable = function () {
            this.disabled(false);
        };

        counterStorageReplicationDestination.prototype.disable = function () {
            this.disabled(true);
        };

        counterStorageReplicationDestination.prototype.toDto = function () {
            return {
                Disabled: this.disabled(),
                ServerUrl: this.prepareUrl(),
                CounterStorageName: this.counterStorageName(),
                Username: this.username(),
                Password: this.password(),
                Domain: this.domain(),
                ApiKey: this.apiKey()
            };
        };

        counterStorageReplicationDestination.prototype.prepareUrl = function () {
            var url = this.serverUrl();
            if (url && url.charAt(url.length - 1) === "/") {
                url = url.substring(0, url.length - 1);
            }
            return url;
        };
        return counterStorageReplicationDestination;
    })();

    
    return counterStorageReplicationDestination;
});
define("models/counter/counterStorageReplicationSetup", ["require", "exports", "models/counter/counterStorageReplicationDestination"], function(require, exports, counterStorageReplicationDestination) {
    var counterStorageReplicationSetup = (function () {
        function counterStorageReplicationSetup(dto) {
            this.destinations = ko.observableArray().extend({ required: true });
            this.destinations(dto.Destinations.map(function (dest) {
                return new counterStorageReplicationDestination(dest);
            }));
        }
        counterStorageReplicationSetup.prototype.toDto = function () {
            return {
                Destinations: this.destinations().map(function (dest) {
                    return dest.toDto();
                })
            };
        };
        return counterStorageReplicationSetup;
    })();

    
    return counterStorageReplicationSetup;
});
define("models/filesystem/configurationKey", ["require", "exports", "commands/filesystem/getConfigurationByKeyCommand"], function(require, exports, getConfigurationByKeyCommand) {
    var configurationKey = (function () {
        function configurationKey(fs, key) {
            this.fs = fs;
            this.key = key;
        }
        // Notifies consumers that this configuration key should be the selected one.
        // Called from the UI when a user clicks a configuration key the configuration page.
        configurationKey.prototype.activate = function () {
            ko.postbox.publish("ActivateConfigurationKey", this);
        };

        configurationKey.prototype.getValues = function () {
            return new getConfigurationByKeyCommand(this.fs, this.key).execute();
        };
        return configurationKey;
    })();

    
    return configurationKey;
});
define("models/filesystem/conflictHistory", ["require", "exports"], function(require, exports) {
    var conflictHistory = (function () {
        function conflictHistory(version, serverId) {
            this.version = version;
            this.serverId = serverId;
        }
        return conflictHistory;
    })();

    
    return conflictHistory;
});
define("models/filesystem/conflictItem", ["require", "exports", "models/filesystem/conflictHistory"], function(require, exports, conflictHistory) {
    var conflictItem = (function () {
        function conflictItem(fileName, remoteServerUrl) {
            this.fileName = fileName;
            this.remoteServerUrl = remoteServerUrl;
            this.remoteHistory = [];
            this.currentHistory = [];
        }
        conflictItem.fromConflictItemDto = function (dto) {
            var item = new conflictItem(dto.FileName, dto.RemoteServerUrl);
            if (dto.RemoteHistory != null) {
                item.remoteHistory.pushAll(dto.RemoteHistory.map(function (x) {
                    return new conflictHistory(x.Version, x.ServerId);
                }));
            }
            if (dto.CurrentHistory != null) {
                item.currentHistory.pushAll(dto.CurrentHistory.map(function (x) {
                    return new conflictHistory(x.Version, x.ServerId);
                }));
            }
            return item;
        };

        conflictItem.fromConflictNotificationDto = function (dto) {
            var item = new conflictItem(dto.FileName, dto.SourceServerUrl);

            return item;
        };
        return conflictItem;
    })();

    
    return conflictItem;
});
define("models/filesystem/file", ["require", "exports", "models/filesystem/fileMetadata"], function(require, exports, fileMetadata) {
    var file = (function () {
        function file(dto, excludeDirectoryInId) {
            if (dto) {
                if (dto.FullPath && dto.FullPath[0] === "/") {
                    dto.FullPath = dto.FullPath.replace("/", "");
                }
                if (excludeDirectoryInId) {
                    this.id = dto.Name;
                } else {
                    this.id = dto.FullPath;
                }
                if (dto.HumaneTotalSize === " Bytes") {
                    dto.HumaneTotalSize = "0 Bytes";
                }

                this.directory = dto.Directory;
                this.fullPath = dto.FullPath;
                this.Size = dto.HumaneTotalSize;
                this.LastModified = dto.Metadata["Last-Modified"];

                this.__metadata = new fileMetadata(dto.Metadata);
            }
        }
        file.prototype.getId = function () {
            return this.id;
        };

        file.prototype.getUrl = function () {
            return this.fullPath ? this.fullPath : this.id;
        };

        file.prototype.getDocumentPropertyNames = function () {
            return ["Size", "LastModified"];
        };
        return file;
    })();

    
    return file;
});
define("models/filesystem/fileMetadata", ["require", "exports"], function(require, exports) {
    var fileMetadata = (function () {
        function fileMetadata(dto) {
            this.standardProps = ["ravenfs-size", "raven-last-modified", "etag", "raven-creation-date"];
            // We don't want to keep certain reserved properties in the metadata text area.
            this.headerPropsToRemove = [
                "Origin", "Raven-Server-Build", "Raven-Client-Version", "Non-Authoritative-Information", "Raven-Timer-Request", "Content-Length",
                "Raven-Authenticated-User", "Has-Api-Key", "Access-Control-Allow-Origin", "Access-Control-Max-Age", "Access-Control-Allow-Methods",
                "Access-Control-Request-Headers", "Access-Control-Allow-Headers", "Reverse-Via", "Persistent-Auth", "Allow", "Content-Disposition",
                "Content-Encoding", "Content-Language", "Content-Location", "Content-MD5", "Content-Range", "Content-Type", "Expires", "Keep-Alive",
                "X-Powered-By", "X-AspNet-Version", "X-Requested-With", "X-SourceFiles", "Accept-Charset", "Accept-Encoding", "Accept", "Accept-Language",
                "Authorization", "Cookie", "Expect", "From", "Host", "If-MatTemp-Index-Scorech", "If-Modified-Since", "If-None-Match", "If-Range",
                "If-Unmodified-Since", "Max-Forwards", "Referer", "TE", "User-Agent", "Accept-Ranges", "Age", "Allow", "Location", "Retry-After",
                "Server", "Set-Cookie2", "Set-Cookie", "Vary", "Www-Authenticate", "Cache-Control", "Connection", "Date", "Pragma", "Trailer", "Upgrade",
                "Transfer-Encoding", "Via", "Warning", "X-ARR-LOG-ID", "X-ARR-SSL", "X-Forwarded-For", "X-Original-URL", "Temp-Request-Time", "DNT"];
            if (dto) {
                this.ravenFSSize = dto['RavenFS-Size'];
                this.creationDate = dto['Raven-Creation-Date'];
                this.lastModified = dto['Raven-Last-Modified'];
                this.etag = dto['ETag'];
                if (this.etag == null)
                    this.etag = dto['Etag'];

                if (this.etag.startsWith('"'))
                    this.etag = this.etag.slice(1, this.etag.length - 1);

                // Effectively remove all the headers that are not useful as metadata.
                var property;
                for (var property in dto) {
                    if (this.headerPropsToRemove.contains(property))
                        delete dto[property];
                }

                for (property in dto) {
                    if (!this.standardProps.contains(property.toLowerCase())) {
                        this.nonStandardProps = this.nonStandardProps || [];
                        var value = dto[property];
                        this[property] = value;
                        this.nonStandardProps.push(property);
                    }
                }
            }
        }
        fileMetadata.prototype.toDto = function () {
            var _this = this;
            var dto = {
                'Raven-Creation-Date': this.creationDate,
                'Raven-Last-Modified': this.lastModified,
                'ETag': '"' + this.etag + '"',
                'RavenFS-Size': this.ravenFSSize
            };

            if (this.nonStandardProps) {
                this.nonStandardProps.forEach(function (p) {
                    dto[p] = _this[p];
                });
            }

            return dto;
        };
        return fileMetadata;
    })();

    
    return fileMetadata;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("models/filesystem/filesystem", ["require", "exports", "models/resource", "models/license"], function(require, exports, resource, license) {
    var filesystem = (function (_super) {
        __extends(filesystem, _super);
        function filesystem(name, isDisabled) {
            if (typeof isDisabled === "undefined") { isDisabled = false; }
            var _this = this;
            _super.call(this, name, filesystem.type);
            this.name = name;
            //isDefault = false;
            this.statistics = ko.observable();
            this.files = ko.observableArray();
            this.disabled(isDisabled);
            this.itemCount = ko.computed(function () {
                return _this.statistics() ? _this.statistics().FileCount : 0;
            });
            this.itemCountText = ko.computed(function () {
                var itemCount = _this.itemCount();
                var text = itemCount + ' file';
                if (itemCount != 1) {
                    text += 's';
                }
                return text;
            });
            this.isLicensed = ko.computed(function () {
                if (!!license.licenseStatus() && license.licenseStatus().IsCommercial) {
                    var ravenFsValue = license.licenseStatus().Attributes.ravenfs;
                    return /^true$/i.test(ravenFsValue);
                }
                return true;
            });
        }
        filesystem.prototype.activate = function () {
            ko.postbox.publish("ActivateFilesystem", this);
        };

        filesystem.getNameFromUrl = function (url) {
            var index = url.indexOf("filesystems/");
            return (index > 0) ? url.substring(index + 10) : "";
        };
        filesystem.type = 'filesystem';
        return filesystem;
    })(resource);
    
    return filesystem;
});
define("models/filesystem/filesystemCollection", ["require", "exports", "common/pagedList"], function(require, exports, pagedList) {
    var filesystemCollection = (function () {
        function filesystemCollection(name, owner) {
            this.name = name;
            this.owner = owner;
            this.itemsCount = ko.observable(0);
            this.isAllItems = false;
        }
        // Notifies consumers that this collection should be the selected one.
        // Called from the UI when a user clicks a collection the documents page.
        filesystemCollection.prototype.activate = function () {
            ko.postbox.publish("ActivateCollection", this);
        };

        filesystemCollection.prototype.getItems = function () {
            if (!this.itemsList) {
                this.itemsList = this.createPagedList();
            }

            return this.itemsList;
        };

        filesystemCollection.prototype.fetchItems = function (skip, take) {
            throw new Error('This method is abstract');
        };

        filesystemCollection.prototype.createPagedList = function () {
            var _this = this;
            var fetcher = function (skip, take) {
                return _this.fetchItems(skip, take);
            };
            var list = new pagedList(fetcher);
            list.collectionName = this.name;
            return list;
        };
        return filesystemCollection;
    })();

    
    return filesystemCollection;
});
define("models/filesystem/folder", ["require", "exports"], function(require, exports) {
    var folder = (function () {
        function folder(path) {
            this.path = path;
            if (path) {
                var lastSlash = path.lastIndexOf("/");
                if (lastSlash > 0) {
                    this.name = path.substring(lastSlash + 1);
                } else {
                    this.name = path.substring(1);
                }
            }
        }
        folder.getFolderFromFilePath = function (filePath) {
            var lastSlash = filePath.lastIndexOf("/");
            if (lastSlash == 0) {
                return new folder("/");
            }
            if (lastSlash > 0) {
                return new folder(filePath.substring(0, lastSlash));
            }
            return null;
        };

        folder.prototype.getSubpathsFrom = function (basePath) {
            if (basePath) {
                if (basePath[basePath.length - 1] != "/") {
                    basePath = basePath + "/";
                }

                var restOfPath = this.path.replace(basePath, "");

                var subPaths = [new folder(basePath)];
                var lastIndexOfSlash = restOfPath.indexOf("/");
                for (var i = 0; i < restOfPath.count("/"); i++) {
                    if (lastIndexOfSlash > 0) {
                        subPaths.push(new folder(basePath + restOfPath.substring(0, lastIndexOfSlash)));
                    }

                    lastIndexOfSlash = restOfPath.indexOf("/", lastIndexOfSlash + 1);
                }
                subPaths.push(new folder(this.path));

                return subPaths;
            }

            return null;
        };

        folder.prototype.isFileAtFolderLevel = function (filePath) {
            var fileToFolder = folder.getFolderFromFilePath(filePath);
            return fileToFolder && this.path === fileToFolder.path;
        };
        return folder;
    })();

    
    return folder;
});
define("models/filesystem/synchronizationDestination", ["require", "exports"], function(require, exports) {
    var synchronizationDestination = (function () {
        function synchronizationDestination(dto) {
            var _this = this;
            this.url = ko.observable().extend({ required: true });
            this.username = ko.observable().extend({ required: true });
            this.password = ko.observable().extend({ required: true });
            this.domain = ko.observable().extend({ required: true });
            this.apiKey = ko.observable().extend({ required: true });
            this.filesystem = ko.observable().extend({ required: true });
            this.disabled = ko.observable().extend({ required: true });
            this.name = ko.computed(function () {
                if (_this.url() && _this.filesystem()) {
                    return _this.filesystem() + " on " + _this.url();
                } else if (_this.url()) {
                    return _this.url();
                } else if (_this.filesystem()) {
                    return _this.filesystem();
                }

                return "[empty]";
            });
            this.isValid = ko.computed(function () {
                return _this.url() != null && _this.url().length > 0;
            });
            // data members for the ui
            this.isUserCredentials = ko.observable(false);
            this.isApiKeyCredentials = ko.observable(false);
            this.credentialsType = ko.computed(function () {
                if (_this.isUserCredentials()) {
                    return "user";
                } else if (_this.isApiKeyCredentials()) {
                    return "api-key";
                } else {
                    return "none";
                }
            });
            this.url(dto.ServerUrl);
            this.username(dto.Username);
            this.password(dto.Password);
            this.domain(dto.Domain);
            this.apiKey(dto.ApiKey);
            this.disabled(!dto.Enabled);
            this.filesystem(dto.FileSystem);

            if (this.username()) {
                this.isUserCredentials(true);
            } else if (this.apiKey()) {
                this.isApiKeyCredentials(true);
            }
        }
        synchronizationDestination.prototype.toggleUserCredentials = function () {
            this.isUserCredentials.toggle();
            if (this.isUserCredentials()) {
                this.isApiKeyCredentials(false);
            }
        };

        synchronizationDestination.prototype.toggleApiKeyCredentials = function () {
            this.isApiKeyCredentials.toggle();
            if (this.isApiKeyCredentials()) {
                this.isUserCredentials(false);
            }
        };

        synchronizationDestination.empty = function () {
            return new synchronizationDestination({
                ServerUrl: null,
                Username: null,
                Password: null,
                Domain: null,
                ApiKey: null,
                FileSystem: null,
                Enabled: false
            });
        };

        synchronizationDestination.prototype.enable = function () {
            this.disabled(false);
        };

        synchronizationDestination.prototype.disable = function () {
            this.disabled(true);
        };

        synchronizationDestination.prototype.toDto = function () {
            return {
                ServerUrl: this.prepareUrl(),
                Username: this.username(),
                Password: this.password(),
                Domain: this.domain(),
                ApiKey: this.apiKey(),
                FileSystem: this.filesystem(),
                Enabled: !this.disabled()
            };
        };

        synchronizationDestination.prototype.prepareUrl = function () {
            var url = this.url();
            if (url && url.charAt(url.length - 1) === "/") {
                url = url.substring(0, url.length - 1);
            }
            return url;
        };
        return synchronizationDestination;
    })();

    
    return synchronizationDestination;
});
define("models/filesystem/synchronizationDetail", ["require", "exports"], function(require, exports) {
    var synchronizationDetail = (function () {
        function synchronizationDetail(dto, status, type) {
            this.fileName = ko.observable();
            this.DestinationUrl = ko.observable();
            this.Type = ko.observable();
            this.TypeDescription = ko.observable();
            this.Status = ko.observable();
            this.Direction = ko.observable();
            this.fileName(dto.FileName);
            this.DestinationUrl(dto.DestinationFileSystemUrl);
            if (type) {
                this.Type(synchronizationDetail.getType(type));
            } else {
                this.Type(dto.Type);
            }
            this.TypeDescription(synchronizationDetail.getTypeDescription(this.Type()));
            this.Status(status);
            this.Direction(dto.Direction);
        }
        synchronizationDetail.prototype.getId = function () {
            return this.fileName();
        };

        synchronizationDetail.prototype.getUrl = function () {
            return this.getId();
        };

        synchronizationDetail.prototype.getDocumentPropertyNames = function () {
            return ["Id", "DestinationUrl", "Type", "Status"];
        };

        synchronizationDetail.getType = function (typeAsString) {
            switch (typeAsString) {
                case "ContentUpdate":
                    return 1 /* ContentUpdate */;
                case "Delete":
                    return 4 /* Delete */;
                case "MetadataUpdate":
                    return 2 /* MetadataUpdate */;
                case "Rename":
                    return 3 /* Rename */;
                default:
                    return 0 /* Unknown */;
            }
        };

        synchronizationDetail.getTypeDescription = function (type) {
            switch (type) {
                case 1 /* ContentUpdate */:
                    return "Content Update";
                case 4 /* Delete */:
                    return "Delete";
                case 2 /* MetadataUpdate */:
                    return "Metadata Update";
                case 3 /* Rename */:
                    return "Rename";
                default:
                    return "Unknown";
            }
        };
        return synchronizationDetail;
    })();

    
    return synchronizationDetail;
});
define("models/filesystem/synchronizationReplicationSetup", ["require", "exports", "models/filesystem/synchronizationDestination"], function(require, exports, synchronizationDestination) {
    var synchronizationReplicationSetup = (function () {
        function synchronizationReplicationSetup(dto) {
            this.source = ko.observable();
            this.destinations = ko.observableArray().extend({ required: true });
            this.source(dto.Source);
            this.destinations(dto.Destinations.map(function (dest) {
                return new synchronizationDestination(dest);
            }));
        }
        synchronizationReplicationSetup.prototype.toDto = function () {
            return {
                Destinations: this.destinations().map(function (dest) {
                    return dest.toDto();
                }),
                Source: this.source()
            };
        };
        return synchronizationReplicationSetup;
    })();

    
    return synchronizationReplicationSetup;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/adminLogs", ["require", "exports", "durandal/app", "viewmodels/viewModelBase", "common/adminLogsClient", "common/fileDownloader", "viewmodels/adminLogsConfigureDialog", "models/adminLogsConfig", "commands/getSingleAuthTokenCommand", "models/adminLogsConfigEntry", 'common/appUrl'], function(require, exports, app, viewModelBase, adminLogsClient, fileDownloader, adminLogsConfigureDialog, adminLogsConfig, getSingleAuthTokenCommand, adminLogsConfigEntry, appUrl) {
    var adminLogs = (function (_super) {
        __extends(adminLogs, _super);
        function adminLogs() {
            _super.apply(this, arguments);
            var _this = this;
            this.adminLogsClient = ko.observable(null);
            this.pendingLogs = [];
            this.keepDown = ko.observable(false);
            this.rawLogs = ko.observable([]);
            this.connected = ko.observable(false);
            this.entriesCount = ko.computed(function () {
                return _this.rawLogs().length;
            });
            this.adminLogsConfig = ko.observable();
        }
        adminLogs.prototype.canActivate = function (args) {
            return true;
        };

        adminLogs.prototype.redraw = function () {
            if (this.pendingLogs.length > 0) {
                var pendingCopy = this.pendingLogs;
                this.pendingLogs = [];
                var logsAsText = "";
                pendingCopy.forEach(function (log) {
                    var line = log.TimeStamp + ";" + log.Level.toUpperCase() + ";" + log.Database + ";" + log.LoggerName + ";" + log.Message + (log.Exception || "") + "\n";
                    logsAsText += line;
                });

                // text: allows us to escape values
                $("<div/>").text(logsAsText).appendTo("#rawLogsContainer pre");
                this.rawLogs().pushAll(pendingCopy);
                this.rawLogs.valueHasMutated();

                if (this.keepDown()) {
                    var logsPre = document.getElementById('adminLogsPre');
                    logsPre.scrollTop = logsPre.scrollHeight;
                }
            }
        };

        adminLogs.prototype.clearLogs = function () {
            this.pendingLogs = [];
            this.rawLogs([]);
            $("#rawLogsContainer pre").empty();
        };

        adminLogs.prototype.defaultLogsConfig = function () {
            var logConfig = new adminLogsConfig();
            logConfig.maxEntries(10000);
            logConfig.entries.push(new adminLogsConfigEntry("Raven.", "Info"));
            return logConfig;
        };

        adminLogs.prototype.configureConnection = function () {
            var _this = this;
            this.intervalId = setInterval(function () {
                this.redraw();
            }.bind(this), 1000);

            var currentConfig = this.adminLogsConfig() ? this.adminLogsConfig().clone() : this.defaultLogsConfig();
            var adminLogsConfigViewModel = new adminLogsConfigureDialog(currentConfig);
            app.showDialog(adminLogsConfigViewModel);
            adminLogsConfigViewModel.configurationTask.done(function (x) {
                _this.adminLogsConfig(x);
                _this.reconnect();
            });
        };

        adminLogs.prototype.connect = function () {
            var _this = this;
            if (!!this.adminLogsClient()) {
                this.reconnect();
                return;
            }
            if (!this.adminLogsConfig()) {
                this.configureConnection();
                return;
            }

            var tokenDeferred = $.Deferred();

            if (!this.adminLogsConfig().singleAuthToken()) {
                new getSingleAuthTokenCommand(appUrl.getSystemDatabase(), true).execute().done(function (tokenObject) {
                    _this.adminLogsConfig().singleAuthToken(tokenObject);
                    tokenDeferred.resolve();
                }).fail(function (e) {
                    app.showMessage("You are not authorized to trace this resource", "Authorization error");
                });
            } else {
                tokenDeferred.resolve();
            }

            tokenDeferred.done(function () {
                _this.adminLogsClient(new adminLogsClient(_this.adminLogsConfig().singleAuthToken().Token));
                _this.adminLogsClient().connect();
                var categoriesConfig = _this.adminLogsConfig().entries().map(function (e) {
                    return e.toDto();
                });
                _this.adminLogsClient().configureCategories(categoriesConfig);
                _this.adminLogsClient().connectionOpeningTask.done(function () {
                    _this.connected(true);
                    _this.adminLogsClient().watchAdminLogs(function (event) {
                        _this.onLogMessage(event);
                    });
                });
                _this.adminLogsConfig().singleAuthToken(null);
            });
        };

        adminLogs.prototype.disconnect = function () {
            var _this = this;
            if (!!this.adminLogsClient()) {
                this.adminLogsClient().dispose();
                return this.adminLogsClient().connectionClosingTask.then(function () {
                    _this.adminLogsClient(null);
                    _this.connected(false);
                });
            } else {
                app.showMessage("Cannot disconnect, connection does not exist", "Disconnect");
                return $.Deferred().reject();
            }
        };

        adminLogs.prototype.reconnect = function () {
            var _this = this;
            if (!this.adminLogsClient()) {
                this.connect();
            } else {
                this.disconnect().done(function () {
                    _this.connect();
                });
            }
        };

        adminLogs.prototype.attached = function () {
            this.logsContainer = document.getElementById("rawLogsContainer");
        };

        adminLogs.prototype.deactivate = function () {
            clearInterval(this.intervalId);
            if (this.adminLogsClient()) {
                this.adminLogsClient().dispose();
            }
        };

        adminLogs.prototype.detached = function () {
            _super.prototype.detached.call(this);
            this.disposeAdminLogsClient();
        };

        adminLogs.prototype.disposeAdminLogsClient = function () {
            var client = this.adminLogsClient();
            if (client) {
                client.dispose();
            }
        };

        adminLogs.prototype.onLogMessage = function (entry) {
            if (this.entriesCount() + this.pendingLogs.length < this.adminLogsConfig().maxEntries()) {
                this.pendingLogs.push(entry);
            } else {
                // stop logging
                var client = this.adminLogsClient();
                this.connected(false);
                client.dispose();
            }
        };

        adminLogs.prototype.exportLogs = function () {
            fileDownloader.downloadAsJson(this.rawLogs(), "logs.json");
        };

        adminLogs.prototype.toggleKeepDown = function () {
            this.keepDown.toggle();
            if (this.keepDown() == true) {
                var logsPre = document.getElementById('adminLogsPre');
                logsPre.scrollTop = logsPre.scrollHeight;
            }
        };
        return adminLogs;
    })(viewModelBase);

    
    return adminLogs;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/adminLogsConfigureDialog", ["require", "exports", "durandal/app", "plugins/dialog", "viewmodels/dialogViewModelBase", "commands/getSingleAuthTokenCommand", "models/adminLogsConfigEntry", 'common/appUrl'], function(require, exports, app, dialog, dialogViewModelBase, getSingleAuthTokenCommand, adminLogsConfigEntry, appUrl) {
    var adminLogsConfigureDialog = (function (_super) {
        __extends(adminLogsConfigureDialog, _super);
        function adminLogsConfigureDialog(logConfig) {
            var _this = this;
            _super.call(this);
            this.logConfig = logConfig;
            this.configurationTask = $.Deferred();
            this.maxTableHeight = ko.observable();
            this.lineHeight = 51;
            this.maxTableHeight(Math.floor($(window).height() * 0.43));

            $(window).resize(function () {
                _this.maxTableHeight(Math.floor($(window).height() * 0.43));
                _this.alignBoxVertically();
            });

            this.isScrollNeeded = ko.computed(function () {
                var currentColumnsCount = _this.logConfig.entries().length;
                var currentColumnHeight = currentColumnsCount * _this.lineHeight;

                if (currentColumnHeight > _this.maxTableHeight()) {
                    return true;
                }

                return false;
            });
        }
        adminLogsConfigureDialog.prototype.attached = function () {
            _super.prototype.attached.call(this);
            this.form = $("#log-config-form");
        };

        adminLogsConfigureDialog.prototype.cancel = function () {
            dialog.close(this);
        };

        adminLogsConfigureDialog.prototype.deactivate = function () {
            this.configurationTask.reject();
        };

        adminLogsConfigureDialog.prototype.startServerLogging = function () {
            var _this = this;
            var getTokenTask = new getSingleAuthTokenCommand(appUrl.getSystemDatabase(), true).execute();

            getTokenTask.done(function (tokenObject) {
                _this.logConfig.singleAuthToken(tokenObject);
                _this.configurationTask.resolve(_this.logConfig);
                dialog.close(_this);
            }).fail(function (e) {
                var response = JSON.parse(e.responseText);
                var msg = e.statusText;
                if ("Error" in response) {
                    msg += ": " + response.Error;
                } else if ("Reason" in response) {
                    msg += ": " + response.Reason;
                }
                app.showMessage(msg, "Error");
            });
        };

        adminLogsConfigureDialog.prototype.addCategory = function () {
            this.logConfig.entries.push(new adminLogsConfigEntry("", "Info"));

            if (!this.isScrollNeeded()) {
                this.alignBoxVertically();
            }
        };

        adminLogsConfigureDialog.prototype.deleteRow = function (row) {
            this.logConfig.entries.remove(row);

            if (!this.isScrollNeeded()) {
                this.alignBoxVertically();
            }
        };

        adminLogsConfigureDialog.prototype.alignBoxVertically = function () {
            var messageBoxHeight = parseInt($(".messageBox").css('height'), 10);
            var windowHeight = $(window).height();
            var messageBoxMarginTop = parseInt($(".messageBox").css('margin-top'), 10);
            var newTopPercent = Math.floor(((windowHeight - messageBoxHeight) / 2 - messageBoxMarginTop) / windowHeight * 100);
            var newTopPercentString = newTopPercent.toString() + '%';
            $(".modalHost").css('top', newTopPercentString);
        };

        adminLogsConfigureDialog.prototype.generateBindingInputId = function (index) {
            return 'binding-' + index;
        };
        return adminLogsConfigureDialog;
    })(dialogViewModelBase);

    
    return adminLogsConfigureDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/adminSettings", ["require", "exports", "plugins/router", "models/database", "common/appUrl", "viewmodels/viewModelBase"], function(require, exports, durandalRouter, database, appUrl, viewModelBase) {
    var adminSettings = (function (_super) {
        __extends(adminSettings, _super);
        function adminSettings() {
            var _this = this;
            _super.call(this);
            this.router = null;

            this.docsForSystemUrl = appUrl.forDocuments(null, new database("<system>"));

            var apiKeyRoute = { route: ['admin/settings', 'admin/settings/apiKeys'], moduleId: 'viewmodels/apiKeys', title: 'API Keys', nav: true, hash: appUrl.forApiKeys() };
            var windowsAuthRoute = { route: 'admin/settings/windowsAuth', moduleId: 'viewmodels/windowsAuth', title: 'Windows Authentication', nav: true, hash: appUrl.forWindowsAuth() };
            var backupDatabaseRoute = { route: 'admin/settings/backupDatabase', moduleId: 'viewmodels/backupDatabase', title: 'Backup Database', nav: true, hash: appUrl.forBackupDatabase() };
            var compactDatabaseRoute = { route: 'admin/settings/compactDatabase', moduleId: 'viewmodels/compactDatabase', title: 'Compact Database', nav: true, hash: appUrl.forCompactDatabase() };
            var restoreDatabaseRoute = { route: 'admin/settings/restoreDatabase', moduleId: 'viewmodels/restoreDatabase', title: 'Restore Database', nav: true, hash: appUrl.forRestoreDatabase() };
            var backupFilesystemRoute = { route: 'admin/settings/backupFilesystem', moduleId: 'viewmodels/filesystem/backupFilesystem', title: 'Backup Filesystem', nav: true, hash: appUrl.forBackupFilesystem() };
            var compactFilesystemRoute = { route: 'admin/settings/compactFilesystem', moduleId: 'viewmodels/filesystem/compactFilesystem', title: 'Compact Filesystem', nav: true, hash: appUrl.forCompactFilesystem() };
            var restoreFilesystemRoute = { route: 'admin/settings/restoreFilesystem', moduleId: 'viewmodels/filesystem/restoreFilesystem', title: 'Restore Filesystem', nav: true, hash: appUrl.forRestoreFilesystem() };
            var adminLogsRoute = { route: 'admin/settings/adminLogs', moduleId: 'viewmodels/adminLogs', title: 'Admin Logs', nav: true, hash: appUrl.forAdminLogs() };
            var trafficWatchRoute = { route: 'admin/settings/trafficWatch', moduleId: 'viewmodels/trafficWatch', title: 'Traffic Watch', nav: true, hash: appUrl.forTrafficWatch() };
            var debugInfoRoute = { route: 'admin/settings/debugInfo', moduleId: 'viewmodels/infoPackage', title: 'Gather Debug Info', nav: true, hash: appUrl.forDebugInfo() };
            var ioTestRoute = { route: 'admin/settings/ioTest', moduleId: 'viewmodels/ioTest', title: 'IO Test', nav: true, hash: appUrl.forIoTest() };
            var studioConfigRoute = { route: 'admin/settings/studioConfig', moduleId: 'viewmodels/studioConfig', title: 'Studio Config', nav: true, hash: appUrl.forStudioConfig() };

            this.router = durandalRouter.createChildRouter().map([
                apiKeyRoute,
                windowsAuthRoute,
                backupDatabaseRoute,
                compactDatabaseRoute,
                restoreDatabaseRoute,
                backupFilesystemRoute,
                compactFilesystemRoute,
                restoreFilesystemRoute,
                adminLogsRoute,
                trafficWatchRoute,
                debugInfoRoute,
                ioTestRoute,
                studioConfigRoute
            ]).buildNavigationModel();

            appUrl.mapUnknownRoutes(this.router);

            this.activeSubViewTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                return activeRoute != null ? activeRoute.title : "";
            });
        }
        adminSettings.prototype.canActivate = function (args) {
            return true;
        };

        adminSettings.prototype.navigateToSystemDatabase = function () {
            var _this = this;
            this.promptNavSystemDb(true).done(function () {
                var db = appUrl.getSystemDatabase();
                db.activate();
                var url = appUrl.forDocuments(null, db);
                _this.navigate(url);
            });
        };
        return adminSettings;
    })(viewModelBase);

    
    return adminSettings;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/alerts", ["require", "exports", "plugins/router", "commands/getAlertsCommand", "viewmodels/viewModelBase", "moment", "models/alert", "common/appUrl", "commands/saveAlertsCommand"], function(require, exports, router, getAlertsCommand, viewModelBase, moment, alert, appUrl, saveAlertsCommand) {
    var alerts = (function (_super) {
        __extends(alerts, _super);
        function alerts() {
            var _this = this;
            _super.call(this);
            this.alertDoc = ko.observable();
            this.allAlerts = ko.observableArray();
            this.filterLevel = ko.observable("All");
            this.selectedAlert = ko.observable();
            this.selectedAlertIndex = ko.observable();
            this.now = ko.observable();
            this.updateNowTimeoutHandle = 0;

            this.unreadAlertCount = ko.computed(function () {
                return _this.allAlerts().count(function (a) {
                    return a.observed() === false;
                });
            });
            this.readAlertCount = ko.computed(function () {
                return _this.allAlerts().count(function (a) {
                    return a.observed() === true;
                });
            });
            this.updateCurrentNowTime();
            this.activeDatabase.subscribe(function () {
                return _this.fetchAlerts();
            });
        }
        alerts.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            this.fetchAlerts();
            var item = !!args.item && !isNaN(args.item) ? args.item : 0;
            this.selectedAlertIndex(item);
        };

        alerts.prototype.deactivate = function () {
            clearTimeout(this.updateNowTimeoutHandle);
        };

        alerts.prototype.fetchAlerts = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getAlertsCommand(db).execute().done(function (result) {
                    return _this.processAlertsResults(result);
                });
            }

            return null;
        };

        alerts.prototype.processAlertsResults = function (result) {
            var _this = this;
            var now = moment();
            var alerts = result.Alerts.map(function (a) {
                return new alert(a);
            });
            alerts.forEach(function (r) {
                r.createdAtHumanized = _this.createHumanReadableTime(r.createdAt), r.isVisible = ko.computed(function () {
                    return _this.matchesFilter(r);
                });
            });
            this.alertDoc(result);
            this.allAlerts(alerts);
            if (alerts.length > 0) {
                this.selectAlert(alerts[this.selectedAlertIndex()]);
            }
        };

        alerts.prototype.matchesFilter = function (a) {
            if (this.filterLevel() === "All") {
                return true;
            }

            var unreadFilterWithUnreadAlert = this.filterLevel() === "Unread" && a.observed() === false;
            var readFilterWithReadAlert = this.filterLevel() === "Read" && a.observed() === true;
            return unreadFilterWithUnreadAlert || readFilterWithReadAlert;
        };

        alerts.prototype.createHumanReadableTime = function (time) {
            var _this = this;
            if (time) {
                // Return a computed that returns a humanized string based off the current time, e.g. "7 minutes ago".
                // It's a computed so that it updates whenever we update this.now (scheduled to occur every minute.)
                return ko.computed(function () {
                    var dateMoment = moment(time);
                    var agoInMs = dateMoment.diff(_this.now());
                    return moment.duration(agoInMs).humanize(true) + dateMoment.format(" (MM/DD/YY, h:mma)");
                });
            }

            return ko.computed(function () {
                return time;
            });
        };

        alerts.prototype.selectAlert = function (selection) {
            var index = this.allAlerts.indexOf(selection);
            this.selectedAlertIndex(index);
            this.selectedAlert(selection);

            var alertUrl = appUrl.forAlerts(this.activeDatabase()) + "&item=" + this.selectedAlertIndex();
            router.navigate(alertUrl, false);
        };

        alerts.prototype.tableKeyDown = function (sender, e) {
            var isKeyUp = e.keyCode === 38;
            var isKeyDown = e.keyCode === 40;
            if (isKeyUp || isKeyDown) {
                e.preventDefault();

                var oldSelection = this.selectedAlert();
                if (oldSelection) {
                    var oldSelectionIndex = this.allAlerts.indexOf(oldSelection);
                    var newSelectionIndex = oldSelectionIndex;
                    if (isKeyUp && oldSelectionIndex > 0) {
                        newSelectionIndex--;
                    } else if (isKeyDown && oldSelectionIndex < this.allAlerts().length - 1) {
                        newSelectionIndex++;
                    }

                    this.selectAlert(this.allAlerts()[newSelectionIndex]);
                    var newSelectedRow = $("#alertsContainer table tbody tr:nth-child(" + (newSelectionIndex + 1) + ")");
                    if (newSelectedRow) {
                        this.ensureRowVisible(newSelectedRow);
                    }
                }
            }
        };

        alerts.prototype.ensureRowVisible = function (row) {
            var table = $("#alertTableContainer");
            var scrollTop = table.scrollTop();
            var scrollBottom = scrollTop + table.height();
            var scrollHeight = scrollBottom - scrollTop;

            var rowPosition = row.position();
            var rowTop = rowPosition.top;
            var rowBottom = rowTop + row.height();

            if (rowTop < 0) {
                table.scrollTop(scrollTop + rowTop);
            } else if (rowBottom > scrollHeight) {
                table.scrollTop(scrollTop + (rowBottom - scrollHeight));
            }
        };

        alerts.prototype.setFilterAll = function () {
            this.filterLevel("All");
        };

        alerts.prototype.setFilterUnread = function () {
            this.filterLevel("Unread");
        };

        alerts.prototype.setFilterRead = function () {
            this.filterLevel("Read");
        };

        alerts.prototype.updateCurrentNowTime = function () {
            var _this = this;
            this.now(moment());
            this.updateNowTimeoutHandle = setTimeout(function () {
                return _this.updateCurrentNowTime();
            }, 60000);
        };

        alerts.prototype.toggleSelectedReadState = function () {
            var alert = this.selectedAlert();
            if (alert) {
                if (!alert.observed()) {
                    alert.lastDismissedAt = this.now().toISOString();
                }
                alert.observed(!alert.observed());
            }
        };

        alerts.prototype.deleteSelectedAlert = function () {
            var alert = this.selectedAlert();
            if (alert) {
                this.allAlerts.remove(alert);
            }
        };

        alerts.prototype.deleteReadAlerts = function () {
            this.allAlerts.remove(function (a) {
                return a.observed();
            });
        };

        alerts.prototype.deleteAllAlerts = function () {
            this.allAlerts.removeAll();
        };

        alerts.prototype.saveAlerts = function () {
            var alertDoc = this.alertDoc();
            var db = this.activeDatabase();
            if (alertDoc && db) {
                alertDoc.Alerts = this.allAlerts().map(function (a) {
                    return a.toDto();
                });
                new saveAlertsCommand(alertDoc, db).execute();
            }
        };
        return alerts;
    })(viewModelBase);

    
    return alerts;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/apiKeys", ["require", "exports", "commands/getApiKeysCommand", "models/apiKey", "viewmodels/viewModelBase", 'viewmodels/shell'], function(require, exports, getApiKeysCommand, apiKey, viewModelBase, shell) {
    var apiKeys = (function (_super) {
        __extends(apiKeys, _super);
        function apiKeys() {
            var _this = this;
            _super.call(this);
            this.apiKeys = ko.observableArray().extend({ required: true });
            this.loadedApiKeys = ko.observableArray().extend({ required: true });
            this.allDatabases = ko.observableArray();
            this.searchText = ko.observable();

            apiKeys.globalApiKeys = this.apiKeys;
            this.searchText.throttle(200).subscribe(function (value) {
                return _this.filterKeys(value);
            });

            var resourceNames = shell.databases().filter(function (db) {
                return db.name != "<system>";
            }).map(function (db) {
                return db.name;
            }).concat(shell.fileSystems().map(function (fs) {
                return fs.name;
            }));
            this.allDatabases(resourceNames);
        }
        apiKeys.prototype.canActivate = function (args) {
            var deffered = $.Deferred();
            this.fetchApiKeys().done(function () {
                return deffered.resolve({ can: true });
            });

            return deffered;
        };

        apiKeys.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.dirtyFlag = new ko.DirtyFlag([this.apiKeys]);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        apiKeys.prototype.compositionComplete = function () {
            _super.prototype.compositionComplete.call(this);
            $("form").on("keypress", 'input[name="databaseName"]', function (e) {
                return e.which != 13;
            });
        };

        apiKeys.prototype.fetchApiKeys = function () {
            var _this = this;
            return new getApiKeysCommand().execute().done(function (results) {
                _this.apiKeys(results);
                _this.saveLoadedApiKeys(results);
                apiKeys.globalApiKeys(results);
                _this.apiKeys().forEach(function (key) {
                    _this.subscribeToObservableKeyName(key);
                });
            });
        };

        apiKeys.prototype.saveLoadedApiKeys = function (apiKeys) {
            // clones the apiKeys object
            this.loadedApiKeys = ko.mapping.fromJS(ko.mapping.toJS(apiKeys));
        };

        apiKeys.prototype.subscribeToObservableKeyName = function (key) {
            var _this = this;
            key.name.subscribe(function (previousApiKeyName) {
                var existingApiKeysExceptCurrent = _this.apiKeys().filter(function (k) {
                    return k !== key && k.name() == previousApiKeyName;
                });
                if (existingApiKeysExceptCurrent.length == 1) {
                    existingApiKeysExceptCurrent[0].nameCustomValidity('');
                }
            }, this, "beforeChange");
            key.name.subscribe(function (newApiKeyName) {
                var errorMessage = '';
                var isApiKeyNameValid = newApiKeyName.indexOf("\\") == -1;
                var existingApiKeys = _this.apiKeys().filter(function (k) {
                    return k !== key && k.name() == newApiKeyName;
                });

                if (isApiKeyNameValid == false) {
                    errorMessage = "API Key name cannot contain '\\'";
                } else if (existingApiKeys.length > 0) {
                    errorMessage = "API key name already exists!";
                }

                key.nameCustomValidity(errorMessage);
            });
        };

        apiKeys.prototype.createNewApiKey = function () {
            var newApiKey = apiKey.empty();
            this.subscribeToObservableKeyName(newApiKey);
            newApiKey.generateSecret();
            this.apiKeys.unshift(newApiKey);
        };

        apiKeys.prototype.removeApiKey = function (key) {
            this.apiKeys.remove(key);
        };

        apiKeys.prototype.saveChanges = function () {
            var _this = this;
            this.apiKeys().forEach(function (key) {
                return key.setIdFromName();
            });

            var apiKeysNamesArray = this.apiKeys().map(function (key) {
                return key.name();
            });
            var deletedApiKeys = this.loadedApiKeys().filter(function (key) {
                return apiKeysNamesArray.contains(key.name()) == false;
            });
            deletedApiKeys.forEach(function (key) {
                return key.setIdFromName();
            });

            require(["commands/saveApiKeysCommand"], function (saveApiKeysCommand) {
                new saveApiKeysCommand(_this.apiKeys(), deletedApiKeys).execute().done(function (result) {
                    _this.updateKeys(result);
                    _this.saveLoadedApiKeys(_this.apiKeys());
                    _this.dirtyFlag().reset();
                });
            });
        };

        apiKeys.prototype.updateKeys = function (serverKeys) {
            this.apiKeys().forEach(function (key) {
                var serverKey = serverKeys.first(function (k) {
                    return k.Key === key.getId();
                });
                if (serverKey) {
                    key.__metadata.etag = serverKey.Etag;
                    key.__metadata.lastModified = serverKey.Metadata['Last-Modified'];
                }
            });
        };

        apiKeys.prototype.filterKeys = function (filter) {
            var filterLower = filter.toLowerCase().trim();
            this.apiKeys().forEach(function (k) {
                var isEmpty = filterLower.length === 0;
                var isMatch = k.name() != null && k.name().toLowerCase().indexOf(filterLower) !== -1;
                k.visible(isEmpty || isMatch);
            });
        };
        return apiKeys;
    })(viewModelBase);

    
    return apiKeys;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/backupDatabase", ["require", "exports", "viewmodels/viewModelBase", "viewmodels/shell"], function(require, exports, viewModelBase, shell) {
    var backupDatabase = (function (_super) {
        __extends(backupDatabase, _super);
        function backupDatabase() {
            var _this = this;
            _super.call(this);
            this.incremental = ko.observable(false);
            this.databaseName = ko.observable('');
            this.backupLocation = ko.observable('');
            this.backupStatusMessages = ko.observableArray();
            this.isBusy = ko.observable();

            this.databaseNames = ko.computed(function () {
                return shell.databases().map(function (db) {
                    return db.name;
                });
            });

            this.searchResults = ko.computed(function () {
                var newDatabaseName = _this.databaseName();
                return _this.databaseNames().filter(function (name) {
                    return name.toLowerCase().indexOf(newDatabaseName.toLowerCase()) > -1;
                });
            });

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newDatabaseName = _this.databaseName();
                var foundDb = shell.databases.first(function (db) {
                    return newDatabaseName == db.name;
                });

                if (!foundDb && newDatabaseName.length > 0) {
                    errorMessage = "Database name doesn't exist!";
                }

                return errorMessage;
            });
        }
        backupDatabase.prototype.canActivate = function (args) {
            return true;
        };

        backupDatabase.prototype.compositionComplete = function () {
            _super.prototype.compositionComplete.call(this);
            $('form :input[name="databaseName"]').on("keypress", function (e) {
                return e.which != 13;
            });
        };

        backupDatabase.prototype.startBackup = function () {
            var _this = this;
            this.isBusy(true);

            var updateBackupStatus = function (newBackupStatus) {
                _this.backupStatusMessages(newBackupStatus.Messages);
                _this.isBusy(!!newBackupStatus.IsRunning);
            };

            require(["commands/backupDatabaseCommand"], function (backupDatabaseCommand) {
                var dbToBackup = shell.databases.first(function (db) {
                    return db.name == _this.databaseName();
                });
                new backupDatabaseCommand(dbToBackup, _this.backupLocation(), updateBackupStatus, _this.incremental()).execute().always(function () {
                    return _this.isBusy(false);
                });
            });
        };
        return backupDatabase;
    })(viewModelBase);

    
    return backupDatabase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/compactDatabase", ["require", "exports", "viewmodels/viewModelBase", "viewmodels/shell"], function(require, exports, viewModelBase, shell) {
    var compactDatabase = (function (_super) {
        __extends(compactDatabase, _super);
        function compactDatabase() {
            var _this = this;
            _super.call(this);
            this.databaseName = ko.observable('');
            this.isBusy = ko.observable();

            this.databaseNames = ko.computed(function () {
                return shell.databases().map(function (db) {
                    return db.name;
                });
            });

            this.searchResults = ko.computed(function () {
                var newDatabaseName = _this.databaseName();
                return _this.databaseNames().filter(function (name) {
                    return name.toLowerCase().indexOf(newDatabaseName.toLowerCase()) > -1;
                });
            });

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newDatabaseName = _this.databaseName();
                var foundDb = shell.databases.first(function (db) {
                    return newDatabaseName == db.name;
                });

                if (!foundDb && newDatabaseName.length > 0) {
                    errorMessage = "Database name doesn't exist!";
                }

                return errorMessage;
            });
        }
        compactDatabase.prototype.canActivate = function (args) {
            return true;
        };

        compactDatabase.prototype.compositionComplete = function () {
            _super.prototype.compositionComplete.call(this);
            $('form :input[name="databaseName"]').on("keypress", function (e) {
                return e.which != 13;
            });
        };

        compactDatabase.prototype.startCompact = function () {
            var _this = this;
            this.isBusy(true);

            require(["commands/compactDatabaseCommand"], function (compactDatabaseCommand) {
                var dbToCompact = shell.databases.first(function (db) {
                    return db.name == _this.databaseName();
                });
                new compactDatabaseCommand(dbToCompact).execute().always(function () {
                    return _this.isBusy(false);
                });
            });
        };
        return compactDatabase;
    })(viewModelBase);

    
    return compactDatabase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/confirmationDialog", ["require", "exports", "viewmodels/dialogViewModelBase", "plugins/dialog"], function(require, exports, dialogViewModelBase, dialog) {
    /*
    * Generic confirmation dialog. We created this because Durandal's built-in
    * message box doesn't handle keyboard shortcuts like ESC and Enter.
    */
    var confirmationDialog = (function (_super) {
        __extends(confirmationDialog, _super);
        function confirmationDialog(confirmationMessage, title, options) {
            _super.call(this);
            this.confirmationMessage = confirmationMessage;
            this.title = title;
            this.options = options;
        }
        confirmationDialog.prototype.onOptionClicked = function (option) {
            dialog.close(this, option);
        };

        confirmationDialog.prototype.close = function () {
            dialog.close(this, null);
        };
        return confirmationDialog;
    })(dialogViewModelBase);

    
    return confirmationDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/conflicts", ["require", "exports", "plugins/router", "common/appUrl", "common/pagedList", "models/indexPriority", "models/transformer", "models/indexDefinition", "models/customColumns", 'models/customColumnParams', "commands/getConflictsCommand", "commands/getReplicationSourcesCommand", "commands/getIndexDefinitionCommand", "commands/getSingleTransformerCommand", "commands/saveIndexDefinitionCommand", "commands/saveTransformerCommand", "viewmodels/shell", "viewmodels/viewModelBase"], function(require, exports, router, appUrl, pagedList, indexPriority, transformer, indexDefinition, customColumns, customColumnParams, getConflictsCommand, getReplicationSourcesCommand, getIndexDefinitionCommand, getSingleTransformerCommand, saveIndexDefinitionCommand, saveTransformerCommand, shell, viewModelBase) {
    var conflicts = (function (_super) {
        __extends(conflicts, _super);
        function conflicts() {
            _super.apply(this, arguments);
            this.displayName = "conflicts";
            this.sourcesLookup = {};
            this.refreshConflictsObservable = ko.observable();
            this.currentColumns = ko.observable(customColumns.empty());
            this.currentConflictsPagedItems = ko.observable();
            this.selectedDocumentIndices = ko.observableArray();
        }
        conflicts.prototype.createNotifications = function () {
            var _this = this;
            return [
                shell.currentResourceChangesApi().watchAllReplicationConflicts(function (e) {
                    return _this.refreshConflictsObservable(new Date().getTime());
                })
            ];
        };

        conflicts.prototype.attached = function () {
            var _this = this;
            this.conflictsSubscription = this.refreshConflictsObservable.throttle(3000).subscribe(function (e) {
                return _this.fetchConflicts(_this.activeDatabase());
            });
        };

        conflicts.prototype.detached = function () {
            _super.prototype.detached.call(this);

            if (this.conflictsSubscription != null) {
                this.conflictsSubscription.dispose();
            }
        };

        conflicts.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);
            this.activeDatabase.subscribe(function (db) {
                return _this.databaseChanged(db);
            });

            this.currentColumns().columns([
                new customColumnParams({ Header: "Detected At (UTC)", Binding: "conflictDetectedAt", DefaultWidth: 300 }),
                new customColumnParams({ Header: "Versions", Binding: "versions", DefaultWidth: 400, Template: 'versions-template' })
            ]);
            this.currentColumns().customMode(true);

            return this.performIndexCheck(this.activeDatabase()).then(function () {
                return _this.loadReplicationSources(_this.activeDatabase());
            }).done(function () {
                _this.fetchConflicts(appUrl.getDatabase());
            });
        };

        conflicts.prototype.fetchConflicts = function (database) {
            this.currentConflictsPagedItems(this.createPagedList(database));
        };

        conflicts.prototype.loadReplicationSources = function (db) {
            var _this = this;
            return new getReplicationSourcesCommand(db).execute().done(function (results) {
                return _this.replicationSourcesLoaded(results, db);
            });
        };

        conflicts.prototype.performIndexCheck = function (db) {
            // first look in cache
            if (conflicts.performedIndexChecks.contains(db.name)) {
                return $.Deferred().resolve();
            }

            var performCheckTask = $.Deferred();

            // perform index check against DB
            $.when(new getIndexDefinitionCommand(conflicts.conflictsIndexName, db).execute(), new getSingleTransformerCommand(conflicts.conflictsTransformerName, db).execute()).done(function () {
                conflicts.performedIndexChecks.push(db.name);
                performCheckTask.resolve();
            }).fail(function () {
                //TODO: we should check exact result of getIndex/Transfomer commands (if it contains 404)
                var indexTask = new saveIndexDefinitionCommand(conflicts.getConflictsIndexDefinition(), 0 /* normal */, db).execute();
                var transformerTask = new saveTransformerCommand(conflicts.getConflictsTransformerDefinition(), db).execute();

                $.when(indexTask, transformerTask).done(function () {
                    conflicts.performedIndexChecks.push(db.name);
                    performCheckTask.resolve();
                }).fail(function () {
                    return performCheckTask.reject();
                });
            });

            return performCheckTask;
        };

        conflicts.getConflictsIndexDefinition = function () {
            var indexDef = indexDefinition.empty();
            indexDef.name(conflicts.conflictsIndexName);
            indexDef.maps()[0]("from doc in docs \r\n" + " let id = doc[\"@metadata\"][\"@id\"] \r\n" + " where doc[\"@metadata\"][\"Raven-Replication-Conflict\"] == true && (id.Length < 47 || !id.Substring(id.Length - 47).StartsWith(\"/conflicts/\", StringComparison.OrdinalIgnoreCase)) \r\n" + " select new { ConflictDetectedAt = (DateTime)doc[\"@metadata\"][\"Last-Modified\"] }");

            return indexDef.toDto();
        };
        conflicts.getConflictsTransformerDefinition = function () {
            var transDef = transformer.empty();
            transDef.name(conflicts.conflictsTransformerName);
            transDef.transformResults("from result in results \r\n" + "                select new {  \r\n" + "                    Id = result[\"__document_id\"], \r\n" + "                    ConflictDetectedAt = result[\"@metadata\"].Value<DateTime>(\"Last-Modified\"),  \r\n" + "                    EntityName = result[\"@metadata\"][\"Raven-Entity-Name\"], \r\n" + "                    Versions = result.Conflicts.Select(versionId => { \r\n" + "                        var version = LoadDocument(versionId); \r\n" + "                 return new { Id = versionId, SourceId = version[\"@metadata\"][\"Raven-Replication-Source\"] }; \r\n" + "             }) \r\n" + "         }\r\n");
            return transDef;
        };

        conflicts.prototype.replicationSourcesLoaded = function (sources, db) {
            this.sourcesLookup = sources;
        };

        conflicts.prototype.databaseChanged = function (db) {
            var _this = this;
            var conflictsUrl = appUrl.forConflicts(db);
            router.navigate(conflictsUrl, false);
            this.performIndexCheck(db).then(function () {
                return _this.loadReplicationSources(db);
            }).done(function () {
                _this.fetchConflicts(db);
            });
        };

        conflicts.prototype.createPagedList = function (database) {
            var fetcher = function (skip, take) {
                return new getConflictsCommand(database, skip, take).execute();
            };
            return new pagedList(fetcher);
        };

        conflicts.prototype.getUrlForConflict = function (conflictVersion) {
            return appUrl.forEditDoc(conflictVersion.id, null, 0, this.activeDatabase());
        };

        conflicts.prototype.getTextForVersion = function (conflictVersion) {
            var replicationSource = this.sourcesLookup[conflictVersion.sourceId];
            var text = "";
            if (replicationSource) {
                text = " (" + replicationSource + ")";
            }
            return text;
        };

        conflicts.prototype.getServerUrlForVersion = function (conflictVersion) {
            return this.sourcesLookup[conflictVersion.sourceId] || "";
        };
        conflicts.performedIndexChecks = [];
        conflicts.conflictsIndexName = "Raven/ConflictDocuments";
        conflicts.conflictsTransformerName = "Raven/ConflictDocumentsTransformer";

        conflicts.gridSelector = "#conflictsGrid";
        return conflicts;
    })(viewModelBase);

    
    return conflicts;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/copyDocuments", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var copyDocuments = (function (_super) {
        __extends(copyDocuments, _super);
        function copyDocuments(documents, elementToFocusOnDismissal) {
            var _this = this;
            _super.call(this, elementToFocusOnDismissal);
            this.isCopyingDocs = ko.observable(true);

            this.documentsOrIdsText = ko.computed(function () {
                var prettifySpacing = 4;
                if (_this.isCopyingDocs()) {
                    return documents.map(function (d) {
                        return d.getId() + "\r\n" + JSON.stringify(d.toDto(false), null, prettifySpacing);
                    }).join("\r\n\r\n");
                } else {
                    return documents.map(function (d) {
                        return d.getId();
                    }).join(", ");
                }
            });
        }
        copyDocuments.prototype.attached = function () {
            var _this = this;
            _super.prototype.attached.call(this);
            this.registerResizing("copyDocumentsResize");
            this.selectText();

            jwerty.key("CTRL+C, enter", function (e) {
                e.preventDefault();
                _this.close();
            }, this, "#documentsText");
        };

        copyDocuments.prototype.deactivate = function () {
            $("#documentsText").unbind('keydown.jwerty');
        };

        copyDocuments.prototype.selectText = function () {
            $("#documentsText").select();
        };

        copyDocuments.prototype.close = function () {
            dialog.close(this);
        };

        copyDocuments.prototype.detached = function () {
            _super.prototype.detached.call(this);
            this.unregisterResizing("copyDocumentsResize");
        };

        copyDocuments.prototype.activateDocs = function () {
            this.isCopyingDocs(true);
            this.selectText();
        };

        copyDocuments.prototype.activateIds = function () {
            this.isCopyingDocs(false);
            this.selectText();
        };
        return copyDocuments;
    })(dialogViewModelBase);

    
    return copyDocuments;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/copyIndexDialog", ["require", "exports", "models/indexDefinition", "plugins/dialog", "viewmodels/dialogViewModelBase", "commands/getIndexDefinitionCommand", "commands/saveIndexDefinitionCommand", "plugins/router", "common/appUrl", "models/indexPriority", "common/messagePublisher", "common/aceEditorBindingHandler"], function(require, exports, indexDefinition, dialog, dialogViewModelBase, getIndexDefinitionCommand, saveIndexDefinitionCommand, router, appUrl, indexPriority, messagePublisher, aceEditorBindingHandler) {
    var copyIndexDialog = (function (_super) {
        __extends(copyIndexDialog, _super);
        function copyIndexDialog(indexName, db, isPaste, elementToFocusOnDismissal) {
            if (typeof isPaste === "undefined") { isPaste = false; }
            _super.call(this, elementToFocusOnDismissal);
            this.indexName = indexName;
            this.db = db;
            this.isPaste = isPaste;
            this.indexJSON = ko.observable("");
            aceEditorBindingHandler.install();
        }
        copyIndexDialog.prototype.canActivate = function (args) {
            var _this = this;
            if (this.isPaste) {
                return true;
            } else {
                var canActivateResult = $.Deferred();
                new getIndexDefinitionCommand(this.indexName, this.db).execute().done(function (results) {
                    var prettifySpacing = 4;
                    var jsonString = JSON.stringify(new indexDefinition(results.Index).toDto(), null, prettifySpacing);
                    _this.indexJSON(jsonString);
                    canActivateResult.resolve({ can: true });
                }).fail(function () {
                    return canActivateResult.reject();
                });
                canActivateResult.resolve({ can: true });
                return canActivateResult;
            }
        };

        copyIndexDialog.prototype.setInitialFocus = function () {
            // Overrides the base class' setInitialFocus and does nothing.
            // Doing nothing because we will focus the Ace Editor when it's initialized.
        };

        copyIndexDialog.prototype.enterKeyPressed = function () {
            // Overrides the base class' enterKeyPressed. Because the user might
            // edit the JSON, or even type some in manually, enter might really mean new line, not Save changes.
            if (!this.isPaste) {
                return _super.prototype.enterKeyPressed.call(this);
            }

            return true;
        };

        copyIndexDialog.prototype.saveIndex = function () {
            var _this = this;
            if (this.isPaste === true && !!this.indexJSON()) {
                var indexDto;

                try  {
                    indexDto = JSON.parse(this.indexJSON());
                    var testIndex = new indexDefinition(indexDto);
                } catch (e) {
                    indexDto = null;
                    messagePublisher.reportError("Index paste failed, invalid json string", e);
                }

                if (indexDto) {
                    new getIndexDefinitionCommand(indexDto.Name, this.db).execute().fail(function (request, status, error) {
                        if (request.status === 404) {
                            new saveIndexDefinitionCommand(indexDto, 0 /* normal */, _this.db).execute().done(function () {
                                router.navigate(appUrl.forEditIndex(indexDto.Name, _this.db));
                                _this.close();
                            });
                        } else {
                            messagePublisher.reportError("Cannot paste index, error occured!", error);
                        }
                    }).done(function () {
                        return messagePublisher.reportError("Cannot paste index, error occured!", "Index with that name already exists!");
                    });
                }
            } else {
                this.close();
            }
        };

        copyIndexDialog.prototype.close = function () {
            dialog.close(this);
        };
        return copyIndexDialog;
    })(dialogViewModelBase);

    
    return copyIndexDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/copyTransformerDialog", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "models/transformer", "commands/getSingleTransformerCommand", "commands/saveTransformerCommand", "plugins/router", "common/appUrl", "common/messagePublisher", "common/aceEditorBindingHandler"], function(require, exports, dialog, dialogViewModelBase, transformer, getSingleTransformerCommand, saveTransformerCommand, router, appUrl, messagePublisher, aceEditorBindingHandler) {
    var copyTransformerDialog = (function (_super) {
        __extends(copyTransformerDialog, _super);
        function copyTransformerDialog(transformerName, db, isPaste, elementToFocusOnDismissal) {
            if (typeof isPaste === "undefined") { isPaste = false; }
            _super.call(this, elementToFocusOnDismissal);
            this.transformerName = transformerName;
            this.db = db;
            this.isPaste = isPaste;
            this.transformerJSON = ko.observable("");
            aceEditorBindingHandler.install();
        }
        copyTransformerDialog.prototype.canActivate = function (args) {
            var _this = this;
            if (this.isPaste) {
                return true;
            } else {
                var canActivateResult = $.Deferred();
                new getSingleTransformerCommand(this.transformerName, this.db).execute().done(function (results) {
                    var prettifySpacing = 4;
                    var jsonString = JSON.stringify(results, null, prettifySpacing);
                    _this.transformerJSON(jsonString);
                    canActivateResult.resolve({ can: true });
                }).fail(function () {
                    return canActivateResult.reject();
                });
                canActivateResult.resolve({ can: true });
                return canActivateResult;
            }
        };

        copyTransformerDialog.prototype.setInitialFocus = function () {
            // Overrides the base class' setInitialFocus and does nothing.
            // Doing nothing because we will focus the Ace Editor when it's initialized.
        };

        copyTransformerDialog.prototype.enterKeyPressed = function () {
            // Overrides the base class' enterKeyPressed. Because the user might
            // edit the JSON, or even type some in manually, enter might really mean new line, not Save changes.
            if (!this.isPaste) {
                return _super.prototype.enterKeyPressed.call(this);
            }

            return true;
        };

        copyTransformerDialog.prototype.saveTransformer = function () {
            var _this = this;
            var transformerJson = this.transformerJSON();
            if (!this.isPaste) {
                this.close();
                return;
            }

            if (this.isPaste === true && !!transformerJson) {
                var transformerDto;
                var transformerObj;

                try  {
                    transformerDto = JSON.parse(transformerJson);
                    transformerObj = new transformer().initFromSave(transformerDto);
                } catch (e) {
                    transformerDto = null;
                    transformerObj = null;
                    messagePublisher.reportError("Transformer paste failed, invalid JSON.", e);
                }

                // Verify there's not a transformer with this name.
                new getSingleTransformerCommand(transformerDto.Transformer.Name, this.db).execute().done(function () {
                    return messagePublisher.reportError("Duplicate transformer name. Change the name and try again.");
                }).fail(function (xhr, status, error) {
                    if (xhr.status === 404) {
                        // Good. No existing transformer with this name. We can proceed saving it.
                        new saveTransformerCommand(transformerObj, _this.db).execute().done(function () {
                            router.navigate(appUrl.forEditTransformer(transformerObj.name(), _this.db));
                            _this.close();
                        });
                    } else {
                        // Some other error occurred while checking for duplicate transformer. Error out.
                        messagePublisher.reportError("Cannot paste transformer, error occured.", error);
                    }
                });
            }
        };

        copyTransformerDialog.prototype.close = function () {
            dialog.close(this);
        };
        return copyTransformerDialog;
    })(dialogViewModelBase);

    
    return copyTransformerDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/createDatabase", ["require", "exports", "plugins/dialog", "viewmodels/viewModelBase"], function(require, exports, dialog, viewModelBase) {
    var createDatabase = (function (_super) {
        __extends(createDatabase, _super);
        function createDatabase(databases, licenseStatus, parent) {
            var _this = this;
            _super.call(this);
            this.databases = databases;
            this.licenseStatus = licenseStatus;
            this.parent = parent;
            this.creationTask = $.Deferred();
            this.creationTaskStarted = false;
            this.databaseName = ko.observable('');
            this.databasePath = ko.observable('');
            this.databaseLogsPath = ko.observable('');
            this.databaseIndexesPath = ko.observable('');
            this.databaseNameFocus = ko.observable(true);
            this.storageEngine = ko.observable('');
            this.maxNameLength = 200;
            this.isCompressionBundleEnabled = ko.observable(false);
            this.isEncryptionBundleEnabled = ko.observable(false);
            this.isExpirationBundleEnabled = ko.observable(false);
            this.isQuotasBundleEnabled = ko.observable(false);
            this.isReplicationBundleEnabled = ko.observable(false);
            this.isSqlReplicationBundleEnabled = ko.observable(false);
            this.isVersioningBundleEnabled = ko.observable(false);
            this.isPeriodicExportBundleEnabled = ko.observable(false);
            this.isScriptedIndexBundleEnabled = ko.observable(false);
            this.isIncrementalBackupChecked = ko.observable(false);
            this.alertTimeout = ko.observable("");
            this.alertRecurringTimeout = ko.observable("");

            this.licenseStatus = licenseStatus;
            if (!!this.licenseStatus() && this.licenseStatus().IsCommercial && this.licenseStatus().Attributes.periodicBackup !== "true") {
                this.isPeriodicExportBundleEnabled(false);
            }

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newDatabaseName = _this.databaseName();

                if (_this.isDatabaseNameExists(newDatabaseName, _this.databases()) == true) {
                    errorMessage = "Database name already exists!";
                } else if ((errorMessage = _this.checkName(newDatabaseName)) != '') {
                }

                return errorMessage;
            });

            this.pathCustomValidityError = ko.computed(function () {
                var newPath = _this.databasePath();
                var errorMessage = _this.isPathLegal(newPath, "Path");
                return errorMessage;
            });

            this.logsCustomValidityError = ko.computed(function () {
                var newPath = _this.databaseLogsPath();
                var errorMessage = _this.isPathLegal(newPath, "Logs");
                return errorMessage;
            });

            this.indexesCustomValidityError = ko.computed(function () {
                var newPath = _this.databaseIndexesPath();
                var errorMessage = _this.isPathLegal(newPath, "Indexes");
                return errorMessage;
            });
        }
        createDatabase.prototype.attached = function () {
            this.databaseNameFocus(true);
        };

        createDatabase.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.creationTaskStarted) {
                this.creationTask.reject();
            }
        };

        createDatabase.prototype.isBundleActive = function (name) {
            var licenseStatus = this.licenseStatus();

            if (licenseStatus == null || licenseStatus.IsCommercial == false) {
                return true;
            } else {
                var value = licenseStatus.Attributes[name];
                return value === "true";
            }
        };

        createDatabase.prototype.nextOrCreate = function () {
            // Next needs to configure bundle settings, if we've selected some bundles.
            // We haven't yet implemented bundle configuration, so for now we're just
            // creating the database.
            this.creationTaskStarted = true;
            dialog.close(this.parent);
            this.creationTask.resolve(this.databaseName(), this.getActiveBundles(), this.databasePath(), this.databaseLogsPath(), this.databaseIndexesPath(), this.storageEngine(), this.isIncrementalBackupChecked(), this.alertTimeout(), this.alertRecurringTimeout());
        };

        createDatabase.prototype.isDatabaseNameExists = function (databaseName, databases) {
            databaseName = databaseName.toLowerCase();
            for (var i = 0; i < databases.length; i++) {
                if (databaseName == databases[i].name.toLowerCase()) {
                    return true;
                }
            }
            return false;
        };

        createDatabase.prototype.checkName = function (name) {
            var rg1 = /^[^\\/\*:\?"<>\|]+$/;
            var rg2 = /^\./;
            var rg3 = /^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i;

            var message = "";
            if (!$.trim(name)) {
                message = "Please fill out the database name field!";
            } else if (name.length > this.maxNameLength) {
                message = "The database name length can't exceed " + this.maxNameLength + " characters!";
            } else if (!rg1.test(name)) {
                message = "The database name can't contain any of the following characters: \ / * : ?" + ' " ' + "< > |";
            } else if (rg2.test(name)) {
                message = "The database name can't start with a dot!";
            } else if (rg3.test(name)) {
                message = "The name '" + name + "' is forbidden for use!";
            } else if (name[name.length - 1] == ".") {
                message = "The database name can't end with a dot!";
            } else if (name.toLocaleLowerCase() == "system") {
                message = "This name is reserved for the actual system database!";
            }
            return message;
        };

        createDatabase.prototype.isPathLegal = function (name, pathName) {
            var rg1 = /^[^*\?"<>\|]+$/;
            var rg2 = /^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i;
            var errorMessage = "";

            if (!$.trim(name) == false) {
                if (name.length > 248) {
                    errorMessage = "The path name for the '" + pathName + "' can't exceed " + 248 + " characters!";
                } else if (!rg1.test(name)) {
                    errorMessage = "The " + pathName + " can't contain any of the following characters: * : ?" + ' " ' + "< > |";
                } else if (rg2.test(name)) {
                    errorMessage = "The name '" + name + "' is forbidden for use!";
                }
            }
            return errorMessage;
        };

        createDatabase.prototype.toggleCompressionBundle = function () {
            this.isCompressionBundleEnabled.toggle();
        };

        createDatabase.prototype.toggleEncryptionBundle = function () {
            this.isEncryptionBundleEnabled.toggle();
        };

        createDatabase.prototype.toggleExpirationBundle = function () {
            this.isExpirationBundleEnabled.toggle();
        };

        createDatabase.prototype.toggleQuotasBundle = function () {
            this.isQuotasBundleEnabled.toggle();
        };

        createDatabase.prototype.toggleReplicationBundle = function () {
            this.isReplicationBundleEnabled.toggle();
        };

        createDatabase.prototype.toggleSqlReplicationBundle = function () {
            this.isSqlReplicationBundleEnabled.toggle();
        };

        createDatabase.prototype.toggleVersioningBundle = function () {
            this.isVersioningBundleEnabled.toggle();
        };

        createDatabase.prototype.togglePeriodicExportBundle = function () {
            this.isPeriodicExportBundleEnabled.toggle();
        };

        createDatabase.prototype.toggleScriptedIndexBundle = function () {
            this.isScriptedIndexBundleEnabled.toggle();
        };

        createDatabase.prototype.getActiveBundles = function () {
            var activeBundles = [];
            if (this.isCompressionBundleEnabled()) {
                activeBundles.push("Compression");
            }

            if (this.isEncryptionBundleEnabled()) {
                activeBundles.push("Encryption");
            }

            if (this.isExpirationBundleEnabled()) {
                activeBundles.push("DocumentExpiration");
            }

            if (this.isQuotasBundleEnabled()) {
                activeBundles.push("Quotas");
            }

            if (this.isReplicationBundleEnabled()) {
                activeBundles.push("Replication"); // TODO: Replication also needs to store 2 documents containing information about replication. See http://ravendb.net/docs/2.5/server/scaling-out/replication?version=2.5
            }

            if (this.isSqlReplicationBundleEnabled()) {
                activeBundles.push("SqlReplication");
            }

            if (this.isVersioningBundleEnabled()) {
                activeBundles.push("Versioning");
            }

            if (this.isPeriodicExportBundleEnabled()) {
                activeBundles.push("PeriodicExport");
            }

            if (this.isScriptedIndexBundleEnabled()) {
                activeBundles.push("ScriptedIndexResults");
            }

            return activeBundles;
        };
        return createDatabase;
    })(viewModelBase);

    
    return createDatabase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/createEncryption", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "commands/getNewEncryptionKey", "commands/checkEncryptionKey"], function(require, exports, dialog, dialogViewModelBase, getNewEncryptionKey, checkEncryptionKey) {
    var createEncryption = (function (_super) {
        __extends(createEncryption, _super);
        function createEncryption() {
            var _this = this;
            _super.call(this);
            this.creationEncryption = $.Deferred();
            this.creationEncryptionStarted = false;
            this.key = ko.observable();
            this.encryptionAlgorithm = ko.observable('Rijndael');
            this.encryptionBits = ko.observable(256);
            this.isEncryptedIndexes = ko.observable(true);
            this.base64Matcher = new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$");

            this.newEncryptionKey = new getNewEncryptionKey();
            this.newEncryptionKey.execute().done(function (result) {
                _this.key(result);
            });
        }
        createEncryption.prototype.attached = function () {
            var _this = this;
            this.dialogSelectorName = "#CreateEncriptionDialog";
            _super.prototype.attached.call(this);
            var inputElement = $("#key")[0];
            this.key.subscribe(function (newKey) {
                if (!_this.base64Matcher.test(newKey.toString())) {
                    inputElement.setCustomValidity("The key must be in Base64 encoding format!");
                } else {
                    inputElement.setCustomValidity('');
                }
            });
        };

        createEncryption.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.creationEncryptionStarted) {
                this.creationEncryption.reject();
            }
        };

        createEncryption.prototype.cancel = function () {
            dialog.close(this);
        };

        createEncryption.prototype.refresh_encryption = function () {
            var _this = this;
            this.newEncryptionKey.execute().done(function (result) {
                _this.key(result);
            });
        };

        createEncryption.prototype.save = function () {
            var _this = this;
            var key = this.key();

            var checkEncryption = new checkEncryptionKey(key);
            checkEncryption.execute().done(function () {
                _this.creationEncryption.resolve(key, _this.encryptionAlgorithm(), _this.encryptionBits(), _this.isEncryptedIndexes());
                _this.creationEncryptionStarted = true;
                dialog.close(_this);
            });
        };
        return createEncryption;
    })(dialogViewModelBase);

    
    return createEncryption;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/createEncryptionConfirmation", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var createEncryptionConfirmation = (function (_super) {
        __extends(createEncryptionConfirmation, _super);
        function createEncryptionConfirmation(savedKey) {
            _super.call(this);
            this.dialogPromise = $.Deferred();
            this.key = ko.observable();
            this.key(savedKey);
        }
        createEncryptionConfirmation.prototype.cancel = function () {
            dialog.close(this);
        };

        createEncryptionConfirmation.prototype.ok = function () {
            dialog.close(this);
        };

        createEncryptionConfirmation.prototype.deactivate = function () {
            this.dialogPromise.resolve();
        };

        createEncryptionConfirmation.prototype.clickKey = function () {
            $('#key').select();
        };
        return createEncryptionConfirmation;
    })(dialogViewModelBase);

    
    return createEncryptionConfirmation;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/createResource", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "viewmodels/createDatabase", "viewmodels/filesystem/createFilesystem"], function(require, exports, dialog, dialogViewModelBase, createDatabase, createFilesystem) {
    var createResource = (function (_super) {
        __extends(createResource, _super);
        function createResource(databases, filesystems, licenseStatus) {
            var _this = this;
            _super.call(this);
            this.resourceType = ko.observable('db');
            this.createDatabasePart = new createDatabase(databases, licenseStatus, this);
            this.createFilesystemPart = new createFilesystem(filesystems, this);
            this.resourceType.subscribe(function (v) {
                return v == "db" ? _this.enableDbTab() : _this.enableFsTab();
            });
        }
        createResource.prototype.compositionComplete = function () {
            this.enableDbTab();
        };

        createResource.prototype.enableDbTab = function () {
            this.alterFormControls("#dbContainer", false);
            this.alterFormControls("#fsContainer", true);
        };

        createResource.prototype.enableFsTab = function () {
            this.alterFormControls("#dbContainer", true);
            this.alterFormControls("#fsContainer", false);
        };

        createResource.prototype.alterFormControls = function (formSelector, disabled) {
            $(formSelector + " input").prop('disabled', disabled);
            $(formSelector + " select").prop('disabled', disabled);
        };

        createResource.prototype.cancel = function () {
            dialog.close(this);
        };

        createResource.prototype.nextOrCreate = function () {
            if (this.resourceType() == 'db') {
                this.createDatabasePart.nextOrCreate();
            } else {
                this.createFilesystemPart.nextOrCreate();
            }
        };
        return createResource;
    })(dialogViewModelBase);

    
    return createResource;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/createSampleData", ["require", "exports", "viewmodels/viewModelBase", "durandal/app"], function(require, exports, viewModelBase, app) {
    var createSampleData = (function (_super) {
        __extends(createSampleData, _super);
        function createSampleData() {
            _super.apply(this, arguments);
            this.isBusy = ko.observable(false);
            this.isEnable = ko.observable(true);
            this.isVisible = ko.observable(false);
            this.classData = ko.observable();
        }
        createSampleData.prototype.generateSampleData = function () {
            var _this = this;
            this.isBusy(true);

            require(["commands/createSampleDataCommand"], function (createSampleDataCommand) {
                new createSampleDataCommand(_this.activeDatabase()).execute().always(function () {
                    return _this.isBusy(false);
                });
            });
        };

        createSampleData.prototype.showSampleDataClass = function () {
            var _this = this;
            require(["commands/createSampleDataClassCommand"], function (createSampleDataClassCommand) {
                new createSampleDataClassCommand(_this.activeDatabase()).execute().done(function (results) {
                    _this.isVisible(true);
                    var data = results.replace("\r\n", "");

                    require(["viewmodels/showDataDialog"], function (showDataDialog) {
                        app.showDialog(new showDataDialog("Sample Data Classes", data));
                    });
                }).always(function () {
                    return _this.isBusy(false);
                });
            });
        };
        return createSampleData;
    })(viewModelBase);

    
    return createSampleData;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/csvImport", ["require", "exports", "viewmodels/viewModelBase", "commands/saveCsvFileCommand"], function(require, exports, viewmodelBase, saveCsvFileCommand) {
    var csvImport = (function (_super) {
        __extends(csvImport, _super);
        function csvImport() {
            _super.apply(this, arguments);
            this.hasFileSelected = ko.observable(false);
            this.isImporting = ko.observable(false);
        }
        csvImport.prototype.fileSelected = function (args) {
            this.hasFileSelected(true);
        };

        csvImport.prototype.importCsv = function () {
            var _this = this;
            if (!this.isImporting()) {
                this.isImporting(true);

                var formData = new FormData();
                var fileInput = document.querySelector("#csvFilePicker");
                formData.append("file", fileInput.files[0]);

                new saveCsvFileCommand(formData, fileInput.files[0].name, this.activeDatabase()).execute().always(function () {
                    return _this.isImporting(false);
                });
            }
        };
        return csvImport;
    })(viewmodelBase);

    
    return csvImport;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/customFunctionsEditor", ["require", "exports", "common/aceEditorBindingHandler", 'viewmodels/viewModelBase', "commands/getCustomFunctionsCommand", "commands/saveCustomFunctionsCommand", "models/customFunctions", "common/jsonUtil", "common/messagePublisher"], function(require, exports, aceEditorBindingHandler, viewModelBase, getCustomFunctionsCommand, saveCustomFunctionsCommand, customFunctions, jsonUtil, messagePublisher) {
    var customFunctionsEditor = (function (_super) {
        __extends(customFunctionsEditor, _super);
        function customFunctionsEditor() {
            var _this = this;
            _super.call(this);
            aceEditorBindingHandler.install();
            this.documentText = ko.observable("");
            this.fetchCustomFunctions();

            this.dirtyFlag = new ko.DirtyFlag([this.documentText], false, jsonUtil.newLineNormalizingHashFunction);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        }
        customFunctionsEditor.prototype.attached = function () {
            $("#customFunctionsExample").popover({
                html: true,
                trigger: 'hover',
                content: 'Examples:<pre>exports.greet = <span class="code-keyword">function</span>(name) {<br/>    <span class="code-keyword">return</span> <span class="code-string">"Hello " + name + "!"</span>;<br/>}</pre>'
            });
        };

        customFunctionsEditor.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            var editorElement = $(".custom-functions-form .editor");
            if (editorElement.length > 0) {
                this.docEditor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }

            $("#customFunctionsEditor").on('DynamicHeightSet', function () {
                return _this.docEditor.resize();
            });
            this.fetchCustomFunctions();
        };

        customFunctionsEditor.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#customFunctionsEditor").off('DynamicHeightSet');
        };

        customFunctionsEditor.prototype.fetchCustomFunctions = function () {
            var _this = this;
            var fetchTask = new getCustomFunctionsCommand(this.activeDatabase()).execute();
            fetchTask.done(function (cf) {
                _this.documentText(cf.functions);
                _this.dirtyFlag().reset();
            });
        };

        customFunctionsEditor.prototype.saveChanges = function () {
            var _this = this;
            var annotations = this.docEditor.getSession().getAnnotations();
            var hasErrors = false;
            for (var i = 0; i < annotations.length; i++) {
                if (annotations[i].type === "error") {
                    hasErrors = true;
                    break;
                }
            }

            if (!hasErrors) {
                var cf = new customFunctions({
                    Functions: this.documentText()
                });
                var saveTask = new saveCustomFunctionsCommand(this.activeDatabase(), cf).execute();
                saveTask.done(function () {
                    return _this.dirtyFlag().reset();
                });
            } else {
                messagePublisher.reportError("Errors in the functions file", "Please correct the errors in the file in order to save it.");
            }
        };
        return customFunctionsEditor;
    })(viewModelBase);

    
    return customFunctionsEditor;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/databaseSettings", ["require", "exports", "durandal/app", "common/appUrl", "common/aceEditorBindingHandler", "commands/getDatabaseSettingsCommand", "commands/saveDatabaseSettingsCommand", "models/document", "common/jsonUtil", "viewmodels/viewModelBase", "viewmodels/viewSystemDatabaseConfirm", "common/messagePublisher"], function(require, exports, app, appUrl, aceEditorBindingHandler, getDatabaseSettingsCommand, saveDatabaseSettingsCommand, document, jsonUtil, viewModelBase, viewSystemDatabaseConfirm, messagePublisher) {
    var databaseSettings = (function (_super) {
        __extends(databaseSettings, _super);
        function databaseSettings() {
            var _this = this;
            _super.call(this);
            this.document = ko.observable();
            this.documentText = ko.observable().extend({ required: true });
            this.metadataText = ko.observable("{}").extend({ required: true });
            this.isEditingEnabled = ko.observable(false);
            this.isEditingMetadata = ko.observable(false);
            aceEditorBindingHandler.install();
            this.document.subscribe(function (doc) {
                if (doc) {
                    var docDto = doc.toDto();
                    _this.securedSettings = ko.toJSON(docDto.SecuredSettings);
                    var docText = _this.stringify(doc.toDto());
                    _this.documentText(docText);
                }
            });
            this.isEditingMetadata.subscribe(function () {
                if (_this.docEditor) {
                    var text = _this.isEditingMetadata() ? _this.metadataText() : _this.documentText();
                    _this.docEditor.getSession().setValue(text);
                }
            });
            this.text = ko.computed({
                read: function () {
                    return _this.isEditingMetadata() ? _this.metadataText() : _this.documentText();
                },
                write: function (text) {
                    var currentObservable = _this.isEditingMetadata() ? _this.metadataText : _this.documentText;
                    currentObservable(text);
                },
                owner: this
            });
        }
        databaseSettings.prototype.canActivate = function (args) {
            _super.prototype.canActivate.call(this, args);
            var deferred = $.Deferred();
            var db = this.activeDatabase();
            this.fetchDatabaseSettings(db).done(function () {
                deferred.resolve({ can: true });
            }).fail(function () {
                return deferred.resolve({ redirect: appUrl.forStatus(db) });
            });
            return deferred;
        };

        databaseSettings.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.dirtyFlag = new ko.DirtyFlag([this.documentText, this.metadataText], false, jsonUtil.newLineNormalizingHashFunction);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        databaseSettings.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            var editorElement = $("#dbDocEditor");
            if (editorElement.length > 0) {
                this.docEditor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }
            $("#dbDocEditor").on('DynamicHeightSet', function () {
                return _this.docEditor.resize();
            });
        };

        databaseSettings.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#dbDocEditor").off('DynamicHeightSet');
        };

        databaseSettings.prototype.editDatabaseSettings = function () {
            var _this = this;
            var editDbConfirm = new viewSystemDatabaseConfirm("Meddling with the database settings document could cause irreversible damage!");
            editDbConfirm.viewTask.done(function () {
                _this.docEditor.setReadOnly(false);
                _this.docEditor.focus();
                _this.isEditingEnabled(true);
            });
            app.showDialog(editDbConfirm);
        };

        databaseSettings.prototype.refreshFromServer = function () {
            var _this = this;
            var canContinue = this.canContinueIfNotDirty('Unsaved Data', 'You have unsaved data. Are you sure you want to refresh the data from the server?');
            canContinue.done(function () {
                _this.fetchDatabaseSettings(_this.activeDatabase(), true).done(function () {
                    _this.metadataText("{}");
                    _this.docEditor.setReadOnly(true);
                    _this.isEditingEnabled(false);
                    _this.activateDoc();
                    _this.dirtyFlag().reset(); //Resync Changes
                });
            });
        };

        databaseSettings.prototype.formatDocument = function () {
            var text = this.isEditingMetadata() ? this.metadataText() : this.documentText();
            var observableToUpdate = this.isEditingMetadata() ? this.metadataText : this.documentText;
            try  {
                var tempDoc = JSON.parse(text);
                var formatted = this.stringify(tempDoc);
                observableToUpdate(formatted);
            } catch (e) {
            }
        };

        databaseSettings.prototype.activateMeta = function () {
            this.isEditingMetadata(true);
        };

        databaseSettings.prototype.activateDoc = function () {
            this.isEditingMetadata(false);
        };

        databaseSettings.prototype.saveChanges = function () {
            var _this = this;
            var editDbConfirm = new viewSystemDatabaseConfirm("Meddling with the database settings document could cause irreversible damage!");
            editDbConfirm.viewTask.done(function () {
                try  {
                    var updatedDto = JSON.parse(_this.documentText());
                    var meta = JSON.parse(_this.metadataText());

                    updatedDto['@metadata'] = meta;
                    updatedDto['@metadata']['@etag'] = _this.document().__metadata['@etag'];
                    var newDoc = new document(updatedDto);
                    var saveCommand = new saveDatabaseSettingsCommand(appUrl.getDatabase(), newDoc);
                    var saveTask = saveCommand.execute();
                    saveTask.done(function (saveResult) {
                        _this.document().__metadata['@etag'] = saveResult.ETag;
                        _this.metadataText("{}");
                        _this.docEditor.setReadOnly(true);
                        _this.isEditingEnabled(false);
                        _this.formatDocument();
                        _this.dirtyFlag().reset(); //Resync Changes
                    });
                } catch (e) {
                    var message = "";
                    if (updatedDto == undefined) {
                        message = "The data isn't a legal JSON expression!";
                        _this.isEditingMetadata(false);
                    } else if (meta == undefined) {
                        message = "The metadata isn't a legal JSON expression!";
                        _this.isEditingMetadata(true);
                    }
                    _this.docEditor.focus();
                    messagePublisher.reportError(message);
                }
            });
            app.showDialog(editDbConfirm);
        };

        databaseSettings.prototype.fetchDatabaseSettings = function (db, reportFetchProgress) {
            var _this = this;
            if (typeof reportFetchProgress === "undefined") { reportFetchProgress = false; }
            return new getDatabaseSettingsCommand(db, reportFetchProgress).execute().done(function (document) {
                _this.document(document);
            });
        };

        databaseSettings.prototype.getDatabaseSettingsDocumentId = function (db) {
            return "Raven/Databases/" + db.name;
        };

        databaseSettings.prototype.stringify = function (obj) {
            var prettifySpacing = 4;
            return JSON.stringify(obj, null, prettifySpacing);
        };
        databaseSettings.containerId = "#databaseSettingsContainer";
        return databaseSettings;
    })(viewModelBase);

    
    return databaseSettings;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/databaseSettingsDialog", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "durandal/activator"], function(require, exports, dialog, dialogViewModelBase, activator) {
    var databaseSettingsDialog = (function (_super) {
        __extends(databaseSettingsDialog, _super);
        function databaseSettingsDialog(bundles) {
            var _this = this;
            _super.call(this);
            this.dialogTask = $.Deferred();
            this.activeScreen = ko.observable("");

            this.content = activator.create();

            var quotasRoute = { moduleId: 'viewmodels/quotas', title: 'Quotas', activate: true };
            var versioningRoute = { moduleId: 'viewmodels/versioning', title: 'Versioning', activate: true };
            var sqlReplicationConnectionRoute = { moduleId: 'viewmodels/sqlReplicationConnectionStringsManagement', title: 'SQL Replication Connection Strings', activate: true };

            // when the activeScreen name changes - load the viewmodel
            this.activeScreen.subscribe(function (newValue) {
                return require([newValue], function (model) {
                    _this.currentModel = new model();
                    _this.content.activateItem(_this.currentModel);
                });
            });

            this.routes = [];
            if (bundles.contains("Quotas")) {
                this.routes.push(quotasRoute);
            }
            if (bundles.contains("Versioning")) {
                this.routes.push(versioningRoute);
            }
            if (bundles.contains("SqlReplication")) {
                this.routes.push(sqlReplicationConnectionRoute);
            }
        }
        databaseSettingsDialog.prototype.attached = function () {
            _super.prototype.attached.call(this);
            this.activeScreen(this.routes[0].moduleId);
        };

        databaseSettingsDialog.prototype.detached = function () {
            _super.prototype.detached.call(this);
            this.dialogTask.resolve();
        };

        databaseSettingsDialog.prototype.canDeactivate = function () {
            return this.currentModel.canDeactivate(false);
        };

        databaseSettingsDialog.prototype.showView = function (moduleId) {
            var _this = this;
            var canDeactivate = this.canDeactivate();

            if (canDeactivate.done) {
                canDeactivate.done(function (answer) {
                    if (answer.can) {
                        _this.onSuccessfulDeactivation(moduleId);
                    }
                });
            } else if (canDeactivate === true) {
                this.onSuccessfulDeactivation(moduleId);
            }
        };

        databaseSettingsDialog.prototype.onSuccessfulDeactivation = function (moduleId) {
            this.currentModel.dirtyFlag().reset();
            this.activeScreen(moduleId);
        };

        databaseSettingsDialog.prototype.isActive = function (moduleId) {
            return moduleId === this.activeScreen();
        };

        databaseSettingsDialog.prototype.close = function () {
            dialog.close(this);
        };
        return databaseSettingsDialog;
    })(dialogViewModelBase);

    
    return databaseSettingsDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/deleteCollection", ["require", "exports", "plugins/dialog", "commands/deleteCollectionCommand", "common/appUrl", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, deleteCollectionCommand, appUrl, dialogViewModelBase) {
    var deleteCollection = (function (_super) {
        __extends(deleteCollection, _super);
        function deleteCollection(collection) {
            _super.call(this);
            this.collection = collection;
            this.deletionTask = $.Deferred();
            this.deletionStarted = false;
        }
        deleteCollection.prototype.deleteCollection = function () {
            var _this = this;
            var collectionName = this.collection.isAllDocuments ? "*" : this.collection.name;
            var deleteCommand = new deleteCollectionCommand(collectionName, appUrl.getDatabase());
            var deleteCommandTask = deleteCommand.execute();
            deleteCommandTask.done(function (result) {
                return _this.deletionTask.resolve(result);
            });
            deleteCommandTask.fail(function (response) {
                return _this.deletionTask.reject(response);
            });
            this.deletionStarted = true;
            dialog.close(this);
        };

        deleteCollection.prototype.cancel = function () {
            dialog.close(this);
        };

        deleteCollection.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.deletionStarted) {
                this.deletionTask.reject();
            }
        };
        return deleteCollection;
    })(dialogViewModelBase);

    
    return deleteCollection;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/deleteDocuments", ["require", "exports", "plugins/dialog", "commands/deleteDocumentsCommand", "common/appUrl", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, deleteDocumentsCommand, appUrl, dialogViewModelBase) {
    var deleteDocuments = (function (_super) {
        __extends(deleteDocuments, _super);
        function deleteDocuments(documents, elementToFocusOnDismissal) {
            _super.call(this, elementToFocusOnDismissal);
            this.documents = ko.observableArray();
            this.deletionStarted = false;
            this.deletionTask = $.Deferred();

            if (documents.length === 0) {
                throw new Error("Must have at least one document to delete.");
            }

            this.documents(documents);
        }
        deleteDocuments.prototype.deleteDocs = function () {
            var _this = this;
            var deletedDocIds = this.documents().map(function (i) {
                return i.getId();
            });
            var deleteCommand = new deleteDocumentsCommand(deletedDocIds, appUrl.getDatabase());
            var deleteCommandTask = deleteCommand.execute();

            deleteCommandTask.done(function () {
                return _this.deletionTask.resolve(_this.documents());
            });
            deleteCommandTask.fail(function (response) {
                return _this.deletionTask.reject(response);
            });

            this.deletionStarted = true;
            dialog.close(this);
        };

        deleteDocuments.prototype.cancel = function () {
            dialog.close(this);
        };

        deleteDocuments.prototype.deactivate = function (args) {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never carried it out.
            if (!this.deletionStarted) {
                this.deletionTask.reject();
            }
        };
        return deleteDocuments;
    })(dialogViewModelBase);

    
    return deleteDocuments;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/deleteDocumentsMatchingQueryConfirm", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "commands/deleteDocsMatchingQueryCommand"], function(require, exports, dialog, dialogViewModelBase, deleteDocsMatchingQueryCommand) {
    var deleteDocumentsMatchingQueryConfirm = (function (_super) {
        __extends(deleteDocumentsMatchingQueryConfirm, _super);
        function deleteDocumentsMatchingQueryConfirm(indexName, queryText, totalDocCount, db) {
            _super.call(this);
            this.indexName = indexName;
            this.queryText = queryText;
            this.totalDocCount = totalDocCount;
            this.db = db;
        }
        deleteDocumentsMatchingQueryConfirm.prototype.cancel = function () {
            dialog.close(this);
        };

        deleteDocumentsMatchingQueryConfirm.prototype.deleteDocs = function () {
            new deleteDocsMatchingQueryCommand(this.indexName, this.queryText, this.db).execute();
            dialog.close(this);
        };
        return deleteDocumentsMatchingQueryConfirm;
    })(dialogViewModelBase);

    
    return deleteDocumentsMatchingQueryConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/deleteIndexesConfirm", ["require", "exports", "commands/deleteIndexCommand", "plugins/dialog", "viewmodels/dialogViewModelBase", "common/messagePublisher"], function(require, exports, deleteIndexCommand, dialog, dialogViewModelBase, messagePublisher) {
    var deleteIndexesConfirm = (function (_super) {
        __extends(deleteIndexesConfirm, _super);
        function deleteIndexesConfirm(indexNames, db, title) {
            _super.call(this);
            this.indexNames = indexNames;
            this.db = db;
            this.deleteTask = $.Deferred();

            if (!indexNames || indexNames.length === 0) {
                throw new Error("Indexes must not be null or empty.");
            }

            this.title = !!title ? title : indexNames.length == 1 ? 'Delete index?' : 'Delete indexes?';
        }
        deleteIndexesConfirm.prototype.deleteIndexes = function () {
            var _this = this;
            var deleteTasks = this.indexNames.map(function (name) {
                return new deleteIndexCommand(name, _this.db).execute();
            });
            var myDeleteTask = this.deleteTask;

            $.when.apply($, deleteTasks).done(function () {
                if (_this.indexNames.length > 1) {
                    messagePublisher.reportSuccess("Successfully deleted " + _this.indexNames.length + " indexes!");
                }
                myDeleteTask.resolve(false);
            }).fail(function () {
                myDeleteTask.reject();
            });
            dialog.close(this);
        };

        deleteIndexesConfirm.prototype.cancel = function () {
            this.deleteTask.reject();
            dialog.close(this);
        };
        return deleteIndexesConfirm;
    })(dialogViewModelBase);

    
    return deleteIndexesConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/deleteItems", ["require", "exports", "models/document", "models/filesystem/file", "plugins/dialog", "commands/deleteDocumentsCommand", "commands/filesystem/deleteFilesCommand", "common/appUrl", "viewmodels/dialogViewModelBase"], function(require, exports, document, file, dialog, deleteDocumentsCommand, deleteFilesCommand, appUrl, dialogViewModelBase) {
    var deleteItems = (function (_super) {
        __extends(deleteItems, _super);
        function deleteItems(documents, elementToFocusOnDismissal) {
            _super.call(this, elementToFocusOnDismissal);
            this.documents = ko.observableArray();
            this.deletionStarted = false;
            this.deletionTask = $.Deferred();

            if (documents.length === 0) {
                throw new Error("Must have at least one document to delete.");
            }

            this.documents(documents);
        }
        deleteItems.prototype.deleteItems = function () {
            var _this = this;
            var deleteItemsIds = this.documents().map(function (i) {
                return i.getUrl();
            });
            var deleteCommand;
            if (this.documents()[0] instanceof document) {
                deleteCommand = new deleteDocumentsCommand(deleteItemsIds, appUrl.getDatabase());
            } else if (this.documents()[0] instanceof file) {
                deleteCommand = new deleteFilesCommand(deleteItemsIds, appUrl.getFileSystem());
            }
            var deleteCommandTask = deleteCommand.execute();

            deleteCommandTask.done(function () {
                return _this.deletionTask.resolve(_this.documents());
            });
            deleteCommandTask.fail(function (response) {
                return _this.deletionTask.reject(response);
            });

            this.deletionStarted = true;
            dialog.close(this);
        };

        deleteItems.prototype.cancel = function () {
            dialog.close(this);
        };

        deleteItems.prototype.deactivate = function (args) {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never carried it out.
            if (!this.deletionStarted) {
                this.deletionTask.reject();
            }
        };
        return deleteItems;
    })(dialogViewModelBase);

    
    return deleteItems;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/deleteResourceConfirm", ["require", "exports", "commands/deleteResourceCommand", "models/database", "plugins/dialog", "common/appUrl", "viewmodels/dialogViewModelBase"], function(require, exports, deleteResourceCommand, database, dialog, appUrl, dialogViewModelBase) {
    var deleteResourceConfirm = (function (_super) {
        __extends(deleteResourceConfirm, _super);
        function deleteResourceConfirm(resources) {
            _super.call(this);
            this.isKeepingFiles = ko.observable(true);
            this.resourcesToDelete = ko.observableArray();
            this.deleteTask = $.Deferred();

            if (resources.length === 0) {
                throw new Error("Must have at least one resource to delete.");
            }

            this.resourcesToDelete(resources);
            this.isDeletingDatabase = resources[0] instanceof database;
            if (this.isDeletingDatabase) {
                this.exportDatabaseUrl = appUrl.forExportDatabase(resources[0]);
            }
        }
        deleteResourceConfirm.prototype.keepFiles = function () {
            this.isKeepingFiles(true);
        };

        deleteResourceConfirm.prototype.deleteEverything = function () {
            this.isKeepingFiles(false);
        };

        deleteResourceConfirm.prototype.deleteDatabase = function () {
            var _this = this;
            new deleteResourceCommand(this.resourcesToDelete(), this.isKeepingFiles() === false).execute().done(function (results) {
                return _this.deleteTask.resolve(results);
            }).fail(function (details) {
                return _this.deleteTask.reject(details);
            });

            dialog.close(this);
        };

        deleteResourceConfirm.prototype.cancel = function () {
            this.deleteTask.reject();
            dialog.close(this);
        };
        return deleteResourceConfirm;
    })(dialogViewModelBase);

    
    return deleteResourceConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/deleteTransformerConfirm", ["require", "exports", "commands/deleteTransformerCommand", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, deleteTransformerCommand, dialog, dialogViewModelBase) {
    var deleteTransformerConfirm = (function (_super) {
        __extends(deleteTransformerConfirm, _super);
        function deleteTransformerConfirm(transformersNames, db) {
            _super.call(this);
            this.transformersNames = transformersNames;
            this.db = db;
            this.deleteTask = $.Deferred();

            if (!transformersNames || transformersNames.length === 0) {
                throw new Error("Transformers must not be null or empty.");
            }
            //this.message = transformersNames.length === 1 ? "You're deleting  "Really Delete '" + transformersNames[0] + "' transformer?" : 'Really delete all transformers?';
        }
        deleteTransformerConfirm.prototype.deleteTransformers = function () {
            var _this = this;
            var deleteTasks = this.transformersNames.map(function (name) {
                return new deleteTransformerCommand(name, _this.db).execute();
            });

            $.when.apply($, deleteTasks).done(function () {
                return _this.deleteTask.resolve();
            });
            dialog.close(this);
        };

        deleteTransformerConfirm.prototype.cancel = function () {
            this.deleteTask.reject();
            dialog.close(this);
        };
        return deleteTransformerConfirm;
    })(dialogViewModelBase);

    
    return deleteTransformerConfirm;
});
define("viewmodels/dialogViewModelBase", ["require", "exports", "plugins/dialog"], function(require, exports, dialog) {
    /*
    * Base view model for view models used in dialogs.
    * Provides some default functionality:
    *    - Optionallay focuses an element when the dialog is closed.
    *    - Listens for ESC to close the dialog.
    */
    var dialogViewModelBase = (function () {
        function dialogViewModelBase(elementToFocusOnDismissal) {
            var _this = this;
            this.elementToFocusOnDismissal = elementToFocusOnDismissal;
            this.dialogSelectorName = "";
            this.width = ko.observable(600);
            this.height = ko.observable(500);
            this.isFocused = ko.observable(false);
            this.left = ko.computed(function () {
                return -_this.width() * 0.5;
            });
            this.top = ko.computed(function () {
                return -_this.height() * 0.5;
            });
            this.bodyHeight = ko.computed(function () {
                return _this.height() - 150;
            });
        }
        dialogViewModelBase.prototype.attached = function () {
            var _this = this;
            jwerty.key("esc", function (e) {
                return _this.escapeKeyPressed(e);
            }, this, this.dialogSelectorName == "" ? dialogViewModelBase.dialogSelector : this.dialogSelectorName);
            jwerty.key("enter", function () {
                return _this.enterKeyPressed();
            }, this, dialogViewModelBase.dialogSelector);
        };

        dialogViewModelBase.prototype.deactivate = function (args) {
            $(this.dialogSelectorName == "" ? dialogViewModelBase.dialogSelector : this.dialogSelectorName).unbind('keydown.jwerty');
        };

        dialogViewModelBase.prototype.detached = function () {
            if (this.elementToFocusOnDismissal) {
                $(this.elementToFocusOnDismissal).focus();
            }
        };

        dialogViewModelBase.prototype.compositionComplete = function (view, parent) {
            var _this = this;
            setTimeout(function () {
                return _this.setInitialFocus();
            }, 100); // We have to time-delay this, else it never receives focus.
        };

        dialogViewModelBase.prototype.setInitialFocus = function () {
            var autoFocusElement = $(".messageBox [autofocus]");
            if (autoFocusElement.length) {
                autoFocusElement.focus();
                autoFocusElement.select();
            } else {
                $(dialogViewModelBase.dialogSelector).focus();
            }
        };

        dialogViewModelBase.prototype.enterKeyPressed = function () {
            var acceptButton = $(".modal-footer:visible .btn-primary")[0];
            if (acceptButton && acceptButton.click) {
                acceptButton.click();
            }

            return true;
        };

        dialogViewModelBase.prototype.escapeKeyPressed = function (e) {
            e.preventDefault();
            dialog.close(this);
        };

        dialogViewModelBase.prototype.unregisterResizing = function (id) {
            $(document).off("mousedown." + id);
            $(document).off("mouseup." + id);
            $(document).off("mousemove." + id);
        };

        dialogViewModelBase.prototype.registerResizing = function (id, resizerSelector) {
            var _this = this;
            if (typeof resizerSelector === "undefined") { resizerSelector = ".dialogResizer"; }
            var w = 0;
            var h = 0;
            var startX = 0;
            var startY = 0;
            var resizing = false;
            $(document).on("mousedown." + id, resizerSelector, function (e) {
                w = _this.width();
                h = _this.height();
                startX = e.pageX;
                startY = e.pageY;
                resizing = true;
            });

            $(document).on("mouseup." + id, "", function (e) {
                resizing = false;
            });

            $(document).on("mousemove." + id, "", function (e) {
                if (resizing) {
                    var targetWidth = w + 2 * (e.pageX - startX);
                    var targetHeight = h + 2 * (e.pageY - startY);

                    if (targetWidth < 600)
                        targetWidth = 600;
                    if (targetHeight < 500)
                        targetHeight = 500;

                    _this.width(targetWidth);
                    _this.height(targetHeight);

                    if (e.stopPropagation)
                        e.stopPropagation();
                    if (e.preventDefault)
                        e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false;
                    return false;
                }
            });
        };
        dialogViewModelBase.dialogSelector = ".messageBox";
        return dialogViewModelBase;
    })();

    
    return dialogViewModelBase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/disableResourceToggleConfirm", ["require", "exports", "plugins/dialog", "commands/disableResourceToggleCommand", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, disableResourceToggleCommand, dialogViewModelBase) {
    var disableResourceToggleConfirm = (function (_super) {
        __extends(disableResourceToggleConfirm, _super);
        function disableResourceToggleConfirm(resources, elementToFocusOnDismissal) {
            var _this = this;
            _super.call(this, elementToFocusOnDismissal);
            this.resourcesToDisable = ko.observableArray();
            this.disableToggleStarted = false;
            this.disableToggleTask = $.Deferred();
            this.desiredAction = ko.observable();

            if (resources.length === 0) {
                throw new Error("Must have at least one resource to disable.");
            }

            this.resourcesToDisable(resources);
            this.isSettingDisabled = !resources[0].disabled();
            this.deletionText = ko.computed(function () {
                return _this.isSettingDisabled ? "You're disabling" : "You're enabling";
            });
            this.confirmDeletionText = ko.computed(function () {
                return _this.isSettingDisabled ? "Yep, disable" : "Yep, enable";
            });
        }
        disableResourceToggleConfirm.prototype.toggleDisableReources = function () {
            var _this = this;
            var disableToggleCommand = new disableResourceToggleCommand(this.resourcesToDisable(), this.isSettingDisabled);

            var disableToggleCommandTask = disableToggleCommand.execute();

            disableToggleCommandTask.done(function (results) {
                if (_this.resourcesToDisable().length == 1) {
                    results = [_this.resourcesToDisable()[0].name];
                }
                _this.disableToggleTask.resolve(results);
            });
            disableToggleCommandTask.fail(function (response) {
                return _this.disableToggleTask.reject(response);
            });

            this.disableToggleStarted = true;
            dialog.close(this);
        };

        disableResourceToggleConfirm.prototype.cancel = function () {
            dialog.close(this);
        };

        disableResourceToggleConfirm.prototype.deactivate = function (args) {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never carried it out.
            if (!this.disableToggleStarted) {
                this.disableToggleTask.reject();
            }
        };
        return disableResourceToggleConfirm;
    })(dialogViewModelBase);

    
    return disableResourceToggleConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/documents", ["require", "exports", "durandal/app", "plugins/router", "viewmodels/shell", "viewmodels/viewModelBase", "viewmodels/deleteCollection", "models/collection", "models/customFunctions", 'models/customColumns', 'models/customColumnParams', "commands/getCollectionsCommand", 'commands/getCustomColumnsCommand', "commands/getCustomFunctionsCommand", 'commands/getOperationStatusCommand', "commands/getOperationAlertsCommand", "commands/dismissAlertCommand", "common/appUrl", "common/dynamicHeightBindingHandler"], function(require, exports, app, router, shell, viewModelBase, deleteCollection, collection, customFunctions, customColumns, customColumnParams, getCollectionsCommand, getCustomColumnsCommand, getCustomFunctionsCommand, getOperationStatusCommand, getOperationAlertsCommand, dismissAlertCommand, appUrl, dynamicHeightBindingHandler) {
    var documents = (function (_super) {
        __extends(documents, _super);
        function documents() {
            var _this = this;
            _super.call(this);
            this.displayName = "documents";
            this.collections = ko.observableArray();
            this.selectedCollection = ko.observable().subscribeTo("ActivateCollection").distinctUntilChanged();
            this.currentCollectionPagedItems = ko.observable();
            this.currentColumnsParams = ko.observable(customColumns.empty());
            this.currentCustomFunctions = ko.observable(customFunctions.empty());
            this.selectedDocumentIndices = ko.observableArray();
            this.contextName = ko.observable('');
            this.currentCollection = ko.observable();
            this.showLoadingIndicator = ko.observable(false);
            this.showLoadingIndicatorThrottled = this.showLoadingIndicator.throttle(250);
            this.isAnyDocumentsAutoSelected = ko.observable(false);
            this.isAllDocumentsAutoSelected = ko.observable(false);
            this.alerts = ko.observable([]);

            this.selectedCollection.subscribe(function (c) {
                return _this.selectedCollectionChanged(c);
            });
            this.hasDocuments = ko.computed(function () {
                var selectedCollection = _this.selectedCollection();
                if (!!selectedCollection) {
                    if (selectedCollection.name == collection.allDocsCollectionName) {
                        var db = _this.activeDatabase();
                        return db.itemCount() > 0;
                    }
                    return _this.selectedCollection().documentCount() > 0;
                }
                return false;
            });
            this.hasAnyDocumentsSelected = ko.computed(function () {
                return _this.selectedDocumentIndices().length > 0;
            });
            this.hasAllDocumentsSelected = ko.computed(function () {
                var numOfSelectedDocuments = _this.selectedDocumentIndices().length;
                if (!!_this.selectedCollection() && numOfSelectedDocuments != 0) {
                    return numOfSelectedDocuments == _this.selectedCollection().documentCount();
                }
                return false;
            });
            this.canCopyAllSelected = ko.computed(function () {
                _this.showLoadingIndicator(); //triggers computing the new cached selected items
                var numOfSelectedDocuments = _this.selectedDocumentIndices().length;
                var docsGrid = _this.getDocumentsGrid();

                if (!!docsGrid) {
                    var cachedItems = docsGrid.getNumberOfCachedItems();
                    return cachedItems >= numOfSelectedDocuments;
                }

                return false;
            });
            this.isRegularCollection = ko.computed(function () {
                var collection = _this.selectedCollection();
                return !!collection && !collection.isAllDocuments && !collection.isSystemDocuments;
            });
            this.currentExportUrl = ko.computed(function () {
                var collection = _this.selectedCollection();
                if (_this.isRegularCollection()) {
                    return appUrl.forExportCollectionCsv(collection, collection.ownerDatabase);
                }
                return null;
            });
        }
        documents.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.fetchCustomFunctions();

            // We can optionally pass in a collection name to view's URL, e.g. #/documents?collection=Foo&database="blahDb"
            this.collectionToSelectName = args ? args.collection : null;

            var db = this.activeDatabase();
            this.fetchAlerts();
            this.fetchCollections(db).done(function (results) {
                return _this.collectionsLoaded(results, db);
            });
        };

        documents.prototype.attached = function () {
            var _this = this;
            _super.prototype.createKeyboardShortcut.call(this, "F2", function () {
                return _this.editSelectedDoc();
            }, "#documentsGrid");

            // Q. Why do we have to setup the grid shortcuts here, when the grid already catches these shortcuts?
            // A. Because if the focus isn't on the grid, but on the docs page itself, we still need to catch the shortcuts.
            var docsPageSelector = ".documents-page";
            this.createKeyboardShortcut("DELETE", function () {
                return _this.getDocumentsGrid().deleteSelectedItems();
            }, docsPageSelector);
            this.createKeyboardShortcut("Ctrl+C,D", function () {
                return _this.copySelectedDocs();
            }, docsPageSelector);
            this.createKeyboardShortcut("Ctrl+C,I", function () {
                return _this.copySelectedDocIds();
            }, docsPageSelector);
        };

        documents.prototype.fetchAlerts = function () {
            var _this = this;
            new getOperationAlertsCommand(this.activeDatabase()).execute().then(function (result) {
                _this.alerts(result);
            });
        };

        documents.prototype.dismissAlert = function (uniqueKey) {
            new dismissAlertCommand(this.activeDatabase(), uniqueKey).execute();
            setTimeout(function () {
                return dynamicHeightBindingHandler.stickToTarget($(".ko-grid-viewport-container")[0], 'footer', 0);
            }, 25);
        };

        documents.prototype.fetchCollections = function (db) {
            return new getCollectionsCommand(db).execute();
        };

        documents.prototype.createNotifications = function () {
            var _this = this;
            return [
                shell.currentResourceChangesApi().watchAllIndexes(function () {
                    return _this.refreshCollections();
                }),
                shell.currentResourceChangesApi().watchAllDocs(function () {
                    return _this.refreshCollections();
                }),
                shell.currentResourceChangesApi().watchBulks(function () {
                    return _this.refreshCollections();
                })
            ];
        };

        documents.prototype.createPostboxSubscriptions = function () {
            var _this = this;
            return [
                ko.postbox.subscribe("EditItem", function () {
                    return _this.editSelectedDoc();
                }),
                ko.postbox.subscribe("ChangesApiReconnected", function (db) {
                    return _this.reloadDocumentsData(db);
                })
            ];
        };

        documents.prototype.refreshCollections = function () {
            var _this = this;
            var deferred = $.Deferred();
            var db = this.activeDatabase();

            this.fetchCollections(db).done(function (results) {
                _this.updateCollections(results, db);

                //TODO: add a button to refresh the documents and than use this.refreshCollectionsData();
                deferred.resolve();
            });

            return deferred;
        };

        documents.prototype.collectionsLoaded = function (collections, db) {
            var _this = this;
            // Create the "All Documents" pseudo collection.
            this.allDocumentsCollection = collection.createAllDocsCollection(db);
            this.allDocumentsCollection.documentCount = ko.computed(function () {
                return db.itemCount();
            });

            // Create the "System Documents" pseudo collection.
            var systemDocumentsCollection = collection.createSystemDocsCollection(db);

            // All systems a-go. Load them into the UI and select the first one.
            var collectionsWithSysCollection = [systemDocumentsCollection].concat(collections);
            var allCollections = [this.allDocumentsCollection].concat(collectionsWithSysCollection);
            this.collections(allCollections);

            var collectionToSelect = allCollections.first(function (c) {
                return c.name === _this.collectionToSelectName;
            }) || this.allDocumentsCollection;
            collectionToSelect.activate();
        };

        documents.prototype.fetchCustomFunctions = function () {
            var _this = this;
            var customFunctionsCommand = new getCustomFunctionsCommand(this.activeDatabase()).execute();
            customFunctionsCommand.done(function (cf) {
                _this.currentCustomFunctions(cf);
            });
        };

        //TODO: this binding has notification leak!
        documents.prototype.selectedCollectionChanged = function (selected) {
            var _this = this;
            if (selected) {
                var customColumnsCommand = selected.isAllDocuments ? getCustomColumnsCommand.forAllDocuments(this.activeDatabase()) : getCustomColumnsCommand.forCollection(selected.name, this.activeDatabase());

                this.contextName(customColumnsCommand.docName);

                customColumnsCommand.execute().done(function (dto) {
                    if (dto) {
                        _this.currentColumnsParams().columns($.map(dto.Columns, function (c) {
                            return new customColumnParams(c);
                        }));
                        _this.currentColumnsParams().customMode(true);
                    } else {
                        // use default values!
                        _this.currentColumnsParams().columns.removeAll();
                        _this.currentColumnsParams().customMode(false);
                    }

                    var pagedList = selected.getDocuments();
                    _this.currentCollectionPagedItems(pagedList);
                    _this.currentCollection(selected);
                });
            }
        };

        documents.prototype.deleteCollection = function (collection) {
            var _this = this;
            if (collection) {
                var viewModel = new deleteCollection(collection);
                viewModel.deletionTask.done(function (result) {
                    if (!collection.isAllDocuments) {
                        _this.collections.remove(collection);

                        var selectedCollection = _this.selectedCollection();
                        if (collection.name == selectedCollection.name) {
                            _this.selectCollection(_this.allDocumentsCollection);
                        }
                    } else {
                        _this.selectNone();
                    }

                    _this.updateGridAfterOperationComplete(collection, result.OperationId);
                });
                app.showDialog(viewModel);
            }
        };

        documents.prototype.updateGridAfterOperationComplete = function (collection, operationId) {
            var _this = this;
            var getOperationStatusTask = new getOperationStatusCommand(collection.ownerDatabase, operationId);
            getOperationStatusTask.execute().done(function (result) {
                if (result.Completed) {
                    var selectedCollection = _this.selectedCollection();

                    if (selectedCollection.isAllDocuments) {
                        var docsGrid = _this.getDocumentsGrid();
                        docsGrid.refreshCollectionData();
                    } else {
                        var allDocumentsPagedList = _this.allDocumentsCollection.getDocuments();
                        allDocumentsPagedList.invalidateCache();
                    }
                } else {
                    setTimeout(function () {
                        return _this.updateGridAfterOperationComplete(collection, operationId);
                    }, 500);
                }
            });
        };

        documents.prototype.updateCollections = function (receivedCollections, db) {
            var _this = this;
            var deletedCollections = [];

            this.collections().forEach(function (col) {
                if (!receivedCollections.first(function (receivedCol) {
                    return col.name == receivedCol.name;
                }) && col.name != 'System Documents' && col.name != 'All Documents') {
                    deletedCollections.push(col);
                }
            });

            this.collections.removeAll(deletedCollections);

            receivedCollections.forEach(function (receivedCol) {
                var foundCollection = _this.collections().first(function (col) {
                    return col.name == receivedCol.name;
                });
                if (!foundCollection) {
                    _this.collections.push(receivedCol);
                } else {
                    foundCollection.documentCount(receivedCol.documentCount());
                }
            });

            //if the collection is deleted, go to the all documents collection
            var currentCollection = this.collections().first(function (c) {
                return c.name === _this.selectedCollection().name;
            });
            if (!currentCollection || currentCollection.documentCount() == 0) {
                this.selectCollection(this.allDocumentsCollection);
            }
        };

        documents.prototype.refreshCollectionsData = function () {
            var _this = this;
            var selectedCollection = this.selectedCollection();

            this.collections().forEach(function (collection) {
                if (collection.name == selectedCollection.name) {
                    var docsGrid = _this.getDocumentsGrid();
                    if (!!docsGrid) {
                        docsGrid.refreshCollectionData();
                    }
                } else {
                    var pagedList = collection.getDocuments();
                    pagedList.invalidateCache();
                }
            });
        };

        documents.prototype.reloadDocumentsData = function (db) {
            var _this = this;
            if (db.name == this.activeDatabase().name) {
                this.refreshCollections().done(function () {
                    _this.refreshCollectionsData();
                });
            }
        };

        documents.prototype.selectCollection = function (collection, event) {
            if (!event || event.which !== 3) {
                collection.activate();
                var documentsWithCollectionUrl = appUrl.forDocuments(collection.name, this.activeDatabase());
                router.navigate(documentsWithCollectionUrl, false);
            }
        };

        documents.prototype.selectColumns = function () {
            var _this = this;
            require(["viewmodels/selectColumns"], function (selectColumns) {
                // Fetch column widths from virtual table
                var virtualTable = _this.getDocumentsGrid();
                var vtColumns = virtualTable.columns();
                _this.currentColumnsParams().columns().forEach(function (column) {
                    for (var i = 0; i < vtColumns.length; i++) {
                        if (column.binding() === vtColumns[i].binding) {
                            column.width(vtColumns[i].width() | 0);
                            break;
                        }
                    }
                });

                var selectColumnsViewModel = new selectColumns(_this.currentColumnsParams().clone(), _this.currentCustomFunctions(), _this.contextName(), _this.activeDatabase());
                app.showDialog(selectColumnsViewModel);
                selectColumnsViewModel.onExit().done(function (cols) {
                    _this.currentColumnsParams(cols);

                    var pagedList = _this.currentCollection().getDocuments();
                    _this.currentCollectionPagedItems(pagedList);
                });
            });
        };

        documents.prototype.newDocument = function () {
            router.navigate(appUrl.forNewDoc(this.activeDatabase()));
        };

        documents.prototype.toggleSelectAll = function () {
            var docsGrid = this.getDocumentsGrid();

            if (!!docsGrid) {
                if (this.hasAnyDocumentsSelected()) {
                    docsGrid.selectNone();
                } else {
                    docsGrid.selectSome();

                    this.isAnyDocumentsAutoSelected(this.hasAllDocumentsSelected() == false);
                }
            }
        };

        documents.prototype.selectAll = function () {
            var docsGrid = this.getDocumentsGrid();
            var c = this.selectedCollection();

            if (!!docsGrid && !!c) {
                docsGrid.selectAll(c.documentCount());
            }
        };

        documents.prototype.selectNone = function () {
            var docsGrid = this.getDocumentsGrid();

            if (!!docsGrid) {
                docsGrid.selectNone();
            }
        };

        documents.prototype.editSelectedDoc = function () {
            var grid = this.getDocumentsGrid();
            if (grid) {
                grid.editLastSelectedItem();
            }
        };

        documents.prototype.deleteSelectedDocs = function () {
            if (!this.selectedCollection().isSystemDocuments && this.hasAllDocumentsSelected()) {
                this.deleteCollection(this.selectedCollection());
            } else {
                var grid = this.getDocumentsGrid();
                if (grid) {
                    grid.deleteSelectedItems();
                }
            }
        };

        documents.prototype.copySelectedDocs = function () {
            var grid = this.getDocumentsGrid();
            if (grid) {
                grid.copySelectedDocs();
            }
        };

        documents.prototype.copySelectedDocIds = function () {
            var grid = this.getDocumentsGrid();
            if (grid) {
                grid.copySelectedDocIds();
            }
        };

        documents.prototype.getDocumentsGrid = function () {
            var gridContents = $(documents.gridSelector).children()[0];
            if (gridContents) {
                return ko.dataFor(gridContents);
            }

            return null;
        };

        documents.prototype.urlForAlert = function (alert) {
            var index = this.alerts().indexOf(alert);
            return appUrl.forAlerts(this.activeDatabase()) + "&item=" + index;
        };
        documents.gridSelector = "#documentsGrid";
        return documents;
    })(viewModelBase);

    
    return documents;
});
/// <reference path="../../Scripts/typings/ace/ace.amd.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/editDocument", ["require", "exports", "durandal/app", "plugins/router", "models/document", "models/collection", "models/querySort", "commands/saveDocumentCommand", "commands/getDocumentWithMetadataCommand", "commands/verifyDocumentsIDsCommand", "commands/queryIndexCommand", "commands/resolveMergeCommand", "common/pagedList", "common/appUrl", "common/jsonUtil", "common/messagePublisher", "common/aceEditorBindingHandler", "common/generalUtils", "viewmodels/deleteDocuments", "viewmodels/viewModelBase"], function(require, exports, app, router, document, collection, querySort, saveDocumentCommand, getDocumentWithMetadataCommand, verifyDocumentsIDsCommand, queryIndexCommand, resolveMergeCommand, pagedList, appUrl, jsonUtil, messagePublisher, aceEditorBindingHandler, genUtils, deleteDocuments, viewModelBase) {
    var editDocument = (function (_super) {
        __extends(editDocument, _super);
        function editDocument() {
            var _this = this;
            _super.call(this);
            this.isConflictDocument = ko.observable();
            this.document = ko.observable();
            this.documentText = ko.observable('').extend({ required: true });
            this.metadataText = ko.observable('').extend({ required: true });
            this.isEditingMetadata = ko.observable(false);
            this.isBusy = ko.observable(false);
            this.metaPropsToRestoreOnSave = [];
            this.userSpecifiedId = ko.observable('').extend({ required: true });
            this.isCreatingNewDocument = ko.observable(false);
            this.docsList = ko.observable();
            this.queryResultList = ko.observable();
            this.topRecentDocuments = ko.computed(function () {
                return _this.getTopRecentDocuments();
            });
            this.relatedDocumentHrefs = ko.observableArray();
            this.docEditroHasFocus = ko.observable(true);
            this.documentMatchRegexp = /\w+\/\w+/ig;
            this.lodaedDocumentName = ko.observable('');
            this.isInDocMode = ko.observable(true);
            this.queryIndex = ko.observable();
            this.isNewLineFriendlyMode = ko.observable(false);
            this.autoCollapseMode = ko.observable(false);
            this.newLineToggle = '\\n';
            aceEditorBindingHandler.install();

            this.metadata = ko.computed(function () {
                return _this.document() ? _this.document().__metadata : null;
            });
            this.isConflictDocument = ko.computed(function () {
                var metadata = _this.metadata();

                return metadata != null && !!metadata["Raven-Replication-Conflict"] && !metadata.id.contains("/conflicts/");
            });

            this.document.subscribe(function (doc) {
                if (doc) {
                    if (_this.isConflictDocument()) {
                        _this.resolveConflicts();
                    } else {
                        var docText = _this.stringify(doc.toDto());
                        _this.documentText(docText);
                    }
                }
            });

            this.documentSize = ko.computed(function () {
                try  {
                    var size = ((_this.documentText().getSizeInBytesAsUTF8() + _this.metadataText().getSizeInBytesAsUTF8()) / 1024);
                    return genUtils.formatAsCommaSeperatedString(size, 2);
                } catch (e) {
                    return "cannot compute";
                }
            });

            this.metadata.subscribe(function (meta) {
                return _this.metadataChanged(meta);
            });
            this.editedDocId = ko.computed(function () {
                return _this.metadata() ? _this.metadata().id : '';
            });
            this.editedDocId.subscribe(function (docId) {
                return ko.postbox.publish("SetRawJSONUrl", appUrl.forDocumentRawData(_this.activeDatabase(), docId));
            });

            // When we programmatically change the document text or meta text, push it into the editor.
            this.isEditingMetadata.subscribe(function () {
                if (_this.docEditor) {
                    var text = _this.isEditingMetadata() ? _this.metadataText() : _this.documentText();
                    _this.docEditor.getSession().setValue(text);
                }
            });
            this.text = ko.computed({
                read: function () {
                    return _this.isEditingMetadata() ? _this.metadataText() : _this.documentText();
                },
                write: function (text) {
                    var currentObservable = _this.isEditingMetadata() ? _this.metadataText : _this.documentText;
                    currentObservable(text);
                },
                owner: this
            });

            this.docTitle = ko.computed(function () {
                if (_this.isInDocMode() == true) {
                    if (_this.isCreatingNewDocument() === true) {
                        return 'New Document';
                    } else {
                        var editedDocId = _this.editedDocId();

                        if (!!editedDocId) {
                            var lastIndexInEditedDocId = editedDocId.lastIndexOf('/') + 1;
                            if (lastIndexInEditedDocId > 0) {
                                editedDocId = editedDocId.slice(lastIndexInEditedDocId);
                            }
                        }

                        return editedDocId;
                    }
                } else {
                    return 'Projection';
                }
            });

            this.isFirstDocumenNavtDisabled = ko.computed(function () {
                var list = _this.docsList();
                if (list) {
                    var currentDocumentIndex = list.currentItemIndex();

                    if (currentDocumentIndex == 0) {
                        return true;
                    }
                }

                return false;
            });

            this.isLastDocumentNavDisabled = ko.computed(function () {
                var list = _this.docsList();
                if (list) {
                    var currentDocumentIndex = list.currentItemIndex();
                    var totalDocuments = list.totalResultCount();

                    if (currentDocumentIndex == totalDocuments - 1) {
                        return true;
                    }
                }

                return false;
            });
        }
        // Called by Durandal when seeing if we can activate this view.
        editDocument.prototype.canActivate = function (args) {
            var _this = this;
            _super.prototype.canActivate.call(this, args);
            var canActivateResult = $.Deferred();
            if (args && args.id) {
                this.databaseForEditedDoc = appUrl.getDatabase();
                this.loadDocument(args.id).done(function () {
                    canActivateResult.resolve({ can: true });
                }).fail(function () {
                    messagePublisher.reportError("Could not find " + args.id + " document");
                    canActivateResult.resolve({ redirect: appUrl.forDocuments(collection.allDocsCollectionName, _this.activeDatabase()) });
                });
                return canActivateResult;
            } else if (args && args.item && args.list) {
                return $.Deferred().resolve({ can: true });
            } else if (args && args.index) {
                this.isInDocMode(false);
                var indexName = args.index;
                var queryText = args.query;
                var sorts;

                if (args.sorts) {
                    sorts = args.sorts.split(',').map(function (curSort) {
                        return querySort.fromQuerySortString(curSort.trim());
                    });
                } else {
                    sorts = [];
                }

                var resultsFetcher = function (skip, take) {
                    var command = new queryIndexCommand(indexName, _this.activeDatabase(), skip, take, queryText, sorts);
                    return command.execute();
                };
                var list = new pagedList(resultsFetcher);
                var item = !!args.item && !isNaN(args.item) ? args.item : 0;

                list.getNthItem(item).done(function (doc) {
                    _this.document(doc);
                    _this.lodaedDocumentName("");
                    canActivateResult.resolve({ can: true });
                }).fail(function () {
                    messagePublisher.reportError("Could not find query result");
                    canActivateResult.resolve({ redirect: appUrl.forDocuments(collection.allDocsCollectionName, _this.activeDatabase()) });
                });
                this.currentQueriedItemIndex = item;
                this.queryResultList(list);
                this.queryIndex(indexName);
                return canActivateResult;
            } else {
                return $.Deferred().resolve({ can: true });
            }
        };

        editDocument.prototype.activate = function (navigationArgs) {
            var _this = this;
            _super.prototype.activate.call(this, navigationArgs);

            this.lodaedDocumentName(this.userSpecifiedId());
            this.dirtyFlag = new ko.DirtyFlag([this.documentText, this.metadataText, this.userSpecifiedId], false, jsonUtil.newLineNormalizingHashFunction);

            this.isSaveEnabled = ko.computed(function () {
                return (_this.dirtyFlag().isDirty() || _this.lodaedDocumentName() == "");
            }, this);

            // Find the database and collection we're supposed to load.
            // Used for paging through items.
            this.databaseForEditedDoc = this.activeDatabase();
            if (navigationArgs && navigationArgs.database) {
                ko.postbox.publish("ActivateDatabaseWithName", navigationArgs.database);
            }

            if (navigationArgs && navigationArgs.list && navigationArgs.item) {
                var itemIndex = parseInt(navigationArgs.item, 10);
                if (!isNaN(itemIndex)) {
                    var newCollection = new collection(navigationArgs.list, appUrl.getDatabase());
                    var fetcher = function (skip, take) {
                        return newCollection.fetchDocuments(skip, take);
                    };
                    var list = new pagedList(fetcher);
                    list.collectionName = navigationArgs.list;
                    list.currentItemIndex(itemIndex);
                    list.getNthItem(0); // Force us to get the total items count.
                    this.docsList(list);
                }
            }

            if (navigationArgs && navigationArgs.id) {
                this.appendRecentDocument(navigationArgs.id);

                ko.postbox.publish("SetRawJSONUrl", appUrl.forDocumentRawData(this.activeDatabase(), navigationArgs.id));
            } else if (navigationArgs && navigationArgs.index) {
                //todo: implement SetRawJSONUrl for document from query
            } else {
                this.editNewDocument();
            }
        };

        editDocument.prototype.updateNewlineLayoutInDocument = function (unescapeNewline) {
            var dirtyFlagValue = this.dirtyFlag().isDirty();
            if (unescapeNewline == true) {
                this.documentText(this.unescapeNewlinesAndTabsInTextFields(this.documentText()));
                this.docEditor.getSession().setMode('ace/mode/json_newline_friendly');
            } else {
                this.documentText(this.escapeNewlinesAndTabsInTextFields(this.documentText()));
                this.docEditor.getSession().setMode('ace/mode/json');
                this.formatDocument();
            }

            if (dirtyFlagValue == false) {
                this.dirtyFlag().reset();
            }
        };

        // Called when the view is attached to the DOM.
        editDocument.prototype.attached = function () {
            var _this = this;
            this.setupKeyboardShortcuts();
            $("#docEditor").resize();
            this.isNewLineFriendlyMode.subscribe(function (val) {
                _this.updateNewlineLayoutInDocument(val);
            });
        };

        editDocument.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#docEditor").off('DynamicHeightSet');
        };

        editDocument.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            this.documentNameElement = $("#documentName");

            var editorElement = $("#docEditor");
            if (editorElement.length > 0) {
                this.docEditor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }

            $("#docEditor").on('DynamicHeightSet', function () {
                return _this.docEditor.resize();
            });
            this.focusOnEditor();
        };

        editDocument.prototype.setupKeyboardShortcuts = function () {
            var _this = this;
            this.createKeyboardShortcut("alt+shift+d", function () {
                return _this.focusOnDocument();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+shift+m", function () {
                return _this.focusOnMetadata();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+shift+r", function () {
                return _this.refreshDocument();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+c", function () {
                return _this.focusOnEditor();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+home", function () {
                return _this.firstDocument();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+end", function () {
                return _this.lastDocument();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+page-up", function () {
                return _this.previousDocumentOrLast();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+page-down", function () {
                return _this.nextDocumentOrFirst();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+shift+del", function () {
                return _this.deleteDocument();
            }, editDocument.editDocSelector);
            this.createKeyboardShortcut("alt+s", function () {
                return _this.saveDocument();
            }, editDocument.editDocSelector); // Q. Why do we have to setup ALT+S, when we could just use HTML's accesskey attribute? A. Because the accesskey attribute causes the save button to take focus, thus stealing the focus from the user's editing spot in the doc editor, disrupting his workflow.
            //this.createKeyboardShortcut("/", () => this.docsList(), editDocument.editDocSelector);
        };

        editDocument.prototype.focusOnMetadata = function () {
            this.isEditingMetadata(true);
            this.focusOnEditor();
        };

        editDocument.prototype.focusOnDocument = function () {
            this.isEditingMetadata(false);
            this.focusOnEditor();
        };

        editDocument.prototype.focusOnEditor = function () {
            this.docEditor.focus();
        };

        editDocument.prototype.editNewDocument = function () {
            this.isCreatingNewDocument(true);
            var newDocument = document.empty();
            newDocument["Name"] = "...";
            this.document(newDocument);
        };

        editDocument.prototype.failedToLoadDoc = function (docId, errorResponse) {
            messagePublisher.reportError("Could not find " + docId + " document");
        };

        editDocument.prototype.escapeNewlinesAndTabsInTextFields = function (str) {
            var AceDocumentClass = require("ace/document").Document;
            var AceEditSessionClass = require("ace/edit_session").EditSession;
            var AceJSONMode = require("ace/mode/json_newline_friendly").Mode;
            var documentTextAceDocument = new AceDocumentClass(str);
            var jsonMode = new AceJSONMode();
            var documentTextAceEditSession = new AceEditSessionClass(documentTextAceDocument, jsonMode);
            var previousLine = 0;

            var TokenIterator = require("ace/token_iterator").TokenIterator;
            var iterator = new TokenIterator(documentTextAceEditSession, 0, 0);
            var curToken = iterator.getCurrentToken();
            var text = "";
            while (curToken) {
                if (iterator.$row - previousLine > 1) {
                    var rowsGap = iterator.$row - previousLine;
                    for (var i = 0; i < rowsGap - 1; i++) {
                        text += "\\r\\n";
                    }
                }
                if (curToken.type === "string" || curToken.type == "constant.language.escape") {
                    if (previousLine < iterator.$row) {
                        text += "\\r\\n";
                    }

                    var newTokenValue = curToken.value.replace(/(\\n|\\r\\n)/g, '\\\\r\\\\n').replace(/(\n|\r\n)/g, '\\r\\n').replace(/(\\t)/g, '\\\\t').replace(/(\t)/g, '\\t');
                    text += newTokenValue;
                    //text += curToken.value.replace(/(\n|\r\n)/g, '\\r\\n');
                } else {
                    text += curToken.value;
                }

                previousLine = iterator.$row;
                curToken = iterator.stepForward();
            }

            return text;
        };

        editDocument.prototype.toggleNewlineMode = function () {
            var _this = this;
            if (this.isNewLineFriendlyMode() === false && parseInt(this.documentSize().replace(",", "")) > 150) {
                app.showMessage("This operation might take long time with big documents, are you sure you want to continue?", "Toggle newline mode", ["Cancel", "Continue"]).then(function (dialogResult) {
                    if (dialogResult === "Continue") {
                        _this.isNewLineFriendlyMode.toggle();
                    }
                });
            } else {
                this.isNewLineFriendlyMode.toggle();
            }
        };

        editDocument.prototype.toggleAutoCollapse = function () {
            this.autoCollapseMode.toggle();
            if (this.autoCollapseMode()) {
                this.foldAll();
            } else {
                this.docEditor.getSession().unfold(null, true);
            }
        };

        editDocument.prototype.foldAll = function () {
            var _this = this;
            var AceRange = require("ace/range").Range;
            this.docEditor.getSession().foldAll();
            var folds = this.docEditor.getSession().getFoldsInRange(new AceRange(0, 0, this.docEditor.getSession().getLength(), 0));
            folds.map(function (f) {
                return _this.docEditor.getSession().expandFold(f);
            });
        };

        editDocument.prototype.unescapeNewlinesAndTabsInTextFields = function (str) {
            var AceDocumentClass = require("ace/document").Document;
            var AceEditSessionClass = require("ace/edit_session").EditSession;
            var AceJSONMode = require("ace/mode/json").Mode;
            var documentTextAceDocument = new AceDocumentClass(str);
            var jsonMode = new AceJSONMode();
            var documentTextAceEditSession = new AceEditSessionClass(documentTextAceDocument, jsonMode);
            var TokenIterator = require("ace/token_iterator").TokenIterator;
            var iterator = new TokenIterator(documentTextAceEditSession, 0, 0);
            var curToken = iterator.getCurrentToken();

            // first, calculate newline indexes
            var rowsIndexes = str.split("").map(function (x, index) {
                return { char: x, index: index };
            }).filter(function (x) {
                return x.char == "\n";
            }).map(function (x) {
                return x.index;
            });

            while (curToken) {
                curToken = iterator.stepForward();
            }
            curToken = iterator.stepBackward();

            var lastTextSectionPosEnd = null;

            while (curToken) {
                if (curToken.type === "string" || curToken.type == "constant.language.escape") {
                    if (lastTextSectionPosEnd == null) {
                        curToken = iterator.stepForward();
                        lastTextSectionPosEnd = { row: iterator.getCurrentTokenRow(), column: iterator.getCurrentTokenColumn() + 1 };
                        curToken = iterator.stepBackward();
                    }
                } else {
                    if (lastTextSectionPosEnd != null) {
                        curToken = iterator.stepForward();
                        var lastTextSectionPosStart = { row: iterator.getCurrentTokenRow(), column: iterator.getCurrentTokenColumn() + 1 };
                        var stringTokenStartIndexInSourceText = (lastTextSectionPosStart.row > 0 ? rowsIndexes[lastTextSectionPosStart.row - 1] : 0) + lastTextSectionPosStart.column;
                        var stringTokenEndIndexInSourceText = (lastTextSectionPosEnd.row > 0 ? rowsIndexes[lastTextSectionPosEnd.row - 1] : 0) + lastTextSectionPosEnd.column;
                        var newTextPrefix = str.substring(0, stringTokenStartIndexInSourceText);
                        var newTextSuffix = str.substring(stringTokenEndIndexInSourceText, str.length);
                        var newStringTokenValue = str.substring(stringTokenStartIndexInSourceText, stringTokenEndIndexInSourceText).replace(/(\\\\n|\\\\r\\\\n|\\n|\\r\\n|\\t|\\\\t)/g, function (x) {
                            if (x == "\\\\n" || x == "\\\\r\\\\n") {
                                return "\\r\\n";
                            } else if (x == "\\n" || x == "\\r\\n") {
                                return "\r\n";
                            } else if (x == "\\t") {
                                return "\t";
                            } else if (x == "\\\\t") {
                                return "\\t";
                            } else {
                                return "\r\n";
                            }
                        });

                        str = newTextPrefix + newStringTokenValue + newTextSuffix;
                        curToken = iterator.stepBackward();
                    }
                    lastTextSectionPosEnd = null;
                }

                curToken = iterator.stepBackward();
            }

            return str;
        };

        editDocument.prototype.saveDocument = function () {
            var _this = this;
            this.isInDocMode(true);
            var currentDocumentId = this.userSpecifiedId();
            if ((currentDocumentId == "") || (this.lodaedDocumentName() != currentDocumentId)) {
                //the name of the document was changed and we have to save it as a new one
                this.isCreatingNewDocument(true);
            }

            var message = "";

            if (currentDocumentId.indexOf("\\") != -1) {
                message = "Document name cannot contain '\\'";
                this.documentNameElement.focus();
            } else {
                try  {
                    var updatedDto;
                    if (this.isNewLineFriendlyMode() === true) {
                        updatedDto = JSON.parse(this.escapeNewlinesAndTabsInTextFields(this.documentText()));
                    } else {
                        updatedDto = JSON.parse(this.documentText());
                    }
                    var meta = JSON.parse(this.metadataText());
                } catch (e) {
                    if (updatedDto == undefined) {
                        message = "The document data isn't a legal JSON expression!";
                        this.isEditingMetadata(false);
                    } else if (meta == undefined) {
                        message = "The document metadata isn't a legal JSON expression!";
                        this.isEditingMetadata(true);
                    }
                    this.focusOnEditor();
                }
            }

            if (message != "") {
                messagePublisher.reportError(message, undefined, undefined, false);
                return;
            }

            updatedDto['@metadata'] = meta;

            // Fix up the metadata: if we're a new doc, attach the expected reserved properties like ID, ETag, and RavenEntityName.
            // AFAICT, Raven requires these reserved meta properties in order for the doc to be seen as a member of a collection.
            if (this.isCreatingNewDocument()) {
                this.attachReservedMetaProperties(currentDocumentId, meta);
            } else {
                // If we're editing a document, we hide some reserved properties from the user.
                // Restore these before we save.
                this.metaPropsToRestoreOnSave.forEach(function (p) {
                    if (p.name !== "Origin") {
                        meta[p.name] = p.value;
                    }
                });
            }

            // skip some not necessary meta in headers
            var metaToSkipInHeaders = ['Raven-Replication-History'];
            for (var i in metaToSkipInHeaders) {
                var skippedHeader = metaToSkipInHeaders[i];
                delete meta[skippedHeader];
            }

            if (!!this.docsList()) {
                this.docsList().invalidateCache();
            }

            var newDoc = new document(updatedDto);
            var saveCommand = new saveDocumentCommand(currentDocumentId, newDoc, this.activeDatabase());
            var saveTask = saveCommand.execute();
            saveTask.done(function (saveResult) {
                var savedDocumentDto = saveResult[0];
                var currentSelection = _this.docEditor.getSelectionRange();
                _this.loadDocument(savedDocumentDto.Key).always(function () {
                    _this.updateNewlineLayoutInDocument(_this.isNewLineFriendlyMode());

                    // Try to restore the selection.
                    _this.docEditor.selection.setRange(currentSelection, false);
                });
                _this.updateUrl(savedDocumentDto.Key);

                _this.dirtyFlag().reset(); //Resync Changes

                // add the new document to the paged list
                var list = _this.docsList();
                if (!!list) {
                    if (_this.isCreatingNewDocument()) {
                        var newTotalResultCount = list.totalResultCount() + 1;

                        list.totalResultCount(newTotalResultCount);
                        list.currentItemIndex(newTotalResultCount - 1);
                    } else {
                        list.currentItemIndex(list.totalResultCount() - 1);
                    }

                    _this.updateUrl(currentDocumentId);
                }

                _this.isCreatingNewDocument(false);
            });
        };

        editDocument.prototype.attachReservedMetaProperties = function (id, target) {
            target['@etag'] = '';
            target['Raven-Entity-Name'] = !target['Raven-Entity-Name'] ? document.getEntityNameFromId(id) : target['Raven-Entity-Name'];
            target['@id'] = id;
        };

        editDocument.prototype.stringify = function (obj) {
            var prettifySpacing = 4;
            return JSON.stringify(obj, null, prettifySpacing);
        };

        editDocument.prototype.activateMeta = function () {
            this.isEditingMetadata(true);
            this.docEditor.getSession().setMode('ace/mode/json');
        };

        editDocument.prototype.activateDoc = function () {
            this.isEditingMetadata(false);

            if (this.isNewLineFriendlyMode() == true) {
                this.docEditor.getSession().setMode('ace/mode/json_newline_friendly');
            }
        };

        editDocument.prototype.findRelatedDocumentsCandidates = function (doc) {
            var results = [];
            var initialDocumentFields = doc.getDocumentPropertyNames();
            var documentNodesFlattenedList = [];

            // get initial nodes list to work with
            initialDocumentFields.forEach(function (curField) {
                documentNodesFlattenedList.push(doc[curField]);
            });

            for (var documentNodesCursor = 0; documentNodesCursor < documentNodesFlattenedList.length; documentNodesCursor++) {
                var curField = documentNodesFlattenedList[documentNodesCursor];
                if (typeof curField === "string" && /\w+\/\w+/ig.test(curField)) {
                    if (!results.first(function (x) {
                        return x === curField.toString();
                    })) {
                        results.push(curField.toString());
                    }
                } else if (typeof curField == "object" && !!curField) {
                    for (var curInnerField in curField) {
                        documentNodesFlattenedList.push(curField[curInnerField]);
                    }
                }
            }
            return results;
        };

        editDocument.prototype.loadDocument = function (id) {
            var _this = this;
            var loadDocTask = new getDocumentWithMetadataCommand(id, this.databaseForEditedDoc).execute();
            loadDocTask.done(function (document) {
                _this.document(document);
                _this.lodaedDocumentName(_this.userSpecifiedId());
                _this.dirtyFlag().reset(); //Resync Changes

                _this.loadRelatedDocumentsList(document);
                _this.appendRecentDocument(id);
                if (_this.autoCollapseMode()) {
                    _this.foldAll();
                }
            });
            loadDocTask.fail(function (response) {
                return _this.failedToLoadDoc(id, response);
            });
            loadDocTask.always(function () {
                return _this.isBusy(false);
            });
            this.isBusy(true);
            return loadDocTask;
        };

        editDocument.prototype.refreshDocument = function () {
            var _this = this;
            if (this.isInDocMode()) {
                if (!this.isCreatingNewDocument()) {
                    var docId = this.editedDocId();
                    this.document(null);
                    this.documentText(null);
                    this.metadataText(null);
                    this.userSpecifiedId('');
                    this.loadDocument(docId);
                } else {
                    this.editNewDocument();
                }
            } else {
                this.queryResultList().getNthItem(this.currentQueriedItemIndex).done(function (doc) {
                    return _this.document(doc);
                });
                this.lodaedDocumentName("");
            }
        };

        editDocument.prototype.deleteDocument = function () {
            var _this = this;
            var doc = this.document();
            if (doc) {
                var viewModel = new deleteDocuments([doc]);
                viewModel.deletionTask.done(function () {
                    _this.dirtyFlag().reset(); //Resync Changes

                    var list = _this.docsList();
                    if (!!list) {
                        _this.docsList().invalidateCache();

                        var newTotalResultCount = list.totalResultCount() - 1;
                        list.totalResultCount(newTotalResultCount);

                        var nextIndex = list.currentItemIndex();
                        if (nextIndex >= newTotalResultCount) {
                            nextIndex = 0;
                        }

                        _this.pageToItem(nextIndex, newTotalResultCount);
                    }
                });
                app.showDialog(viewModel, editDocument.editDocSelector);
            }
        };

        editDocument.prototype.formatDocument = function () {
            try  {
                var docEditorText = this.docEditor.getSession().getValue();
                var observableToUpdate = this.isEditingMetadata() ? this.metadataText : this.documentText;
                var tempDoc = JSON.parse(docEditorText);
                var formatted = this.stringify(tempDoc);
                observableToUpdate(formatted);
            } catch (e) {
                messagePublisher.reportError("Could not format json", undefined, undefined, false);
            }
        };

        editDocument.prototype.nextDocumentOrFirst = function () {
            var list = this.docsList();
            if (list) {
                var nextIndex = list.currentItemIndex() + 1;
                if (nextIndex >= list.totalResultCount()) {
                    nextIndex = 0;
                }
                this.pageToItem(nextIndex);
            } else {
                this.navigateToDocuments();
            }
        };

        editDocument.prototype.previousDocumentOrLast = function () {
            var list = this.docsList();
            if (list) {
                var previousIndex = list.currentItemIndex() - 1;
                if (previousIndex < 0) {
                    previousIndex = list.totalResultCount() - 1;
                }
                this.pageToItem(previousIndex);
            }
        };

        editDocument.prototype.lastDocument = function () {
            var list = this.docsList();
            if (list) {
                this.pageToItem(list.totalResultCount() - 1);
            }
        };

        editDocument.prototype.firstDocument = function () {
            this.pageToItem(0);
        };

        editDocument.prototype.pageToItem = function (index, newTotalResultCount) {
            var _this = this;
            var canContinue = this.canContinueIfNotDirty('Unsaved Data', 'You have unsaved data. Are you sure you want to continue?');
            canContinue.done(function () {
                var list = _this.docsList();
                if (list) {
                    list.getNthItem(index).done(function (doc) {
                        if (_this.isInDocMode() === true) {
                            _this.loadDocument(doc.getId());
                            list.currentItemIndex(index);
                            _this.updateUrl(doc.getId());
                        } else {
                            _this.document(doc);
                            _this.lodaedDocumentName("");
                            _this.dirtyFlag().reset(); //Resync Changes
                        }

                        if (!!newTotalResultCount) {
                            list.totalResultCount(newTotalResultCount);
                        }
                    });
                }
            });
        };

        editDocument.prototype.navigateToCollection = function (collectionName) {
            var collectionUrl = appUrl.forDocuments(collectionName, this.activeDatabase());
            router.navigate(collectionUrl);
        };

        editDocument.prototype.navigateToDocuments = function () {
            this.navigateToCollection(null);
        };

        editDocument.prototype.updateUrl = function (docId) {
            var collectionName = this.docsList() ? this.docsList().collectionName : null;
            var currentItemIndex = this.docsList() ? this.docsList().currentItemIndex() : null;
            var editDocUrl = appUrl.forEditDoc(docId, collectionName, currentItemIndex, this.activeDatabase());
            router.navigate(editDocUrl, false);
        };

        editDocument.prototype.getTopRecentDocuments = function () {
            var _this = this;
            var currentDbName = this.activeDatabase().name;
            var recentDocumentsForCurDb = editDocument.recentDocumentsInDatabases().first(function (x) {
                return x.databaseName === currentDbName;
            });
            if (recentDocumentsForCurDb) {
                var value = recentDocumentsForCurDb.recentDocuments().filter(function (x) {
                    return x !== _this.userSpecifiedId();
                }).slice(0, 5).map(function (docId) {
                    return {
                        docId: docId,
                        docUrl: appUrl.forEditDoc(docId, null, null, _this.activeDatabase())
                    };
                });
                return value;
            } else {
                return [];
            }
        };

        editDocument.prototype.metadataChanged = function (meta) {
            if (meta) {
                this.metaPropsToRestoreOnSave.length = 0;
                var metaDto = this.metadata().toDto();

                // We don't want to show certain reserved properties in the metadata text area.
                // Remove them from the DTO, restore them on save.
                var metaPropsToRemove = [
                    "@id", "@etag", "Origin", "Raven-Server-Build", "Raven-Client-Version", "Non-Authoritative-Information", "Raven-Timer-Request",
                    "Raven-Authenticated-User", "Raven-Last-Modified", "Has-Api-Key", "Access-Control-Allow-Origin", "Access-Control-Max-Age", "Access-Control-Allow-Methods",
                    "Access-Control-Request-Headers", "Access-Control-Allow-Headers", "Reverse-Via", "Persistent-Auth", "Allow", "Content-Disposition", "Content-Encoding",
                    "Content-Language", "Content-Location", "Content-MD5", "Content-Range", "Content-Type", "Expires", "Last-Modified", "Content-Length", "Keep-Alive", "X-Powered-By",
                    "X-AspNet-Version", "X-Requested-With", "X-SourceFiles", "Accept-Charset", "Accept-Encoding", "Accept", "Accept-Language", "Authorization", "Cookie", "Expect",
                    "From", "Host", "If-MatTemp-Index-Scorech", "If-Modified-Since", "If-None-Match", "If-Range", "If-Unmodified-Since", "Max-Forwards", "Referer", "TE", "User-Agent", "Accept-Ranges",
                    "Age", "Allow", "ETag", "Location", "Retry-After", "Server", "Set-Cookie2", "Set-Cookie", "Vary", "Www-Authenticate", "Cache-Control", "Connection", "Date", "Pragma",
                    "Trailer", "Transfer-Encoding", "Upgrade", "Via", "Warning", "X-ARR-LOG-ID", "X-ARR-SSL", "X-Forwarded-For", "X-Original-URL", "Size-In-Kb"];

                for (var property in metaDto) {
                    if (metaDto.hasOwnProperty(property) && metaPropsToRemove.contains(property)) {
                        if (metaDto[property]) {
                            this.metaPropsToRestoreOnSave.push({ name: property, value: metaDto[property].toString() });
                        }
                        delete metaDto[property];
                    }
                }

                var metaString = this.stringify(metaDto);
                this.metadataText(metaString);
                if (meta.id != undefined) {
                    this.userSpecifiedId(meta.id);
                }
            }
        };

        editDocument.prototype.loadRelatedDocumentsList = function (document) {
            var _this = this;
            var relatedDocumentsCandidates = this.findRelatedDocumentsCandidates(document);
            var docIDsVerifyCommand = new verifyDocumentsIDsCommand(relatedDocumentsCandidates, this.activeDatabase(), true, true);
            var response = docIDsVerifyCommand.execute();
            if (response.then) {
                response.done(function (verifiedIDs) {
                    _this.relatedDocumentHrefs(verifiedIDs.map(function (verified) {
                        return {
                            id: verified.toString(),
                            href: appUrl.forEditDoc(verified.toString(), null, null, _this.activeDatabase())
                        };
                    }));
                });
            } else {
                this.relatedDocumentHrefs(response.map(function (verified) {
                    return {
                        id: verified.toString(),
                        href: appUrl.forEditDoc(verified.toString(), null, null, _this.activeDatabase())
                    };
                }));
            }
        };

        editDocument.prototype.appendRecentDocument = function (docId) {
            var _this = this;
            var existingRecentDocumentsStore = editDocument.recentDocumentsInDatabases.first(function (x) {
                return x.databaseName == _this.databaseForEditedDoc.name;
            });
            if (existingRecentDocumentsStore) {
                var existingDocumentInStore = existingRecentDocumentsStore.recentDocuments.first(function (x) {
                    return x === docId;
                });
                if (!existingDocumentInStore) {
                    if (existingRecentDocumentsStore.recentDocuments().length == 5) {
                        existingRecentDocumentsStore.recentDocuments.pop();
                    }
                    existingRecentDocumentsStore.recentDocuments.unshift(docId);
                }
            } else {
                editDocument.recentDocumentsInDatabases.push({ databaseName: this.databaseForEditedDoc.name, recentDocuments: ko.observableArray([docId]) });
            }
        };

        editDocument.prototype.resolveConflicts = function () {
            var _this = this;
            var task = new resolveMergeCommand(this.activeDatabase(), this.editedDocId()).execute();
            task.done(function (response) {
                _this.documentText(response.Document);
                _this.metadataText(response.Metadata);
            });
        };

        editDocument.prototype.getColorClass = function (documentId) {
            var entityName = document.getEntityNameFromId(documentId);
            if (entityName) {
                return collection.getCollectionCssClass(entityName, this.activeDatabase());
            }

            return "";
        };
        editDocument.editDocSelector = "#editDocumentContainer";
        editDocument.recentDocumentsInDatabases = ko.observableArray();
        return editDocument;
    })(viewModelBase);

    
    return editDocument;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/editIndex", ["require", "exports", "plugins/router", "viewmodels/viewModelBase", "models/index", "models/indexDefinition", "models/indexPriority", "models/luceneField", "models/spatialIndexField", "commands/getIndexDefinitionCommand", "commands/getDatabaseStatsCommand", "common/appUrl", "plugins/dialog", "common/jsonUtil", "common/aceEditorBindingHandler", "common/messagePublisher", "common/autoCompleteBindingHandler", "durandal/app", "models/indexAceAutoCompleteProvider", "commands/getScriptedIndexesCommand", "models/scriptedIndex", "common/autoCompleterSupport", "common/mergedIndexesStorage", "viewmodels/deleteIndexesConfirm"], function(require, exports, router, viewModelBase, index, indexDefinition, indexPriority, luceneField, spatialIndexField, getIndexDefinitionCommand, getDatabaseStatsCommand, appUrl, dialog, jsonUtil, aceEditorBindingHandler, messagePublisher, autoCompleteBindingHandler, app, indexAceAutoCompleteProvider, getScriptedIndexesCommand, scriptedIndexModel, autoCompleterSupport, mergedIndexesStorage, deleteIndexesConfirm) {
    var editIndex = (function (_super) {
        __extends(editIndex, _super);
        function editIndex() {
            var _this = this;
            _super.call(this);
            this.isEditingExistingIndex = ko.observable(false);
            this.mergeSuggestion = ko.observable(null);
            this.priority = ko.observable().extend({ required: true });
            this.editedIndex = ko.observable();
            this.termsUrl = ko.observable();
            this.queryUrl = ko.observable();
            this.editMaxIndexOutputsPerDocument = ko.observable(false);
            this.indexErrorsList = ko.observableArray();
            this.loadedIndexName = ko.observable();
            // Scripted Index Part
            this.isScriptedIndexBundleActive = ko.observable(false);
            this.scriptedIndex = ko.observable(null);
            this.indexScript = ko.observable("");
            this.deleteScript = ko.observable("");

            aceEditorBindingHandler.install();
            autoCompleteBindingHandler.install();

            this.appUrls = appUrl.forCurrentDatabase();

            this.priorityFriendlyName = ko.computed(function () {
                return _this.getPriorityFriendlyName();
            });
            this.priorityLabel = ko.computed(function () {
                return _this.priorityFriendlyName() ? "Priority: " + _this.priorityFriendlyName() : "Priority";
            });
            this.hasExistingReduce = ko.computed(function () {
                return _this.editedIndex() && _this.editedIndex().reduce();
            });
            this.hasMultipleMaps = ko.computed(function () {
                return _this.editedIndex() && _this.editedIndex().maps().length > 1;
            });
            this.indexName = ko.computed(function () {
                return (!!_this.editedIndex() && _this.isEditingExistingIndex()) ? _this.editedIndex().name() : "New Index";
            });
            this.currentIndexName = ko.computed(function () {
                return _this.isEditingExistingIndex() ? _this.editedIndex().name() : (_this.mergeSuggestion() != null) ? "Merged Index" : "New Index";
            });

            this.isScriptedIndexBundleActive.subscribe(function (active) {
                if (active) {
                    _this.fetchOrCreateScriptedIndex();
                }
            });

            this.indexName.subscribe(function (name) {
                if (_this.scriptedIndex() !== null) {
                    _this.scriptedIndex().indexName(name);
                }
            });

            this.scriptedIndex.subscribe(function (scriptedIndex) {
                _this.indexScript = scriptedIndex.indexScript;
                _this.deleteScript = scriptedIndex.deleteScript;
                _this.initializeDirtyFlag();
                _this.editedIndex().name.valueHasMutated();
            });

            this.editedIndex(this.createNewIndexDefinition());
        }
        editIndex.prototype.canActivate = function (indexToEditName) {
            _super.prototype.canActivate.call(this, indexToEditName);

            var db = this.activeDatabase();
            var mergeSuggestion = mergedIndexesStorage.getMergedIndex(db, indexToEditName);
            if (mergeSuggestion != null) {
                this.mergeSuggestion(mergeSuggestion);
                this.editedIndex(mergeSuggestion.mergedIndexDefinition);
            } else if (indexToEditName) {
                this.isEditingExistingIndex(true);
                var canActivateResult = $.Deferred();
                this.fetchIndexData(indexToEditName).done(function () {
                    return canActivateResult.resolve({ can: true });
                }).fail(function () {
                    messagePublisher.reportError("Could not find " + decodeURIComponent(indexToEditName) + " index");
                    canActivateResult.resolve({ redirect: appUrl.forIndexes(db) });
                });
                return canActivateResult;
            }

            return $.Deferred().resolve({ can: true });
        };

        editIndex.prototype.activate = function (indexToEditName) {
            _super.prototype.activate.call(this, indexToEditName);

            if (this.isEditingExistingIndex()) {
                this.editExistingIndex(indexToEditName);
            } else {
                this.priority(0 /* normal */);
            }

            this.initializeDirtyFlag();
            this.indexAutoCompleter = new indexAceAutoCompleteProvider(this.activeDatabase(), this.editedIndex);
            this.checkIfScriptedIndexBundleIsActive();
        };

        editIndex.prototype.attached = function () {
            this.addMapHelpPopover();
            this.addReduceHelpPopover();
            this.addScriptsLabelPopover();
        };

        editIndex.prototype.initializeDirtyFlag = function () {
            var _this = this;
            var indexDef = this.editedIndex();
            var checkedFieldsArray = [this.priority, indexDef.name, indexDef.map, indexDef.maps, indexDef.reduce, indexDef.numOfLuceneFields, indexDef.numOfSpatialFields, indexDef.maxIndexOutputsPerDocument];

            indexDef.luceneFields().forEach(function (lf) {
                checkedFieldsArray.push(lf.name);
                checkedFieldsArray.push(lf.stores);
                checkedFieldsArray.push(lf.sort);
                checkedFieldsArray.push(lf.termVector);
                checkedFieldsArray.push(lf.indexing);
                checkedFieldsArray.push(lf.analyzer);
                checkedFieldsArray.push(lf.suggestionDistance);
                checkedFieldsArray.push(lf.suggestionAccuracy);
            });

            indexDef.spatialFields().forEach(function (sf) {
                checkedFieldsArray.push(sf.name);
                checkedFieldsArray.push(sf.type);
                checkedFieldsArray.push(sf.strategy);
                checkedFieldsArray.push(sf.minX);
                checkedFieldsArray.push(sf.maxX);
                checkedFieldsArray.push(sf.circleRadiusUnits);
                checkedFieldsArray.push(sf.maxTreeLevel);
                checkedFieldsArray.push(sf.minY);
                checkedFieldsArray.push(sf.maxY);
            });

            checkedFieldsArray.push(this.indexScript);
            checkedFieldsArray.push(this.deleteScript);

            this.dirtyFlag = new ko.DirtyFlag(checkedFieldsArray, false, jsonUtil.newLineNormalizingHashFunction);

            this.isSaveEnabled = ko.computed(function () {
                return !!_this.editedIndex().name() && _this.dirtyFlag().isDirty();
            });
        };

        editIndex.prototype.editExistingIndex = function (unescapedIndexName) {
            var indexName = decodeURIComponent(unescapedIndexName);
            this.loadedIndexName(indexName);
            this.termsUrl(appUrl.forTerms(unescapedIndexName, this.activeDatabase()));
            this.queryUrl(appUrl.forQuery(this.activeDatabase(), indexName));
        };

        editIndex.prototype.addMapHelpPopover = function () {
            $("#indexMapsLabel").popover({
                html: true,
                trigger: 'hover',
                content: 'Maps project the fields to search on or to group by. It uses LINQ query syntax.<br/><br/>Example:</br><pre><span class="code-keyword">from</span> order <span class="code-keyword">in</span> docs.Orders<br/><span class="code-keyword">where</span> order.IsShipped<br/><span class="code-keyword">select new</span><br/>{</br>   order.Date, <br/>   order.Amount,<br/>   RegionId = order.Region.Id <br />}</pre>Each map function should project the same set of fields.'
            });
        };

        editIndex.prototype.addReduceHelpPopover = function () {
            $("#indexReduceLabel").popover({
                html: true,
                trigger: 'hover',
                content: 'The Reduce function consolidates documents from the Maps stage into a smaller set of documents. It uses LINQ query syntax.<br/><br/>Example:</br><pre><span class="code-keyword">from</span> result <span class="code-keyword">in</span> results<br/><span class="code-keyword">group</span> result <span class="code-keyword">by new</span> { result.RegionId, result.Date } into g<br/><span class="code-keyword">select new</span><br/>{<br/>  Date = g.Key.Date,<br/>  RegionId = g.Key.RegionId,<br/>  Amount = g.Sum(x => x.Amount)<br/>}</pre>The objects produced by the Reduce function should have the same fields as the inputs.'
            });
        };

        editIndex.prototype.fetchIndexData = function (unescapedIndexName) {
            var indexName = decodeURIComponent(unescapedIndexName);
            return $.when(this.fetchIndexToEdit(indexName), this.fetchIndexPriority(indexName));
        };

        editIndex.prototype.fetchIndexToEdit = function (indexName) {
            var _this = this;
            var deferred = $.Deferred();

            new getIndexDefinitionCommand(indexName, this.activeDatabase()).execute().done(function (results) {
                _this.editedIndex(new indexDefinition(results.Index));
                _this.editMaxIndexOutputsPerDocument(results.Index.MaxIndexOutputsPerDocument ? results.Index.MaxIndexOutputsPerDocument > 0 ? true : false : false);
                deferred.resolve();
            }).fail(function () {
                return deferred.reject();
            });

            return deferred;
        };

        editIndex.prototype.fetchIndexPriority = function (indexName) {
            var _this = this;
            var deferred = $.Deferred();

            new getDatabaseStatsCommand(this.activeDatabase()).execute().done(function (stats) {
                var lowerIndexName = indexName.toLowerCase();
                var matchingIndex = stats.Indexes.first(function (i) {
                    return i.Name.toLowerCase() === lowerIndexName;
                });
                if (matchingIndex) {
                    var priorityWithoutWhitespace = matchingIndex.Priority.replace(", ", ",");
                    _this.priority(index.priorityFromString(priorityWithoutWhitespace));
                }
                deferred.resolve();
            }).fail(function () {
                return deferred.reject();
            });

            return deferred;
        };

        editIndex.prototype.createNewIndexDefinition = function () {
            return indexDefinition.empty();
        };

        editIndex.prototype.save = function () {
            var _this = this;
            if (this.editedIndex().name()) {
                var index = this.editedIndex().toDto();

                require(["commands/saveIndexDefinitionCommand", "commands/saveScriptedIndexesCommand"], function (saveIndexDefinitionCommand, saveScriptedIndexesCommand) {
                    var commands = [];

                    commands.push(new saveIndexDefinitionCommand(index, _this.priority(), _this.activeDatabase()).execute());
                    if (_this.scriptedIndex() !== null) {
                        commands.push(new saveScriptedIndexesCommand([_this.scriptedIndex()], _this.activeDatabase()).execute());
                    }

                    $.when.apply($, commands).done(function () {
                        _this.initializeDirtyFlag();
                        _this.editedIndex().name.valueHasMutated();
                        var isSavingMergedIndex = _this.mergeSuggestion() != null;

                        if (!_this.isEditingExistingIndex()) {
                            _this.isEditingExistingIndex(true);
                            _this.editExistingIndex(index.Name);
                        }
                        if (isSavingMergedIndex) {
                            var indexesToDelete = _this.mergeSuggestion().canMerge.filter(function (indexName) {
                                return indexName != _this.editedIndex().name();
                            });
                            _this.deleteMergedIndexes(indexesToDelete);
                            _this.mergeSuggestion(null);
                        }

                        _this.updateUrl(index.Name, isSavingMergedIndex);
                    });
                });
            }
        };

        editIndex.prototype.deleteMergedIndexes = function (indexesToDelete) {
            var db = this.activeDatabase();
            var deleteViewModel = new deleteIndexesConfirm(indexesToDelete, db, "Delete Merged Indexes?");
            dialog.show(deleteViewModel);
        };

        editIndex.prototype.updateUrl = function (indexName, isSavingMergedIndex) {
            if (typeof isSavingMergedIndex === "undefined") { isSavingMergedIndex = false; }
            var url = appUrl.forEditIndex(indexName, this.activeDatabase());
            if (this.loadedIndexName() !== indexName) {
                _super.prototype.navigate.call(this, url);
            } else if (isSavingMergedIndex) {
                _super.prototype.updateUrl.call(this, url);
            }
        };

        editIndex.prototype.refreshIndex = function () {
            var _this = this;
            var canContinue = this.canContinueIfNotDirty('Unsaved Data', 'You have unsaved data. Are you sure you want to refresh the index from the server?');
            canContinue.done(function () {
                _this.fetchIndexData(_this.loadedIndexName()).done(function () {
                    _this.initializeDirtyFlag();
                    _this.editedIndex().name.valueHasMutated();
                });
            });
        };

        editIndex.prototype.deleteIndex = function () {
            var _this = this;
            var indexName = this.loadedIndexName();
            if (indexName) {
                var db = this.activeDatabase();
                var deleteViewModel = new deleteIndexesConfirm([indexName], db);
                deleteViewModel.deleteTask.done(function () {
                    //prevent asking for unsaved changes
                    _this.dirtyFlag().reset(); // Resync Changes
                    router.navigate(appUrl.forIndexes(db));
                });

                dialog.show(deleteViewModel);
            }
        };

        editIndex.prototype.idlePriority = function () {
            this.priority(4 /* idleForced */);
        };

        editIndex.prototype.disabledPriority = function () {
            this.priority(5 /* disabledForced */);
        };

        editIndex.prototype.abandonedPriority = function () {
            this.priority(6 /* abandonedForced */);
        };

        editIndex.prototype.normalPriority = function () {
            this.priority(0 /* normal */);
        };

        editIndex.prototype.getPriorityFriendlyName = function () {
            // Instead of showing things like "Idle,Forced", just show Idle.
            var priority = this.priority();
            if (!priority) {
                return "";
            }
            if (priority === 4 /* idleForced */) {
                return index.priorityToString(1 /* idle */);
            }
            if (priority === 5 /* disabledForced */) {
                return index.priorityToString(2 /* disabled */);
            }
            if (priority === 6 /* abandonedForced */) {
                return index.priorityToString(3 /* abandoned */);
            }

            return index.priorityToString(priority);
        };

        editIndex.prototype.addMap = function () {
            this.editedIndex().maps.push(ko.observable());
        };

        editIndex.prototype.addReduce = function () {
            if (!this.hasExistingReduce()) {
                this.editedIndex().reduce(" ");
                this.addReduceHelpPopover();
            }
        };

        editIndex.prototype.addField = function () {
            var field = new luceneField("");
            field.indexFieldNames = this.editedIndex().fields();
            field.calculateFieldNamesAutocomplete();
            this.editedIndex().luceneFields.push(field);
        };

        editIndex.prototype.removeMaxIndexOutputs = function () {
            this.editedIndex().maxIndexOutputsPerDocument(0);
            this.editMaxIndexOutputsPerDocument(false);
        };

        editIndex.prototype.addSpatialField = function () {
            var field = spatialIndexField.empty();
            this.editedIndex().spatialFields.push(field);
        };

        editIndex.prototype.removeMap = function (mapIndex) {
            this.editedIndex().maps.splice(mapIndex, 1);
        };

        editIndex.prototype.removeReduce = function () {
            this.editedIndex().reduce(null);
        };

        editIndex.prototype.removeLuceneField = function (fieldIndex) {
            this.editedIndex().luceneFields.splice(fieldIndex, 1);
        };

        editIndex.prototype.removeSpatialField = function (fieldIndex) {
            this.editedIndex().spatialFields.splice(fieldIndex, 1);
        };

        editIndex.prototype.copyIndex = function () {
            var _this = this;
            require(["viewmodels/copyIndexDialog"], function (copyIndexDialog) {
                app.showDialog(new copyIndexDialog(_this.editedIndex().name(), _this.activeDatabase(), false));
            });
        };

        editIndex.prototype.createCSharpCode = function () {
            var _this = this;
            require(["commands/getCSharpIndexDefinitionCommand"], function (getCSharpIndexDefinitionCommand) {
                new getCSharpIndexDefinitionCommand(_this.editedIndex().name(), _this.activeDatabase()).execute().done(function (data) {
                    require(["viewmodels/showDataDialog"], function (showDataDialog) {
                        app.showDialog(new showDataDialog("C# Index Definition", data));
                    });
                });
            });
        };

        editIndex.prototype.formatIndex = function () {
            var _this = this;
            require(["commands/formatIndexCommand"], function (formatIndexCommand) {
                var index = _this.editedIndex();
                var mapReduceObservableArray = new Array();
                mapReduceObservableArray.pushAll(index.maps());
                if (!!index.reduce()) {
                    mapReduceObservableArray.push(index.reduce);
                }

                var mapReduceArray = mapReduceObservableArray.map(function (observable) {
                    return observable();
                });

                new formatIndexCommand(_this.activeDatabase(), mapReduceArray, _this.activeDatabase()).execute().done(function (formatedMapReduceArray) {
                    formatedMapReduceArray.forEach(function (element, i) {
                        if (element.indexOf("Could not format:") == -1) {
                            mapReduceObservableArray[i](element);
                        } else {
                            var isReduce = !!index.reduce() && i == formatedMapReduceArray.length - 1;
                            var errorMessage = isReduce ? "Failed to format reduce!" : "Failed to format map '" + i + "'!";
                            messagePublisher.reportError(errorMessage, element);
                        }
                    });
                });
            });
        };

        editIndex.prototype.checkIfScriptedIndexBundleIsActive = function () {
            var db = this.activeDatabase();
            var activeBundles = db.activeBundles();
            this.isScriptedIndexBundleActive(activeBundles.indexOf("ScriptedIndexResults") != -1);
        };

        editIndex.prototype.fetchOrCreateScriptedIndex = function () {
            var _this = this;
            var self = this;
            new getScriptedIndexesCommand(this.activeDatabase(), this.indexName()).execute().done(function (scriptedIndexes) {
                if (scriptedIndexes.length > 0) {
                    self.scriptedIndex(scriptedIndexes[0]);
                } else {
                    self.scriptedIndex(scriptedIndexModel.emptyForIndex(self.indexName()));
                }

                _this.initializeDirtyFlag();
            });
        };

        editIndex.prototype.addScriptsLabelPopover = function () {
            var indexScriptpopOverSettings = {
                html: true,
                trigger: 'hover',
                content: 'Index Scripts are written in JScript.<br/><br/>Example:</br><pre><span class="code-keyword">var</span> company = LoadDocument(<span class="code-keyword">this</span>.Company);<br/><span class="code-keyword">if</span>(company == null) <span class="code-keyword">return</span>;<br/>company.Orders = { Count: <span class="code-keyword">this</span>.Count, Total: <span class="code-keyword">this</span>.Total };<br/>PutDocument(<span class="code-keyword">this</span>.Company, company);</pre>',
                selector: '.index-script-label'
            };
            $('#indexScriptPopover').popover(indexScriptpopOverSettings);
            var deleteScriptPopOverSettings = {
                html: true,
                trigger: 'hover',
                content: 'Index Scripts are written in JScript.<br/><br/>Example:</br><pre><span class="code-keyword">var</span> company = LoadDocument(<span class="code-keyword">this</span>.Company);<br/><span class="code-keyword">if</span> (company == null) <span class="code-keyword">return</span>;<br/><span class="code-keyword">delete</span> company.Orders;<br/>PutDocument(<span class="code-keyword">this</span>.Company, company);</pre>',
                selector: '.delete-script-label'
            };
            $('#deleteScriptPopover').popover(deleteScriptPopOverSettings);
        };

        editIndex.prototype.scriptedIndexCompleter = function (editor, session, pos, prefix, callback) {
            var completions = [
                { name: "LoadDocument", args: "id" },
                { name: "PutDocument", args: "id, doc" },
                { name: "DeleteDocument", args: "id" }
            ];
            var result = completions.filter(function (entry) {
                return autoCompleterSupport.wordMatches(prefix, entry.name);
            }).map(function (entry) {
                return { name: entry.name, value: entry.name, score: 100, meta: entry.args };
            });

            callback(null, result);
        };
        return editIndex;
    })(viewModelBase);

    
    return editIndex;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/editSqlReplication", ["require", "exports", "plugins/router", "viewmodels/viewModelBase", "common/appUrl", "common/jsonUtil", "common/aceEditorBindingHandler", "common/messagePublisher", "durandal/app", "models/sqlReplication", "commands/getCollectionsCommand", "viewmodels/sqlReplicationStatsDialog", "models/document", "commands/saveDocumentCommand", "viewmodels/deleteDocuments", "commands/getDocumentWithMetadataCommand", "commands/getDocumentsMetadataByIDPrefixCommand", "models/documentMetadata", "commands/resetSqlReplicationCommand", "viewmodels/sqlReplicationSimulationDialog", "models/sqlReplicationConnections"], function(require, exports, router, viewModelBase, appUrl, jsonUtil, aceEditorBindingHandler, messagePublisher, app, sqlReplication, getCollectionsCommand, sqlReplicationStatsDialog, document, saveDocumentCommand, deleteDocuments, getDocumentWithMetadataCommand, getDocumentsMetadataByIDPrefixCommand, documentMetadata, resetSqlReplicationCommand, sqlReplicationSimulationDialog, sqlReplicationConnections) {
    var editSqlReplication = (function (_super) {
        __extends(editSqlReplication, _super);
        function editSqlReplication() {
            var _this = this;
            _super.call(this);
            this.editedReplication = ko.observable();
            this.collections = ko.observableArray();
            this.loadedSqlReplications = [];
            this.isEditingNewReplication = ko.observable(false);
            this.isBasicView = ko.observable(true);
            this.availableConnectionStrings = ko.observableArray();
            this.sqlReplicationStatsAndMetricsHref = appUrl.forCurrentDatabase().statusDebugSqlReplication;
            this.isBusy = ko.observable(false);
            this.initialReplicationId = '';

            aceEditorBindingHandler.install();
            this.appUrls = appUrl.forCurrentDatabase();
            this.sqlReplicationName = ko.computed(function () {
                return (!!_this.editedReplication() && !_this.isEditingNewReplication()) ? _this.editedReplication().name() : null;
            });
        }
        editSqlReplication.prototype.addScriptLabelPopover = function () {
            var popOverSettings = {
                html: true,
                trigger: 'hover',
                content: 'Replication scripts use JScript.<br/><br/>The script will be called once for each document in the source document collection, with <span class="code-keyword">this</span> representing the document, and the document id available as <i>documentId</i>.<br/><br/>Call <i>replicateToTableName</i> for each row you want to write to the database.<br/><br/>Example:</br><pre><span class="code-keyword">var</span> orderData = {<br/>   Id: documentId,<br/>   OrderLinesCount: <span class="code-keyword">this</span>.Lines.length,<br/>   TotalCost: 0<br/>};<br/><br/>for (<span class="code-keyword">var</span> i = 0; i &lt; <span class="code-keyword">this</span>.Lines.length; i++) {<br/>   <span class="code-keyword">var</span> line = <span class="code-keyword">this</span>.Lines[i];<br/>   <span class="code-keyword">var</span> lineCost = ((line.Quantity * line.PricePerUnit) * (1 - line.Discount));<br/>   orderData.TotalCost += lineCost;<br/><br/>   replicateToOrderLines({"<br/>      OrderId: documentId,<br/>      Qty: line.Quantity,<br/>      Product: line.Product,<br/>      Cost: lineCost<br/>   });<br/>}<br/><br/>replicateToOrders(orderData);</pre>',
                selector: '.script-label',
                placement: "right"
            };
            $('body').popover(popOverSettings);
            $('form :input[name="ravenEntityName"]').on("keypress", function (e) {
                return e.which != 13;
            });
        };

        editSqlReplication.prototype.loadSqlReplicationConnections = function () {
            var _this = this;
            return new getDocumentWithMetadataCommand("Raven/SqlReplication/Connections", this.activeDatabase()).execute().done(function (x) {
                var dto = x.toDto(true);
                var connections = new sqlReplicationConnections(dto);

                if (connections.predefinedConnections().length > 0) {
                    connections.predefinedConnections().forEach(function (x) {
                        return _this.availableConnectionStrings.push(x);
                    });
                }
            });
        };

        editSqlReplication.prototype.canActivate = function (replicationToEditName) {
            var _this = this;
            var canActivateResult = $.Deferred();
            this.loadSqlReplicationConnections().always(function () {
                if (replicationToEditName) {
                    _this.loadSqlReplication(replicationToEditName).done(function () {
                        return canActivateResult.resolve({ can: true });
                    }).fail(function () {
                        messagePublisher.reportError("Could not find " + decodeURIComponent(replicationToEditName) + " replication");
                        canActivateResult.resolve({ redirect: appUrl.forSqlReplications(_this.activeDatabase()) });
                    });
                } else {
                    _this.isEditingNewReplication(true);
                    _this.editedReplication(_this.createSqlReplication());
                    _this.fetchCollections(_this.activeDatabase()).always(function () {
                        return canActivateResult.resolve({ can: true });
                    });
                }
            });
            return canActivateResult;
        };

        editSqlReplication.prototype.activate = function (replicationToEditName) {
            var _this = this;
            _super.prototype.activate.call(this, replicationToEditName);
            this.dirtyFlag = new ko.DirtyFlag([this.editedReplication], false, jsonUtil.newLineNormalizingHashFunctionWithIgnoredFields(["__metadata", "metadata"]));
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        editSqlReplication.prototype.providerChanged = function (obj, event) {
            if (event.originalEvent && obj.connectionStringType() == obj.CONNECTION_STRING) {
                var curConnectionString = !!this.editedReplication().connectionStringValue() ? this.editedReplication().connectionStringValue().trim() : "";
                if (curConnectionString === "" || editSqlReplication.sqlProvidersConnectionStrings.first(function (x) {
                    return x.ConnectionString == curConnectionString;
                })) {
                    var matchingConnectionStringPair = editSqlReplication.sqlProvidersConnectionStrings.first(function (x) {
                        return x.ProviderName == event.originalEvent.srcElement.selectedOptions[0].value;
                    });
                    if (!!matchingConnectionStringPair) {
                        var matchingConnectionStringValue = matchingConnectionStringPair.ConnectionString;
                        this.editedReplication().connectionStringValue(matchingConnectionStringValue);
                    }
                }
            }
        };

        editSqlReplication.prototype.loadSqlReplication = function (replicationToLoadName) {
            var _this = this;
            var loadDeferred = $.Deferred();
            $.when(this.fetchSqlReplicationToEdit(replicationToLoadName), this.fetchCollections(this.activeDatabase())).done(function () {
                _this.editedReplication().collections = _this.collections;
                new getDocumentsMetadataByIDPrefixCommand(editSqlReplication.sqlReplicationDocumentPrefix, 256, _this.activeDatabase()).execute().done(function (results) {
                    _this.loadedSqlReplications = results;
                    loadDeferred.resolve();
                }).fail(function () {
                    return loadDeferred.reject();
                });
            }).fail(function () {
                loadDeferred.reject();
            });

            return loadDeferred;
        };

        editSqlReplication.prototype.fetchSqlReplicationToEdit = function (sqlReplicationName) {
            var _this = this;
            var loadDocTask = new getDocumentWithMetadataCommand(editSqlReplication.sqlReplicationDocumentPrefix + sqlReplicationName, this.activeDatabase()).execute();
            loadDocTask.done(function (document) {
                var sqlReplicationDto = document.toDto(true);
                _this.editedReplication(new sqlReplication(sqlReplicationDto));
                _this.initialReplicationId = _this.editedReplication().name();
                _this.dirtyFlag().reset(); //Resync Changes
            });
            loadDocTask.always(function () {
                return _this.isBusy(false);
            });
            this.isBusy(true);
            return loadDocTask;
        };

        editSqlReplication.prototype.fetchCollections = function (db) {
            var _this = this;
            return new getCollectionsCommand(db).execute().done(function (collections) {
                _this.collections(collections.map(function (collection) {
                    return collection.name;
                }));
            });
        };

        editSqlReplication.prototype.showStats = function () {
            var viewModel = new sqlReplicationStatsDialog(this.activeDatabase(), this.editedReplication().name());
            app.showDialog(viewModel);
        };

        editSqlReplication.prototype.refreshSqlReplication = function () {
            if (this.isEditingNewReplication() === false) {
                var docId = this.initialReplicationId;
                this.loadSqlReplication(docId);
            } else {
                this.editedReplication(this.createSqlReplication());
            }
        };

        editSqlReplication.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);
            this.addScriptLabelPopover();
            $('pre').each(function (index, currentPreElement) {
                _this.initializeAceValidity(currentPreElement);
            });

            var editorElement = $("#sqlReplicationEditor");
            if (editorElement.length > 0) {
                this.docEditor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }

            $("#sqlReplicationEditor").on('DynamicHeightSet', function () {
                return _this.docEditor.resize();
            });
        };

        editSqlReplication.prototype.createSqlReplication = function () {
            var newSqlReplication = sqlReplication.empty();
            newSqlReplication.collections(this.collections());
            this.collections.subscribe(function (value) {
                return newSqlReplication.collections(value);
            });
            this.subscribeToSqlReplicationName(newSqlReplication);
            return newSqlReplication;
        };

        editSqlReplication.prototype.subscribeToSqlReplicationName = function (sqlReplicationElement) {
            var _this = this;
            sqlReplicationElement.name.subscribe(function (previousName) {
                //Get the previous value of 'name' here before it's set to newValue
                var nameInputArray = $('input[name="name"]').filter(function () {
                    return this.value === previousName;
                });
                if (nameInputArray.length === 1) {
                    var inputField = nameInputArray[0];
                    inputField.setCustomValidity("");
                }
            }, this, "beforeChange");
            sqlReplicationElement.name.subscribe(function (newName) {
                var message = "";
                if (newName === "") {
                    message = "Please fill out this field.";
                } else if (_this.isSqlReplicationNameExists(newName)) {
                    message = "SQL Replication name already exists.";
                }
                $('input[name="name"]').filter(function () {
                    return this.value === newName;
                }).each(function (index, element) {
                    element.setCustomValidity(message);
                });
            });
        };

        editSqlReplication.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#sqlReplicationEditor").off('DynamicHeightSet');
        };

        editSqlReplication.prototype.isSqlReplicationNameExists = function (name) {
            var count = 0;
            return !!this.loadedSqlReplications.first(function (x) {
                return x == name;
            });
        };

        editSqlReplication.prototype.initializeAceValidity = function (element) {
            var editorElement = $("#aceEditor");
            if (editorElement.length > 0) {
                var editor = ko.utils.domData.get(editorElement[0], "aceEditor");
                var editorValue = editor.getSession().getValue();
                if (editorValue === "") {
                    var textarea = $(element).find('textarea')[0];
                    textarea.setCustomValidity("Please fill out this field.");
                }
            }
        };

        editSqlReplication.prototype.save = function () {
            var _this = this;
            var currentDocumentId = this.editedReplication().name();

            if (this.initialReplicationId !== currentDocumentId) {
                delete this.editedReplication().__metadata.etag;
                delete this.editedReplication().__metadata.lastModified;
            }

            var newDoc = new document(this.editedReplication().toDto());
            newDoc.__metadata = new documentMetadata();
            this.attachReservedMetaProperties(editSqlReplication.sqlReplicationDocumentPrefix + currentDocumentId, newDoc.__metadata);

            var saveCommand = new saveDocumentCommand(editSqlReplication.sqlReplicationDocumentPrefix + currentDocumentId, newDoc, this.activeDatabase());
            var saveTask = saveCommand.execute();
            saveTask.done(function (saveResult) {
                var savedDocumentDto = saveResult[0];
                var sqlReplicationKey = savedDocumentDto.Key.substring(editSqlReplication.sqlReplicationDocumentPrefix.length);
                _this.loadSqlReplication(sqlReplicationKey);
                _this.updateUrl(sqlReplicationKey);

                _this.dirtyFlag().reset(); //Resync Changes

                _this.isEditingNewReplication(false);
                _this.initialReplicationId = currentDocumentId;
            });
        };

        editSqlReplication.prototype.updateUrl = function (docId) {
            var url = appUrl.forEditSqlReplication(docId, this.activeDatabase());
            router.navigate(url, false);
        };

        editSqlReplication.prototype.attachReservedMetaProperties = function (id, target) {
            target.etag = '';
            target.ravenEntityName = !target.ravenEntityName ? document.getEntityNameFromId(id) : target.ravenEntityName;
            target.id = id;
        };

        editSqlReplication.prototype.deleteSqlReplication = function () {
            var _this = this;
            var newDoc = new document(this.editedReplication().toDto());

            if (newDoc) {
                var viewModel = new deleteDocuments([newDoc]);
                viewModel.deletionTask.done(function () {
                    _this.dirtyFlag().reset(); //Resync Changes
                    router.navigate(appUrl.forCurrentDatabase().sqlReplications());
                });
                app.showDialog(viewModel, editSqlReplication.editSqlReplicationSelector);
            }
        };
        editSqlReplication.prototype.resetSqlReplication = function () {
            var _this = this;
            app.showMessage("You are about to reset this SQL Replication, forcing replication of all collection items", "SQL Replication Reset", ["Cancel", "Reset"]).then(function (dialogResult) {
                if (dialogResult === "Reset") {
                    var replicationId = _this.initialReplicationId;
                    new resetSqlReplicationCommand(_this.activeDatabase(), replicationId).execute().done(function () {
                        return messagePublisher.reportSuccess("SQL replication " + replicationId + " was reset successfully!");
                    }).fail(function () {
                        return messagePublisher.reportError("SQL replication " + replicationId + " failed to reset!");
                    });
                }
            });
        };

        editSqlReplication.prototype.simulateSqlReplication = function () {
            var viewModel = new sqlReplicationSimulationDialog(this.activeDatabase(), this.editedReplication());
            app.showDialog(viewModel);
        };

        editSqlReplication.prototype.getSqlReplicationConnectionStringsUrl = function (sqlReplicationName) {
            return appUrl.forSqlReplicationConnections(this.activeDatabase());
        };
        editSqlReplication.editSqlReplicationSelector = "#editSQLReplication";
        editSqlReplication.sqlReplicationDocumentPrefix = "Raven/SqlReplication/Configuration/";

        editSqlReplication.sqlProvidersConnectionStrings = [
            { ProviderName: 'System.Data.SqlClient', ConnectionString: 'Server=[Server Address];Database=[Database Name];User Id=[User ID];Password=[Password];' },
            { ProviderName: 'System.Data.SqlServerCe.4.0', ConnectionString: 'Data Source=[path of .sdf file];Persist Security Info=False;' },
            { ProviderName: 'System.Data.SqlServerCe.3.5', ConnectionString: 'Provider=Microsoft.SQLSERVER.CE.OLEDB.3.5;Data Source=[path of .sdf file];' },
            { ProviderName: 'System.Data.OleDb', ConnectionString: '' },
            { ProviderName: 'System.Data.OracleClient', ConnectionString: 'Data Source=[TNSNames name];User Id=[User ID];Password=[Password];Integrated Security=no;' },
            { ProviderName: 'MySql.Data.MySqlClient', ConnectionString: 'Server=[Server Address];Port=[Server Port(default:3306)];Database=[Database Name];Uid=[User ID];Pwd=[Password];' },
            { ProviderName: 'Npgsql', ConnectionString: 'Server=[Server Address];Port=[Port];Database=[Database Name];User Id=[User ID];Password=[Password];' }
        ];
        return editSqlReplication;
    })(viewModelBase);

    
    return editSqlReplication;
});
/// <reference path="../models/dto.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/editTransformer", ["require", "exports", "viewmodels/viewModelBase", "models/transformer", "commands/saveTransformerCommand", "commands/getSingleTransformerCommand", "common/aceEditorBindingHandler", "viewmodels/deleteTransformerConfirm", "viewmodels/saveTransformerWithNewNameConfirm", "plugins/dialog", "common/appUrl", "common/jsonUtil", "plugins/router", "common/messagePublisher", "commands/formatIndexCommand"], function(require, exports, viewModelBase, transformer, saveTransformerCommand, getSingleTransformerCommand, aceEditorBindingHandler, deleteTransformerConfirm, saveTransformerWithNewNameConfirm, dialog, appUrl, jsonUtil, router, messagePublisher, formatIndexCommand) {
    var editTransformer = (function (_super) {
        __extends(editTransformer, _super);
        function editTransformer() {
            var _this = this;
            _super.call(this);
            this.editedTransformer = ko.observable();
            this.isEditingExistingTransformer = ko.observable(false);
            this.popoverOptions = ko.observable();
            this.editorCollection = ko.observableArray();
            this.loadedTransformerName = ko.observable();

            aceEditorBindingHandler.install();
            this.appUrls = appUrl.forCurrentDatabase();
            this.transformerName = ko.computed(function () {
                return (!!_this.editedTransformer() && _this.isEditingExistingTransformer()) ? _this.editedTransformer().name() : null;
            });
        }
        editTransformer.prototype.canActivate = function (transformerToEditName) {
            var _this = this;
            if (transformerToEditName) {
                var canActivateResult = $.Deferred();
                this.editExistingTransformer(transformerToEditName).done(function () {
                    return canActivateResult.resolve({ can: true });
                }).fail(function () {
                    messagePublisher.reportError("Could not find " + transformerToEditName + " transformer");
                    canActivateResult.resolve({ redirect: appUrl.forTransformers(_this.activeDatabase()) });
                });

                return canActivateResult;
            } else {
                return $.Deferred().resolve({ can: true });
            }
        };

        editTransformer.prototype.activate = function (transformerToEditName) {
            var _this = this;
            _super.prototype.activate.call(this, transformerToEditName);

            if (transformerToEditName) {
                this.isEditingExistingTransformer(true);
            } else {
                this.editedTransformer(transformer.empty());
            }

            this.dirtyFlag = new ko.DirtyFlag([this.editedTransformer().name, this.editedTransformer().transformResults], false, jsonUtil.newLineNormalizingHashFunction);
            this.isSaveEnabled = ko.computed(function () {
                return !!_this.editedTransformer().name() && _this.dirtyFlag().isDirty();
            });
        };

        editTransformer.prototype.attached = function () {
            var _this = this;
            this.addTransformerHelpPopover();
            this.createKeyboardShortcut("alt+c", function () {
                return _this.focusOnEditor();
            }, editTransformer.containerSelector);
            this.createKeyboardShortcut("alt+shift+del", function () {
                return _this.deleteTransformer();
            }, editTransformer.containerSelector);
        };

        editTransformer.prototype.addTransformerHelpPopover = function () {
            $("#transformerResultsLabel").popover({
                html: true,
                trigger: "hover",
                content: 'The Transform function allows you to change the shape of individual result documents before the server returns them. It uses C# LINQ query syntax <br/> <br/> Example: <pre> <br/> <span class="code-keyword">from</span> result <span class="code-keyword">in</span> results <br/> <span class="code-keyword">let</span> category = LoadDocument(result.Category) <br/> <span class="code-keyword">select new</span> { <br/>    result.Name, <br/>    result.PricePerUser, <br/>    Category = category.Name, <br/>    CategoryDescription = category.Description <br/>}</pre>'
            });
        };

        editTransformer.prototype.focusOnEditor = function (elements, data) {
            if (typeof elements === "undefined") { elements = null; }
            if (typeof data === "undefined") { data = null; }
            var editorElement = $("#transformerAceEditor").length == 1 ? $("#transformerAceEditor")[0] : null;
            if (editorElement) {
                var docEditor = ko.utils.domData.get($("#transformerAceEditor")[0], "aceEditor");
                if (docEditor) {
                    docEditor.focus();
                }
            }
        };

        editTransformer.prototype.editExistingTransformer = function (unescapedTransformerName) {
            var _this = this;
            var transformerName = decodeURIComponent(unescapedTransformerName);
            this.loadedTransformerName(transformerName);
            return this.fetchTransformerToEdit(transformerName).done(function (trans) {
                return _this.editedTransformer(new transformer().initFromSave(trans));
            });
        };

        editTransformer.prototype.fetchTransformerToEdit = function (transformerName) {
            return new getSingleTransformerCommand(transformerName, this.activeDatabase()).execute();
        };

        editTransformer.prototype.saveTransformer = function () {
            var _this = this;
            if (this.isEditingExistingTransformer() && this.editedTransformer().wasNameChanged()) {
                var db = this.activeDatabase();
                var saveTransformerWithNewNameViewModel = new saveTransformerWithNewNameConfirm(this.editedTransformer(), db);
                saveTransformerWithNewNameViewModel.saveTask.done(function (trans) {
                    _this.dirtyFlag().reset(); // Resync Changes
                    _this.updateUrl(_this.editedTransformer().name());
                });
                dialog.show(saveTransformerWithNewNameViewModel);
            } else {
                new saveTransformerCommand(this.editedTransformer(), this.activeDatabase()).execute().done(function () {
                    _this.dirtyFlag().reset();
                    if (!_this.isEditingExistingTransformer()) {
                        _this.isEditingExistingTransformer(true);
                        _this.updateUrl(_this.editedTransformer().name());
                    }
                });
            }
        };

        editTransformer.prototype.updateUrl = function (transformerName) {
            router.navigate(appUrl.forEditTransformer(transformerName, this.activeDatabase()));
        };

        editTransformer.prototype.refreshTransformer = function () {
            var _this = this;
            var canContinue = this.canContinueIfNotDirty("Unsaved Data", "You have unsaved data. Are you sure you want to refresh the transformer from the server?");
            canContinue.done(function () {
                var transformerName = _this.loadedTransformerName();
                _this.fetchTransformerToEdit(transformerName).always(function () {
                    return _this.dirtyFlag().reset();
                }).done(function (trans) {
                    return _this.editedTransformer().initFromSave(trans);
                }).fail(function () {
                    messagePublisher.reportError("Could not find " + transformerName + " transformer");
                    _this.navigate(appUrl.forTransformers(_this.activeDatabase()));
                });
            });
        };

        editTransformer.prototype.formatTransformer = function () {
            var editedTransformer = this.editedTransformer();

            new formatIndexCommand(this.activeDatabase(), [editedTransformer.transformResults()]).execute().done(function (result) {
                var formatedTransformer = result[0];
                if (formatedTransformer.indexOf("Could not format:") == -1) {
                    editedTransformer.transformResults(formatedTransformer);
                } else {
                    messagePublisher.reportError("Failed to format transformer!", formatedTransformer);
                }
            });
        };

        editTransformer.prototype.deleteTransformer = function () {
            var transformer = this.editedTransformer();

            if (transformer) {
                var db = this.activeDatabase();
                var deleteViewmodel = new deleteTransformerConfirm([transformer.name()], db);
                deleteViewmodel.deleteTask.done(function () {
                    router.navigate(appUrl.forTransformers(db));
                });
                dialog.show(deleteViewmodel);
            }
        };
        editTransformer.containerSelector = "#editTransformerContainer";
        return editTransformer;
    })(viewModelBase);

    
    return editTransformer;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/enterApiKey", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "common/oauthContext"], function(require, exports, dialog, dialogViewModelBase, oauthContext) {
    var enterApiKey = (function (_super) {
        __extends(enterApiKey, _super);
        function enterApiKey() {
            _super.apply(this, arguments);
            this.apiKey = ko.observable("");
        }
        enterApiKey.prototype.cancel = function () {
            dialog.close(this);
        };

        enterApiKey.prototype.ok = function () {
            oauthContext.apiKey(this.apiKey());
            dialog.close(this);
        };
        return enterApiKey;
    })(dialogViewModelBase);

    
    return enterApiKey;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/executePatchConfirm", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var executePatchConfirm = (function (_super) {
        __extends(executePatchConfirm, _super);
        function executePatchConfirm() {
            _super.apply(this, arguments);
            this.viewTask = $.Deferred();
            this.wasConfirmed = false;
        }
        executePatchConfirm.prototype.executePatch = function () {
            this.viewTask.resolve();
            this.wasConfirmed = true;
            dialog.close(this);
        };

        executePatchConfirm.prototype.cancel = function () {
            this.viewTask.reject();
            this.wasConfirmed = false;
            dialog.close(this);
        };

        executePatchConfirm.prototype.detached = function () {
            _super.prototype.detached.call(this);

            if (!this.wasConfirmed) {
                this.viewTask.reject();
            }
        };
        return executePatchConfirm;
    })(dialogViewModelBase);

    
    return executePatchConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/exportDatabase", ["require", "exports", "viewmodels/viewModelBase", "common/aceEditorBindingHandler", "commands/getCollectionsCommand", "common/appUrl"], function(require, exports, viewModelBase, aceEditorBindingHandler, getCollectionsCommand, appUrl) {
    var exportDatabase = (function (_super) {
        __extends(exportDatabase, _super);
        function exportDatabase() {
            _super.call(this);
            this.includeDocuments = ko.observable(true);
            this.includeIndexes = ko.observable(true);
            this.includeTransformers = ko.observable(true);
            this.includeAttachments = ko.observable(false);
            this.includeExpiredDocuments = ko.observable(false);
            this.includeAllCollections = ko.observable(true);
            this.removeAnalyzers = ko.observable(false);
            this.showAdvancedOptions = ko.observable(false);
            this.batchSize = ko.observable(1024);
            this.includedCollections = ko.observableArray();
            this.filters = ko.observableArray();
            this.transformScript = ko.observable();
            this.noneDefualtFileName = ko.observable("");
            this.chooseDifferntFileName = ko.observable(false);
            aceEditorBindingHandler.install();
        }
        exportDatabase.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            new getCollectionsCommand(this.activeDatabase()).execute().done(function (collections) {
                _this.includedCollections(collections.map(function (c) {
                    return {
                        collection: c.name,
                        isIncluded: ko.observable(false)
                    };
                }));
            });

            this.exportActionUrl = ko.computed(function () {
                return appUrl.forResourceQuery(_this.activeDatabase()) + "/studio-tasks/exportDatabase";
            });
        };

        exportDatabase.prototype.attached = function () {
            $("#transformScriptHelp").popover({
                html: true,
                trigger: 'hover',
                content: 'Transform scripts are written in JavaScript. <br /><br/>Example:<pre><span class="code-keyword">var</span> company = LoadDocument(<span class="code-keyword">this</span>.Company);<br /><span class="code-keyword">if</span> (company) {<br />&nbsp;&nbsp;&nbsp;company.Orders = { <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Count: <span class="code-keyword">this</span>.Count,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total: <span class="code-keyword">this</span>.Total<br />&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;PutDocument(<span class="code-keyword">this</span>.Company, company);<br />}</pre>'
            });
        };

        exportDatabase.prototype.startExport = function () {
            var operateOnTypes = 0;
            if (this.includeDocuments()) {
                operateOnTypes += 1;
            }
            if (this.includeIndexes()) {
                operateOnTypes += 2;
            }
            if (this.includeAttachments()) {
                operateOnTypes += 4;
            }
            if (this.includeTransformers()) {
                operateOnTypes += 8;
            }
            if (this.removeAnalyzers()) {
                operateOnTypes += 8000;
            }

            var filtersToSend = [];
            filtersToSend.pushAll(this.filters());

            if (!this.includeAllCollections()) {
                filtersToSend.push({
                    ShouldMatch: true,
                    Path: "@metadata.Raven-Entity-Name",
                    Values: this.includedCollections().filter(function (curCol) {
                        return curCol.isIncluded() == true;
                    }).map(function (curCol) {
                        return curCol.collection;
                    })
                });
            }

            var smugglerOptions = {
                OperateOnTypes: operateOnTypes,
                BatchSize: this.batchSize(),
                ShouldExcludeExpired: !this.includeExpiredDocuments(),
                Filters: filtersToSend,
                TransformScript: this.transformScript(),
                NoneDefualtFileName: this.noneDefualtFileName()
            };

            $("#SmugglerOptions").val(JSON.stringify(smugglerOptions));
            $("#dbExportDownloadForm").submit();
        };

        exportDatabase.prototype.selectOptions = function () {
            this.showAdvancedOptions(false);
        };

        exportDatabase.prototype.selectAdvancedOptions = function () {
            this.showAdvancedOptions(true);
        };

        exportDatabase.prototype.removeFilter = function (filter) {
            this.filters.remove(filter);
        };

        exportDatabase.prototype.addFilter = function () {
            var filter = {
                Path: "",
                ShouldMatch: false,
                ShouldMatchObservable: ko.observable(false),
                Values: []
            };

            filter.ShouldMatchObservable.subscribe(function (val) {
                return filter.ShouldMatch = val;
            });
            this.filters.splice(0, 0, filter);
        };
        return exportDatabase;
    })(viewModelBase);

    
    return exportDatabase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/importDatabase", ["require", "exports", "common/aceEditorBindingHandler", "viewmodels/viewModelBase", 'commands/getOperationStatusCommand', "common/messagePublisher", "commands/importDatabaseCommand"], function(require, exports, aceEditorBindingHandler, viewModelBase, getOperationStatusCommand, messagePublisher, importDatabaseCommand) {
    var importDatabase = (function (_super) {
        __extends(importDatabase, _super);
        function importDatabase() {
            _super.call(this);
            this.showAdvancedOptions = ko.observable(false);
            this.filters = ko.observableArray();
            this.batchSize = ko.observable(1024);
            this.includeExpiredDocuments = ko.observable(true);
            this.transformScript = ko.observable();
            this.includeDocuments = ko.observable(true);
            this.includeIndexes = ko.observable(true);
            this.includeAttachments = ko.observable(false);
            this.includeTransformers = ko.observable(true);
            this.removeAnalyzers = ko.observable(false);
            this.hasFileSelected = ko.observable(false);
            this.isUploading = false;
            this.filePickerTag = "#importDatabaseFilePicker";
            aceEditorBindingHandler.install();
        }
        importDatabase.prototype.attached = function () {
            $("#transformScriptHelp").popover({
                html: true,
                trigger: 'hover',
                content: 'Transform scripts are written in JavaScript. <br /><br/>Example:<pre><span class="code-keyword">var</span> company = LoadDocument(<span class="code-keyword">this</span>.Company);<br /><span class="code-keyword">if</span> (company) {<br />&nbsp;&nbsp;&nbsp;company.Orders = { <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Count: <span class="code-keyword">this</span>.Count,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total: <span class="code-keyword">this</span>.Total<br />&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;PutDocument(<span class="code-keyword">this</span>.Company, company);<br />}</pre>'
            });
        };

        importDatabase.prototype.canDeactivate = function (isClose) {
            _super.prototype.canDeactivate.call(this, isClose);

            if (this.isUploading) {
                this.confirmationMessage("Upload is in progress", "Please wait until uplodaing is complete.", ['OK']);
                return false;
            }
            return true;
        };

        importDatabase.prototype.createPostboxSubscriptions = function () {
            var _this = this;
            return [
                ko.postbox.subscribe("UploadProgress", function (percentComplete) {
                    return _this.activeDatabase().importStatus("Uploading " + percentComplete.toFixed(2).replace(/\.0*$/, '') + "%");
                }),
                ko.postbox.subscribe("ChangesApiReconnected", function (db) {
                    db.importStatus('');
                    db.isImporting(false);
                    _this.isUploading = false;
                })
            ];
        };

        importDatabase.prototype.selectOptions = function () {
            this.showAdvancedOptions(false);
        };

        importDatabase.prototype.selectAdvancedOptions = function () {
            this.showAdvancedOptions(true);
        };

        importDatabase.prototype.removeFilter = function (filter) {
            this.filters.remove(filter);
        };

        importDatabase.prototype.addFilter = function () {
            var filter = {
                Path: "",
                ShouldMatch: false,
                ShouldMatchObservable: ko.observable(false),
                Values: []
            };

            filter.ShouldMatchObservable.subscribe(function (val) {
                return filter.ShouldMatch = val;
            });
            this.filters.splice(0, 0, filter);
        };

        importDatabase.prototype.fileSelected = function (fileName) {
            var isFileSelected = !!$.trim(fileName);
            this.hasFileSelected(isFileSelected);
            this.importDb();
        };

        importDatabase.prototype.importDb = function () {
            var _this = this;
            var db = this.activeDatabase();
            db.isImporting(true);
            this.isUploading = true;
            db.importStatus("Uploading 0%");

            var formData = new FormData();
            this.importedFileName = $(this.filePickerTag).val().split(/(\\|\/)/g).pop();
            var fileInput = document.querySelector(this.filePickerTag);
            formData.append("file", fileInput.files[0]);
            var importItemTypes = [];
            if (this.includeDocuments()) {
                importItemTypes.push(1 /* Documents */);
            }
            if (this.includeIndexes()) {
                importItemTypes.push(2 /* Indexes */);
            }
            if (this.includeAttachments()) {
                importItemTypes.push(4 /* Attachments */);
            }
            if (this.includeTransformers()) {
                importItemTypes.push(8 /* Transformers */);
            }
            if (this.removeAnalyzers()) {
                importItemTypes.push(32768 /* RemoveAnalyzers */);
            }

            new importDatabaseCommand(formData, this.batchSize(), this.includeExpiredDocuments(), importItemTypes, this.filters(), this.transformScript(), this.activeDatabase()).execute().done(function (result) {
                var operationId = result.OperationId;
                _this.waitForOperationToComplete(db, operationId);
                db.importStatus("Processing uploaded file");
            }).fail(function () {
                return db.importStatus("");
            }).always(function () {
                return _this.isUploading = false;
            });
        };

        importDatabase.prototype.waitForOperationToComplete = function (db, operationId) {
            var _this = this;
            new getOperationStatusCommand(db, operationId).execute().done(function (result) {
                return _this.importStatusRetrieved(db, operationId, result);
            });
        };

        importDatabase.prototype.importStatusRetrieved = function (db, operationId, result) {
            var _this = this;
            if (result.Completed) {
                if (result.ExceptionDetails == null) {
                    this.hasFileSelected(false);
                    $(this.filePickerTag).val('');
                    db.importStatus("Last import was from '" + this.importedFileName + "', " + result.LastProgress.toLocaleLowerCase());
                    messagePublisher.reportSuccess("Successfully imported data to " + db.name);
                } else {
                    db.importStatus("");
                    messagePublisher.reportError("Failed to import data!", result.ExceptionDetails);
                }
                db.isImporting(false);
            } else {
                if (!!result.LastProgress) {
                    db.importStatus("Processing uploaded file, " + result.LastProgress.toLocaleLowerCase());
                }
                setTimeout(function () {
                    return _this.waitForOperationToComplete(db, operationId);
                }, 500);
            }
        };
        return importDatabase;
    })(viewModelBase);

    
    return importDatabase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/indexErrors", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", "moment", "viewmodels/shell"], function(require, exports, viewModelBase, getDatabaseStatsCommand, moment, shell) {
    var indexErrors = (function (_super) {
        __extends(indexErrors, _super);
        function indexErrors() {
            _super.call(this);
            this.allIndexErrors = ko.observableArray();
            this.hasFetchedErrors = ko.observable(false);
            this.selectedIndexError = ko.observable();
            this.now = ko.observable();
            this.updateNowTimeoutHandle = 0;

            this.updateCurrentNowTime();
        }
        indexErrors.prototype.createNotifications = function () {
            var _this = this;
            return [
                shell.currentResourceChangesApi().watchAllIndexes(function (e) {
                    return _this.fetchIndexErrors();
                })
            ];
        };

        indexErrors.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            this.fetchIndexErrors();
        };

        indexErrors.prototype.deactivate = function () {
            clearTimeout(this.updateNowTimeoutHandle);
        };

        indexErrors.prototype.fetchIndexErrors = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                // Index errors are actually the .ServerErrors returned from the database statistics query.
                return new getDatabaseStatsCommand(db).execute().done(function (stats) {
                    stats.Errors.forEach(function (e) {
                        return e['TimestampHumanized'] = _this.createHumanReadableTime(e.Timestamp);
                    });
                    _this.allIndexErrors(stats.Errors);
                    _this.hasFetchedErrors(true);
                });
            }

            return null;
        };

        indexErrors.prototype.tableKeyDown = function () {
        };

        indexErrors.prototype.selectIndexError = function (indexError) {
            this.selectedIndexError(indexError);
        };

        indexErrors.prototype.createHumanReadableTime = function (time) {
            var _this = this;
            if (time) {
                // Return a computed that returns a humanized string based off the current time, e.g. "7 minutes ago".
                // It's a computed so that it updates whenever we update this.now field.
                return ko.computed(function () {
                    var dateMoment = moment(time);
                    var agoInMs = dateMoment.diff(_this.now());
                    return moment.duration(agoInMs).humanize(true) + dateMoment.format(" (MM/DD/YY, h:mma)");
                });
            }

            return ko.computed(function () {
                return time;
            });
        };

        indexErrors.prototype.updateCurrentNowTime = function () {
            var _this = this;
            this.now(moment());
            this.updateNowTimeoutHandle = setTimeout(function () {
                return _this.updateCurrentNowTime();
            }, 60000);
        };
        return indexErrors;
    })(viewModelBase);

    
    return indexErrors;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/indexes", ["require", "exports", "commands/getDatabaseStatsCommand", "viewmodels/viewModelBase", "models/index", "common/appUrl", "commands/saveIndexLockModeCommand", "commands/saveIndexAsPersistentCommand", "models/querySort", "durandal/app", "viewmodels/resetIndexConfirm", "viewmodels/shell", "common/recentQueriesStorage", "viewmodels/copyIndexDialog", "viewmodels/indexesAndTransformersClipboardDialog"], function(require, exports, getDatabaseStatsCommand, viewModelBase, index, appUrl, saveIndexLockModeCommand, saveIndexAsPersistentCommand, querySort, app, resetIndexConfirm, shell, recentQueriesStorage, copyIndexDialog, indexesAndTransformersClipboardDialog) {
    var indexes = (function (_super) {
        __extends(indexes, _super);
        function indexes() {
            var _this = this;
            _super.call(this);
            this.indexGroups = ko.observableArray();
            this.queryUrl = ko.observable();
            this.newIndexUrl = appUrl.forCurrentDatabase().newIndex;
            this.containerSelector = "#indexesContainer";
            this.recentQueries = ko.observableArray();
            this.indexMutex = true;
            this.btnState = ko.observable(false);
            this.btnStateTooltip = ko.observable("ExpandAll");
            this.btnTitle = ko.computed(function () {
                return _this.btnState() === true ? "Expand all" : "Collapse all";
            });

            this.sortedGroups = ko.computed(function () {
                var groups = _this.indexGroups().slice(0).sort(function (l, r) {
                    return l.entityName.toLowerCase() > r.entityName.toLowerCase() ? 1 : -1;
                });

                groups.forEach(function (group) {
                    group.indexes(group.indexes().slice(0).sort(function (l, r) {
                        return l.name.toLowerCase() > r.name.toLowerCase() ? 1 : -1;
                    }));
                });

                return groups;
            });
        }
        indexes.prototype.canActivate = function (args) {
            _super.prototype.canActivate.call(this, args);

            var deferred = $.Deferred();

            this.fetchRecentQueries();

            $.when(this.fetchIndexes()).done(function () {
                return deferred.resolve({ can: true });
            }).fail(function () {
                return deferred.resolve({ can: false });
            });

            return deferred;
        };

        indexes.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);

            this.appUrls = appUrl.forCurrentDatabase();
            this.queryUrl(appUrl.forQuery(this.activeDatabase(), null));
        };

        indexes.prototype.attached = function () {
            // Alt+Minus and Alt+Plus are already setup. Since laptops don't have a dedicated key for plus, we'll also use the equal sign key (co-opted for plus).
            //this.createKeyboardShortcut("Alt+=", () => this.toggleExpandAll(), this.containerSelector);
            ko.postbox.publish("SetRawJSONUrl", appUrl.forIndexesRawData(this.activeDatabase()));

            var self = this;
            $(window).bind('storage', function () {
                self.fetchRecentQueries();
            });
        };

        indexes.prototype.fetchIndexes = function () {
            var _this = this;
            return new getDatabaseStatsCommand(this.activeDatabase()).execute().done(function (stats) {
                return _this.processDbStats(stats);
            });
        };

        indexes.prototype.fetchRecentQueries = function () {
            this.recentQueries(recentQueriesStorage.getRecentQueries(this.activeDatabase()));
        };

        indexes.prototype.getRecentQueryUrl = function (query) {
            return appUrl.forQuery(this.activeDatabase(), query.Hash);
        };

        indexes.prototype.getRecentQuerySortText = function (sorts) {
            if (sorts.length > 0) {
                return sorts.map(function (s) {
                    return querySort.fromQuerySortString(s);
                }).map(function (s) {
                    return s.toHumanizedString();
                }).reduce(function (first, second) {
                    return first + ", " + second;
                });
            }

            return "";
        };

        indexes.prototype.getStoredQueryTransformerParameters = function (queryParams) {
            if (queryParams.length > 0) {
                return "(" + queryParams.map(function (param) {
                    return param.name + "=" + param.value;
                }).join(", ") + ")";
            }

            return "";
        };

        indexes.prototype.processDbStats = function (stats) {
            var _this = this;
            stats.Indexes.map(function (i) {
                return new index(i);
            }).forEach(function (i) {
                return _this.putIndexIntoGroups(i);
            });
        };

        indexes.prototype.putIndexIntoGroups = function (i) {
            if (!i.forEntityName || i.forEntityName.length === 0) {
                this.putIndexIntoGroupNamed(i, "Other");
            } else {
                this.putIndexIntoGroupNamed(i, this.getGroupName(i));
            }
        };

        indexes.prototype.getGroupName = function (i) {
            return i.forEntityName.sort(function (l, r) {
                return l.toLowerCase() > r.toLowerCase() ? 1 : -1;
            }).join(", ");
        };

        indexes.prototype.putIndexIntoGroupNamed = function (i, groupName) {
            var group = this.indexGroups.first(function (g) {
                return g.entityName === groupName;
            });
            var oldIndex;
            var indexExists;
            if (group) {
                oldIndex = group.indexes.first(function (cur) {
                    return cur.name == i.name;
                });
                if (!!oldIndex) {
                    group.indexes.replace(oldIndex, i);
                } else {
                    group.indexes.push(i);
                }
            } else {
                this.indexGroups.push({ entityName: groupName, indexes: ko.observableArray([i]) });
            }
        };

        indexes.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchAllIndexes(function (e) {
                    return _this.processIndexEvent(e);
                })];
        };

        indexes.prototype.processIndexEvent = function (e) {
            var _this = this;
            if (e.Type == "IndexRemoved") {
                this.removeIndexesFromAllGroups(this.findIndexesByName(e.Name));
            } else {
                if (this.indexMutex == true) {
                    this.indexMutex = false;
                    setTimeout(function () {
                        _this.fetchIndexes().always(function () {
                            return _this.indexMutex = true;
                        });
                    }, 5000);
                }
            }
        };

        indexes.prototype.findIndexesByName = function (indexName) {
            var result = new Array();
            this.indexGroups().forEach(function (g) {
                g.indexes().forEach(function (i) {
                    if (i.name == indexName) {
                        result.push(i);
                    }
                });
            });

            return result;
        };

        indexes.prototype.copyIndex = function (i) {
            app.showDialog(new copyIndexDialog(i.name, this.activeDatabase(), false));
        };

        indexes.prototype.pasteIndex = function () {
            app.showDialog(new copyIndexDialog('', this.activeDatabase(), true));
        };

        indexes.prototype.copyIndexesAndTransformers = function () {
            app.showDialog(new indexesAndTransformersClipboardDialog(this.activeDatabase(), false));
        };

        indexes.prototype.pasteIndexesAndTransformers = function () {
            var _this = this;
            var dialog = new indexesAndTransformersClipboardDialog(this.activeDatabase(), true);
            app.showDialog(dialog);
            dialog.pasteDeferred.done(function (summary) {
                _this.confirmationMessage("Indexes And Transformers Paste Summary", summary, ['Ok']);
            });
        };
        indexes.prototype.toggleExpandAll = function () {
            if (this.btnState() === true) {
                $(".index-group-content").collapse('show');
            } else {
                $(".index-group-content").collapse('hide');
            }

            this.btnState.toggle();
        };

        indexes.prototype.deleteIdleIndexes = function () {
            var idleIndexes = this.getAllIndexes().filter(function (i) {
                return i.priority && i.priority.indexOf("Idle") !== -1;
            });
            this.promptDeleteIndexes(idleIndexes);
        };

        indexes.prototype.deleteDisabledIndexes = function () {
            var abandonedIndexes = this.getAllIndexes().filter(function (i) {
                return i.priority && i.priority.indexOf("Disabled") !== -1;
            });
            this.promptDeleteIndexes(abandonedIndexes);
        };

        indexes.prototype.deleteAbandonedIndexes = function () {
            var abandonedIndexes = this.getAllIndexes().filter(function (i) {
                return i.priority && i.priority.indexOf("Abandoned") !== -1;
            });
            this.promptDeleteIndexes(abandonedIndexes);
        };

        indexes.prototype.deleteAllIndexes = function () {
            this.promptDeleteIndexes(this.getAllIndexes());
        };

        indexes.prototype.deleteIndex = function (i) {
            this.promptDeleteIndexes([i]);
        };

        indexes.prototype.deleteIndexGroup = function (i) {
            this.promptDeleteIndexes(i.indexes());
        };

        indexes.prototype.promptDeleteIndexes = function (indexes) {
            var _this = this;
            if (indexes.length > 0) {
                require(["viewmodels/deleteIndexesConfirm"], function (deleteIndexesConfirm) {
                    var deleteIndexesVm = new deleteIndexesConfirm(indexes.map(function (i) {
                        return i.name;
                    }), _this.activeDatabase());
                    app.showDialog(deleteIndexesVm);
                    deleteIndexesVm.deleteTask.done(function (closedWithoutDeletion) {
                        if (closedWithoutDeletion == false) {
                            _this.removeIndexesFromAllGroups(indexes);
                        }
                    }).fail(function () {
                        _this.removeIndexesFromAllGroups(indexes);
                        _this.fetchIndexes();
                    });
                });
            }
        };

        indexes.prototype.resetIndex = function (indexToReset) {
            var resetIndexVm = new resetIndexConfirm(indexToReset.name, this.activeDatabase());
            app.showDialog(resetIndexVm);
        };

        indexes.prototype.removeIndexesFromAllGroups = function (indexes) {
            this.indexGroups().forEach(function (g) {
                g.indexes.removeAll(indexes);
            });

            // Remove any empty groups.
            this.indexGroups.remove(function (item) {
                return item.indexes().length === 0;
            });
        };

        indexes.prototype.unlockIndex = function (i) {
            this.updateIndexLockMode(i, "Unlock");
        };

        indexes.prototype.lockIndex = function (i) {
            this.updateIndexLockMode(i, "LockedIgnore");
        };

        indexes.prototype.lockErrorIndex = function (i) {
            this.updateIndexLockMode(i, "LockedError");
        };

        indexes.prototype.updateIndexLockMode = function (i, newLockMode) {
            // The old Studio would prompt if you were sure.
            // However, changing the lock status is easily reversible, so we're skipping the prompt.
            var originalLockMode = i.lockMode();
            if (originalLockMode !== newLockMode) {
                i.lockMode(newLockMode);

                new saveIndexLockModeCommand(i, newLockMode, this.activeDatabase()).execute().fail(function () {
                    return i.lockMode(originalLockMode);
                });
            }
        };

        indexes.prototype.getAllIndexes = function () {
            var all = [];
            this.indexGroups().forEach(function (g) {
                return all.pushAll(g.indexes());
            });
            return all.distinct();
        };

        indexes.prototype.makeIndexPersistent = function (index) {
            new saveIndexAsPersistentCommand(index, this.activeDatabase()).execute();
        };
        return indexes;
    })(viewModelBase);

    
    return indexes;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/indexesAndTransformersClipboardDialog", ["require", "exports", "models/transformer", "plugins/dialog", "viewmodels/dialogViewModelBase", "commands/getIndexesDefinitionsCommand", "commands/getTransformersCommand", "commands/saveIndexDefinitionCommand", "commands/saveTransformerCommand", "models/indexPriority", "common/messagePublisher", "common/aceEditorBindingHandler"], function(require, exports, transformerDefinition, dialog, dialogViewModelBase, getIndexesDefinitionsCommand, getTransformersCommand, saveIndexDefinitionCommand, saveTransformerCommand, indexPriority, messagePublisher, aceEditorBindingHandler) {
    var indexesAndTransformersClipboardDialog = (function (_super) {
        __extends(indexesAndTransformersClipboardDialog, _super);
        function indexesAndTransformersClipboardDialog(db, isPaste, elementToFocusOnDismissal) {
            if (typeof isPaste === "undefined") { isPaste = false; }
            _super.call(this, elementToFocusOnDismissal);
            this.db = db;
            this.isPaste = isPaste;
            this.json = ko.observable("");
            this.indexes = ko.observableArray([]);
            this.transformers = ko.observableArray([]);
            this.pasteDeferred = $.Deferred();
            aceEditorBindingHandler.install();
        }
        indexesAndTransformersClipboardDialog.prototype.canActivate = function (args) {
            var _this = this;
            if (this.isPaste) {
                return true;
            } else {
                var canActivateResult = $.Deferred();
                var getIndexDefinitionsPromise = new getIndexesDefinitionsCommand(this.db).execute().done(function (results) {
                    _this.indexes(results);
                });
                var getTransformersPromise = new getTransformersCommand(this.db).execute().done(function (results) {
                    _this.transformers(results);
                });
                $.when(getTransformersPromise, getIndexDefinitionsPromise).then(function () {
                    canActivateResult.resolve({ can: true });
                    var prettifySpacing = 4;
                    _this.json(JSON.stringify({
                        Indexes: _this.indexes(),
                        Transformers: _this.transformers()
                    }, null, prettifySpacing));
                }, function () {
                    canActivateResult.reject();
                });
                return canActivateResult;
            }
        };

        indexesAndTransformersClipboardDialog.prototype.setInitialFocus = function () {
            // Overrides the base class' setInitialFocus and does nothing.
            // Doing nothing because we will focus the Ace Editor when it's initialized.
        };

        indexesAndTransformersClipboardDialog.prototype.enterKeyPressed = function () {
            // Overrides the base class' enterKeyPressed. Because the user might
            // edit the JSON, or even type some in manually, enter might really mean new line, not Save changes.
            if (!this.isPaste) {
                return _super.prototype.enterKeyPressed.call(this);
            } else {
                this.saveAll();
            }

            return true;
        };

        indexesAndTransformersClipboardDialog.prototype.saveAll = function () {
            var _this = this;
            if (this.isPaste === true && !!this.json()) {
                var indexesAndTransformers;
                var indexesDefinitions = [];
                var transformersDefinitions = [];

                try  {
                    indexesAndTransformers = JSON.parse(this.json());
                    if (!!indexesAndTransformers.Indexes && indexesAndTransformers.Indexes.length > 0) {
                        indexesDefinitions.pushAll(indexesAndTransformers.Indexes.map(function (index) {
                            return index.definition;
                        }));
                    }

                    if (!!indexesAndTransformers.Transformers && indexesAndTransformers.Transformers.length > 0) {
                        transformersDefinitions.pushAll(indexesAndTransformers.Transformers.map(function (transformer) {
                            return {
                                "Transformer": {
                                    'Name': transformer.name,
                                    'TransformResults': transformer.definition.TransformResults
                                }
                            };
                        }));
                    }
                    if (indexesDefinitions.length == 0 && transformersDefinitions.length == 0) {
                        throw "No indexes or transformers found in json string";
                    }
                } catch (e) {
                    this.pasteDeferred.reject();
                    messagePublisher.reportError("Index paste failed, invalid json string", e);
                }

                var allOperationsPromises = [];
                var succeededIndexes = [];
                var failedIndexes = [];
                var succeededTransformers = [];
                var failedTransformers = [];

                if (indexesDefinitions.length > 0) {
                    indexesDefinitions.forEach(function (index) {
                        var curDeferred = $.Deferred();
                        allOperationsPromises.push(curDeferred);
                        new saveIndexDefinitionCommand(index, 0 /* normal */, _this.db).execute().done(function () {
                            return succeededIndexes.push(index.Name);
                        }).fail(function () {
                            return failedIndexes.push(index.Name);
                        }).always(function () {
                            return curDeferred.resolve();
                        });
                    });
                }

                if (transformersDefinitions.length > 0) {
                    transformersDefinitions.forEach(function (transformer) {
                        var curDeferred = $.Deferred();
                        allOperationsPromises.push(curDeferred);
                        new saveTransformerCommand(new transformerDefinition().initFromSave(transformer), _this.db).execute().done(function () {
                            succeededTransformers.push(transformer.Transformer.Name);
                        }).fail(function () {
                            failedTransformers.push(transformer.Transformer.Name);
                        }).always(function () {
                            return curDeferred.resolve();
                        });
                    });
                }

                $.when.apply($, allOperationsPromises).always(function () {
                    return _this.summarize(succeededIndexes, failedIndexes, succeededTransformers, failedTransformers);
                });
            } else {
                this.close();
            }
        };

        indexesAndTransformersClipboardDialog.prototype.summarize = function (succeededIndexes, failedIndexes, succeededTransformers, failedTransformers) {
            var summaryText = "";
            if (succeededIndexes.length > 0) {
                summaryText += "Succeeded Indexes: " + succeededIndexes.length + "\n";
            }

            if (failedIndexes.length > 0) {
                summaryText += "Failed Indexes: \n" + failedIndexes.join("\n") + "\n";
            }

            if (succeededTransformers.length > 0) {
                summaryText += "Succeeded Transformers: " + succeededTransformers.length + "\n";
            }

            if (failedTransformers.length > 0) {
                summaryText += "Failed Transformers: \n" + failedTransformers.join("\n") + "\n";
            }

            this.pasteDeferred.resolve(summaryText);

            this.close();
        };

        indexesAndTransformersClipboardDialog.prototype.close = function () {
            dialog.close(this);
        };
        return indexesAndTransformersClipboardDialog;
    })(dialogViewModelBase);

    
    return indexesAndTransformersClipboardDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/indexesShell", ["require", "exports", "plugins/router", "common/appUrl", "viewmodels/viewModelBase"], function(require, exports, durandalRouter, appUrl, viewModelBase) {
    var indexesShell = (function (_super) {
        __extends(indexesShell, _super);
        function indexesShell() {
            _super.call(this);

            this.router = durandalRouter.createChildRouter().map([
                { route: 'databases/indexes', moduleId: 'viewmodels/indexes', title: 'Indexes', nav: true },
                { route: 'databases/indexes/mergeSuggestions', moduleId: 'viewmodels/indexMergeSuggestions', title: 'Index Merge Suggestions', nav: true },
                { route: 'databases/indexes/edit(/:indexName)', moduleId: 'viewmodels/editIndex', title: 'Edit Index', nav: true },
                { route: 'databases/indexes/terms/(:indexName)', moduleId: 'viewmodels/indexTerms', title: 'Terms', nav: true }
            ]).buildNavigationModel();

            appUrl.mapUnknownRoutes(this.router);
        }
        return indexesShell;
    })(viewModelBase);

    
    return indexesShell;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/indexMergeSuggestions", ["require", "exports", "viewmodels/viewModelBase", "commands/getIndexMergeSuggestionsCommand", "common/appUrl", "common/mergedIndexesStorage", "models/indexMergeSuggestion", "commands/getDatabaseStatsCommand", "viewmodels/shell", "moment", "plugins/dialog", "common/optional"], function(require, exports, viewModelBase, getIndexMergeSuggestionsCommand, appUrl, mergedIndexesStorage, indexMergeSuggestion, getDatabaseStatsCommand, shell, moment, dialog, optional) {
    var indexMergeSuggestions = (function (_super) {
        __extends(indexMergeSuggestions, _super);
        function indexMergeSuggestions() {
            _super.call(this);
            this.suggestions = ko.observableArray();
            this.unmergables = ko.observableArray();
            this.idleOrAbandonedIndexes = ko.observableArray();
            this.notUsedForLastWeek = ko.observableArray();
            this.appUrls = appUrl.forCurrentDatabase();
        }
        indexMergeSuggestions.prototype.canActivate = function (args) {
            var _this = this;
            var deferred = $.Deferred();
            this.reload().done(function () {
                return deferred.resolve({ can: true });
            }).fail(function () {
                return deferred.resolve({ redirect: appUrl.forIndexes(_this.activeDatabase()) });
            });

            return deferred;
        };

        indexMergeSuggestions.prototype.reload = function () {
            var fetchIndexMergeSuggestionsTask = this.fetchIndexMergeSuggestions();
            var fetchStatsTask = this.fetchStats();
            return $.when(fetchIndexMergeSuggestionsTask, fetchStatsTask);
        };

        indexMergeSuggestions.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchAllIndexes(function () {
                    return _this.fetchIndexMergeSuggestions();
                })];
        };

        indexMergeSuggestions.prototype.fetchStats = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getDatabaseStatsCommand(db).execute().done(function (result) {
                    return _this.processStatsResults(result);
                });
            }

            return null;
        };

        indexMergeSuggestions.prototype.processStatsResults = function (stats) {
            var _this = this;
            this.idleOrAbandonedIndexes([]);
            this.notUsedForLastWeek([]);
            var now = moment();
            var miliSecondsInWeek = 1000 * 3600 * 24 * 7;
            stats.Indexes.forEach(function (indexDto) {
                // we are using contains not equals as priority may contains
                if (indexDto.Priority.contains("Idle") || indexDto.Priority.contains("Abandoned")) {
                    _this.idleOrAbandonedIndexes.push(indexDto);
                }

                if (indexDto.LastQueryTimestamp) {
                    var lastQueryDate = moment(indexDto.LastQueryTimestamp);
                    if (lastQueryDate.isValid()) {
                        var agoInMs = now.diff(lastQueryDate);
                        if (agoInMs > miliSecondsInWeek) {
                            indexDto['LastQueryTimestampText'] = optional.val(indexDto.LastQueryTimestamp).bind(function (v) {
                                return v.toHumanizedDate();
                            });
                            _this.notUsedForLastWeek.push(indexDto);
                        }
                    }
                }
            });
        };

        indexMergeSuggestions.prototype.fetchIndexMergeSuggestions = function () {
            var _this = this;
            var deferred = $.Deferred();

            var db = this.activeDatabase();
            new getIndexMergeSuggestionsCommand(db).execute().done(function (results) {
                var suggestions = results.Suggestions.map(function (suggestion) {
                    return new indexMergeSuggestion(suggestion);
                });
                _this.suggestions(suggestions);

                var unmergables = Object.keys(results.Unmergables).map(function (value, index) {
                    return { indexName: value, reason: results.Unmergables[value] };
                });
                _this.unmergables(unmergables);
                deferred.resolve();
            }).fail(function () {
                return deferred.reject();
            });

            return deferred;
        };

        indexMergeSuggestions.prototype.mergeSuggestionIndex = function (index) {
            return parseInt(index) + 1;
        };

        indexMergeSuggestions.prototype.mergedIndexUrl = function (id) {
            var db = this.activeDatabase();
            var mergedIndexName = mergedIndexesStorage.getMergedIndexName(db, id);

            return this.appUrls.editIndex(mergedIndexName);
        };

        indexMergeSuggestions.prototype.saveMergedIndex = function (id, suggestion) {
            var db = this.activeDatabase();
            mergedIndexesStorage.saveMergedIndex(db, id, suggestion);

            return true;
        };

        indexMergeSuggestions.prototype.deleteIndexes = function (index) {
            var _this = this;
            var mergeSuggestion = this.suggestions()[index];
            var indexesToDelete = mergeSuggestion.canDelete;
            require(["viewmodels/deleteIndexesConfirm"], function (deleteIndexesConfirm) {
                var db = _this.activeDatabase();
                var deleteViewModel = new deleteIndexesConfirm(indexesToDelete, db);
                deleteViewModel.deleteTask.always(function () {
                    return _this.reload();
                });
                dialog.show(deleteViewModel);
            });
        };

        indexMergeSuggestions.prototype.deleteIndex = function (name) {
            var _this = this;
            require(["viewmodels/deleteIndexesConfirm"], function (deleteIndexesConfirm) {
                var db = _this.activeDatabase();
                var deleteViewModel = new deleteIndexesConfirm([name], db);
                deleteViewModel.deleteTask.always(function () {
                    return _this.reload();
                });
                dialog.show(deleteViewModel);
            });
        };

        indexMergeSuggestions.prototype.deleteAllIdleOrAbandoned = function () {
            var _this = this;
            require(["viewmodels/deleteIndexesConfirm"], function (deleteIndexesConfirm) {
                var db = _this.activeDatabase();
                var deleteViewModel = new deleteIndexesConfirm(_this.idleOrAbandonedIndexes().map(function (index) {
                    return index.Name;
                }), db, "Delete all idle or abandoned indexes?");
                deleteViewModel.deleteTask.always(function () {
                    return _this.reload();
                });
                dialog.show(deleteViewModel);
            });
        };

        indexMergeSuggestions.prototype.deleteAllNotUsedForWeek = function () {
            var _this = this;
            require(["viewmodels/deleteIndexesConfirm"], function (deleteIndexesConfirm) {
                var db = _this.activeDatabase();
                var deleteViewModel = new deleteIndexesConfirm(_this.notUsedForLastWeek().map(function (index) {
                    return index.Name;
                }), db, "Delete all indexes not used within last week?");
                deleteViewModel.deleteTask.always(function () {
                    return _this.reload();
                });
                dialog.show(deleteViewModel);
            });
        };
        return indexMergeSuggestions;
    })(viewModelBase);

    
    return indexMergeSuggestions;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/indexStats", ["require", "exports", "viewmodels/viewModelBase", "common/generalUtils", "commands/getIndexingPerfStatsCommand", "d3/d3", 'nvd3', "viewmodels/shell"], function(require, exports, viewModelBase, generalUtils, getIndexingPerfStatsCommand, d3, nv, shell) {
    var indexStats = (function (_super) {
        __extends(indexStats, _super);
        function indexStats() {
            _super.apply(this, arguments);
            this.jsonData = [];
            this.rawJsonData = [];
            this.hiddenIndexes = d3.set([]);
            this.indexNames = [];
            this.refreshGraphObservable = ko.observable();
            this.margin = { top: 40, right: 20, bottom: 40, left: 40 };
            this.barWidth = 30;
            this.barPaddingInner = 5;
            this.barPaddingOuter = 10;
            this.legendWidth = 0;
            this.isoFormat = d3.time.format.iso;
            this.xTickFormat = d3.time.format("%H:%M:%S");
            this.color = d3.scale.category20();
        }
        indexStats.prototype.fetchJsonData = function () {
            return new getIndexingPerfStatsCommand(this.activeDatabase()).execute();
        };

        indexStats.prototype.attached = function () {
            var _this = this;
            $("#indexStatsContainer").resize().on('DynamicHeightSet', function () {
                return _this.onWindowHeightChanged();
            });
            $("#indexStatsContainer").scroll(function () {
                return _this.graphScrolled();
            });
            this.refresh();
            this.refreshSubscription = this.refreshGraphObservable.throttle(5000).subscribe(function (e) {
                return _this.refresh();
            });
        };

        indexStats.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchAllIndexes(function (e) {
                    return _this.processIndexEvent(e);
                })];
        };

        indexStats.prototype.processIndexEvent = function (e) {
            if (e.Type == "MapCompleted" || e.Type == "ReduceCompleted") {
                this.refreshGraphObservable(new Date().getTime());
            }
        };

        indexStats.prototype.filterJsonData = function () {
            var _this = this;
            this.jsonData = [];

            this.rawJsonData.forEach(function (v) {
                var filteredStats = v.Stats.filter(function (s) {
                    return !_this.hiddenIndexes.has(s.Index);
                });
                if (filteredStats.length > 0) {
                    _this.jsonData.push({
                        'Started': v.Started,
                        'Stats': filteredStats
                    });
                }
            });
        };

        indexStats.prototype.refresh = function () {
            var _this = this;
            return this.fetchJsonData().done(function (data) {
                _this.rawJsonData = _this.mergeJsonData(_this.rawJsonData, data);
                _this.indexNames = _this.findIndexNames(_this.rawJsonData);
                _this.filterJsonData();
                _this.redrawGraph();
            });
        };

        indexStats.prototype.mergeJsonData = function (currentData, incomingData) {
            // create lookup map to avoid O(n^2)
            var dateLookup = d3.map();
            currentData.forEach(function (d, i) {
                dateLookup.set(d.Started, i);
            });

            incomingData.forEach(function (d) {
                if (dateLookup.has(d.Started)) {
                    var index = dateLookup.get(d.Started);
                    currentData[index] = d;
                } else {
                    currentData.push(d);
                }
            });
            return currentData;
        };

        indexStats.prototype.computeBarWidths = function (data) {
            var _this = this;
            var cumulative = 10;
            var result = data.map(function (perfData) {
                var prevValue = cumulative;
                perfData.sectionWidth = perfData.Stats.length * _this.barWidth * 2 + _this.barPaddingInner * 2 + _this.barPaddingOuter;
                cumulative += perfData.sectionWidth;
                return prevValue;
            });
            result.push(cumulative);
            return result;
        };

        indexStats.prototype.graphScrolled = function () {
            var leftScroll = $("#indexStatsContainer").scrollLeft();
            var self = this;
            this.svg.select('.y.axis').attr("transform", "translate(" + leftScroll + ",0)");

            this.svg.select('#dataClip rect').attr('x', leftScroll);

            this.svg.select('.legend_bg_group').attr("transform", "translate(" + leftScroll + ",0)");

            this.svg.select('.controlls').selectAll(".legend").attr("transform", function (d, i) {
                return "translate(" + leftScroll + "," + i * 20 + ")";
            });
            nv.tooltip.cleanup();
        };

        indexStats.prototype.toggleIndexVisible = function (indexName) {
            nv.tooltip.cleanup();
            var alreadyHidden = this.hiddenIndexes.has(indexName);
            if (alreadyHidden) {
                this.hiddenIndexes.remove(indexName);
            } else {
                this.hiddenIndexes.add(indexName);
            }
            d3.select('.rect-legend-' + generalUtils.escape(indexName)).classed('legendHidden', !alreadyHidden);
            this.filterJsonData();
            this.redrawGraph();

            // we have to manually trigger on scroll even to fix firefox issue (missing event call)
            this.graphScrolled();
        };

        indexStats.prototype.redrawGraph = function () {
            var self = this;

            this.width = $("#indexStatsContainer").width() - this.margin.left - this.margin.right;
            this.height = $("#indexStatsContainer").height() - this.margin.top - this.margin.bottom - 20; // substract scroll width

            var cumulativeWidths = this.computeBarWidths(this.jsonData);

            this.x0Scale = d3.scale.ordinal().range(cumulativeWidths);
            this.yScale = d3.scale.linear().range([self.height, 0]);
            this.xAxis = d3.svg.axis().scale(self.x0Scale).orient("bottom").tickFormat(function (d) {
                return "";
            }).tickPadding(20);
            this.yAxis = d3.svg.axis().scale(self.yScale).orient("left").tickFormat(d3.format(".2s"));

            var totalHeight = self.height + self.margin.top + self.margin.bottom;

            // get higer value from total (visiable and not visible graph width) and viewbox width.
            var totalWidth = Math.max(cumulativeWidths[cumulativeWidths.length - 1], this.width) + this.margin.left + this.margin.right;

            $("#indexStatsContainer").css('overflow-x', cumulativeWidths[cumulativeWidths.length - 1] > this.width ? 'scroll' : 'hidden');

            this.svg = d3.select("#indexStatsGraph").attr("width", totalWidth).attr("height", totalHeight).style({ height: totalHeight + 'px' }).style({ width: totalWidth + 'px' }).attr("viewBox", "0 0 " + totalWidth + " " + totalHeight);

            this.svg.selectAll('.main_group').attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            this.svg.selectAll('defs').data([this.jsonData]).enter().append('defs').append('clipPath').attr('id', 'dataClip').append('rect').attr('x', 0).attr('y', 0).attr('width', 1200000).attr('height', 50000);

            var svgEnter = this.svg.selectAll(".main_group").data([this.jsonData]).enter();

            svgEnter.append('g').attr('class', 'main_group').attr('clip-path', "url(#dataClip)").attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            var controllsEnter = this.svg.selectAll(".controlls").data([this.jsonData]).enter().append("g").attr('class', 'controlls').attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            controllsEnter.append("g").attr("class", "x axis");

            controllsEnter.append('g').attr('class', 'y axis');

            controllsEnter.append('g').attr('class', 'legend_bg_group').append('rect').attr('class', 'legend_bg').attr('x', self.width).attr('y', 0).attr('width', 0).attr('height', 0);

            controllsEnter.select('.y.axis').append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Doc count");

            this.x0Scale.domain(d3.nest().key(function (d) {
                return d.Started;
            }).sortKeys(d3.ascending).entries(self.jsonData).map(function (d) {
                return d.key;
            }));

            this.yScale.domain([
                0, d3.max(this.jsonData, function (d) {
                    return d3.max(d.Stats, function (dd) {
                        return d3.max([dd.InputCount, dd.OutputCount]);
                    });
                })]);

            this.svg.select(".x.axis").attr('clip-path', "url(#dataClip)").attr("transform", "translate(0," + self.height + ")").transition().call(self.xAxis);

            this.svg.select('.y.axis').transition().call(self.yAxis);

            var frame = this.svg.select('.main_group').selectAll(".frame").data(self.jsonData, function (d) {
                return d.Started;
            });

            frame.exit().remove();

            frame.transition().attr("transform", function (d) {
                return "translate(" + self.x0Scale(d.Started) + ",0)";
            });

            frame.select('.date_tick').transition().attr('x', function (d) {
                return d.sectionWidth / 2;
            }).attr('y', self.height + 36);

            frame.select('.input_text').transition().attr("x", function (d) {
                return d.sectionWidth * 0.25;
            }).attr('y', self.height + 18);

            frame.select('.output_text').transition().attr("x", function (d) {
                return d.sectionWidth * 0.75;
            }).attr('y', self.height + 18);

            frame.select('.outputs').transition().attr("transform", function (d) {
                return "translate(" + (d.sectionWidth / 2) + ",0)";
            });

            var frameEnter = frame.enter().append("g").attr("class", "frame").attr("transform", function (d) {
                return "translate(" + self.x0Scale(d.Started) + ",0)";
            });

            frameEnter.append("text").attr('class', 'input_text').attr('text-anchor', 'middle').attr("x", function (d) {
                return d.sectionWidth * 0.25;
            }).attr("y", self.height + 18).text("In");

            frameEnter.append("text").attr('class', 'output_text').attr('text-anchor', 'middle').attr("x", function (d) {
                return d.sectionWidth * 0.75;
            }).attr("y", self.height + 18).text("Out");

            frameEnter.append("text").attr('class', 'date_tick').attr('text-anchor', 'middle').attr('x', function (d) {
                return d.sectionWidth / 2;
            }).attr('y', self.height + 36).text(function (d) {
                return self.xTickFormat(self.isoFormat.parse(d.Started));
            });

            frameEnter.append("g").attr('class', 'inputs');

            frameEnter.append('g').attr('class', 'outputs').attr("transform", function (d) {
                return "translate(" + (d.sectionWidth / 2) + ",0)";
            });

            var inputCounts = frame.select('.inputs').selectAll(".inputCounts").data(function (d) {
                return d.Stats;
            }, function (d) {
                return d.Index;
            });

            inputCounts.exit().remove();

            inputCounts.transition().attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth - self.barPaddingInner + self.barPaddingOuter;
            }).attr("y", function (d) {
                return self.yScale(d.InputCount);
            }).attr("height", function (d) {
                return self.height - self.yScale(d.InputCount);
            }).style("fill", function (d) {
                return self.color(d.Index);
            });

            inputCounts.enter().append("rect").attr("class", "inputCounts").attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth - self.barPaddingInner + self.barPaddingOuter;
            }).attr("y", function (d) {
                return self.height;
            }).attr("height", 0).style("fill", function (d) {
                return self.color(d.Index);
            }).on('click', function (d) {
                nv.tooltip.cleanup();
                var offset = $(this).offset();
                var leftScroll = $("#indexStatsContainer").scrollLeft();
                var containerOffset = $("#indexStatsContainer").offset();
                nv.tooltip.show([offset.left - containerOffset.left + leftScroll + self.barWidth, offset.top - containerOffset.top], self.getTooltip(d), 's', 5, document.getElementById("indexStatsContainer"), "selectable-tooltip");
            }).transition().attr("height", function (d) {
                return self.height - self.yScale(d.InputCount);
            }).attr("y", function (d) {
                return self.yScale(d.InputCount);
            });

            var outputCounts = frame.select('.outputs').selectAll(".outputCounts").data(function (d) {
                return d.Stats;
            }, function (d) {
                return d.Index;
            });

            outputCounts.exit().remove();

            outputCounts.transition().attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth + self.barPaddingInner;
            }).attr("y", function (d) {
                return self.yScale(d.OutputCount);
            }).attr("height", function (d) {
                return self.height - self.yScale(d.OutputCount);
            }).style("fill", function (d) {
                return self.color(d.Index);
            });

            outputCounts.enter().append("rect").attr("class", "outputCounts").attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth + self.barPaddingInner;
            }).attr("y", function (d) {
                return self.height;
            }).attr("height", 0).style("fill", function (d) {
                return self.color(d.Index);
            }).on('click', function (d) {
                nv.tooltip.cleanup();
                var offset = $(this).offset();
                var leftScroll = $("#indexStatsContainer").scrollLeft();
                var containerOffset = $("#indexStatsContainer").offset();
                nv.tooltip.show([offset.left - containerOffset.left + leftScroll + self.barWidth, offset.top - containerOffset.top], self.getTooltip(d), 's', 5, document.getElementById("indexStatsContainer"), "selectable-tooltip");
            }).transition().attr("y", function (d) {
                return self.yScale(d.OutputCount);
            }).attr("height", function (d) {
                return self.height - self.yScale(d.OutputCount);
            });

            this.legend = this.svg.select('.controlls').selectAll(".legend").data(this.indexNames, function (d) {
                return d;
            });

            this.legend.selectAll("rect").transition().attr("x", this.width - 18);

            this.legend.selectAll("text").transition().attr("x", this.width - 24).text(function (d) {
                return d;
            });

            var legendEnter = this.legend.enter().append("g").attr("class", "legend").attr("transform", function (d, i) {
                return "translate(0," + i * 20 + ")";
            });

            legendEnter.append("rect").attr("x", this.width - 18).attr('class', function (d) {
                return 'rect-legend-' + generalUtils.escape(d);
            }).attr("width", 18).attr("height", 18).style("fill", self.color).style("stroke", self.color).on('click', function (d) {
                return self.toggleIndexVisible(d);
            });

            legendEnter.append("text").attr("x", this.width - 24).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function (d) {
                return d;
            });

            // Bug fix: default to zero if we don't have any .legend text objects. This can happen when
            // getIndexPerfStatsCommand returns an empty array. See http://issues.hibernatingrhinos.com/issue/RavenDB-2929
            this.legendWidth = (d3.max($(".legend text"), function (d) {
                return d.getBBox().width;
            }) + 40) || 0;

            this.svg.select('.legend_bg').attr('y', -6).attr('height', this.indexNames.length * 20 + 10).attr('width', this.legendWidth).attr('x', this.width - this.legendWidth + 10);
        };

        indexStats.prototype.onWindowHeightChanged = function () {
            nv.tooltip.cleanup();
            this.width = $("#indexStatsContainer").width();
            this.height = $("#indexStatsContainer").height();
            this.redrawGraph();
        };

        indexStats.prototype.getTooltip = function (d) {
            return "<strong>Index:</strong> <span>" + d.Index + "</span><br />" + "<strong>Duration milliseconds:</strong> <span>" + d.DurationMilliseconds + "</span><br />" + "<strong>Input count:</strong> <span>" + d.InputCount + "</span><br />" + "<strong>Output count:</strong> <span>" + d.OutputCount + "</span><br />" + "<strong>Items count:</strong> <span>" + d.ItemsCount + "</span><br />";
        };

        indexStats.prototype.detached = function () {
            _super.prototype.detached.call(this);

            $("#visualizerContainer").off('DynamicHeightSet');
            nv.tooltip.cleanup();
            if (this.refreshSubscription != null) {
                this.refreshSubscription.dispose();
            }
        };

        indexStats.prototype.findIndexNames = function (jsonData) {
            var statsInline = d3.merge(jsonData.map(function (d) {
                return d.Stats;
            }));
            var byKey = d3.nest().key(function (d) {
                return d.Index;
            }).sortKeys(d3.ascending).rollup(function (l) {
                return l.length;
            }).entries(statsInline);
            return byKey.map(function (d) {
                return d.key;
            });
        };
        return indexStats;
    })(viewModelBase);

    
    return indexStats;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/indexTerms", ["require", "exports", "viewmodels/viewModelBase", "commands/getIndexTermsCommand", "commands/getIndexDefinitionCommand", "common/appUrl"], function(require, exports, viewModelBase, getIndexTermsCommand, getIndexDefinitionCommand, appUrl) {
    var indexTerms = (function (_super) {
        __extends(indexTerms, _super);
        function indexTerms() {
            _super.call(this);
            this.fields = ko.observableArray();
            this.appUrls = appUrl.forCurrentDatabase();
        }
        indexTerms.prototype.activate = function (indexName) {
            _super.prototype.activate.call(this, indexName);

            this.indexName = indexName;
            this.fetchIndexDefinition(indexName);
        };

        indexTerms.prototype.fetchIndexDefinition = function (indexName) {
            var _this = this;
            new getIndexDefinitionCommand(indexName, this.activeDatabase()).execute().done(function (results) {
                return _this.processIndex(results);
            });
        };

        indexTerms.prototype.processIndex = function (indexContainer) {
            var _this = this;
            var fields = indexContainer.Index.Fields.map(function (fieldName) {
                return { name: fieldName, terms: ko.observableArray() };
            });
            this.fields(fields);

            this.fields().forEach(function (field) {
                new getIndexTermsCommand(indexContainer.Index.Name, field.name, _this.activeDatabase()).execute().done(function (terms) {
                    return field.terms(terms);
                });
            });
        };
        return indexTerms;
    })(viewModelBase);

    
    return indexTerms;
});
/// <reference path="../../Scripts/typings/jszip/jszip.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/infoPackage", ["require", "exports", "durandal/app", 'd3/d3', 'nvd3', 'jszip/jszip', "common/messagePublisher", "common/appUrl", "common/svgDownloader", "common/fileDownloader", 'commands/getInfoPackage', "viewmodels/viewModelBase", "viewmodels/infoPackageImport"], function(require, exports, app, d3, nv, jszip, messagePublisher, appUrl, svgDownloader, fileDownloader, getInfoPackage, viewModelBase, infoPackageImport) {
    var parserState;
    (function (parserState) {
        parserState[parserState["pid"] = 0] = "pid";
        parserState[parserState["stack"] = 1] = "stack";
    })(parserState || (parserState = {}));

    var stackInfo = (function () {
        function stackInfo(ThreadIds, StackTrace) {
            var _this = this;
            this.ThreadIds = ThreadIds;
            this.StackTrace = StackTrace;
            this.boxHeight = function () {
                return _this.StackTrace.length * stackInfo.lineHeight + 2 * stackInfo.boxPadding;
            };
            this.stackWithShortcuts = function () {
                return _this.StackTrace.map(function (v) {
                    return {
                        short: stackInfo.shortName(v),
                        full: v
                    };
                });
            };
        }
        stackInfo.shortName = function (v) {
            var withoutArgs = v.replace(/\(.*?\)/g, '');
            if (withoutArgs.contains('+')) {
                return withoutArgs.replace(/.*\.(.*\+.*)/, '$1');
            } else {
                return withoutArgs.replace(/.*\.([^\.]+\.[^\.]+)$/, '$1');
            }
        };

        stackInfo.isUserCode = function (line) {
            return line.startsWith("Raven") || line.startsWith("Voron");
        };
        stackInfo.boxPadding = 8;
        stackInfo.lineHeight = 12;
        stackInfo.headerSize = 16;
        return stackInfo;
    })();

    var infoPackage = (function (_super) {
        __extends(infoPackage, _super);
        function infoPackage() {
            var _this = this;
            _super.call(this);
            this.node = null;
            this.link = null;
            this.nodes = [];
            this.svg = null;
            this.svgDefs = null;
            this.graph = null;
            this.infoPackage = ko.observable();
            this.infoPackageFilename = ko.observable();
            this.fetchException = ko.observable();
            this.showLoadingIndicator = ko.observable(false);
            this.stacksJson = ko.observable(null);
            this.hasFetchException = ko.computed(function () {
                return !!_this.fetchException();
            });
            this.hasInfoPackage = ko.computed(function () {
                return !!_this.infoPackage();
            });
            this.hasStackDump = ko.computed(function () {
                return !!_this.stacksJson();
            });
            this.hasSaveAsPngSupport = ko.computed(function () {
                return !(navigator && navigator.msSaveBlob);
            });

            this.appUrls = appUrl.forCurrentDatabase();
            this.adminView = ko.computed(function () {
                var activeDb = _this.activeDatabase();
                var appUrls = _this.appUrls;
                return (!!activeDb && activeDb.isSystem || !!appUrls && appUrls.isAreaActive('admin')());
            });
        }
        infoPackage.prototype.canActivate = function (args) {
            return true;
        };

        infoPackage.prototype.attached = function () {
            var self = this;
            $("#stacksContainer").resize();
            this.diagonal = d3.svg.diagonal().projection(function (d) {
                return [self.xScale(d.x), self.yScale(d.y)];
            });
        };

        infoPackage.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#stacksContainer").off('DynamicHeightSet');
            nv.tooltip.cleanup();
        };

        infoPackage.prototype.splitAndCollateStacks = function (stacks) {
            var _this = this;
            if (stacks.length == 1) {
                return stacks;
            }
            var grouped = d3.nest().key(function (d) {
                return d.StackTrace[0];
            }).entries(stacks);

            // for each group find common stack
            return grouped.map(function (kv) {
                var sharedStacks = kv.values;
                var minDepth = d3.min(sharedStacks, function (s) {
                    return s.StackTrace.length;
                });

                outer:
                for (var depth = 0; depth < minDepth; depth++) {
                    var currentStack = sharedStacks[0].StackTrace[depth];
                    for (var i = 1; i < sharedStacks.length; i++) {
                        if (currentStack != sharedStacks[i].StackTrace[depth]) {
                            break outer;
                        }
                    }
                }

                // extract shared stack:
                var sharedStack = new stackInfo([], sharedStacks[0].StackTrace.slice(0, depth));

                // remove shared stack from all stacks and recurse
                var strippedStacks = sharedStacks.map(function (s) {
                    return new stackInfo(s.ThreadIds, s.StackTrace.slice(depth));
                }).filter(function (s) {
                    return s.StackTrace.length > 0;
                });
                sharedStack.children = _this.splitAndCollateStacks(strippedStacks);
                sharedStack.ThreadIds = d3.merge(sharedStacks.map(function (s) {
                    return s.ThreadIds;
                }));

                return sharedStack;
            });
        };

        infoPackage.prototype.cumulativeSumWithPadding = function (input, padding) {
            var currentSum = 0;
            var output = [0];
            for (var i = 0; i < input.length; i++) {
                var offset = padding + input[i];
                output.push(currentSum + offset);
                currentSum += offset;
            }
            return output;
        };

        infoPackage.prototype.getTooltip = function (data) {
            return data.full;
        };

        infoPackage.prototype.updateGraph = function (roots) {
            var _this = this;
            var self = this;

            $("#parallelStacks").empty();

            this.svgDefs = d3.select("#parallelStacks").append("defs");

            var zoom = d3.behavior.zoom().scale(0.25).scaleExtent([0.2, 1.5]).on("zoom", this.zoom.bind(self));

            this.svg = d3.select("#parallelStacks").append("g").call(zoom).append("g");

            zoom.event(d3.select("#parallelStacks > g"));

            this.svg.append("rect").attr("class", "overlay");

            this.node = this.svg.selectAll(".node");
            this.link = this.svg.selectAll(".link");

            var fakeRoot = new stackInfo([], []);
            fakeRoot.children = roots;

            this.graph = d3.layout.tree().nodeSize([infoPackage.maxBoxWidth + 20, 100]);
            this.nodes = this.graph.nodes(fakeRoot).filter(function (d) {
                return d.depth > 0;
            });

            var maxBoxHeightOnDepth = d3.nest().key(function (d) {
                return d.depth;
            }).sortKeys(d3.ascending).rollup(function (leaves) {
                return d3.max(leaves, function (l) {
                    return l.boxHeight();
                });
            }).entries(this.nodes).map(function (v) {
                return v.values;
            });

            var cumulative = this.cumulativeSumWithPadding(maxBoxHeightOnDepth, infoPackage.boxVerticalPadding);

            this.height = cumulative[cumulative.length - 1];
            var extent = d3.extent(this.nodes, function (node) {
                return node.x;
            });
            extent[1] += infoPackage.maxBoxWidth;
            this.width = extent[1] - extent[0];

            d3.select(".overlay").attr("width", self.width).attr("height", self.height);

            var halfBoxShift = infoPackage.maxBoxWidth / 2 + 10;

            this.xScale = d3.scale.linear().domain([extent[0] - halfBoxShift, extent[1] - halfBoxShift]).range([0, this.width]);
            this.yScale = d3.scale.linear().domain([0, this.height]).range([this.height, 0]);

            var yDepthScale = d3.scale.linear().domain(d3.range(1, cumulative.length + 2, 1)).range(cumulative);

            this.links = this.graph.links(this.nodes).map(function (link) {
                var targetY = yDepthScale(link.target.depth);
                var linkHeight = infoPackage.boxVerticalPadding - stackInfo.headerSize;

                return {
                    source: {
                        x: link.source.x,
                        y: targetY - linkHeight,
                        y0: link.source.y
                    },
                    target: {
                        x: link.target.x,
                        y: targetY,
                        y0: link.target.y
                    }
                };
            });

            this.node = this.node.data(this.nodes);
            this.link = this.link.data(this.links);

            var enteringNodes = this.node.enter().append("g").attr("transform", function (d) {
                return "translate(" + _this.xScale(d.x) + "," + _this.yScale(yDepthScale(d.depth)) + ")";
            });

            enteringNodes.filter(function (d) {
                return d.children && d.children.length > 0;
            }).append("line").attr("class", "link").attr("x1", 0).attr("x2", 0).attr("y1", function (d) {
                return -d.boxHeight() - stackInfo.headerSize;
            }).attr("y2", function (d) {
                return -maxBoxHeightOnDepth[d.depth - 1] - stackInfo.headerSize;
            });

            var rect = enteringNodes.append('rect').attr('class', 'box').attr('x', -infoPackage.maxBoxWidth / 2).attr('y', function (d) {
                return -1 * d.boxHeight() - stackInfo.headerSize;
            }).attr('width', infoPackage.maxBoxWidth).attr('height', function (d) {
                return d.boxHeight() + stackInfo.headerSize;
            }).attr("fill", "red").attr("rx", 5).on('mouseout', function () {
                return nv.tooltip.cleanup();
            });

            var clipPaths = this.svgDefs.selectAll('.stackClip').data(this.nodes);
            clipPaths.enter().append("clipPath").attr('class', 'stackClip').attr('id', function (d, i) {
                return 'stack-clip-path-' + i;
            }).append('rect').attr('x', -infoPackage.maxBoxWidth / 2).attr('width', infoPackage.maxBoxWidth - 5).attr('y', function (d) {
                return -1 * d.boxHeight() - stackInfo.headerSize;
            }).attr('height', function (d) {
                return d.boxHeight() + stackInfo.headerSize;
            });

            enteringNodes.append("text").attr('text-anchor', 'middle').attr('y', function (d) {
                return -1 * d.boxHeight();
            }).text(function (d) {
                return d.ThreadIds.length + " thread" + ((d.ThreadIds.length > 1) ? "s" : '');
            });

            enteringNodes.append("line").attr('class', 'headerLine').attr('x1', -1 * infoPackage.maxBoxWidth / 2).attr('x2', infoPackage.maxBoxWidth / 2).attr('y1', function (d) {
                return -1 * d.boxHeight() + 4;
            }).attr('y2', function (d) {
                return -1 * d.boxHeight() + 4;
            });

            enteringNodes.filter(function (d) {
                return d.depth > 0;
            }).each(function (d, index) {
                var g = this;
                var offsetTop = d.boxHeight() - stackInfo.boxPadding - stackInfo.lineHeight;
                var textGroup = d3.select(g).append("g").attr('class', 'traces').style('clip-path', function (d) {
                    return 'url(#stack-clip-path-' + index + ')';
                });
                var stack = textGroup.selectAll('.trace').data(d.stackWithShortcuts().reverse());
                var reversedOriginalStack = d.StackTrace.reverse();
                stack.enter().append('text').attr('x', -140 + stackInfo.boxPadding).attr('y', function (d, i) {
                    return -offsetTop + stackInfo.lineHeight * i;
                }).text(function (d) {
                    return d.short;
                }).classed('notUserCode', function (s, i) {
                    return !stackInfo.isUserCode(reversedOriginalStack[i]);
                }).on('mouseover', function (d) {
                    nv.tooltip.cleanup();
                    var offset = $(this).offset();
                    nv.tooltip.show([offset.left, offset.top], self.getTooltip(d), 'n', 25);
                });
            });

            var enteringLinks = this.link.enter().append("g");

            enteringLinks.append("path").attr("class", "link").attr("d", this.diagonal);
        };

        infoPackage.prototype.zoom = function () {
            this.svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
        };

        infoPackage.prototype.cleanup = function () {
            nv.tooltip.cleanup();
            $("#parallelStacks").empty();
            this.infoPackage(null);
            this.infoPackageFilename(null);
            this.fetchException(null);
            this.stacksJson(null);
        };

        infoPackage.prototype.createPackageWithStacks = function () {
            this.createPackage(true);
        };

        infoPackage.prototype.createPackageWithoutStacks = function () {
            this.createPackage(false);
        };

        infoPackage.prototype.createPackage = function (includeStacks) {
            var _this = this;
            this.showLoadingIndicator(true);
            this.cleanup();
            var activeDb = this.adminView() ? appUrl.getSystemDatabase() : (this.activeDatabase() || appUrl.getSystemDatabase());
            new getInfoPackage(activeDb, includeStacks).execute().done(function (data, filename) {
                _this.infoPackage(data);
                _this.infoPackageFilename(filename);
                var zip = new jszip(data);
                var stacks = zip.file("stacktraces.txt");
                if (stacks) {
                    var stacksText = stacks.asText();
                    var stacksJson = JSON.parse(stacksText);
                    _this.packageCreated(stacksJson);
                }
            }).always(function () {
                return _this.showLoadingIndicator(false);
            });
        };

        infoPackage.prototype.packageCreated = function (stacksJson) {
            if ('Error' in stacksJson) {
                this.fetchException('Unable to fetch info package: ' + stacksJson.Error);
                return;
            } else {
                this.fetchException(null);
            }
            this.stacksJson(stacksJson);
            var collatedStacks = this.splitAndCollateStacks(stacksJson);
            this.updateGraph(collatedStacks);
        };

        infoPackage.prototype.saveAsSvg = function () {
            var _this = this;
            svgDownloader.downloadSvg(d3.select('#parallelStacks').node(), 'stacks.svg', function (svgClone) {
                _this.cleanupSvgCloneForSave(svgClone);
                return infoPackage.stacksCss;
            });
        };

        infoPackage.prototype.saveAsPng = function () {
            var _this = this;
            svgDownloader.downloadPng(d3.select('#parallelStacks').node(), 'stacks.png', function (svgClone) {
                _this.cleanupSvgCloneForSave(svgClone);
                return infoPackage.stacksCss;
            });
        };

        infoPackage.prototype.saveAsZip = function () {
            fileDownloader.downloadAsZip(this.infoPackage(), this.infoPackageFilename());
        };

        infoPackage.prototype.saveAsJson = function () {
            fileDownloader.downloadAsJson(this.stacksJson(), "stacks.json");
        };

        infoPackage.prototype.cleanupSvgCloneForSave = function (svgClone) {
            d3.select(svgClone).select("g").select("g").attr('transform', null);
            var overlay = d3.select(svgClone).select(".overlay");

            d3.select(svgClone).attr('viewBox', '0 0 ' + (this.width + 50) + ' ' + (this.height + 20));
            d3.select(svgClone).select(".overlay").remove();
        };

        infoPackage.prototype.chooseImportFile = function () {
            var _this = this;
            var dialog = new infoPackageImport();
            dialog.task().done(function (importedData) {
                _this.cleanup();
                if (importedData) {
                    _this.packageCreated(importedData);
                } else {
                    messagePublisher.reportWarning("Stacktraces are not available in given file. Please create info package with stacktraces.");
                }
            }).fail(function (e) {
                return messagePublisher.reportError(e);
            });

            app.showDialog(dialog);
        };
        infoPackage.maxBoxWidth = 280;
        infoPackage.boxVerticalPadding = 60;

        infoPackage.stacksCss = "* { box-sizing: border-box; }\n" + " svg text { font-style: normal; font-variant: normal; font-weight: normal; font-size: 12px; line-height: normal; font-family: Arial; }\n" + " * { box-sizing: border - box; }\n" + " .link { fill: none; stroke: rgb(204, 204, 204); stroke-width: 1.5px; }\n" + " .overlay { fill: none; pointer-events: all; }\n" + " .box { fill: rgb(21, 140, 186); fill-opacity: 0.2; stroke: rgb(21, 140, 186); stroke-width: 1.5px; }\n" + " .notUserCode { fill-opacity: 0.4; }\n" + " .headerLine { stroke: rgb(21, 140, 186); stroke-width: 1.5px; }";
        return infoPackage;
    })(viewModelBase);

    
    return infoPackage;
});
/// <reference path="../../Scripts/typings/jszip/jszip.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/infoPackageImport", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", 'jszip/jszip'], function(require, exports, dialog, dialogViewModelBase, jszip) {
    var importPackageImport = (function (_super) {
        __extends(importPackageImport, _super);
        function importPackageImport() {
            _super.call(this);
            this.importTask = $.Deferred();
            this.hasFileSelected = ko.observable(false);
            this.isImporting = ko.observable(false);
        }
        importPackageImport.prototype.fileSelected = function (args) {
            this.hasFileSelected(true);
        };

        importPackageImport.prototype.doImport = function () {
            var _this = this;
            var fileInput = document.querySelector("#importFilePicker");
            var self = this;
            var file = fileInput.files[0];
            var reader = new FileReader();
            reader.onload = function () {
                // try to detect type
                var firstChar = new Uint8Array(this.result.slice(0, 1))[0];
                if (firstChar == 91) {
                    var rawJson = String.fromCharCode.apply(null, new Uint8Array(this.result));
                    var json = JSON.parse(rawJson);
                    self.dataImported(json);
                } else {
                    var zip = new jszip(this.result);
                    var stacks = zip.file("stacktraces.txt");
                    if (stacks) {
                        var stacksText = stacks.asText();
                        var stacksJson = JSON.parse(stacksText);
                        self.dataImported(stacksJson);
                    } else {
                        self.dataImported(null);
                    }
                }
            };
            reader.onerror = function (error) {
                return _this.importTask.reject(error);
            };
            reader.readAsArrayBuffer(file);
        };

        importPackageImport.prototype.dataImported = function (result) {
            this.importTask.resolve(result);
            dialog.close(this);
        };

        importPackageImport.prototype.cancel = function () {
            dialog.close(this);
        };

        importPackageImport.prototype.task = function () {
            return this.importTask.promise();
        };
        return importPackageImport;
    })(dialogViewModelBase);

    
    return importPackageImport;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/ioTest", ["require", "exports", "viewmodels/viewModelBase", "commands/getDocumentWithMetadataCommand", "commands/getStatusDebugConfigCommand", "common/appUrl", "models/performanceTestRequest", "models/performanceTestResultWrapped", "commands/killRunningTaskCommand", 'd3/d3', 'nvd3'], function(require, exports, viewModelBase, getDocumentWithMetadataCommand, getStatusDebugConfigCommand, appUrl, performanceTestRequest, performanceTestResultWrapped, killRunningTaskCommand, d3, nv) {
    var ioTest = (function (_super) {
        __extends(ioTest, _super);
        function ioTest() {
            var _this = this;
            _super.call(this);
            this.isBusy = ko.observable(false);
            this.ioTestRequest = performanceTestRequest.empty();
            this.testResult = ko.observable();
            this.lastCommand = null;
            this.fileSizeMb = ko.computed({
                read: function () {
                    return _this.ioTestRequest.fileSize() / 1024 / 1024;
                },
                write: function (value) {
                    return _this.ioTestRequest.fileSize(value * 1024 * 1024);
                }
            });
            this.chunkSizeKb = ko.computed({
                read: function () {
                    return _this.ioTestRequest.chunkSize() / 1024;
                },
                write: function (value) {
                    return _this.ioTestRequest.chunkSize(value * 1024);
                }
            });
            this.overTimeThroughputChart = null;
            this.overTimeThroughputChartData = [];
            this.overTimeLatencyChart = null;
            this.overTimeLatencyChartData = [];

            this.ioTestRequest.sequential(false);

            this.chunkSizeCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                if (isNaN(_this.chunkSizeKb()) || _this.chunkSizeKb() % 4 != 0) {
                    errorMessage = "Chunk size must be multiple of 4";
                }
                return errorMessage;
            });
        }
        ioTest.prototype.canActivate = function (args) {
            var _this = this;
            var deffered = $.Deferred();

            new getStatusDebugConfigCommand(appUrl.getSystemDatabase()).execute().done(function (results) {
                return _this.ioTestRequest.threadCount(results.MaxNumberOfParallelProcessingTasks);
            }).always(function () {
                return deffered.resolve({ can: true });
            });

            return deffered;
        };

        ioTest.prototype.onIoTestCompleted = function (result) {
            var _this = this;
            this.testResult(new performanceTestResultWrapped(result));

            this.overTimeThroughputChartData = [];
            this.overTimeLatencyChartData = [];
            if (this.testResult().hasReads()) {
                this.overTimeThroughputChartData.push({
                    key: 'Read throughput',
                    values: result.Result.ReadPerSecondHistory.map(function (v, idx) {
                        return { x: idx, y: v / 1024 / 1024 };
                    })
                });

                this.overTimeLatencyChartData.push({
                    key: 'Read latency',
                    values: result.Result.AverageReadLatencyPerSecondHistory.map(function (v, idx) {
                        return { x: idx, y: v };
                    })
                });
            }

            if (this.testResult().hasWrites()) {
                this.overTimeThroughputChartData.push({
                    key: 'Write throughput',
                    values: result.Result.WritePerSecondHistory.map(function (v, idx) {
                        return { x: idx, y: v / 1024 / 1024 };
                    })
                });

                this.overTimeLatencyChartData.push({
                    key: 'Write latency',
                    values: result.Result.AverageWriteLatencyPerSecondHistory.map(function (v, idx) {
                        return { x: idx, y: v };
                    })
                });
            }

            if (this.overTimeLatencyChart === null) {
                nv.addGraph(function () {
                    var chart = nv.models.lineChart().margin({ left: 130 }).useInteractiveGuideline(true).transitionDuration(350).showLegend(true).showYAxis(true).showXAxis(true).forceY([0]);
                    ;

                    chart.xAxis.axisLabel('Time [s]');

                    chart.yAxis.axisLabel('ms').tickFormat(d3.format(',.2f'));

                    nv.utils.windowResize(function () {
                        chart.update();
                    });
                    return chart;
                }, function (chart) {
                    _this.overTimeLatencyChart = chart;
                    d3.select('#overTimeLatencyContainer svg').datum(_this.overTimeLatencyChartData).call(_this.overTimeLatencyChart);
                });
            } else {
                d3.select('#overTimeLatencyContainer svg').datum(this.overTimeLatencyChartData).call(this.overTimeLatencyChart);
            }

            if (this.overTimeThroughputChart === null) {
                nv.addGraph(function () {
                    var chart = nv.models.lineChart().margin({ left: 130 }).useInteractiveGuideline(true).transitionDuration(350).showLegend(true).showYAxis(true).showXAxis(true).forceY([0]);
                    ;

                    chart.xAxis.axisLabel('Time [s]');

                    chart.yAxis.axisLabel('MB/sec').tickFormat(d3.format(',.2f'));

                    nv.utils.windowResize(function () {
                        chart.update();
                    });
                    return chart;
                }, function (chart) {
                    _this.overTimeThroughputChart = chart;
                    d3.select('#overTimeThroughputContainer svg').datum(_this.overTimeThroughputChartData).call(_this.overTimeThroughputChart);
                });
            } else {
                d3.select('#overTimeThroughputContainer svg').datum(this.overTimeThroughputChartData).call(this.overTimeThroughputChart);
            }
        };

        ioTest.prototype.killTask = function () {
            if (this.lastCommand !== null) {
                this.lastCommand.operationIdTask.done(function (operationId) {
                    new killRunningTaskCommand(appUrl.getSystemDatabase(), operationId).execute();
                });
            }
        };

        ioTest.prototype.startPerformanceTest = function () {
            var _this = this;
            this.isBusy(true);
            var self = this;

            var diskTestParams = this.ioTestRequest.toDto();

            require(["commands/ioTestCommand"], function (ioTestCommand) {
                _this.lastCommand = new ioTestCommand(appUrl.getSystemDatabase(), diskTestParams);
                _this.lastCommand.execute().done(function () {
                    new getDocumentWithMetadataCommand("Raven/Disk/Performance", appUrl.getSystemDatabase()).execute().done(function (result) {
                        _this.onIoTestCompleted(result);
                    });
                }).always(function () {
                    return _this.isBusy(false);
                });
            });
        };
        return ioTest;
    })(viewModelBase);

    
    return ioTest;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/latestBuildReminder", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "common/serverBuildReminder"], function(require, exports, dialog, dialogViewModelBase, serverBuildReminder) {
    var latestBuildReminder = (function (_super) {
        __extends(latestBuildReminder, _super);
        function latestBuildReminder(latestServerBuildResult, elementToFocusOnDismissal) {
            var _this = this;
            _super.call(this, elementToFocusOnDismissal);
            this.latestServerBuildResult = latestServerBuildResult;
            this.dialogTask = $.Deferred();
            this.mute = ko.observable(false);

            this.mute.subscribe(function () {
                serverBuildReminder.mute(_this.mute());
            });
        }
        latestBuildReminder.prototype.detached = function () {
            _super.prototype.detached.call(this);
            this.dialogTask.resolve();
        };

        latestBuildReminder.prototype.close = function () {
            dialog.close(this);
        };
        return latestBuildReminder;
    })(dialogViewModelBase);

    
    return latestBuildReminder;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/licensingStatus", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var licensingStatus = (function (_super) {
        __extends(licensingStatus, _super);
        function licensingStatus(licenseStatus) {
            _super.call(this);
            this.licenseStatus = licenseStatus;
            this.bundles = ["SQL Replication", "Scripted Index"];
            this.bundleMap = { compression: "Compression", encryption: "Encryption:", documentExpiration: "Expiration", quotas: "Quotas", replication: "Replication", versioning: "Versioning", periodicBackup: "Periodic Export" };
            this.bundleString = "";
            for (var key in licenseStatus.Attributes) {
                var name = this.bundleMap[key];
                var isBundle = (name !== undefined);
                if (licenseStatus.Attributes.hasOwnProperty(key) && licenseStatus.Attributes[key] === "true" && isBundle) {
                    this.bundles.push(name);
                }
            }
            this.bundleString = this.bundles.sort().join(", ");
        }
        licensingStatus.prototype.cancel = function () {
            dialog.close(this);
        };

        licensingStatus.prototype.ok = function () {
            dialog.close(this);
        };

        licensingStatus.prototype.isBundle = function (bundle) {
            return this.bundleMap[bundle] !== undefined;
        };
        return licensingStatus;
    })(dialogViewModelBase);

    
    return licensingStatus;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/loadPatch", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", 'commands/getPatchesCommand'], function(require, exports, dialog, dialogViewModelBase, getPatchesCommand) {
    var loadPatch = (function (_super) {
        __extends(loadPatch, _super);
        function loadPatch(database) {
            _super.call(this);
            this.database = database;
            this.nextTask = $.Deferred();
            this.nextTaskStarted = false;
            this.patchName = ko.observable("");
            this.patches = ko.observableArray();
            this.patch = ko.observable();
        }
        loadPatch.prototype.activate = function () {
            this.fetchAllPatches();
            this.patchName = ko.observable("Select patch to load");
        };

        loadPatch.prototype.cancel = function () {
            dialog.close(this);
        };

        loadPatch.prototype.loadThePatch = function () {
            this.nextTaskStarted = true;
            this.nextTask.resolve(this.patch());
            dialog.close(this);
        };

        loadPatch.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.nextTaskStarted) {
                this.nextTask.reject();
            }
        };

        loadPatch.prototype.onExit = function () {
            return this.nextTask.promise();
        };

        loadPatch.prototype.fetchAllPatches = function () {
            var _this = this;
            new getPatchesCommand(this.database).execute().done(function (patches) {
                return _this.patches(patches);
            });
        };

        loadPatch.prototype.setSelectedPatch = function (patch) {
            this.patch(patch);
            this.patchName(patch.name());
        };
        return loadPatch;
    })(dialogViewModelBase);

    
    return loadPatch;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/logs", ["require", "exports", "commands/getLogsCommand", "viewmodels/viewModelBase", "moment", "models/document"], function(require, exports, getLogsCommand, viewModelBase, moment, document) {
    var logs = (function (_super) {
        __extends(logs, _super);
        function logs() {
            var _this = this;
            _super.call(this);
            this.allLogs = ko.observableArray();
            this.filterLevel = ko.observable("All");
            this.selectedLog = ko.observable();
            this.searchText = ko.observable("");
            this.now = ko.observable();
            this.updateNowTimeoutHandle = 0;
            this.filteredLoggers = ko.observableArray();
            this.sortColumn = ko.observable("TimeStamp");
            this.sortAsc = ko.observable(true);

            this.debugLogCount = ko.computed(function () {
                return _this.allLogs().count(function (l) {
                    return l.Level === "Debug";
                });
            });
            this.infoLogCount = ko.computed(function () {
                return _this.allLogs().count(function (l) {
                    return l.Level === "Info";
                });
            });
            this.warningLogCount = ko.computed(function () {
                return _this.allLogs().count(function (l) {
                    return l.Level === "Warn";
                });
            });
            this.errorLogCount = ko.computed(function () {
                return _this.allLogs().count(function (l) {
                    return l.Level === "Error";
                });
            });
            this.fatalLogCount = ko.computed(function () {
                return _this.allLogs().count(function (l) {
                    return l.Level === "Fatal";
                });
            });
            this.searchTextThrottled = this.searchText.throttle(400);
            this.activeDatabase.subscribe(function () {
                return _this.fetchLogs();
            });
            this.updateCurrentNowTime();

            this.filteredAndSortedLogs = ko.computed(function () {
                var logs = _this.allLogs();
                var column = _this.sortColumn();
                var asc = _this.sortAsc();

                var sortFunc = function (left, right) {
                    if (left[column] === right[column]) {
                        return 0;
                    }
                    var test = asc ? (function (l, r) {
                        return l < r;
                    }) : (function (l, r) {
                        return l > r;
                    });
                    return test(left[column], right[column]) ? 1 : -1;
                };

                return logs.sort(sortFunc);
            });
        }
        logs.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            this.columnWidths = [
                ko.observable(100),
                ko.observable(265),
                ko.observable(300),
                ko.observable(200),
                ko.observable(360)
            ];
            this.registerColumnResizing();
            return this.fetchLogs();
        };

        logs.prototype.attached = function () {
            var logsRecordsContainerWidth = $("#logRecordsContainer").width();
            var widthUnit = 0.08;
            this.columnWidths[0](100 * widthUnit);
            this.columnWidths[1](100 * widthUnit);
            this.columnWidths[2](100 * widthUnit * 6);
            this.columnWidths[3](100 * widthUnit * 2);
            this.columnWidths[4](100 * widthUnit * 2);
        };

        logs.prototype.deactivate = function () {
            clearTimeout(this.updateNowTimeoutHandle);
            this.unregisterColumnResizing();
        };

        logs.prototype.fetchLogs = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getLogsCommand(db).execute().done(function (results) {
                    return _this.processLogResults(results);
                });
            }

            return null;
        };

        logs.prototype.processLogResults = function (results, append) {
            var _this = this;
            if (typeof append === "undefined") { append = false; }
            var now = moment();
            results.forEach(function (r) {
                r['HumanizedTimestamp'] = _this.createHumanReadableTime(r.TimeStamp, true, false);
                r['TimeStampText'] = _this.createHumanReadableTime(r.TimeStamp, true, true);
                r['IsVisible'] = ko.computed(function () {
                    return _this.matchesFilterAndSearch(r) && !_this.filteredLoggers.contains(r.LoggerName);
                });
            });

            if (append === false) {
                this.allLogs(results.reverse());
            } else {
                if (results.length == 1) {
                    this.allLogs.unshift((results[0]));
                } else {
                    results.forEach(function (x) {
                        return _this.allLogs.unshift(x);
                    });
                }
            }
        };

        logs.prototype.matchesFilterAndSearch = function (log) {
            var searchTextThrottled = this.searchTextThrottled().toLowerCase();
            var filterLevel = this.filterLevel();
            var matchesLogLevel = filterLevel === "All" || log.Level === filterLevel;
            var matchesSearchText = !searchTextThrottled || (log.Message && log.Message.toLowerCase().indexOf(searchTextThrottled) >= 0) || (log.Exception && log.Exception.toLowerCase().indexOf(searchTextThrottled) >= 0);

            return matchesLogLevel && matchesSearchText;
        };

        logs.prototype.createHumanReadableTime = function (time, chainHumanized, chainDateTime) {
            var _this = this;
            if (typeof chainHumanized === "undefined") { chainHumanized = true; }
            if (typeof chainDateTime === "undefined") { chainDateTime = true; }
            if (time) {
                return ko.computed(function () {
                    var dateMoment = moment(time);
                    var humanized = "", formattedDateTime = "";
                    var agoInMs = dateMoment.diff(_this.now());
                    if (chainHumanized == true)
                        humanized = moment.duration(agoInMs).humanize(true);
                    if (chainDateTime == true)
                        formattedDateTime = dateMoment.format(" (MM/DD/YY, h:mma)");
                    return humanized + formattedDateTime;
                });
            }

            return ko.computed(function () {
                return time;
            });
        };

        logs.prototype.selectLog = function (log) {
            this.selectedLog(log);
        };

        logs.prototype.tableKeyDown = function (sender, e) {
            var isKeyUp = e.keyCode === 38;
            var isKeyDown = e.keyCode === 40;
            if (isKeyUp || isKeyDown) {
                e.preventDefault();

                var oldSelection = this.selectedLog();
                if (oldSelection) {
                    var oldSelectionIndex = this.allLogs.indexOf(oldSelection);
                    var newSelectionIndex = oldSelectionIndex;
                    if (isKeyUp && oldSelectionIndex > 0) {
                        newSelectionIndex--;
                    } else if (isKeyDown && oldSelectionIndex < this.allLogs().length - 1) {
                        newSelectionIndex++;
                    }

                    this.selectedLog(this.allLogs()[newSelectionIndex]);
                    var newSelectedRow = $("#logsContainer table tbody tr:nth-child(" + (newSelectionIndex + 1) + ")");
                    if (newSelectedRow) {
                        this.ensureRowVisible(newSelectedRow);
                    }
                }
            }
        };

        logs.prototype.showContextMenu = function () {
            //alert("this");
        };

        logs.prototype.ensureRowVisible = function (row) {
            var table = $("#logTableContainer");
            var scrollTop = table.scrollTop();
            var scrollBottom = scrollTop + table.height();
            var scrollHeight = scrollBottom - scrollTop;

            var rowPosition = row.position();
            var rowTop = rowPosition.top;
            var rowBottom = rowTop + row.height();

            if (rowTop < 0) {
                table.scrollTop(scrollTop + rowTop);
            } else if (rowBottom > scrollHeight) {
                table.scrollTop(scrollTop + (rowBottom - scrollHeight));
            }
        };

        logs.prototype.setFilterAll = function () {
            this.filterLevel("All");
        };

        logs.prototype.setFilterDebug = function () {
            this.filterLevel("Debug");
        };

        logs.prototype.setFilterInfo = function () {
            this.filterLevel("Info");
        };

        logs.prototype.setFilterWarning = function () {
            this.filterLevel("Warn");
        };

        logs.prototype.setFilterError = function () {
            this.filterLevel("Error");
        };

        logs.prototype.setFilterFatal = function () {
            this.filterLevel("Fatal");
        };

        logs.prototype.updateCurrentNowTime = function () {
            var _this = this;
            this.now(moment());
            this.updateNowTimeoutHandle = setTimeout(function () {
                return _this.updateCurrentNowTime();
            }, 60000);
        };

        logs.prototype.hideLogType = function (log) {
            if (!this.filteredLoggers.contains(log.LoggerName)) {
                this.filteredLoggers.push(log.LoggerName);
            }
        };

        logs.prototype.unHidelogType = function (loggerName) {
            if (this.filteredLoggers.contains(loggerName)) {
                this.filteredLoggers.remove(loggerName);
            }
        };

        logs.prototype.sortBy = function (columnName, logs, event) {
            if (this.sortColumn() === columnName) {
                this.sortAsc(!this.sortAsc());
            } else {
                this.sortColumn(columnName);
                this.sortAsc(true);
            }
        };

        logs.prototype.registerColumnResizing = function () {
            var _this = this;
            var resizingColumn = false;
            var startX = 0;
            var startingWidth = 0;
            var columnIndex = 0;

            $(document).on("mousedown.logTableColumnResize", ".column-handle", function (e) {
                columnIndex = parseInt($(e.currentTarget).attr("column"));
                startingWidth = _this.columnWidths[columnIndex]();
                startX = e.pageX;
                resizingColumn = true;
            });

            $(document).on("mouseup.logTableColumnResize", "", function (e) {
                resizingColumn = false;
            });

            $(document).on("mousemove.logTableColumnResize", "", function (e) {
                if (resizingColumn) {
                    var logsRecordsContainerWidth = $("#logRecordsContainer").width();
                    var targetColumnSize = startingWidth + 100 * (e.pageX - startX) / logsRecordsContainerWidth;
                    _this.columnWidths[columnIndex](targetColumnSize);

                    // Stop propagation of the event so the text selection doesn't fire up
                    if (e.stopPropagation)
                        e.stopPropagation();
                    if (e.preventDefault)
                        e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false;

                    return false;
                }
            });
        };

        logs.prototype.unregisterColumnResizing = function () {
            $(document).off("mousedown.logTableColumnResize");
            $(document).off("mouseup.logTableColumnResize");
            $(document).off("mousemove.logTableColumnResize");
        };
        return logs;
    })(viewModelBase);

    
    return logs;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/metrics", ["require", "exports", "viewmodels/viewModelBase", "common/appUrl", "viewmodels/status"], function(require, exports, viewModelBase, appUrl, status) {
    var metrics = (function (_super) {
        __extends(metrics, _super);
        function metrics() {
            var _this = this;
            _super.call(this);

            this.router = status.statusRouter.createChildRouter().map([
                { route: 'databases/status/metrics', moduleId: 'viewmodels/metricsRequests', title: 'Requests count', tooltip: "TODO", nav: true, hash: appUrl.forCurrentDatabase().metricsRequests },
                { route: 'databases/status/metrics/indexing', moduleId: 'viewmodels/metricsIndexing', title: 'Indexing performance', tooltip: "TODO", nav: true, hash: appUrl.forCurrentDatabase().metricsIndexing },
                { route: 'databases/status/metrics/indexBatchSize', moduleId: 'viewmodels/metricsIndexBatchSize', title: 'Index batch size', tooltip: "TODO", nav: true, hash: appUrl.forCurrentDatabase().metricsIndexBatchSize },
                { route: 'databases/status/metrics/prefetches', moduleId: 'viewmodels/metricsPrefetches', title: 'Prefetches', tooltip: "TODO", nav: true, hash: appUrl.forCurrentDatabase().metricsPrefetches }
            ]).buildNavigationModel();

            appUrl.mapUnknownRoutes(this.router);

            this.currentRouteTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                return activeRoute != null ? activeRoute.title : "";
            });
        }
        return metrics;
    })(viewModelBase);

    
    return metrics;
});
/// <reference path="../../Scripts/typings/d3/nvd3.d.ts" />
/// <reference path="../../Scripts/typings/d3/d3.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelinesChart.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelines.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/metricsIndexBatchSize", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", 'd3/d3', 'nvd3'], function(require, exports, viewModelBase, getDatabaseStatsCommand, d3, nv) {
    var metricsIndexBatchSize = (function (_super) {
        __extends(metricsIndexBatchSize, _super);
        function metricsIndexBatchSize() {
            _super.apply(this, arguments);
            this.currentStats = ko.observable(null);
            this.indexBatchSizeQueryUrl = ko.observable("");
            this.batchSizeChart = null;
            this.batchSizeChartData = [
                {
                    key: 'Batch size',
                    values: []
                }
            ];
        }
        metricsIndexBatchSize.prototype.attached = function () {
            this.modelPolling();
        };

        metricsIndexBatchSize.prototype.modelPolling = function () {
            var _this = this;
            this.fetchStats().then(function () {
                _this.appendData();
                _this.updateGraph();
            });
        };

        metricsIndexBatchSize.prototype.appendData = function () {
            var stats = this.currentStats();
            var batchInfos = stats.IndexingBatchInfo;
            var values = this.batchSizeChartData[0].values;

            for (var i = 0; i < batchInfos.length; i++) {
                var item = {
                    x: new Date(batchInfos[i].StartedAt),
                    y: batchInfos[i].TotalDocumentSize,
                    size: batchInfos[i].TotalDocumentSize
                };
                var match = values.first(function (e) {
                    return e.x.getTime() == item.x.getTime() && e.y == item.y;
                });
                if (!match) {
                    values.push(item);
                }
            }
        };

        metricsIndexBatchSize.prototype.updateGraph = function () {
            var _this = this;
            if (this.batchSizeChart === null) {
                nv.addGraph(function () {
                    var chart = nv.models.scatterChart().margin({ left: 130 }).transitionDuration(350).showLegend(true).showYAxis(true).showXAxis(true).forceY([0]);
                    ;

                    chart.xAxis.axisLabel('Time').tickFormat(function (d) {
                        return d3.time.format('%H:%M:%S')(new Date(d));
                    });

                    chart.yAxis.axisLabel('batch size').tickFormat(d3.format(',f'));

                    nv.utils.windowResize(function () {
                        chart.update();
                    });
                    return chart;
                }, function (chart) {
                    _this.batchSizeChart = chart;
                    d3.select('#actualIndexingBatchSizeContainer svg').datum(_this.batchSizeChartData).call(_this.batchSizeChart);
                });
            } else {
                // just update data
                d3.select('#actualIndexingBatchSizeContainer svg').datum(this.batchSizeChartData).call(this.batchSizeChart);
            }
        };

        metricsIndexBatchSize.prototype.fetchStats = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                var command = new getDatabaseStatsCommand(db);
                this.indexBatchSizeQueryUrl(command.getQueryUrl());
                return command.execute().done(function (s) {
                    return _this.currentStats(s);
                });
            }
            return null;
        };
        return metricsIndexBatchSize;
    })(viewModelBase);

    
    return metricsIndexBatchSize;
});
/// <reference path="../../Scripts/typings/d3/nvd3.d.ts" />
/// <reference path="../../Scripts/typings/d3/d3.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelinesChart.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelines.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/metricsIndexing", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", "commands/getStatusDebugMetricsCommand", 'd3/d3', 'nvd3'], function(require, exports, viewModelBase, getDatabaseStatsCommand, getStatusDebugMetricsCommand, d3, nv) {
    var metrics = (function (_super) {
        __extends(metrics, _super);
        function metrics() {
            _super.apply(this, arguments);
            var _this = this;
            this.currentStats = ko.observable(null);
            this.currentMetrics = ko.observable(null);
            this.indexingPerformanceUrl = ko.observable("");
            this.availableIndexes = ko.observableArray();
            this.selectedIndex = ko.observable(null);
            this.allIndexPerfChartVisible = ko.computed(function () {
                return _this.selectedIndex() === null;
            });
            this.specificIndexChart = null;
            this.specificIndexChartData = [];
            this.allIndexPerfChart = null;
            this.allIndexPerfChartData = [
                {
                    key: 'Index',
                    values: []
                },
                {
                    key: 'Reduce',
                    values: []
                }
            ];
            this.currentIndexName = ko.computed(function () {
                if (_this.selectedIndex() === null) {
                    return "All indexes";
                }
                return _this.selectedIndex();
            });
        }
        metrics.prototype.attached = function () {
            metrics.specificIndexAllowZoom = false;
            this.modelPolling();
        };

        metrics.prototype.modelPolling = function () {
            var _this = this;
            $.when(this.fetchStats(), this.fetchMetrics()).then(function () {
                _this.fillIndexNames();
                _this.appendData();
                _this.updateIndexChart();
            });
        };

        metrics.prototype.appendData = function () {
            var metric = this.currentMetrics();
            var stats = this.currentStats();
            var now = new Date();
            this.allIndexPerfChartData[0].values.push({
                x: now,
                y: metric.IndexedPerSecond
            });
            this.allIndexPerfChartData[1].values.push({
                x: now,
                y: metric.ReducedPerSecond
            });
            this.appendIndexData();
        };

        metrics.prototype.appendIndexData = function () {
            var _this = this;
            var stats = this.currentStats();
            var currentStat = stats.Indexes.filter(function (indexStat) {
                return indexStat.Name == _this.currentIndexName();
            });
            if (currentStat && currentStat.length == 1) {
                var newData = metrics.mapStatsData(currentStat[0].Performance);

                for (var i = 0; i < newData.length; i++) {
                    var serie = newData[i];
                    var key = serie.key;
                    var values = serie.values;
                    var match = this.specificIndexChartData.filter(function (x) {
                        return x.key == key;
                    });
                    if (match && match.length == 1) {
                        metrics.arrayMerge(match[0].values, serie.values);
                    } else {
                        this.specificIndexChartData.push(newData[i]);
                    }
                }
            }
        };

        metrics.arrayMerge = function (target, source) {
            for (var i = 0; i < source.length; i++) {
                var newItem = source[i];

                // try to find newItem in target array
                var match = target.filter(function (x) {
                    return x.x == newItem.x && x.size == newItem.size;
                });
                if (!match || match.length == 0) {
                    target.push(newItem);
                }
            }
        };

        metrics.mapStatsData = function (data) {
            var chartData = {};
            data.forEach(function (perfDto) {
                if (perfDto.Operation !== "Current Map" && perfDto.DurationMilliseconds > 0) {
                    if (!chartData[perfDto.Operation]) {
                        chartData[perfDto.Operation] = {
                            key: perfDto.Operation,
                            values: []
                        };
                    }
                    chartData[perfDto.Operation].values.push({
                        x: new Date(perfDto.Started).getTime(),
                        y: perfDto.InputCount,
                        size: perfDto.DurationMilliseconds,
                        payload: perfDto
                    });
                }
            });
            return $.map(chartData, function (v, idx) {
                return v;
            });
        };

        metrics.prototype.setSelectedIndex = function (indexName) {
            this.selectedIndex(indexName);
            this.specificIndexChartData = [];
            this.appendIndexData();
            this.updateIndexChart();
        };

        metrics.prototype.updateIndexChart = function () {
            if (this.allIndexPerfChartVisible()) {
                this.updateGraphAllIndexChart();
            } else {
                this.updateSpecificIndexChart();
            }
        };

        metrics.prototype.updateGraphAllIndexChart = function () {
            var _this = this;
            if (this.allIndexPerfChart === null) {
                nv.addGraph(function () {
                    var chart = nv.models.lineChart().margin({ left: 130 }).useInteractiveGuideline(true).transitionDuration(350).showLegend(true).showYAxis(true).showXAxis(true).forceY([0]);
                    ;

                    chart.xAxis.axisLabel('Time').tickFormat(function (d) {
                        return d3.time.format('%H:%M:%S')(new Date(d));
                    });

                    chart.xScale(d3.time.scale());

                    chart.yAxis.axisLabel('docs/sec').tickFormat(d3.format(',.2f'));

                    nv.utils.windowResize(function () {
                        chart.update();
                    });
                    return chart;
                }, function (chart) {
                    _this.allIndexPerfChart = chart;
                    d3.select('#allIndexesPerfContainer svg').datum(_this.allIndexPerfChartData).call(_this.allIndexPerfChart);
                });
            } else {
                d3.select('#allIndexesPerfContainer svg').datum(this.allIndexPerfChartData).call(this.allIndexPerfChart);
            }
        };

        metrics.prototype.updateSpecificIndexChart = function () {
            var _this = this;
            if (!this.specificIndexChart) {
                nv.addGraph(function () {
                    var chart = nv.models.timelinesChart().showDistX(true).showDistY(true).showControls(true).color(d3.scale.category10().range()).transitionDuration(250);
                    chart.yAxis.showMaxMin(false).axisLabel('input count').tickFormat(d3.format(',f'));

                    chart.forceY([0]);
                    chart.y2Axis.showMaxMin(false);
                    chart.xAxis.showMaxMin(false);
                    chart.x2Axis.showMaxMin(false);
                    chart.xAxis.tickFormat(function (_) {
                        return d3.time.format("%H:%M:%S")(new Date(_));
                    });
                    chart.x2Axis.tickFormat(function (_) {
                        return d3.time.format("%H:%M:%S")(new Date(_));
                    });

                    chart.tooltipContent(function (key, x, y, data) {
                        var ff = d3.format(",f");
                        return '<h4>' + key + '</h4>' + 'Items count: ' + ff(data.point.payload.ItemsCount) + '<br />' + 'Input count: ' + ff(data.point.payload.InputCount) + '<br />' + 'Output count: ' + ff(data.point.payload.OutputCount) + '<br />' + 'Started: ' + data.point.payload.Started + '<br />' + 'Duration: ' + data.point.payload.Duration;
                    });

                    chart.dispatch.on('controlsChange', function (e) {
                        metrics.specificIndexAllowZoom = !!e.disabled;
                    });

                    nv.utils.windowResize(chart);

                    return chart;
                }, function (chart) {
                    _this.specificIndexChart = chart;
                    d3.select('#indexPerfContainer svg').datum(_this.specificIndexChartData).call(_this.specificIndexChart);
                });
            } else {
                if (!metrics.specificIndexAllowZoom) {
                    d3.select('#indexPerfContainer svg').datum(this.specificIndexChartData).call(this.specificIndexChart);
                }
            }
        };

        metrics.prototype.fillIndexNames = function () {
            this.availableIndexes(this.currentStats().Indexes.filter(function (idx) {
                return idx.Performance.length > 0;
            }));
        };

        metrics.prototype.fetchStats = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getDatabaseStatsCommand(db).execute().done(function (s) {
                    return _this.currentStats(s);
                });
            }
            return null;
        };

        metrics.prototype.fetchMetrics = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                var queryCommand = new getStatusDebugMetricsCommand(db);
                this.indexingPerformanceUrl(queryCommand.getQueryUrl());
                return queryCommand.execute().done(function (m) {
                    return _this.currentMetrics(m);
                });
            }

            return null;
        };
        metrics.specificIndexAllowZoom = false;
        return metrics;
    })(viewModelBase);

    
    return metrics;
});
/// <reference path="../../Scripts/typings/d3/nvd3.d.ts" />
/// <reference path="../../Scripts/typings/d3/d3.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelinesChart.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelines.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/metricsPrefetches", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", "moment", 'd3/d3', 'nvd3'], function(require, exports, viewModelBase, getDatabaseStatsCommand, moment, d3, nv) {
    var metricsPrefetchers = (function (_super) {
        __extends(metricsPrefetchers, _super);
        function metricsPrefetchers() {
            _super.apply(this, arguments);
            this.currentStats = ko.observable(null);
            this.prefetchesChart = null;
            this.prefetchesChartData = [{
                    key: 'Prefetches',
                    values: []
                }];
        }
        metricsPrefetchers.prototype.attached = function () {
            metricsPrefetchers.prefetchesAllowZoom = false;
            this.modelPolling();
        };

        metricsPrefetchers.prototype.modelPolling = function () {
            var _this = this;
            this.fetchStats().then(function () {
                _this.appendData();
                _this.updateChart();
            });
        };

        metricsPrefetchers.prototype.appendData = function () {
            var stats = this.currentStats();
            var prefeches = stats.Prefetches;
            var values = this.prefetchesChartData[0].values;

            for (var i = 0; i < prefeches.length; i++) {
                var item = {
                    x: new Date(prefeches[i].Timestamp).getTime(),
                    size: moment.duration(prefeches[i].Duration).asMilliseconds(),
                    y: prefeches[i].Size,
                    payload: prefeches[i]
                };

                var match = values.first(function (e) {
                    return e.x == item.x && e.y == item.y;
                });
                if (!match) {
                    values.push(item);
                }
            }
        };

        metricsPrefetchers.prototype.updateChart = function () {
            var _this = this;
            if (!this.prefetchesChart) {
                nv.addGraph(function () {
                    var chart = nv.models.timelinesChart().showDistX(true).showDistY(true).showControls(true).color(d3.scale.category10().range()).transitionDuration(250);
                    chart.yAxis.showMaxMin(false).axisLabel('size').tickFormat(d3.format(',f'));

                    chart.forceY([0]);
                    chart.y2Axis.showMaxMin(false);
                    chart.xAxis.showMaxMin(false);
                    chart.x2Axis.showMaxMin(false);
                    chart.xAxis.tickFormat(function (_) {
                        return d3.time.format("%H:%M:%S")(new Date(_));
                    });
                    chart.x2Axis.tickFormat(function (_) {
                        return d3.time.format("%H:%M:%S")(new Date(_));
                    });

                    chart.tooltipContent(function (key, x, y, data) {
                        var ff = d3.format(",f");
                        return '<h4>' + key + '</h4>' + 'Timestamp: ' + data.point.payload.Timestamp + '<br />' + 'Duration: ' + data.point.payload.Duration + '<br />' + 'Size: ' + ff(data.point.payload.Size) + '<br />' + 'Retries: ' + ff(data.point.payload.Retries);
                    });

                    chart.dispatch.on('controlsChange', function (e) {
                        metricsPrefetchers.prefetchesAllowZoom = !!e.disabled;
                    });

                    nv.utils.windowResize(chart);

                    return chart;
                }, function (chart) {
                    _this.prefetchesChart = chart;
                    d3.select('#prefetchesContainer svg').datum(_this.prefetchesChartData).call(_this.prefetchesChart);
                });
            } else {
                if (!metricsPrefetchers.prefetchesAllowZoom) {
                    d3.select('#prefetchesContainer svg').datum(this.prefetchesChartData).call(this.prefetchesChart);
                }
            }
        };

        metricsPrefetchers.prototype.fetchStats = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getDatabaseStatsCommand(db).execute().done(function (s) {
                    return _this.currentStats(s);
                });
            }
            return null;
        };
        metricsPrefetchers.prefetchesAllowZoom = false;
        return metricsPrefetchers;
    })(viewModelBase);

    
    return metricsPrefetchers;
});
/// <reference path="../../Scripts/typings/d3/nvd3.d.ts" />
/// <reference path="../../Scripts/typings/d3/d3.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelinesChart.d.ts" />
/// <reference path="../../Scripts/typings/d3/timelines.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/metricsRequests", ["require", "exports", "viewmodels/viewModelBase", "commands/getStatusDebugMetricsCommand", 'd3/d3', 'nvd3'], function(require, exports, viewModelBase, getStatusDebugMetricsCommand, d3, nv) {
    var metricsRequests = (function (_super) {
        __extends(metricsRequests, _super);
        function metricsRequests() {
            _super.apply(this, arguments);
            this.currentMetrics = ko.observable(null);
            this.requestsMetricsUrl = ko.observable("");
            this.requestCounterChart = null;
            this.requestCounterChartData = [
                {
                    key: 'Mean',
                    values: []
                },
                {
                    key: '1 min',
                    values: []
                },
                {
                    key: '5 min',
                    values: []
                },
                {
                    key: '15 min',
                    values: []
                }
            ];
        }
        metricsRequests.prototype.modelPolling = function () {
            var _this = this;
            this.fetchMetrics().then(function () {
                _this.appendData();
                _this.updateGraph();
            });
        };

        metricsRequests.prototype.attached = function () {
            this.modelPolling();
        };

        metricsRequests.prototype.appendData = function () {
            var metric = this.currentMetrics();
            var now = new Date();
            this.requestCounterChartData[0].values.push({
                x: now,
                y: metric.Requests.MeanRate
            });
            this.requestCounterChartData[1].values.push({
                x: now,
                y: metric.Requests.OneMinuteRate
            });
            this.requestCounterChartData[2].values.push({
                x: now,
                y: metric.Requests.FiveMinuteRate
            });
            this.requestCounterChartData[3].values.push({
                x: now,
                y: metric.Requests.FifteenMinuteRate
            });
        };

        metricsRequests.prototype.updateGraph = function () {
            var _this = this;
            if (this.requestCounterChart === null) {
                nv.addGraph(function () {
                    var chart = nv.models.lineChart().margin({ left: 130 }).useInteractiveGuideline(true).transitionDuration(350).showLegend(true).showYAxis(true).showXAxis(true).forceY([0]);
                    ;

                    chart.xAxis.axisLabel('Time').tickFormat(function (d) {
                        return d3.time.format('%H:%M:%S')(new Date(d));
                    });

                    chart.xScale(d3.time.scale());

                    chart.yAxis.axisLabel('request/sec').tickFormat(d3.format('.01f'));

                    nv.utils.windowResize(function () {
                        chart.update();
                    });
                    return chart;
                }, function (chart) {
                    _this.requestCounterChart = chart;
                    d3.select('#requestCounterContainer svg').datum(_this.requestCounterChartData).call(_this.requestCounterChart);
                });
            } else {
                // just update data
                d3.select('#requestCounterContainer svg').datum(this.requestCounterChartData).call(this.requestCounterChart);
            }
        };

        metricsRequests.prototype.fetchMetrics = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                var command = new getStatusDebugMetricsCommand(db);
                this.requestsMetricsUrl(command.getQueryUrl());
                return command.execute().done(function (m) {
                    return _this.currentMetrics(m);
                });
            }

            return null;
        };
        return metricsRequests;
    })(viewModelBase);

    
    return metricsRequests;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/patch", ["require", "exports", "durandal/app", "viewmodels/viewModelBase", "models/patchDocument", "common/aceEditorBindingHandler", "commands/getDatabaseStatsCommand", "commands/getCollectionsCommand", "models/document", "common/pagedList", "common/jsonUtil", "commands/queryIndexCommand", "commands/getDocumentWithMetadataCommand", 'viewmodels/savePatch', 'viewmodels/loadPatch', 'viewmodels/executePatchConfirm', 'commands/savePatchCommand', "commands/executePatchCommand"], function(require, exports, app, viewModelBase, patchDocument, aceEditorBindingHandler, getDatabaseStatsCommand, getCollectionsCommand, document, pagedList, jsonUtil, queryIndexCommand, getDocumentWithMetadataCommand, savePatch, loadPatch, executePatchConfirm, savePatchCommand, executePatchCommand) {
    var patch = (function (_super) {
        __extends(patch, _super);
        function patch() {
            _super.call(this);
            this.displayName = "patch";
            this.indexNames = ko.observableArray();
            this.collections = ko.observableArray();
            this.currentCollectionPagedItems = ko.observable();
            this.selectedDocumentIndices = ko.observableArray();
            this.patchDocument = ko.observable();
            this.beforePatch = ko.observable();
            this.afterPatch = ko.observable();
            this.loadedDocuments = ko.observableArray();
            this.putDocuments = ko.observableArray();
            this.documentKey = ko.observable();

            aceEditorBindingHandler.install();
        }
        patch.prototype.activate = function () {
            var _this = this;
            this.patchDocument(patchDocument.empty());
            this.isExecuteAllowed = ko.computed(function () {
                return ((_this.patchDocument().script()) && (_this.beforePatch())) ? true : false;
            });
            this.keyOfTestedDocument = ko.computed(function () {
                switch (_this.patchDocument().patchOnOption()) {
                    case "Collection":
                    case "Index":
                        return _this.documentKey();
                    case "Document":
                        return _this.patchDocument().selectedItem();
                }
            });
            this.selectedDocumentIndices.subscribe(function (list) {
                var firstCheckedOnList = list.last();
                if (firstCheckedOnList != null) {
                    _this.currentCollectionPagedItems().getNthItem(firstCheckedOnList).done(function (document) {
                        _this.documentKey(document.__metadata.id);
                        _this.beforePatch(JSON.stringify(document.toDto(), null, 4));
                    });
                } else {
                    _this.clearDocumentPreview();
                }
            });
        };

        patch.prototype.attached = function () {
            $("#indexQueryLabel").popover({
                html: true,
                trigger: 'hover',
                container: '.form-horizontal',
                content: 'Queries use Lucene syntax. Examples:<pre><span class="code-keyword">Name</span>: Hi?berna*<br/><span class="code-keyword">Count</span>: [0 TO 10]<br/><span class="code-keyword">Title</span>: "RavenDb Queries 1010" AND <span class="code-keyword">Price</span>: [10.99 TO *]</pre>'
            });
            $("#patchScriptsLabel").popover({
                html: true,
                trigger: 'hover',
                container: '.form-horizontal',
                content: 'Patch Scripts are written in JavaScript. Examples:<pre><span class="code-keyword">this</span>.NewProperty = <span class="code-keyword">this</span>.OldProperty + myParameter;<br/><span class="code-keyword">delete this</span>.UnwantedProperty;<br/><span class="code-keyword">this</span>.Comments.RemoveWhere(<span class="code-keyword">function</span>(comment){<br/>  <span class="code-keyword">return</span> comment.Spam;<br/>});</pre>'
            });

            var rowCreatedEvent = app.on(patch.gridSelector + 'RowsCreated').then(function () {
                rowCreatedEvent.off();
            });
        };

        patch.prototype.loadDocumentToTest = function (selectedItem) {
            var _this = this;
            if (selectedItem) {
                var loadDocTask = new getDocumentWithMetadataCommand(selectedItem, this.activeDatabase()).execute();
                loadDocTask.done(function (document) {
                    _this.beforePatch(JSON.stringify(document.toDto(), null, 4));
                }).fail(this.clearDocumentPreview());
            } else {
                this.clearDocumentPreview();
            }
        };

        patch.prototype.clearDocumentPreview = function () {
            this.beforePatch('');
            this.afterPatch('');
        };

        patch.prototype.setSelectedPatchOnOption = function (patchOnOption) {
            this.patchDocument().patchOnOption(patchOnOption);
            this.patchDocument().selectedItem('');
            this.clearDocumentPreview();
            switch (patchOnOption) {
                case "Collection":
                    this.fetchAllCollections();
                    break;
                case "Index":
                    this.fetchAllIndexes();
                    break;
                default:
                    this.currentCollectionPagedItems(null);
                    break;
            }
        };

        patch.prototype.fetchAllCollections = function () {
            var _this = this;
            return new getCollectionsCommand(this.activeDatabase()).execute().always(function () {
                return NProgress.done();
            }).done(function (colls) {
                _this.collections(colls);
                if (_this.collections().length > 0) {
                    _this.setSelectedCollection(_this.collections().first());
                }
            });
        };

        patch.prototype.setSelectedCollection = function (coll) {
            this.patchDocument().selectedItem(coll.name);
            var list = coll.getDocuments();
            this.currentCollectionPagedItems(list);
            list.fetch(0, 20);
            $("#matchingDocumentsGrid").resize();
        };

        patch.prototype.fetchAllIndexes = function () {
            var _this = this;
            return new getDatabaseStatsCommand(this.activeDatabase()).execute().done(function (results) {
                _this.indexNames(results.Indexes.map(function (i) {
                    return i.Name;
                }));
                if (_this.indexNames().length > 0) {
                    _this.setSelectedIndex(_this.indexNames().first());
                }
            });
        };

        patch.prototype.setSelectedIndex = function (indexName) {
            this.patchDocument().selectedItem(indexName);
            this.runQuery();
        };

        patch.prototype.runQuery = function () {
            var selectedIndex = this.patchDocument().selectedItem();
            if (selectedIndex) {
                var queryText = this.patchDocument().query();
                var database = this.activeDatabase();
                var resultsFetcher = function (skip, take) {
                    var command = new queryIndexCommand(selectedIndex, database, skip, take, queryText, []);
                    return command.execute();
                };
                var resultsList = new pagedList(resultsFetcher);
                this.currentCollectionPagedItems(resultsList);
                return resultsList;
            }
            return null;
        };

        patch.prototype.runQueryWithDelay = function () {
            var _this = this;
            setTimeout(function () {
                return _this.runQuery();
            }, 1000);
        };

        patch.prototype.savePatch = function () {
            var _this = this;
            var savePatchViewModel = new savePatch();
            app.showDialog(savePatchViewModel);
            savePatchViewModel.onExit().done(function (patchName) {
                new savePatchCommand(patchName, _this.patchDocument(), _this.activeDatabase()).execute();
            });
        };

        patch.prototype.loadPatch = function () {
            var _this = this;
            this.clearDocumentPreview();
            var loadPatchViewModel = new loadPatch(this.activeDatabase());
            app.showDialog(loadPatchViewModel);
            loadPatchViewModel.onExit().done(function (patch) {
                var selectedItem = patch.selectedItem();
                _this.patchDocument(patch.cloneWithoutMetadata());
                switch (_this.patchDocument().patchOnOption()) {
                    case "Collection":
                        _this.fetchAllCollections().then(function () {
                            _this.setSelectedCollection(_this.collections().filter(function (coll) {
                                return (coll.name === selectedItem);
                            }).first());
                        });
                        break;
                    case "Index":
                        _this.fetchAllIndexes().then(function () {
                            _this.setSelectedIndex(selectedItem);
                        });
                        break;
                    case "Document":
                        _this.loadDocumentToTest(patch.selectedItem());
                        break;
                }
            });
        };

        patch.prototype.testPatch = function () {
            var _this = this;
            var values = {};
            var patchDtos = this.patchDocument().parameters().map(function (param) {
                var dto = param.toDto();
                values[dto.Key] = dto.Value;
            });
            var bulkDocs = [];
            bulkDocs.push({
                Key: this.keyOfTestedDocument(),
                Method: 'EVAL',
                DebugMode: true,
                Patch: {
                    Script: this.patchDocument().script(),
                    Values: values
                }
            });
            new executePatchCommand(bulkDocs, this.activeDatabase(), true).execute().done(function (result) {
                var testResult = new document(result[0].AdditionalData['Document']);
                _this.afterPatch(JSON.stringify(testResult.toDto(), null, 4));
                _this.updateActions(result[0].AdditionalData['Actions']);
            }).fail(function (result) {
                return console.log(result.responseText);
            });
        };

        patch.prototype.updateActions = function (actions) {
            this.loadedDocuments(actions.LoadDocument);
            this.putDocuments(actions.PutDocument.map(function (doc) {
                return jsonUtil.syntaxHighlight(doc);
            }));
        };

        patch.prototype.executePatchOnSingle = function () {
            var keys = [];
            keys.push(this.patchDocument().selectedItem());
            this.confirmAndExecutePatch(keys);
        };

        patch.prototype.executePatchOnSelected = function () {
            this.confirmAndExecutePatch(this.getDocumentsGrid().getSelectedItems().map(function (doc) {
                return doc.__metadata.id;
            }));
        };

        patch.prototype.executePatchOnAll = function () {
            this.confirmAndExecutePatch(this.currentCollectionPagedItems().getAllCachedItems().map(function (doc) {
                return doc.__metadata.id;
            }));
        };

        patch.prototype.confirmAndExecutePatch = function (keys) {
            var _this = this;
            var confirmExec = new executePatchConfirm();
            confirmExec.viewTask.done(function () {
                return _this.executePatch(keys);
            });
            app.showDialog(confirmExec);
        };

        patch.prototype.executePatch = function (keys) {
            var _this = this;
            var values = {};
            var patchDtos = this.patchDocument().parameters().map(function (param) {
                var dto = param.toDto();
                values[dto.Key] = dto.Value;
            });
            var bulkDocs = [];
            keys.forEach(function (key) {
                return bulkDocs.push({
                    Key: key,
                    Method: 'EVAL',
                    DebugMode: false,
                    Patch: {
                        Script: _this.patchDocument().script(),
                        Values: values
                    }
                });
            });
            new executePatchCommand(bulkDocs, this.activeDatabase(), false).execute().done(function (result) {
                _this.afterPatch('');
                if (_this.patchDocument().patchOnOption() === 'Document') {
                    _this.loadDocumentToTest(_this.patchDocument().selectedItem());
                }
                _this.updateDocumentsList();
            }).fail(function (result) {
                return console.log(result.responseText);
            });
        };

        patch.prototype.updateDocumentsList = function () {
            var _this = this;
            switch (this.patchDocument().patchOnOption()) {
                case "Collection":
                    this.fetchAllCollections().then(function () {
                        _this.setSelectedCollection(_this.collections().filter(function (coll) {
                            return (coll.name === _this.patchDocument().selectedItem());
                        }).first());
                    });
                    break;
                case "Index":
                    this.setSelectedIndex(this.patchDocument().selectedItem());
                    break;
            }
        };

        patch.prototype.getDocumentsGrid = function () {
            var gridContents = $(patch.gridSelector).children()[0];
            if (gridContents) {
                return ko.dataFor(gridContents);
            }

            return null;
        };
        patch.gridSelector = "#matchingDocumentsGrid";
        return patch;
    })(viewModelBase);

    
    return patch;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/periodicExport", ["require", "exports", "viewmodels/viewModelBase", "commands/getPeriodicExportSetupCommand", "commands/getDatabaseSettingsCommand", "commands/savePeriodicExportSetupCommand", "models/periodicExportSetup", "common/appUrl"], function(require, exports, viewModelBase, getPeriodicExportSetupCommand, getDatabaseSettingsCommand, savePeriodicExportSetupCommand, periodicExportSetup, appUrl) {
    var periodicExport = (function (_super) {
        __extends(periodicExport, _super);
        function periodicExport() {
            _super.apply(this, arguments);
            this.backupSetup = ko.observable().extend({ required: true });
            this.backupStatusDirtyFlag = new ko.DirtyFlag([]);
            this.backupConfigDirtyFlag = new ko.DirtyFlag([]);
        }
        periodicExport.prototype.canActivate = function (args) {
            var _this = this;
            _super.prototype.canActivate.call(this, args);
            this.backupSetup(new periodicExportSetup);

            var deferred = $.Deferred();
            var db = this.activeDatabase();
            if (db) {
                $.when(this.fetchPeriodicExportSetup(db), this.fetchPeriodicExportAccountsSettings(db)).done(function () {
                    return deferred.resolve({ can: true });
                }).fail(function () {
                    return deferred.resolve({ redirect: appUrl.forDatabaseSettings(_this.activeDatabase()) });
                });
            }
            return deferred;
        };

        periodicExport.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);

            this.backupStatusDirtyFlag = new ko.DirtyFlag([this.backupSetup().disabled]);
            this.backupConfigDirtyFlag = new ko.DirtyFlag([this.backupSetup]);

            var self = this;
            this.isSaveEnabled = ko.computed(function () {
                return (self.backupConfigDirtyFlag().isDirty()) && (!self.backupSetup().disabled() || (self.backupSetup().disabled() && self.backupStatusDirtyFlag().isDirty()));
            });

            this.dirtyFlag = new ko.DirtyFlag([this.isSaveEnabled]);
        };

        periodicExport.prototype.fetchPeriodicExportSetup = function (db) {
            var _this = this;
            var deferred = $.Deferred();
            new getPeriodicExportSetupCommand(db).execute().done(function (result) {
                return _this.backupSetup().fromDto(result);
            }).always(function () {
                return deferred.resolve();
            });
            return deferred;
        };

        periodicExport.prototype.fetchPeriodicExportAccountsSettings = function (db) {
            var _this = this;
            var deferred = $.Deferred();
            new getDatabaseSettingsCommand(db).execute().done(function (document) {
                _this.backupSetup().fromDatabaseSettingsDto(document.toDto(true));
            }).always(function () {
                return deferred.resolve();
            });
            return deferred;
        };

        periodicExport.prototype.activatePeriodicExport = function () {
            var action = !this.backupSetup().disabled();
            this.backupSetup().disabled(action);
        };

        periodicExport.prototype.saveChanges = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                var saveTask = new savePeriodicExportSetupCommand(this.backupSetup(), db).execute();
                saveTask.done(function (resultArray) {
                    var newEtag = resultArray[0].ETag;
                    _this.backupSetup().setEtag(newEtag);
                    _this.backupStatusDirtyFlag().reset(); //Resync Changes
                    _this.backupConfigDirtyFlag().reset(); //Resync Changes
                });
            }
        };
        return periodicExport;
    })(viewModelBase);

    
    return periodicExport;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/query", ["require", "exports", "durandal/app", "plugins/router", "common/appUrl", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", "commands/getCollectionsCommand", "commands/getIndexDefinitionCommand", "common/aceEditorBindingHandler", "common/pagedList", "commands/queryIndexCommand", "models/querySort", "models/collection", "commands/getTransformersCommand", "viewmodels/deleteDocumentsMatchingQueryConfirm", "models/document", "models/customColumnParams", "models/customColumns", "viewmodels/selectColumns", "commands/getCustomColumnsCommand", "commands/getDocumentsByEntityNameCommand", "commands/getDocumentsMetadataByIDPrefixCommand", "commands/getIndexTermsCommand", "viewmodels/queryStatsDialog", "models/customFunctions", "commands/getCustomFunctionsCommand", "models/transformer", "models/transformerQuery", "commands/getIndexSuggestionsCommand", "common/recentQueriesStorage"], function(require, exports, app, router, appUrl, viewModelBase, getDatabaseStatsCommand, getCollectionsCommand, getIndexDefinitionCommand, aceEditorBindingHandler, pagedList, queryIndexCommand, querySort, collection, getTransformersCommand, deleteDocumentsMatchingQueryConfirm, document, customColumnParams, customColumns, selectColumns, getCustomColumnsCommand, getDocumentsByEntityNameCommand, getDocumentsMetadataByIDPrefixCommand, getIndexTermsCommand, queryStatsDialog, customFunctions, getCustomFunctionsCommand, transformerType, transformerQueryType, getIndexSuggestionsCommand, recentQueriesStorage) {
    var query = (function (_super) {
        __extends(query, _super);
        function query() {
            var _this = this;
            _super.call(this);
            this.selectedIndex = ko.observable();
            this.indexes = ko.observableArray();
            this.queryText = ko.observable("");
            this.queryResults = ko.observable();
            this.selectedResultIndices = ko.observableArray();
            this.queryStats = ko.observable();
            this.sortBys = ko.observableArray();
            this.indexFields = ko.observableArray();
            this.transformer = ko.observable();
            this.allTransformers = ko.observableArray();
            this.isDefaultOperatorOr = ko.observable(true);
            this.showFields = ko.observable(false);
            this.indexEntries = ko.observable(false);
            this.recentQueries = ko.observableArray();
            this.rawJsonUrl = ko.observable();
            this.exportUrl = ko.observable();
            this.collections = ko.observableArray([]);
            this.collectionNames = ko.observableArray();
            this.isLoading = ko.observable(false).extend({ rateLimit: 1000 });
            this.contextName = ko.observable();
            this.dynamicPrefix = "dynamic/";
            this.currentColumnsParams = ko.observable(customColumns.empty());
            this.currentCustomFunctions = ko.observable(customFunctions.empty());
            this.indexSuggestions = ko.observableArray([]);
            this.appUrls = appUrl.forCurrentDatabase();
            this.editIndexUrl = ko.computed(function () {
                return _this.selectedIndex() ? appUrl.forEditIndex(_this.selectedIndex(), _this.activeDatabase()) : null;
            });
            this.visualizerUrl = ko.computed(function () {
                return _this.selectedIndex() ? appUrl.forVisualizer(_this.activeDatabase(), _this.selectedIndex()) : null;
            });
            this.indexPerfStatsUrl = ko.computed(function () {
                return _this.selectedIndex() ? appUrl.forIndexingPerfStats(_this.activeDatabase(), _this.selectedIndex()) : null;
            });
            this.termsUrl = ko.computed(function () {
                return _this.selectedIndex() ? appUrl.forTerms(_this.selectedIndex(), _this.activeDatabase()) : null;
            });
            this.statsUrl = ko.computed(function () {
                return appUrl.forStatus(_this.activeDatabase());
            });
            this.hasSelectedIndex = ko.computed(function () {
                return _this.selectedIndex() != null;
            });
            this.rawJsonUrl.subscribe(function (value) {
                return ko.postbox.publish("SetRawJSONUrl", value);
            });
            this.selectedIndexLabel = ko.computed(function () {
                return _this.selectedIndex() === "dynamic" ? "All Documents" : _this.selectedIndex();
            });
            this.selectedIndexEditUrl = ko.computed(function () {
                if (_this.queryStats()) {
                    var index = _this.queryStats().IndexName;
                    if (!!index && index.indexOf(_this.dynamicPrefix) !== 0) {
                        return appUrl.forEditIndex(index, _this.activeDatabase());
                    }
                }

                return "";
            });

            this.indexesExceptCurrent = ko.computed(function () {
                var allIndexes = _this.indexes();
                var selectedIndex = _this.selectedIndex();

                if (!!selectedIndex && selectedIndex.indexOf(_this.dynamicPrefix) == -1) {
                    return allIndexes.filter(function (indexDto) {
                        return indexDto.name != selectedIndex;
                    });
                }
                return allIndexes;
            });

            this.collectionNamesExceptCurrent = ko.computed(function () {
                var allCollectionNames = _this.collectionNames();
                var selectedIndex = _this.selectedIndex();

                if (!!selectedIndex && selectedIndex.indexOf(_this.dynamicPrefix) == 0) {
                    return allCollectionNames.filter(function (collectionName) {
                        return _this.dynamicPrefix + collectionName != selectedIndex;
                    });
                }
                return allCollectionNames;
            });

            this.showSuggestions = ko.computed(function () {
                return _this.indexSuggestions().length > 0;
            });

            this.didDynamicChangeIndex = ko.computed(function () {
                if (_this.queryStats()) {
                    var recievedIndex = _this.queryStats().IndexName;
                    var selectedIndex = _this.selectedIndex();
                    return selectedIndex.indexOf(_this.dynamicPrefix) === 0 && _this.indexes()[0].name !== recievedIndex;
                } else {
                    return false;
                }
            });

            this.isIndexMapReduce = ko.computed(function () {
                var currentIndex = _this.indexes.first(function (i) {
                    return i.name == _this.selectedIndex();
                });
                return !!currentIndex && currentIndex.hasReduce == true;
            });

            aceEditorBindingHandler.install();

            // Refetch the index fields whenever the selected index name changes.
            this.selectedIndex.where(function (indexName) {
                return indexName != null;
            }).subscribe(function (indexName) {
                return _this.fetchIndexFields(indexName);
            });
        }
        query.prototype.openQueryStats = function () {
            var viewModel = new queryStatsDialog(this.queryStats(), this.selectedIndexEditUrl(), this.didDynamicChangeIndex(), this.rawJsonUrl());
            app.showDialog(viewModel);
        };

        query.prototype.activate = function (indexNameOrRecentQueryHash) {
            var _this = this;
            _super.prototype.activate.call(this, indexNameOrRecentQueryHash);

            this.fetchAllTransformers();
            this.fetchCustomFunctions();

            this.fetchRecentQueries();

            $.when(this.fetchAllCollections(), this.fetchAllIndexes()).done(function () {
                return _this.selectInitialQuery(indexNameOrRecentQueryHash);
            });

            this.selectedIndex.subscribe(function (index) {
                return _this.onIndexChanged(index);
            });
        };

        query.prototype.attached = function () {
            var _this = this;
            this.createKeyboardShortcut("F2", function () {
                return _this.editSelectedIndex();
            }, query.containerSelector);
            this.createKeyboardShortcut("ctrl+enter", function () {
                return _this.runQuery();
            }, query.containerSelector);
            this.createKeyboardShortcut("alt+c", function () {
                return _this.focusOnQuery();
            }, query.containerSelector);
            this.createKeyboardShortcut("alt+r", function () {
                return _this.runQuery();
            }, query.containerSelector); // Using keyboard shortcut here, rather than HTML's accesskey, so that we don't steal focus from the editor.

            $("#indexQueryLabel").popover({
                html: true,
                trigger: "hover",
                container: ".form-horizontal",
                content: 'Queries use Lucene syntax. Examples:<pre><span class="code-keyword">Name</span>: Hi?berna*<br/><span class="code-keyword">Count</span>: [0 TO 10]<br/><span class="code-keyword">Title</span>: "RavenDb Queries 1010" AND <span class="code-keyword">Price</span>: [10.99 TO *]</pre>'
            });
            ko.postbox.publish("SetRawJSONUrl", appUrl.forIndexQueryRawData(this.activeDatabase(), this.selectedIndex()));

            this.focusOnQuery();

            var self = this;
            $(window).bind('storage', function () {
                self.fetchRecentQueries();
            });
        };

        query.prototype.createPostboxSubscriptions = function () {
            var _this = this;
            return [
                ko.postbox.subscribe("EditItem", function (itemNumber) {
                    //(itemNumber: number, res: resource, index: string, query?: string, sort?:string)
                    var queriess = _this.recentQueries();
                    var recentq = _this.recentQueries()[0];
                    var sorts = recentq.Sorts.join(',');

                    //alert(appUrl.forEditQueryItem(itemNumber, this.activeDatabase(), recentq.IndexName,recentq.QueryText,sorts));
                    router.navigate(appUrl.forEditQueryItem(itemNumber, _this.activeDatabase(), recentq.IndexName, recentq.QueryText, sorts), true);
                })
            ];
        };

        query.prototype.onIndexChanged = function (newIndexName) {
            var _this = this;
            var command = getCustomColumnsCommand.forIndex(newIndexName, this.activeDatabase());
            this.contextName(command.docName);

            command.execute().done(function (dto) {
                if (dto) {
                    _this.currentColumnsParams().columns($.map(dto.Columns, function (c) {
                        return new customColumnParams(c);
                    }));
                    _this.currentColumnsParams().customMode(true);
                } else {
                    // use default values!
                    _this.currentColumnsParams().columns.removeAll();
                    _this.currentColumnsParams().customMode(false);
                }
            });
        };

        query.prototype.selectInitialQuery = function (indexNameOrRecentQueryHash) {
            if (!indexNameOrRecentQueryHash && this.indexes().length > 0) {
                var firstIndexName = this.indexes.first().name;
                this.setSelectedIndex(firstIndexName);
            } else if (this.indexes.first(function (i) {
                return i.name == indexNameOrRecentQueryHash;
            }) || indexNameOrRecentQueryHash.indexOf(this.dynamicPrefix) === 0 || indexNameOrRecentQueryHash === "dynamic") {
                this.setSelectedIndex(indexNameOrRecentQueryHash);
            } else if (indexNameOrRecentQueryHash.indexOf("recentquery-") === 0) {
                var hash = parseInt(indexNameOrRecentQueryHash.substr("recentquery-".length), 10);
                var matchingQuery = this.recentQueries.first(function (q) {
                    return q.Hash === hash;
                });
                if (matchingQuery) {
                    this.runRecentQuery(matchingQuery);
                }
            }
        };

        query.prototype.focusOnQuery = function () {
            var editorElement = $("#queryEditor").length == 1 ? $("#queryEditor")[0] : null;
            if (editorElement) {
                var docEditor = ko.utils.domData.get(editorElement, "aceEditor");
                if (docEditor) {
                    docEditor.focus();
                }
            }
        };

        query.prototype.editSelectedIndex = function () {
            this.navigate(this.editIndexUrl());
        };

        query.prototype.fetchAllIndexes = function () {
            var _this = this;
            return new getDatabaseStatsCommand(this.activeDatabase()).execute().done(function (results) {
                return _this.indexes(results.Indexes.map(function (i) {
                    return {
                        name: i.Name,
                        hasReduce: !!i.LastReducedTimestamp
                    };
                }));
            });
        };

        query.prototype.fetchAllCollections = function () {
            var _this = this;
            return new getCollectionsCommand(this.activeDatabase()).execute().done(function (results) {
                _this.collections(results);
                _this.collectionNames(results.map(function (c) {
                    return c.name;
                }));
            });
        };

        query.prototype.fetchRecentQueries = function () {
            this.recentQueries(recentQueriesStorage.getRecentQueries(this.activeDatabase()));
        };

        query.prototype.fetchAllTransformers = function () {
            var _this = this;
            new getTransformersCommand(this.activeDatabase()).execute().done(function (results) {
                return _this.allTransformers(results);
            });
        };

        query.prototype.runRecentQuery = function (query) {
            this.selectedIndex(query.IndexName);
            this.queryText(query.QueryText);
            this.showFields(query.ShowFields);
            this.indexEntries(query.IndexEntries);
            this.isDefaultOperatorOr(query.UseAndOperator === false);
            this.sortBys(query.Sorts.map(function (s) {
                return querySort.fromQuerySortString(s);
            }));
            this.selectTransformer(this.findTransformerByName(this.getStoredQueryTransformerName(query)));
            this.applyTransformerParameters(query);
            this.runQuery();
        };

        query.prototype.runQuery = function () {
            var _this = this;
            var selectedIndex = this.selectedIndex();
            if (selectedIndex) {
                this.isLoading(true);
                this.focusOnQuery();
                var queryText = this.queryText();
                var sorts = this.sortBys().filter(function (s) {
                    return s.fieldName() != null;
                });
                var database = this.activeDatabase();
                var showFields = this.showFields();
                var indexEntries = this.indexEntries();

                var transformer = null;
                if (this.transformer()) {
                    transformer = new transformerQueryType({
                        transformerName: this.transformer().name(),
                        queryParams: []
                    });

                    var canRunQuery = true;
                    $("#transformerParams .transformer_param_flag").each(function (index, element) {
                        $(element).parent().removeClass("has-error");
                        if (element.value) {
                            transformer.addParamByNameAndValue(element.name, element.value);
                        } else if (element.required) {
                            canRunQuery = false;
                            $(element).parent().addClass("has-error");
                        }
                    });

                    if (!canRunQuery) {
                        return;
                    }
                }

                this.currentColumnsParams().enabled(this.showFields() === false && this.indexEntries() === false);

                var useAndOperator = this.isDefaultOperatorOr() === false;

                var queryCommand = new queryIndexCommand(selectedIndex, database, 0, 1024, queryText, sorts, transformer, showFields, indexEntries, useAndOperator);

                var db = this.activeDatabase();
                this.rawJsonUrl(appUrl.forResourceQuery(db) + queryCommand.getUrl());
                this.exportUrl(appUrl.forResourceQuery(db) + queryCommand.getCsvUrl());

                var resultsFetcher = function (skip, take) {
                    var command = new queryIndexCommand(selectedIndex, database, skip, take, queryText, sorts, transformer, showFields, indexEntries, useAndOperator);
                    return command.execute().always(function () {
                        _this.isLoading(false);
                        _this.focusOnQuery();
                    }).done(function (queryResults) {
                        return _this.queryStats(queryResults.additionalResultInfo);
                    }).done(function (queryResults) {
                        _this.indexSuggestions([]);
                        if (queryResults.totalResultCount == 0) {
                            var queryFields = _this.extractQueryFields();
                            if (_this.selectedIndex().indexOf(_this.dynamicPrefix) !== 0) {
                                for (var i = 0; i < queryFields.length; i++) {
                                    _this.getIndexSuggestions(selectedIndex, queryFields[i]);
                                }
                            }
                        }
                    }).fail(function () {
                        recentQueriesStorage.removeIndexFromRecentQueries(db, selectedIndex);
                    });
                };
                var resultsList = new pagedList(resultsFetcher);
                this.queryResults(resultsList);
                this.recordQueryRun(selectedIndex, queryText, sorts.map(function (s) {
                    return s.toQuerySortString();
                }), transformer, showFields, indexEntries, useAndOperator);

                return resultsList;
            }

            return null;
        };

        query.prototype.queryCompleter = function (editor, session, pos, prefix, callback) {
            var currentToken = session.getTokenAt(pos.row, pos.column);

            if (!currentToken || typeof currentToken.type === "string") {
                // if in beginning of text or in free text token
                if (!currentToken || currentToken.type === "text") {
                    callback(null, this.indexFields().map(function (curColumn) {
                        return { name: curColumn, value: curColumn, score: 10, meta: "field" };
                    }));
                } else if (currentToken.type === "keyword" || currentToken.type === "value") {
                    // if right after, or a whitespace after keyword token ([column name]:)
                    // first, calculate and validate the column name
                    var currentColumnName = null;
                    var currentValue = "";

                    if (currentToken.type == "keyword") {
                        currentColumnName = currentToken.value.substring(0, currentToken.value.length - 1);
                    } else {
                        currentValue = currentToken.value.trim();
                        var rowTokens = session.getTokens(pos.row);
                        if (!!rowTokens && rowTokens.length > 1) {
                            currentColumnName = rowTokens[rowTokens.length - 2].value.trim();
                            currentColumnName = currentColumnName.substring(0, currentColumnName.length - 1);
                        }
                    }

                    // for non dynamic indexes query index terms, for dynamic indexes, try perform general auto complete
                    if (!!currentColumnName && !!this.indexFields.first(function (x) {
                        return x === currentColumnName;
                    })) {
                        if (this.selectedIndex().indexOf(this.dynamicPrefix) !== 0) {
                            new getIndexTermsCommand(this.selectedIndex(), currentColumnName, this.activeDatabase()).execute().done(function (terms) {
                                if (!!terms && terms.length > 0) {
                                    callback(null, terms.map(function (curVal) {
                                        return { name: curVal, value: curVal, score: 10, meta: "value" };
                                    }));
                                }
                            });
                        } else {
                            if (currentValue.length > 0) {
                                new getDocumentsMetadataByIDPrefixCommand(currentValue, 10, this.activeDatabase()).execute().done(function (results) {
                                    if (!!results && results.length > 0) {
                                        callback(null, results.map(function (curVal) {
                                            return { name: curVal["@metadata"]["@id"], value: curVal["@metadata"]["@id"], score: 10, meta: "value" };
                                        }));
                                    }
                                });
                            } else {
                                callback([{ error: "notext" }], null);
                            }
                        }
                    }
                }
            }
        };

        query.prototype.recordQueryRun = function (indexName, queryText, sorts, transformerQuery, showFields, indexEntries, useAndOperator) {
            var newQuery = {
                IndexEntries: indexEntries,
                IndexName: indexName,
                IsPinned: false,
                QueryText: queryText,
                ShowFields: showFields,
                Sorts: sorts,
                TransformerQuery: transformerQuery,
                UseAndOperator: useAndOperator,
                Hash: (indexName + (queryText || "") + sorts.reduce(function (a, b) {
                    return a + b;
                }, "") + (transformerQuery ? transformerQuery.toUrl() : "") + showFields + indexEntries + useAndOperator).hashCode()
            };

            // Put the query into the URL, so that if the user refreshes the page, he's still got this query loaded.
            var queryUrl = appUrl.forQuery(this.activeDatabase(), newQuery.Hash);
            this.updateUrl(queryUrl);

            // Add this query to our recent queries list in the UI, or move it to the top of the list if it's already there.
            var existing = this.recentQueries.first(function (q) {
                return q.Hash === newQuery.Hash;
            });
            if (existing) {
                this.recentQueries.remove(existing);
                this.recentQueries.unshift(existing);
            } else {
                this.recentQueries.unshift(newQuery);
            }

            // Limit us to 15 query recent runs.
            if (this.recentQueries().length > 15) {
                this.recentQueries.remove(this.recentQueries()[15]);
            }

            //save the recent queries to local storage
            recentQueriesStorage.saveRecentQueries(this.activeDatabase(), this.recentQueries());
        };

        query.prototype.getRecentQuerySortText = function (sorts) {
            if (sorts.length > 0) {
                return sorts.map(function (s) {
                    return querySort.fromQuerySortString(s);
                }).map(function (s) {
                    return s.toHumanizedString();
                }).reduce(function (first, second) {
                    return first + ", " + second;
                });
            }

            return "";
        };

        query.prototype.setSelectedIndex = function (indexName) {
            this.sortBys.removeAll();
            this.selectedIndex(indexName);
            this.runQuery();

            // Reflect the new index in the address bar.
            var indexQuery = query.getIndexUrlPartFromIndexName(indexName);
            var url = appUrl.forQuery(this.activeDatabase(), indexQuery);
            this.updateUrl(url);
            NProgress.done();
        };

        query.getIndexUrlPartFromIndexName = function (indexNameOrCollectionName) {
            if (indexNameOrCollectionName === "All Documents") {
                return "dynamic";
            }

            return indexNameOrCollectionName;
        };

        query.prototype.addSortBy = function () {
            var _this = this;
            var sort = new querySort();
            sort.fieldName.subscribe(function () {
                return _this.runQuery();
            });
            sort.sortDirection.subscribe(function () {
                return _this.runQuery();
            });
            this.sortBys.push(sort);
        };

        query.prototype.removeSortBy = function (sortBy) {
            this.sortBys.remove(sortBy);
            this.runQuery();
        };

        query.prototype.addTransformer = function () {
            this.transformer(new transformerType());
        };

        query.prototype.selectTransformer = function (dto) {
            if (!!dto) {
                var t = new transformerType();
                t.initFromLoad(dto);
                this.transformer(t);
                this.runQuery();
            } else {
                this.transformer(null);
            }
        };

        query.prototype.removeTransformer = function () {
            this.transformer(null);
            this.runQuery();
        };

        query.prototype.setOperatorOr = function () {
            this.isDefaultOperatorOr(true);
            this.runQuery();
        };

        query.prototype.setOperatorAnd = function () {
            this.isDefaultOperatorOr(false);
            this.runQuery();
        };

        query.prototype.toggleShowFields = function () {
            this.showFields(!this.showFields());
            this.runQuery();
        };

        query.prototype.toggleIndexEntries = function () {
            this.indexEntries(!this.indexEntries());
            this.runQuery();
        };

        query.prototype.deleteDocsMatchingQuery = function () {
            var _this = this;
            // Run the query so that we have an idea of what we'll be deleting.
            var queryResult = this.runQuery();
            queryResult.fetch(0, 1).done(function (results) {
                if (results.totalResultCount === 0) {
                    app.showMessage("There are no documents matching your query.", "Nothing to do");
                } else {
                    _this.promptDeleteDocsMatchingQuery(results.totalResultCount);
                }
            });
        };

        query.prototype.promptDeleteDocsMatchingQuery = function (resultCount) {
            var _this = this;
            var viewModel = new deleteDocumentsMatchingQueryConfirm(this.selectedIndex(), this.queryText(), resultCount, this.activeDatabase());
            app.showDialog(viewModel).done(function () {
                return _this.runQuery();
            });
        };

        query.prototype.selectColumns = function () {
            var _this = this;
            var selectColumnsViewModel = new selectColumns(this.currentColumnsParams().clone(), this.currentCustomFunctions().clone(), this.contextName(), this.activeDatabase());
            app.showDialog(selectColumnsViewModel);
            selectColumnsViewModel.onExit().done(function (cols) {
                _this.currentColumnsParams(cols);

                _this.runQuery();
            });
        };

        query.prototype.fetchCustomFunctions = function () {
            var _this = this;
            var task = new getCustomFunctionsCommand(this.activeDatabase()).execute();
            task.done(function (cf) {
                _this.currentCustomFunctions(cf);
            });
        };

        query.prototype.fetchIndexFields = function (indexName) {
            var _this = this;
            // Fetch the index definition so that we get an updated list of fields to be used as sort by options.
            // Fields don't show for All Documents.
            var isAllDocumentsDynamicQuery = indexName === "All Documents";
            if (!isAllDocumentsDynamicQuery) {
                //if index is dynamic, get columns using index definition, else get it using first index result
                if (indexName.indexOf(this.dynamicPrefix) === 0) {
                    var collectionName = indexName.substring(8);
                    new getDocumentsByEntityNameCommand(new collection(collectionName, this.activeDatabase()), 0, 1).execute().done(function (result) {
                        if (!!result && result.totalResultCount > 0 && result.items.length > 0) {
                            var dynamicIndexPattern = new document(result.items[0]);
                            if (!!dynamicIndexPattern) {
                                _this.indexFields(dynamicIndexPattern.getDocumentPropertyNames());
                            }
                        }
                    });
                } else {
                    new getIndexDefinitionCommand(indexName, this.activeDatabase()).execute().done(function (result) {
                        _this.indexFields(result.Index.Fields);
                    });
                }
            }
        };

        query.prototype.findTransformerByName = function (transformerName) {
            try  {
                return this.allTransformers().filter(function (dto) {
                    return transformerName === dto.name;
                })[0];
            } catch (e) {
                return null;
            }
        };

        query.prototype.getStoredQueryTransformerName = function (query) {
            if (query.TransformerQuery) {
                return query.TransformerQuery.transformerName;
            }
            return "";
        };

        query.prototype.getStoredQueryTransformerParameters = function (queryParams) {
            if (queryParams.length > 0) {
                return "(" + queryParams.map(function (param) {
                    return param.name + "=" + param.value;
                }).join(", ") + ")";
            }

            return "";
        };

        query.prototype.applyTransformerParameters = function (query) {
            if (query.TransformerQuery && query.TransformerQuery.queryParams) {
                query.TransformerQuery.queryParams.forEach(function (param) {
                    $("#transformerParams input[name=" + param.name + "]").val(param.value);
                });
            }
        };

        query.prototype.extractQueryFields = function () {
            var query = this.queryText();
            var luceneSimpleFieldRegex = /(\w+):\s*("((?:[^"\\]|\\.)*)"|'((?:[^'\\]|\\.)*)'|(\w+))/g;

            var queryFields = [];
            var match = null;
            while ((match = luceneSimpleFieldRegex.exec(query))) {
                var value = match[3] || match[4] || match[5];
                queryFields.push({
                    FieldName: match[1],
                    FieldValue: value,
                    Index: match.index
                });
            }
            return queryFields;
        };

        query.prototype.getIndexSuggestions = function (indexName, info) {
            var _this = this;
            if (this.indexFields().contains(info.FieldName)) {
                var task = new getIndexSuggestionsCommand(this.activeDatabase(), indexName, info.FieldName, info.FieldValue).execute();
                task.done(function (result) {
                    for (var index = 0; index < result.Suggestions.length; index++) {
                        _this.indexSuggestions.push({
                            Index: info.Index,
                            FieldName: info.FieldName,
                            FieldValue: info.FieldValue,
                            Suggestion: result.Suggestions[index]
                        });
                    }
                });
            }
        };

        query.prototype.applySuggestion = function (suggestion) {
            var value = this.queryText();
            var startIndex = value.indexOf(suggestion.FieldValue, suggestion.Index);
            this.queryText(value.substring(0, startIndex) + suggestion.Suggestion + value.substring(startIndex + suggestion.FieldValue.length));
            this.indexSuggestions([]);
            this.runQuery();
        };
        query.containerSelector = "#queryContainer";
        return query;
    })(viewModelBase);

    
    return query;
});
define("viewmodels/queryShell", ["require", "exports", "plugins/router", "common/appUrl"], function(require, exports, durandalRouter, appUrl) {
    var queryShell = (function () {
        function queryShell() {
            this.router = durandalRouter.createChildRouter().map([
                { route: ['', 'databases/query/index(/:indexNameOrRecentQueryIndex)'], moduleId: 'viewmodels/query', title: 'Query', nav: true },
                { route: 'databases/query/reporting(/:indexName)', moduleId: 'viewmodels/reporting', title: 'Reporting', nav: true }
            ]).buildNavigationModel();

            appUrl.mapUnknownRoutes(this.router);
        }
        return queryShell;
    })();

    
    return queryShell;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/queryStatsDialog", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "plugins/router"], function(require, exports, dialog, dialogViewModelBase, router) {
    var queryStatsDialog = (function (_super) {
        __extends(queryStatsDialog, _super);
        function queryStatsDialog(queryStats, selectedIndexEditUrl, didDynamicChangeIndex, rawJsonUrl) {
            _super.call(this);
            this.queryStats = queryStats;
            this.selectedIndexEditUrl = selectedIndexEditUrl;
            this.didDynamicChangeIndex = didDynamicChangeIndex;
            this.rawJsonUrl = rawJsonUrl;
        }
        queryStatsDialog.prototype.cancel = function () {
            dialog.close(this);
        };

        queryStatsDialog.prototype.goToIndex = function () {
            dialog.close(this);
            router.navigate(this.selectedIndexEditUrl, true);
        };
        return queryStatsDialog;
    })(dialogViewModelBase);

    
    return queryStatsDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/quotas", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseSettingsCommand", "commands/saveDatabaseSettingsCommand", "models/document", "common/appUrl"], function(require, exports, viewModelBase, getDatabaseSettingsCommand, saveDatabaseSettingsCommand, document, appUrl) {
    var quotas = (function (_super) {
        __extends(quotas, _super);
        function quotas() {
            _super.apply(this, arguments);
            this.settingsDocument = ko.observable();
            this.maximumSize = ko.observable();
            this.warningLimitThreshold = ko.observable();
            this.maxNumberOfDocs = ko.observable();
            this.warningThresholdForDocs = ko.observable();
        }
        quotas.prototype.canActivate = function (args) {
            var _this = this;
            _super.prototype.canActivate.call(this, args);

            var deferred = $.Deferred();
            var db = this.activeDatabase();
            if (db) {
                // fetch current quotas from the database
                this.fetchQuotas(db).done(function () {
                    return deferred.resolve({ can: true });
                }).fail(function () {
                    return deferred.resolve({ redirect: appUrl.forDatabaseSettings(_this.activeDatabase()) });
                });
            }
            return deferred;
        };

        quotas.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.initializeDirtyFlag();

            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty() === true;
            });
        };

        quotas.prototype.fetchQuotas = function (db, reportFetchProgress) {
            var _this = this;
            if (typeof reportFetchProgress === "undefined") { reportFetchProgress = false; }
            return new getDatabaseSettingsCommand(db, reportFetchProgress).execute().done(function (doc) {
                _this.settingsDocument(doc);
                _this.maximumSize(doc["Settings"]["Raven/Quotas/Size/HardLimitInKB"] / 1024);
                _this.warningLimitThreshold(doc["Settings"]["Raven/Quotas/Size/SoftMarginInKB"] / 1024);
                _this.maxNumberOfDocs(doc["Settings"]["Raven/Quotas/Documents/HardLimit"]);
                _this.warningThresholdForDocs(doc["Settings"]["Raven/Quotas/Documents/SoftLimit"]);
            });
        };

        quotas.prototype.initializeDirtyFlag = function () {
            this.dirtyFlag = new ko.DirtyFlag([
                this.maximumSize,
                this.warningLimitThreshold,
                this.maxNumberOfDocs,
                this.warningThresholdForDocs
            ]);
        };

        quotas.prototype.saveChanges = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                var settingsDocument = this.settingsDocument();
                settingsDocument['@metadata'] = this.settingsDocument().__metadata;
                settingsDocument['@metadata']['@etag'] = this.settingsDocument().__metadata['@etag'];
                var doc = new document(settingsDocument.toDto(true));
                doc["Settings"]["Raven/Quotas/Size/HardLimitInKB"] = this.maximumSize() * 1024;
                doc["Settings"]["Raven/Quotas/Size/SoftMarginInKB"] = this.warningLimitThreshold() * 1024;
                doc["Settings"]["Raven/Quotas/Documents/HardLimit"] = this.maxNumberOfDocs();
                doc["Settings"]["Raven/Quotas/Documents/SoftLimit"] = this.warningThresholdForDocs();
                var saveTask = new saveDatabaseSettingsCommand(db, doc).execute();
                saveTask.done(function (saveResult) {
                    _this.settingsDocument().__metadata['@etag'] = saveResult.ETag;
                    _this.dirtyFlag().reset(); //Resync Changes
                });
            }
        };
        return quotas;
    })(viewModelBase);

    
    return quotas;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/recentErrors", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "common/alertType"], function(require, exports, dialog, dialogViewModelBase, alertType) {
    var recentErrors = (function (_super) {
        __extends(recentErrors, _super);
        function recentErrors(errors) {
            _super.call(this);
            this.errors = errors;
            this.resizerSelector = ".dialogResizer";
            var x = 3 /* danger */;
        }
        recentErrors.prototype.attached = function () {
            // Expand the first error.
            if (this.errors().length > 0) {
                $("#errorDetailsCollapse0").collapse("show");
            }

            this.registerResizing("recentErrorsResize");
        };

        recentErrors.prototype.detached = function () {
            _super.prototype.detached.call(this);
            this.unregisterResizing("recentErrorsResize");
        };

        recentErrors.prototype.clear = function () {
            this.errors.removeAll();
        };

        recentErrors.prototype.close = function () {
            dialog.close(this);
        };

        recentErrors.prototype.getErrorDetails = function (alert) {
            var error = alert.errorInfo;
            if (error != null && error.stackTrace) {
                return error.stackTrace.replace("\r\n", "\n");
            }

            return alert.details;
        };

        recentErrors.prototype.getDangerAlertType = function () {
            return 3 /* danger */;
        };

        recentErrors.prototype.getWarningAlertType = function () {
            return 2 /* warning */;
        };
        return recentErrors;
    })(dialogViewModelBase);

    
    return recentErrors;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/replications", ["require", "exports", "viewmodels/viewModelBase", "models/replicationsSetup", "models/replicationConfig", "models/replicationDestination", "commands/getDatabaseStatsCommand", "commands/getReplicationsCommand", "commands/updateServerPrefixHiLoCommand", "commands/saveReplicationDocumentCommand", "commands/getAutomaticConflictResolutionDocumentCommand", "commands/saveAutomaticConflictResolutionDocument", "commands/getServerPrefixForHiLoCommand", "common/appUrl"], function(require, exports, viewModelBase, replicationsSetup, replicationConfig, replicationDestination, getDatabaseStatsCommand, getReplicationsCommand, updateServerPrefixHiLoCommand, saveReplicationDocumentCommand, getAutomaticConflictResolutionDocumentCommand, saveAutomaticConflictResolutionDocument, getServerPrefixForHiLoCommand, appUrl) {
    var replications = (function (_super) {
        __extends(replications, _super);
        function replications() {
            _super.apply(this, arguments);
            var _this = this;
            this.prefixForHilo = ko.observable('');
            this.replicationConfig = ko.observable(new replicationConfig({ DocumentConflictResolution: "None", AttachmentConflictResolution: "None" }));
            this.replicationsSetup = ko.observable(new replicationsSetup({ Destinations: [], Source: null }));
            this.serverPrefixForHiLoDirtyFlag = new ko.DirtyFlag([]);
            this.replicationConfigDirtyFlag = new ko.DirtyFlag([]);
            this.replicationsSetupDirtyFlag = new ko.DirtyFlag([]);
            this.readFromAllAllowWriteToSecondaries = ko.computed(function () {
                var behaviour = _this.replicationsSetup().clientFailoverBehaviour();
                if (behaviour == null) {
                    return false;
                }
                var tokens = behaviour.split(",");
                return tokens.contains('ReadFromAllServers') && tokens.contains('AllowReadsFromSecondariesAndWritesToSecondaries');
            });
        }
        replications.prototype.canActivate = function (args) {
            var deferred = $.Deferred();
            var db = this.activeDatabase();
            if (db) {
                $.when(this.fetchServerPrefixForHiLoCommand(db), this.fetchAutomaticConflictResolution(db), this.fetchReplications(db)).done(function () {
                    return deferred.resolve({ can: true });
                }).fail(function () {
                    return deferred.resolve({ redirect: appUrl.forSettings(db) });
                });
            }
            return deferred;
        };

        replications.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.serverPrefixForHiLoDirtyFlag = new ko.DirtyFlag([this.prefixForHilo]);
            this.isServerPrefixForHiLoSaveEnabled = ko.computed(function () {
                return _this.serverPrefixForHiLoDirtyFlag().isDirty();
            });
            this.replicationConfigDirtyFlag = new ko.DirtyFlag([this.replicationConfig]);
            this.isConfigSaveEnabled = ko.computed(function () {
                return _this.replicationConfigDirtyFlag().isDirty();
            });
            this.replicationsSetupDirtyFlag = new ko.DirtyFlag([this.replicationsSetup, this.replicationsSetup().destinations(), this.replicationConfig, this.replicationsSetup().clientFailoverBehaviour]);
            this.isSetupSaveEnabled = ko.computed(function () {
                return _this.replicationsSetupDirtyFlag().isDirty();
            });

            var combinedFlag = ko.computed(function () {
                return (_this.replicationConfigDirtyFlag().isDirty() || _this.replicationsSetupDirtyFlag().isDirty() || _this.serverPrefixForHiLoDirtyFlag().isDirty());
            });
            this.dirtyFlag = new ko.DirtyFlag([combinedFlag]);
        };

        replications.prototype.fetchServerPrefixForHiLoCommand = function (db) {
            var _this = this;
            var deferred = $.Deferred();
            new getServerPrefixForHiLoCommand(db).execute().done(function (result) {
                return _this.prefixForHilo(result);
            }).always(function () {
                return deferred.resolve({ can: true });
            });
            return deferred;
        };

        replications.prototype.fetchAutomaticConflictResolution = function (db) {
            var _this = this;
            var deferred = $.Deferred();
            new getAutomaticConflictResolutionDocumentCommand(db).execute().done(function (repConfig) {
                return _this.replicationConfig(new replicationConfig(repConfig));
            }).always(function () {
                return deferred.resolve({ can: true });
            });
            return deferred;
        };

        replications.prototype.fetchReplications = function (db) {
            var _this = this;
            var deferred = $.Deferred();
            new getReplicationsCommand(db).execute().done(function (repSetup) {
                return _this.replicationsSetup(new replicationsSetup(repSetup));
            }).always(function () {
                return deferred.resolve({ can: true });
            });
            return deferred;
        };

        replications.prototype.createNewDestination = function () {
            var db = this.activeDatabase();
            this.replicationsSetup().destinations.unshift(replicationDestination.empty(db.name));
        };

        replications.prototype.removeDestination = function (repl) {
            this.replicationsSetup().destinations.remove(repl);
        };

        replications.prototype.saveChanges = function () {
            var _this = this;
            if (this.isConfigSaveEnabled())
                this.saveAutomaticConflictResolutionSettings();
            if (this.isSetupSaveEnabled()) {
                if (this.replicationsSetup().source()) {
                    this.saveReplicationSetup();
                } else {
                    var db = this.activeDatabase();
                    if (db) {
                        new getDatabaseStatsCommand(db).execute().done(function (result) {
                            _this.prepareAndSaveReplicationSetup(result.DatabaseId);
                        });
                    }
                }
            }
        };

        replications.prototype.prepareAndSaveReplicationSetup = function (source) {
            this.replicationsSetup().source(source);
            this.saveReplicationSetup();
        };

        replications.prototype.saveReplicationSetup = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                new saveReplicationDocumentCommand(this.replicationsSetup().toDto(), db).execute().done(function () {
                    return _this.replicationsSetupDirtyFlag().reset();
                });
            }
        };

        replications.prototype.saveServerPrefixForHiLo = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                new updateServerPrefixHiLoCommand(this.prefixForHilo(), db).execute().done(function () {
                    return _this.serverPrefixForHiLoDirtyFlag().reset();
                });
            }
        };

        replications.prototype.saveAutomaticConflictResolutionSettings = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                new saveAutomaticConflictResolutionDocument(this.replicationConfig().toDto(), db).execute().done(function () {
                    return _this.replicationConfigDirtyFlag().reset();
                });
            }
        };
        return replications;
    })(viewModelBase);

    
    return replications;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/replicationStats", ["require", "exports", "viewmodels/viewModelBase", "commands/getReplicationStatsCommand", "moment", "common/generalUtils", "common/svgDownloader", "common/fileDownloader", "commands/getDatabaseSettingsCommand", "commands/getReplicationTopology", "commands/getReplicationPerfStatsCommand", 'd3/d3', 'nvd3'], function(require, exports, viewModelBase, getReplicationStatsCommand, moment, generalUtils, svgDownloader, fileDownloader, getDatabaseSettingsCommand, getReplicationTopology, getReplicationPerfStatsCommand, d3, nv) {
    var replicationStats = (function (_super) {
        __extends(replicationStats, _super);
        function replicationStats() {
            _super.call(this);
            this.panelBodyPadding = 20;
            this.topology = ko.observable(null);
            this.currentLink = ko.observable(null);
            this.hasReplicationEnabled = ko.observable(false);
            this.showLoadingIndicator = ko.observable(false);
            this.replStatsDoc = ko.observable();
            this.hasNoReplStatsAvailable = ko.observable(false);
            this.now = ko.observable();
            this.updateNowTimeoutHandle = 0;
            this.colors = d3.scale.category10();
            // perf stats related variables start
            this.jsonData = [];
            this.rawJsonData = [];
            this.hiddenNames = d3.set([]);
            this.destinations = [];
            this.margin = { top: 40, right: 20, bottom: 20, left: 40 };
            this.barWidth = 30;
            this.barPadding = 15;
            this.legendWidth = 0;
            this.isoFormat = d3.time.format.iso;
            this.xTickFormat = d3.time.format("%H:%M:%S");
            this.color = d3.scale.category20();
            // perf stats related variables end
            this.hasSaveAsPngSupport = ko.computed(function () {
                return !(navigator && navigator.msSaveBlob);
            });

            this.updateCurrentNowTime();
        }
        replicationStats.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                _this.fetchReplStats();
                _this.checkIfHasReplicationEnabled();
            });
            this.fetchReplStats();
        };

        replicationStats.prototype.checkIfHasReplicationEnabled = function () {
            var _this = this;
            new getDatabaseSettingsCommand(this.activeDatabase()).execute().done(function (document) {
                var documentSettings = document.Settings["Raven/ActiveBundles"];
                _this.hasReplicationEnabled(documentSettings.indexOf("Replication") !== -1);
            });
        };

        replicationStats.prototype.attached = function () {
            var _this = this;
            this.resize();
            d3.select(window).on("resize", this.resize.bind(this));
            $("#replicationTopologySection").scroll(function () {
                return _this.graphScrolled();
            });
            this.checkIfHasReplicationEnabled();
            $("#replicationStatsContainer").scroll(function () {
                return _this.graphScrolled();
            });
            this.refresh();
        };

        replicationStats.prototype.resize = function () {
            this.width = $("#replicationTopologySection").width() * 0.6;
            if (this.topology() && !!this.force) {
                this.force.size([this.width, this.height]).resume();
            }
            this.onWindowHeightChanged();
        };

        replicationStats.prototype.fetchReplStats = function () {
            var _this = this;
            this.replStatsDoc(null);
            new getReplicationStatsCommand(this.activeDatabase()).execute().fail(function () {
                return _this.hasNoReplStatsAvailable(true);
            }).done(function (result) {
                _this.hasNoReplStatsAvailable(result.Stats.length === 0);
                _this.processResults(result);
            });
        };

        replicationStats.prototype.processResults = function (results) {
            var _this = this;
            if (results) {
                results.Stats.forEach(function (s) {
                    s['LastReplicatedLastModifiedHumanized'] = _this.createHumanReadableTime(s.LastReplicatedLastModified);
                    s['LastFailureTimestampHumanized'] = _this.createHumanReadableTime(s.LastFailureTimestamp);
                    s['LastHeartbeatReceivedHumanized'] = _this.createHumanReadableTime(s.LastHeartbeatReceived);
                    s['LastSuccessTimestampHumanized'] = _this.createHumanReadableTime(s.LastSuccessTimestamp);
                    s['isHotFailure'] = _this.isFailEarlierThanSuccess(s.LastFailureTimestamp, s.LastSuccessTimestamp);
                });
            }

            this.replStatsDoc(results);
        };

        replicationStats.prototype.createHumanReadableTime = function (time) {
            var _this = this;
            if (time) {
                // Return a computed that returns a humanized string based off the current time, e.g. "7 minutes ago".
                // It's a computed so that it updates whenever we update this.now (scheduled to occur every minute.)
                return ko.computed(function () {
                    var dateMoment = moment(time);
                    var agoInMs = dateMoment.diff(_this.now());
                    return moment.duration(agoInMs).humanize(true) + dateMoment.format(" (MM/DD/YY, h:mma)");
                });
            }

            return ko.computed(function () {
                return time;
            });
        };

        replicationStats.prototype.isFailEarlierThanSuccess = function (lastFailureTime, lastSuccessTime) {
            if (!!lastFailureTime) {
                if (!!lastSuccessTime) {
                    return lastFailureTime >= lastSuccessTime;
                } else {
                    return true;
                }
            }

            return false;
        };

        replicationStats.prototype.updateCurrentNowTime = function () {
            var _this = this;
            this.now(moment());
            this.updateNowTimeoutHandle = setTimeout(function () {
                return _this.updateCurrentNowTime();
            }, 60000);
        };

        replicationStats.prototype.createReplicationTopology = function () {
            var _this = this;
            var self = this;

            this.height = 600;

            this.svg = d3.select("#replicationTopology").style({ height: self.height + 'px' }).style({ width: self.width + 'px' }).attr("viewBox", "0 0 " + self.width + " " + self.height);

            this.nodes = this.topology().Servers.map(function (s, idx) {
                return { id: s, idx: idx + 1 };
            });

            var plainConnections = this.topology().Connections.map(function (connection) {
                return {
                    source: connection.Source,
                    target: connection.Destination
                };
            });

            var masterMasterConnections = [];
            plainConnections.forEach(function (edge) {
                var reverseConnection = plainConnections.first(function (c) {
                    return c.source === edge.target && c.target === edge.source;
                });
                if (reverseConnection) {
                    // master - master connection!
                    var reverseInMasterMasterCollection = !!masterMasterConnections.first(function (c) {
                        return c.source === edge.target && c.target === edge.source;
                    });
                    if (!reverseInMasterMasterCollection) {
                        masterMasterConnections.push(edge);
                    }
                }
            });

            this.links = this.topology().Connections.filter(function (connection) {
                return masterMasterConnections.first(function (mc) {
                    return connection.Source == mc.source && connection.Destination == mc.target;
                }) == null;
            }).map(function (connection) {
                // find complementary connection in master-master connections
                var masterMasterExists = !!masterMasterConnections.first(function (mc) {
                    return connection.Source == mc.target && connection.Destination == mc.source;
                });

                var masterMaster = masterMasterExists ? _this.topology().Connections.first(function (c) {
                    return c.Source == connection.Destination && c.Destination == connection.Source;
                }) : null;

                return {
                    source: self.nodes.first(function (e) {
                        return e.id === connection.Source;
                    }),
                    target: self.nodes.first(function (e) {
                        return e.id === connection.Destination;
                    }),
                    left: masterMasterExists,
                    right: true,
                    toRightPayload: connection,
                    toLeftPayload: masterMaster
                };
            });

            var self = this;
            this.force = d3.layout.force().nodes(this.nodes).links(this.links).size([this.width, this.height]).linkDistance(220).charge(-2500).on('tick', self.tick.bind(self));

            this.path = this.svg.append('svg:g').selectAll('path');
            this.circle = this.svg.append('svg:g').selectAll('g');

            this.restart();
        };

        replicationStats.prototype.tick = function () {
            var boxWidth = 200;
            var boxHeight = 40;

            // draw directed edges with proper padding from node centers
            this.path.attr('d', function (d) {
                var deltaX = d.target.x - d.source.x, deltaY = d.target.y - d.source.y;

                var alpha = Math.abs(Math.atan(deltaY / deltaX));
                var edgeAlpha = Math.atan(boxHeight / boxWidth);
                var leftRightCase = alpha < edgeAlpha;
                var distance = 0;
                if (leftRightCase) {
                    distance = boxWidth / (2 * Math.cos(alpha));
                } else {
                    distance = boxHeight / (2 * Math.sin(alpha));
                }

                var dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY), normX = deltaX / dist, normY = deltaY / dist, sourcePadding = distance + (d.left ? 5 : 0), targetPadding = distance + (d.right ? 5 : 0), theta = Math.atan2(deltaY, deltaX), d90 = Math.PI / 2, sourceX = d.source.x + (sourcePadding * normX), sourceY = d.source.y + (sourcePadding * normY), targetX = d.target.x - (targetPadding * normX), targetY = d.target.y - (targetPadding * normY);

                return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY + (d.right ? "M" + targetX + "," + targetY + "l" + (3.5 * Math.cos(d90 - theta) - 10 * Math.cos(theta)) + "," + (-3.5 * Math.sin(d90 - theta) - 10 * Math.sin(theta)) + "L" + (targetX - 3.5 * Math.cos(d90 - theta) - 10 * Math.cos(theta)) + "," + (targetY + 3.5 * Math.sin(d90 - theta) - 10 * Math.sin(theta)) + "z" : '') + (d.left ? "M" + sourceX + "," + sourceY + "l" + (-3.5 * Math.cos(d90 - theta) + 10 * Math.cos(theta)) + "," + (3.5 * Math.sin(d90 - theta) + 10 * Math.sin(theta)) + "L" + (sourceX + 3.5 * Math.cos(d90 - theta) + 10 * Math.cos(theta)) + "," + (sourceY - 3.5 * Math.sin(d90 - theta) + 10 * Math.sin(theta)) + "z" : '');
            });

            this.circle.attr('transform', function (d) {
                return 'translate(' + d.x + ',' + d.y + ')';
            });
        };

        replicationStats.prototype.linkHasError = function (d) {
            return d.left && d.toLeftPayload.SourceToDestinationState !== "Online" || d.right && d.toRightPayload.SourceToDestinationState !== "Online";
        };

        replicationStats.prototype.restart = function () {
            var self = this;

            // path (link) group
            this.path = this.path.data(this.links);

            // add new links
            this.path.enter().append('svg:path').attr('class', 'link').classed('error', self.linkHasError).on("click", function (d) {
                var currentSelection = d3.select(".selected").node();
                d3.selectAll(".selected").classed("selected", false);
                d3.select(this).classed('selected', currentSelection != this);
                self.currentLink(currentSelection != this ? d : null);
            }).on('mouseover', function (d) {
                d.source.fixed = true;
                d.target.fixed = true;
            }).on('mouseout', function (d) {
                d.source.fixed = false;
                d.target.fixed = false;
            });

            // remove old links
            this.path.exit().remove();

            // circle (node) group
            this.circle = this.circle.data(self.nodes, function (d) {
                return d.id;
            });

            // add new nodes
            var g = this.circle.enter().append('svg:g').call(self.force.drag);

            g.append('svg:rect').attr('class', 'node').attr('rx', 5).attr("x", -100).attr("y", -20).attr('width', 200).attr('height', 40);

            // show node IDs
            g.append('svg:text').attr('x', 0).attr('y', -4).attr('class', 'id').text(function (d) {
                return d.id.split("/databases/")[0];
            });

            g.append('svg:text').attr('x', 0).attr('y', 14).attr('class', 'id').text(function (d) {
                return d.id.split("/databases/")[1];
            });

            // remove old nodes
            this.circle.exit().remove();

            // set the graph in motion
            this.force.start();
        };

        replicationStats.prototype.fetchTopology = function () {
            var _this = this;
            this.showLoadingIndicator(true);
            new getReplicationTopology(this.activeDatabase()).execute().done(function (topo) {
                _this.topology(topo);
                _this.createReplicationTopology();
                $("#replicationSetupCollapse").addClass("in"); // Force the panel to expand. Fixes a bug where the panel collapses when we fill it with content.
            }).always(function () {
                return _this.showLoadingIndicator(false);
            });
        };

        replicationStats.prototype.saveAsPng = function () {
            svgDownloader.downloadPng(d3.select('#replicationTopology').node(), 'replicationTopology.png', svgDownloader.extractInlineCss);
        };

        replicationStats.prototype.saveAsSvg = function () {
            svgDownloader.downloadSvg(d3.select('#replicationTopology').node(), 'replicationTopology.svg', svgDownloader.extractInlineCss);
        };

        replicationStats.prototype.saveAsJson = function () {
            fileDownloader.downloadAsJson(this.topology(), "topology.json");
        };

        replicationStats.prototype.fetchJsonData = function () {
            return new getReplicationPerfStatsCommand(this.activeDatabase()).execute();
        };

        replicationStats.prototype.modelPolling = function () {
            // don't pool if unable to locate element
            var container = $("#replicationStatsContainer");
            if (container.length > 0) {
                this.refresh();
            }
        };

        replicationStats.prototype.filterJsonData = function () {
            var _this = this;
            this.jsonData = [];

            this.rawJsonData.forEach(function (v) {
                var filteredStats = v.Stats.filter(function (s) {
                    return !_this.hiddenNames.has(s.Destination);
                });
                if (filteredStats.length > 0) {
                    _this.jsonData.push({
                        'Started': v.Started,
                        'Stats': filteredStats
                    });
                }
            });
        };

        replicationStats.prototype.refresh = function () {
            var _this = this;
            return this.fetchJsonData().done(function (data) {
                _this.rawJsonData = _this.mergeJsonData(_this.rawJsonData, data);
                _this.destinations = _this.findDestinations(_this.rawJsonData);
                _this.filterJsonData();
                _this.redrawGraph();
            });
        };

        replicationStats.prototype.mergeJsonData = function (currentData, incomingData) {
            // create lookup map to avoid O(n^2)
            var dateLookup = d3.map();
            currentData.forEach(function (d, i) {
                dateLookup.set(d.Started, i);
            });

            incomingData.forEach(function (d) {
                if (dateLookup.has(d.Started)) {
                    var index = dateLookup.get(d.Started);
                    currentData[index] = d;
                } else {
                    currentData.push(d);
                }
            });
            return currentData;
        };

        replicationStats.prototype.computeBarWidths = function (data) {
            var _this = this;
            var cumulative = 10;
            var result = data.map(function (perfData) {
                var prevValue = cumulative;
                perfData.sectionWidth = perfData.Stats.length * _this.barWidth + _this.barPadding * 2;
                cumulative += perfData.sectionWidth;
                return prevValue;
            });
            result.push(cumulative);
            return result;
        };

        replicationStats.prototype.graphScrolled = function () {
            var leftScroll = $("#replicationStatsContainer").scrollLeft();
            var self = this;
            this.perfSvg.select('.y.axis').attr("transform", "translate(" + leftScroll + ",0)");

            this.perfSvg.select('#dataClip rect').attr('x', leftScroll);

            this.perfSvg.select('.legend_bg_group').attr("transform", "translate(" + leftScroll + ",0)");

            this.perfSvg.select('.controlls').selectAll(".legend").attr("transform", function (d, i) {
                return "translate(" + leftScroll + "," + i * 20 + ")";
            });
            nv.tooltip.cleanup();
        };

        replicationStats.prototype.toggleGroupVisible = function (groupName) {
            nv.tooltip.cleanup();
            var alreadyHidden = this.hiddenNames.has(groupName);
            if (alreadyHidden) {
                this.hiddenNames.remove(groupName);
            } else {
                this.hiddenNames.add(groupName);
            }
            d3.select('.rect-legend-' + generalUtils.escape(groupName)).classed('legendHidden', !alreadyHidden);
            this.filterJsonData();
            this.redrawGraph();

            // we have to manually trigger on scroll even to fix firefox issue (missing event call)
            this.graphScrolled();
        };

        replicationStats.prototype.redrawGraph = function () {
            var self = this;

            this.perfWidth = $("#replicationTopologySection").width() - this.panelBodyPadding * 2 - this.margin.left - this.margin.right;
            this.perfHeight = $("#replicationStatsContainer").height() - this.margin.top - this.margin.bottom - 20; // substract scroll width

            var cumulativeWidths = this.computeBarWidths(this.jsonData);

            this.x0Scale = d3.scale.ordinal().range(cumulativeWidths);
            this.yScale = d3.scale.linear().range([self.perfHeight, 0]);
            this.xAxis = d3.svg.axis().scale(self.x0Scale).orient("bottom").tickFormat(function (d) {
                return "";
            }).tickPadding(20);
            this.yAxis = d3.svg.axis().scale(self.yScale).orient("left").tickFormat(d3.format(".2s"));

            var totalHeight = self.perfHeight + self.margin.top + self.margin.bottom;

            // get higer value from total (visiable and not visible graph width) and viewbox width.
            var totalWidth = Math.max(cumulativeWidths[cumulativeWidths.length - 1], this.perfWidth) + this.margin.left + this.margin.right;

            $("#replicationStatsContainer").css('overflow-x', cumulativeWidths[cumulativeWidths.length - 1] > this.perfWidth ? 'scroll' : 'hidden');

            this.perfSvg = d3.select("#replicationStatsGraph").attr("width", totalWidth).attr("height", totalHeight).style({ height: totalHeight + 'px' }).style({ width: totalWidth + 'px' }).attr("viewBox", "0 0 " + totalWidth + " " + totalHeight);

            this.perfSvg.selectAll('.main_group').attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            this.perfSvg.selectAll('defs').data([this.jsonData]).enter().append('defs').append('clipPath').attr('id', 'dataClip').append('rect').attr('x', 0).attr('y', 0).attr('width', 1200000).attr('height', 50000);

            var svgEnter = this.perfSvg.selectAll(".main_group").data([this.jsonData]).enter();

            svgEnter.append('g').attr('class', 'main_group').attr('clip-path', "url(#dataClip)").attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            var controllsEnter = this.perfSvg.selectAll(".controlls").data([this.jsonData]).enter().append("g").attr('class', 'controlls').attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            controllsEnter.append("g").attr("class", "x axis");

            controllsEnter.append('g').attr('class', 'y axis');

            controllsEnter.append('g').attr('class', 'legend_bg_group').append('rect').attr('class', 'legend_bg').attr('x', self.perfWidth).attr('y', 0).attr('width', 0).attr('height', 0);

            controllsEnter.select('.y.axis').append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Batch size");

            this.x0Scale.domain(d3.nest().key(function (d) {
                return d.Started;
            }).sortKeys(d3.ascending).entries(self.jsonData).map(function (d) {
                return d.key;
            }));

            this.yScale.domain([0, d3.max(this.jsonData, function (d) {
                    return d3.max(d.Stats, function (dd) {
                        return dd.BatchSize;
                    });
                })]);

            this.perfSvg.select(".x.axis").attr('clip-path', "url(#dataClip)").attr("transform", "translate(0," + self.perfHeight + ")").transition().call(self.xAxis);

            this.perfSvg.select('.y.axis').transition().call(self.yAxis);

            var frame = this.perfSvg.select('.main_group').selectAll(".frame").data(self.jsonData, function (d) {
                return d.Started;
            });

            frame.exit().remove();

            frame.transition().attr("transform", function (d) {
                return "translate(" + self.x0Scale(d.Started) + ",0)";
            });

            frame.select('.date_tick').transition().attr('x', function (d) {
                return d.sectionWidth / 2;
            }).attr('y', self.perfHeight + 16);

            var frameEnter = frame.enter().append("g").attr("class", "frame").attr("transform", function (d) {
                return "translate(" + self.x0Scale(d.Started) + ",0)";
            });

            frameEnter.append("text").attr('class', 'date_tick').attr('text-anchor', 'middle').attr('x', function (d) {
                return d.sectionWidth / 2;
            }).attr('y', self.perfHeight + 16).text(function (d) {
                return self.xTickFormat(self.isoFormat.parse(d.Started));
            });

            frameEnter.append("g").attr('class', 'inputs');

            var inputCounts = frame.select('.inputs').selectAll(".inputCounts").data(function (d) {
                return d.Stats;
            }, function (d) {
                return d.Destination;
            });

            inputCounts.exit().remove();

            inputCounts.transition().attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth + self.barPadding;
            }).attr("y", function (d) {
                return self.yScale(d.BatchSize);
            }).attr("height", function (d) {
                return self.perfHeight - self.yScale(d.BatchSize);
            }).style("fill", function (d) {
                return self.color(d.Destination);
            });

            inputCounts.enter().append("rect").attr("class", "inputCounts").attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth + self.barPadding;
            }).attr("y", function (d) {
                return self.perfHeight;
            }).attr("height", 0).style("fill", function (d) {
                return self.color(d.Destination);
            }).on('click', function (d) {
                nv.tooltip.cleanup();
                var offset = $(this).offset();
                var leftScroll = $("#replicationStatsContainer").scrollLeft();
                var containerOffset = $("#replicationTopologySection").offset();
                nv.tooltip.show([offset.left - containerOffset.left + leftScroll + self.barWidth, offset.top - containerOffset.top], self.getTooltip(d), 's', 5, document.getElementById("replicationStatsContainer"), "selectable-tooltip");
            }).transition().attr("height", function (d) {
                return self.perfHeight - self.yScale(d.BatchSize);
            }).attr("y", function (d) {
                return self.yScale(d.BatchSize);
            });

            this.legend = this.perfSvg.select('.controlls').selectAll(".legend").data(this.destinations, function (d) {
                return d;
            });

            this.legend.selectAll("rect").transition().attr("x", this.perfWidth - 18);

            this.legend.selectAll("text").transition().attr("x", this.perfWidth - 24).text(function (d) {
                return d;
            });

            var legendEnter = this.legend.enter().append("g").attr("class", "legend").attr("transform", function (d, i) {
                return "translate(0," + i * 20 + ")";
            });

            legendEnter.append("rect").attr("x", this.perfWidth - 18).attr('class', function (d) {
                return 'rect-legend-' + generalUtils.escape(d);
            }).attr("width", 18).attr("height", 18).style("fill", self.color).style("stroke", self.color).on('click', function (d) {
                return self.toggleGroupVisible(d);
            });

            legendEnter.append("text").attr("x", this.perfWidth - 24).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function (d) {
                return d;
            });

            this.legendWidth = d3.max($(".legend text"), function (d) {
                return d.getBBox().width;
            }) + 40;

            this.perfSvg.select('.legend_bg').attr('y', -6).attr('height', this.destinations.length * 20 + 10).attr('width', this.legendWidth).attr('x', this.perfWidth - this.legendWidth + 10);
        };

        replicationStats.prototype.onWindowHeightChanged = function () {
            nv.tooltip.cleanup();
            this.perfWidth = $("#replicationTopologySection").width() - this.panelBodyPadding * 2;
            this.perfHeight = $("#replicationStatsContainer").height();
            this.redrawGraph();
        };

        replicationStats.prototype.getTooltip = function (d) {
            return "<strong>Destionation:</strong> <span>" + d.Destination + "</span><br />" + "<strong>Duration milliseconds:</strong> <span>" + d.DurationMilliseconds + "</span><br />" + "<strong>Batch size:</strong> <span>" + d.BatchSize + "</span><br />";
        };

        replicationStats.prototype.findDestinations = function (jsonData) {
            var statsInline = d3.merge(jsonData.map(function (d) {
                return d.Stats;
            }));
            var byKey = d3.nest().key(function (d) {
                return d.Destination;
            }).sortKeys(d3.ascending).rollup(function (l) {
                return l.length;
            }).entries(statsInline);
            return byKey.map(function (d) {
                return d.key;
            });
        };

        replicationStats.prototype.detached = function () {
            _super.prototype.detached.call(this);

            $("#visualizerContainer").off('DynamicHeightSet');
            nv.tooltip.cleanup();
        };

        replicationStats.prototype.replicationStatToggle = function () {
            var _this = this;
            setTimeout(function () {
                return _this.redrawGraph();
            }, 1);
        };
        return replicationStats;
    })(viewModelBase);

    
    return replicationStats;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/reporting", ["require", "exports", "viewmodels/viewModelBase", "common/appUrl", "commands/getDatabaseStatsCommand", "commands/getIndexDefinitionCommand", "models/facet", "commands/queryFacetsCommand", "common/aceEditorBindingHandler", "common/pagedList"], function(require, exports, viewModelBase, appUrl, getDatabaseStatsCommand, getIndexDefinitionCommand, facet, queryFacetsCommand, aceEditorBindingHandler, pagedList) {
    var reporting = (function (_super) {
        __extends(reporting, _super);
        function reporting() {
            var _this = this;
            _super.call(this);
            this.selectedIndexName = ko.observable();
            this.selectedIndexLabel = ko.computed(function () {
                return _this.selectedIndexName() ? _this.selectedIndexName() : "[Select an index]";
            });
            this.indexNames = ko.observableArray();
            this.hasSelectedIndex = ko.computed(function () {
                return _this.selectedIndexName() && _this.selectedIndexName().length > 0;
            });
            this.editSelectedIndexUrl = ko.computed(function () {
                return _this.hasSelectedIndex() ? appUrl.forEditIndex(_this.selectedIndexName(), _this.activeDatabase()) : null;
            });
            this.availableFields = ko.observableArray();
            this.selectedField = ko.observable();
            this.selectedFieldLabel = ko.computed(function () {
                return _this.selectedField() ? _this.selectedField() : "Select a field";
            });
            this.addedValues = ko.observableArray();
            this.filter = ko.observable();
            this.hasFilter = ko.observable(false);
            this.reportResults = ko.observable();
            this.totalQueryResults = ko.computed(function () {
                return _this.reportResults() ? _this.reportResults().totalResultCount() : null;
            });
            this.queryDuration = ko.observable();
            this.appUrls = appUrl.forCurrentDatabase();
        }
        reporting.prototype.activate = function (indexToActivateOrNull) {
            var _this = this;
            _super.prototype.activate.call(this, indexToActivateOrNull);

            this.fetchIndexes().done(function () {
                return _this.selectInitialIndex(indexToActivateOrNull);
            });
            this.selectedIndexName.subscribe(function () {
                return _this.resetSelections();
            });

            aceEditorBindingHandler.install();
        };

        reporting.prototype.fetchIndexes = function () {
            var _this = this;
            return new getDatabaseStatsCommand(this.activeDatabase()).execute().done(function (results) {
                return _this.indexNames(results.Indexes.map(function (i) {
                    return i.Name;
                }));
            });
        };

        reporting.prototype.fetchIndexDefinition = function (indexName) {
            var _this = this;
            new getIndexDefinitionCommand(indexName, this.activeDatabase()).execute().done(function (dto) {
                return _this.availableFields(dto.Index.Fields);
            });
        };

        reporting.prototype.selectInitialIndex = function (indexToActivateOrNull) {
            if (indexToActivateOrNull && this.indexNames.contains(indexToActivateOrNull)) {
                this.setSelectedIndex(indexToActivateOrNull);
            } else if (this.indexNames().length > 0) {
                this.setSelectedIndex(this.indexNames.first());
            }
        };

        reporting.prototype.setSelectedIndex = function (indexName) {
            this.selectedIndexName(indexName);
            this.updateUrl(appUrl.forReporting(this.activeDatabase(), indexName));

            this.fetchIndexDefinition(indexName);
        };

        reporting.prototype.setSelectedField = function (fieldName) {
            this.selectedField(fieldName);

            // Update all facets to use that too.
            this.addedValues().forEach(function (v) {
                return v.name = fieldName;
            });
        };

        reporting.prototype.resetSelections = function () {
            this.selectedField(null);
            this.addedValues([]);
            this.availableFields([]);
        };

        reporting.prototype.addValue = function (fieldName) {
            var val = facet.fromNameAndAggregation(this.selectedField(), fieldName);
            this.addedValues.push(val);
        };

        reporting.prototype.removeValue = function (val) {
            this.addedValues.remove(val);
        };

        reporting.prototype.runReport = function () {
            var _this = this;
            var selectedIndex = this.selectedIndexName();
            var filterQuery = this.hasFilter() ? this.filter() : null;
            var facets = this.addedValues().map(function (v) {
                return v.toDto();
            });
            var groupedFacets = [];
            facets.forEach(function (curFacet) {
                var foundFacet = groupedFacets.first(function (x) {
                    return x.AggregationField == curFacet.AggregationField;
                });

                if (foundFacet) {
                    foundFacet.Aggregation += curFacet.Aggregation;
                } else {
                    groupedFacets.push(curFacet);
                }
            });
            var db = this.activeDatabase();
            var resultsFetcher = function (skip, take) {
                return new queryFacetsCommand(selectedIndex, filterQuery, skip, take, groupedFacets, db).execute().done(function (resultSet) {
                    return _this.queryDuration(resultSet.additionalResultInfo);
                });
            };
            this.reportResults(new pagedList(resultsFetcher));
        };
        return reporting;
    })(viewModelBase);

    
    return reporting;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/resetIndexConfirm", ["require", "exports", "commands/resetIndexCommand", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, resetIndexCommand, dialog, dialogViewModelBase) {
    var resetIndexConfirm = (function (_super) {
        __extends(resetIndexConfirm, _super);
        function resetIndexConfirm(indexName, db) {
            _super.call(this);
            this.indexName = indexName;
            this.db = db;
            this.resetTask = $.Deferred();
        }
        resetIndexConfirm.prototype.resetIndex = function () {
            var _this = this;
            new resetIndexCommand(this.indexName, this.db).execute().done(function () {
                return _this.resetTask.resolve();
            }).fail(function () {
                return _this.resetTask.reject();
            });
            dialog.close(this);
        };

        resetIndexConfirm.prototype.cancel = function () {
            this.resetTask.reject();
            dialog.close(this);
        };
        return resetIndexConfirm;
    })(dialogViewModelBase);

    
    return resetIndexConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/resources", ["require", "exports", "durandal/app", "common/appUrl", "models/database", "viewmodels/viewModelBase", 'viewmodels/shell', "models/license", "commands/getOperationAlertsCommand", "commands/dismissAlertCommand", "models/filesystem/filesystem"], function(require, exports, app, appUrl, database, viewModelBase, shell, license, getOperationAlertsCommand, dismissAlertCommand, filesystem) {
    var resources = (function (_super) {
        __extends(resources, _super);
        function resources() {
            var _this = this;
            _super.call(this);
            this.databases = ko.observableArray();
            this.fileSystems = ko.observableArray();
            this.searchText = ko.observable("");
            this.visibleResources = ko.observable('');
            this.selectedResource = ko.observable();
            this.fileSystemsStatus = ko.observable("loading");
            this.optionsClicked = ko.observable(false);
            this.alerts = ko.observable([]);

            this.databases = shell.databases;
            this.fileSystems = shell.fileSystems;
            this.resources = shell.resources;

            this.systemDb = appUrl.getSystemDatabase();
            this.appUrls = appUrl.forCurrentDatabase();
            this.searchText.extend({ throttle: 200 }).subscribe(function () {
                return _this.filterResources();
            });

            var currentDatabse = this.activeDatabase();
            if (!!currentDatabse) {
                this.selectResource(currentDatabse, false);
            }

            var currentFileSystem = this.activeFilesystem();
            if (!!currentFileSystem) {
                this.selectResource(currentFileSystem, false);
            }

            var updatedUrl = appUrl.forResources();
            this.updateUrl(updatedUrl);

            this.hasAllResourcesSelected = ko.computed(function () {
                var resources = _this.resources();
                for (var i = 0; i < resources.length; i++) {
                    var rs = resources[i];
                    if (rs.isDatabase() && rs.isSystem) {
                        continue;
                    }

                    if (!rs.isVisible()) {
                        continue;
                    }

                    if (rs.isChecked() == false) {
                        return false;
                    }
                }
                return true;
            });

            this.isAnyResourceSelected = ko.computed(function () {
                var resources = _this.resources();
                for (var i = 0; i < resources.length; i++) {
                    var rs = resources[i];
                    if (rs.isDatabase() && rs.isSystem) {
                        continue;
                    }

                    if (rs.isChecked()) {
                        return true;
                    }
                }
                return false;
            });

            this.allCheckedResourcesDisabled = ko.computed(function () {
                var disabledStatus = null;
                for (var i = 0; i < _this.resources().length; i++) {
                    var rs = _this.resources()[i];
                    if (rs.isChecked()) {
                        if (disabledStatus == null) {
                            disabledStatus = rs.disabled();
                        } else if (disabledStatus != rs.disabled()) {
                            return null;
                        }
                    }
                }

                return disabledStatus;
            });
            this.fetchAlerts();
            this.visibleResources.subscribe(function () {
                return _this.filterResources();
            });
        }
        resources.prototype.fetchAlerts = function () {
            var _this = this;
            new getOperationAlertsCommand(appUrl.getSystemDatabase()).execute().then(function (result) {
                _this.alerts(result);
            });
        };

        // Override canActivate: we can always load this page, regardless of any system db prompt.
        resources.prototype.canActivate = function (args) {
            return true;
        };

        resources.prototype.attached = function () {
            ko.postbox.publish("SetRawJSONUrl", appUrl.forDatabasesRawData());
            this.resourcesLoaded();
        };

        resources.prototype.resourcesLoaded = function () {
            // If we have no databases (except system db), show the "create a new database" screen.
            if (this.resources().length === 1) {
                this.newResource();
            }
        };

        resources.prototype.filterResources = function () {
            var _this = this;
            var filter = this.searchText();
            var filterLower = filter.toLowerCase();
            this.databases().forEach(function (db) {
                var typeMatch = !_this.visibleResources() || _this.visibleResources() == "db";
                var isMatch = (!filter || (db.name.toLowerCase().indexOf(filterLower) >= 0)) && db.name != '<system>' && typeMatch;
                db.isVisible(isMatch);
            });
            this.databases().map(function (db) {
                return db.isChecked(!db.isVisible() ? false : db.isChecked());
            });

            this.fileSystems().forEach(function (d) {
                var typeMatch = !_this.visibleResources() || _this.visibleResources() == "fs";
                var isMatch = (!filter || (d.name.toLowerCase().indexOf(filterLower) >= 0)) && typeMatch;
                d.isVisible(isMatch);
            });

            this.fileSystems().map(function (fs) {
                return fs.isChecked(!fs.isVisible() ? false : fs.isChecked());
            });
        };

        resources.prototype.getDocumentsUrl = function (db) {
            return appUrl.forDocuments(null, db);
        };

        resources.prototype.getFilesystemFilesUrl = function (fs) {
            return appUrl.forFilesystemFiles(fs);
        };

        resources.prototype.selectResource = function (rs, activateResource) {
            if (typeof activateResource === "undefined") { activateResource = true; }
            if (this.optionsClicked() == false) {
                if (activateResource) {
                    rs.activate();
                }
                this.selectedResource(rs);
            }

            this.optionsClicked(false);
        };

        resources.prototype.deleteSelectedResources = function (resources) {
            var _this = this;
            if (resources.length > 0) {
                require(["viewmodels/deleteResourceConfirm"], function (deleteResourceConfirm) {
                    var confirmDeleteViewModel = new deleteResourceConfirm(resources);

                    confirmDeleteViewModel.deleteTask.done(function (deletedResources) {
                        if (resources.length == 1) {
                            _this.onResourceDeleted(resources[0]);
                        } else {
                            deletedResources.forEach(function (rs) {
                                return _this.onResourceDeleted(rs);
                            });
                        }
                    });

                    app.showDialog(confirmDeleteViewModel);
                });
            }
        };

        resources.prototype.onResourceDeleted = function (rs) {
            if (rs.type == database.type) {
                var databaseInArray = this.databases.first(function (db) {
                    return db.name == rs.name;
                });

                if (!!databaseInArray) {
                    this.databases.remove(databaseInArray);
                }
            } else if (rs.type == filesystem.type) {
                var fileSystemInArray = this.fileSystems.first(function (fs) {
                    return fs.name == rs.name;
                });

                if (!!fileSystemInArray) {
                    this.fileSystems.remove(fileSystemInArray);
                }
            } else {
                //TODO: counters
            }

            if ((this.resources().length > 0) && (this.resources().contains(this.selectedResource()) === false)) {
                this.selectResource(this.resources().first());
            }
        };

        resources.prototype.deleteCheckedResources = function () {
            var checkedResources = this.resources().filter(function (rs) {
                return rs.isChecked();
            });
            this.deleteSelectedResources(checkedResources);
        };

        resources.prototype.toggleSelectAll = function () {
            var check = true;

            if (this.isAnyResourceSelected()) {
                check = false;
            }

            for (var i = 0; i < this.resources().length; i++) {
                var rs = this.resources()[i];
                if (rs.isDatabase() && rs.isSystem) {
                    rs.isChecked(false);
                    continue;
                }
                if (rs.isVisible()) {
                    rs.isChecked(check);
                }
            }
        };

        resources.prototype.toggleCheckedResources = function () {
            var checkedResources = this.resources().filter(function (rs) {
                return rs.isChecked();
            });
            this.toggleSelectedResources(checkedResources);
        };

        resources.prototype.toggleSelectedResources = function (resources) {
            var _this = this;
            if (resources.length > 0) {
                var action = !resources[0].disabled();

                require(["viewmodels/disableResourceToggleConfirm"], function (disableResourceToggleConfirm) {
                    var disableDatabaseToggleViewModel = new disableResourceToggleConfirm(resources);

                    disableDatabaseToggleViewModel.disableToggleTask.done(function (toggledResources) {
                        if (resources.length == 1) {
                            _this.onResourceDisabledToggle(resources[0], action);
                        } else {
                            toggledResources.forEach(function (rs) {
                                _this.onResourceDisabledToggle(rs, action);
                            });
                        }
                    });

                    app.showDialog(disableDatabaseToggleViewModel);
                });
            }
        };

        resources.prototype.onResourceDisabledToggle = function (rs, action) {
            if (!!rs) {
                rs.disabled(action);
                rs.isChecked(false);
            }
        };

        resources.prototype.disableDatabaseIndexing = function (db) {
            var action = !db.indexingDisabled();
            var actionText = db.indexingDisabled() ? "Enable" : "Disable";
            var message = this.confirmationMessage(actionText + " indexing?", "Are you sure?");

            message.done(function () {
                require(["commands/disableIndexingCommand"], function (disableIndexingCommand) {
                    var task = new disableIndexingCommand(db.name, action).execute();
                    task.done(function () {
                        return db.indexingDisabled(action);
                    });
                });
            });
        };

        resources.prototype.toggleRejectDatabaseClients = function (db) {
            var action = !db.rejectClientsMode();
            var actionText = action ? "reject clients mode" : "accept clients mode";
            var message = this.confirmationMessage("Switch to " + actionText, "Are you sure?");
            message.done(function () {
                require(["commands/toggleRejectDatabaseClients"], function (toggleRejectDatabaseClients) {
                    var task = new toggleRejectDatabaseClients(db.name, action).execute();
                    task.done(function () {
                        return db.rejectClientsMode(action);
                    });
                });
            });
        };

        resources.prototype.navigateToAdminSettings = function () {
            this.navigate(this.appUrls.adminSettings());
            shell.disconnectFromResourceChangesApi();
        };

        resources.prototype.dismissAlert = function (uniqueKey) {
            new dismissAlertCommand(appUrl.getSystemDatabase(), uniqueKey).execute();
        };

        resources.prototype.urlForAlert = function (alert) {
            var index = this.alerts().indexOf(alert);
            return appUrl.forAlerts(appUrl.getSystemDatabase()) + "&item=" + index;
        };

        resources.prototype.newResource = function () {
            var _this = this;
            require(["viewmodels/createResource"], function (createResource) {
                var createResourceViewModel = new createResource(_this.databases, _this.fileSystems, license.licenseStatus);
                createResourceViewModel.createDatabasePart.creationTask.done(function (databaseName, bundles, databasePath, databaseLogs, databaseIndexes, storageEngine, incrementalBackup, alertTimeout, alertRecurringTimeout) {
                    var settings = {
                        "Raven/ActiveBundles": bundles.join(";")
                    };
                    if (storageEngine) {
                        settings["Raven/StorageTypeName"] = storageEngine;
                    }
                    if (incrementalBackup) {
                        if (storageEngine === "esent") {
                            settings["Raven/Esent/CircularLog"] = "false";
                        } else {
                            settings["Raven/Voron/AllowIncrementalBackups"] = "true";
                        }
                    }
                    if (alertTimeout !== "") {
                        settings["Raven/IncrementalBackup/AlertTimeoutHours"] = alertTimeout;
                    }
                    if (alertRecurringTimeout !== "") {
                        settings["Raven/IncrementalBackup/RecurringAlertTimeoutDays"] = alertRecurringTimeout;
                    }
                    settings["Raven/DataDir"] = (!_this.isEmptyStringOrWhitespace(databasePath)) ? databasePath : "~/" + databaseName;
                    if (!_this.isEmptyStringOrWhitespace(databaseLogs)) {
                        settings["Raven/Esent/LogsPath"] = databaseLogs;
                    }
                    if (!_this.isEmptyStringOrWhitespace(databaseIndexes)) {
                        settings["Raven/IndexStoragePath"] = databaseIndexes;
                    }

                    _this.showDbCreationAdvancedStepsIfNecessary(databaseName, bundles, settings);
                });

                createResourceViewModel.createFilesystemPart.creationTask.done(function (fsSettings) {
                    return _this.showCreationAdvancedStepsIfNecessary(fsSettings);
                });

                app.showDialog(createResourceViewModel);
            });
        };

        resources.prototype.showDbCreationAdvancedStepsIfNecessary = function (databaseName, bundles, settings) {
            var _this = this;
            var securedSettings = {};
            var savedKey;

            var encryptionDeferred = $.Deferred();

            if (bundles.contains("Encryption")) {
                require(["viewmodels/createEncryption"], function (createEncryption) {
                    var createEncryptionViewModel = new createEncryption();
                    createEncryptionViewModel.creationEncryption.done(function (key, encryptionAlgorithm, encryptionBits, isEncryptedIndexes) {
                        savedKey = key;
                        securedSettings = {
                            'Raven/Encryption/Key': key,
                            'Raven/Encryption/Algorithm': _this.getEncryptionAlgorithmFullName(encryptionAlgorithm),
                            'Raven/Encryption/KeyBitsPreference': encryptionBits,
                            'Raven/Encryption/EncryptIndexes': isEncryptedIndexes
                        };
                        encryptionDeferred.resolve(securedSettings);
                    });
                    app.showDialog(createEncryptionViewModel);
                });
            } else {
                encryptionDeferred.resolve();
            }

            encryptionDeferred.done(function () {
                require(["commands/createDatabaseCommand"], function (createDatabaseCommand) {
                    new createDatabaseCommand(databaseName, settings, securedSettings).execute().done(function () {
                        var newDatabase = _this.addNewDatabase(databaseName, bundles);
                        _this.selectResource(newDatabase);

                        var encryptionConfirmationDialogPromise = $.Deferred();
                        if (!jQuery.isEmptyObject(securedSettings)) {
                            require(["viewmodels/createEncryptionConfirmation"], function (createEncryptionConfirmation) {
                                var createEncryptionConfirmationViewModel = new createEncryptionConfirmation(savedKey);
                                createEncryptionConfirmationViewModel.dialogPromise.done(function () {
                                    return encryptionConfirmationDialogPromise.resolve();
                                });
                                createEncryptionConfirmationViewModel.dialogPromise.fail(function () {
                                    return encryptionConfirmationDialogPromise.reject();
                                });
                                app.showDialog(createEncryptionConfirmationViewModel);
                            });
                        } else {
                            encryptionConfirmationDialogPromise.resolve();
                        }

                        _this.createDefaultSettings(newDatabase, bundles).always(function () {
                            if (bundles.contains("Quotas") || bundles.contains("Versioning") || bundles.contains("SqlReplication")) {
                                encryptionConfirmationDialogPromise.always(function () {
                                    require(["viewmodels/databaseSettingsDialog"], function (databaseSettingsDialog) {
                                        var settingsDialog = new databaseSettingsDialog(bundles);
                                        app.showDialog(settingsDialog);
                                    });
                                });
                            }
                        });
                    });
                });
            });
        };

        resources.prototype.addNewDatabase = function (databaseName, bundles) {
            var foundDatabase = this.databases.first(function (db) {
                return db.name == databaseName;
            });

            if (!foundDatabase) {
                var newDatabase = new database(databaseName, false, bundles);
                this.databases.unshift(newDatabase);
                this.filterResources();
                return newDatabase;
            }
            return foundDatabase;
        };

        resources.prototype.createDefaultSettings = function (db, bundles) {
            var deferred = $.Deferred();
            require(["commands/createDefaultSettingsCommand"], function (createDefaultSettingsCommand) {
                new createDefaultSettingsCommand(db, bundles).execute().always(function () {
                    return deferred.resolve();
                });
            });
            return deferred;
        };

        resources.prototype.isEmptyStringOrWhitespace = function (str) {
            return !$.trim(str);
        };

        resources.prototype.getEncryptionAlgorithmFullName = function (encrytion) {
            var fullEncryptionName = null;
            switch (encrytion) {
                case "DES":
                    fullEncryptionName = "System.Security.Cryptography.DESCryptoServiceProvider, mscorlib";
                    break;
                case "RC2":
                    fullEncryptionName = "System.Security.Cryptography.RC2CryptoServiceProvider, mscorlib";
                    break;
                case "Rijndael":
                    fullEncryptionName = "System.Security.Cryptography.RijndaelManaged, mscorlib";
                    break;
                default:
                    fullEncryptionName = "System.Security.Cryptography.TripleDESCryptoServiceProvider, mscorlib";
            }
            return fullEncryptionName;
        };

        resources.prototype.showCreationAdvancedStepsIfNecessary = function (fsSettings) {
            var _this = this;
            require(["commands/filesystem/createFilesystemCommand"], function (createFileSystemCommand) {
                new createFileSystemCommand(fsSettings).execute().done(function () {
                    var newFileSystem = _this.addNewFileSystem(fsSettings.name);
                    _this.selectResource(newFileSystem);
                });
            });
        };

        resources.prototype.addNewFileSystem = function (fileSystemName) {
            var foundFileSystem = this.fileSystems.first(function (fs) {
                return fs.name == fileSystemName;
            });

            if (!foundFileSystem) {
                var newFileSystem = new filesystem(fileSystemName);
                this.fileSystems.unshift(newFileSystem);
                this.filterResources();
                return newFileSystem;
            }
            return foundFileSystem;
        };
        return resources;
    })(viewModelBase);

    
    return resources;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/restoreDatabase", ["require", "exports", "viewmodels/viewModelBase", "viewmodels/shell", "commands/getDocumentWithMetadataCommand", "common/appUrl", "commands/monitorRestoreCommand"], function(require, exports, viewModelBase, shell, getDocumentWithMetadataCommand, appUrl, monitorRestoreCommand) {
    var restoreDatabase = (function (_super) {
        __extends(restoreDatabase, _super);
        function restoreDatabase() {
            var _this = this;
            _super.call(this);
            this.defrag = ko.observable(false);
            this.backupLocation = ko.observable('');
            this.databaseLocation = ko.observable();
            this.databaseName = ko.observable();
            this.restoreStatusMessages = ko.observableArray();
            this.isBusy = ko.observable();
            this.anotherRestoreInProgres = ko.observable(false);
            this.keepDown = ko.observable(false);

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newDatabaseName = _this.databaseName();
                var foundDb = shell.databases.first(function (db) {
                    return newDatabaseName == db.name;
                });

                if (!!foundDb && newDatabaseName.length > 0) {
                    errorMessage = "Database name already exists!";
                }

                return errorMessage;
            });
        }
        restoreDatabase.prototype.canActivate = function (args) {
            var _this = this;
            this.isBusy(true);
            var deferred = $.Deferred();
            var db = appUrl.getSystemDatabase();
            var self = this;

            new getDocumentWithMetadataCommand("Raven/Restore/InProgress", db, true).execute().fail(function () {
                return deferred.resolve({ redirect: appUrl.forSettings(db) });
            }).done(function (result) {
                if (result) {
                    // looks like another restore is in progress
                    _this.anotherRestoreInProgres(true);
                    new monitorRestoreCommand($.Deferred(), _this.updateRestoreStatus.bind(self)).execute().always(function () {
                        $("#rawLogsContainer").resize();
                        _this.anotherRestoreInProgres(false);
                    });
                } else {
                    _this.isBusy(false);
                }
                deferred.resolve({ can: true });
            });

            return deferred;
        };

        restoreDatabase.prototype.updateRestoreStatus = function (newRestoreStatus) {
            this.restoreStatusMessages(newRestoreStatus.Messages);
            if (this.keepDown()) {
                var logsPre = document.getElementById('restoreLogPre');
                logsPre.scrollTop = logsPre.scrollHeight;
            }
            this.isBusy(!!newRestoreStatus.IsRunning);
        };

        restoreDatabase.prototype.toggleKeepDown = function () {
            this.keepDown.toggle();
            if (this.keepDown() == true) {
                var logsPre = document.getElementById('restoreLogPre');
                logsPre.scrollTop = logsPre.scrollHeight;
            }
        };

        restoreDatabase.prototype.startRestore = function () {
            var _this = this;
            this.isBusy(true);
            var self = this;

            var restoreDatabaseDto = {
                BackupLocation: this.backupLocation(),
                DatabaseLocation: this.databaseLocation(),
                DatabaseName: this.databaseName()
            };

            require(["commands/startRestoreCommand"], function (startRestoreCommand) {
                new startRestoreCommand(_this.defrag(), restoreDatabaseDto, self.updateRestoreStatus.bind(self)).execute();
            });
        };
        return restoreDatabase;
    })(viewModelBase);

    
    return restoreDatabase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/runningTasks", ["require", "exports", "viewmodels/viewModelBase", "commands/killRunningTaskCommand", "commands/getRunningTasksCommand", "moment", "models/document"], function(require, exports, viewModelBase, killRunningTaskCommand, getRunningTasksCommand, moment, document) {
    var runningTasks = (function (_super) {
        __extends(runningTasks, _super);
        function runningTasks() {
            var _this = this;
            _super.call(this);
            this.allTasks = ko.observableArray();
            this.filterType = ko.observable(null);
            this.selectedTask = ko.observable();
            this.searchText = ko.observable("");
            this.now = ko.observable();
            this.updateNowTimeoutHandle = 0;
            this.sortColumn = ko.observable("logged");
            this.sortAsc = ko.observable(true);

            this.suggestionQueryCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeSuggestionQuery;
                });
            });
            this.bulkInsertCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeBulkInsert;
                });
            });
            this.indexBulkOperationCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeIndexBulkOperation;
                });
            });
            this.indexDeleteOperationCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeIndexDeleteOperation;
                });
            });
            this.importDatabaseCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeImportDatabase;
                });
            });
            this.restoreDatabaseCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeRestoreDatabase;
                });
            });
            this.restoreFilesystemCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeRestoreFilesystem;
                });
            });
            this.compactDatabaseCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeCompactDatabase;
                });
            });
            this.compactFilesystemCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeCompactFilesystem;
                });
            });
            this.ioTestCount = ko.computed(function () {
                return _this.allTasks().count(function (l) {
                    return l.TaskType === runningTasks.TypeIoTest;
                });
            });

            this.searchTextThrottled = this.searchText.throttle(200);
            this.activeDatabase.subscribe(function () {
                return _this.fetchTasks();
            });
            this.updateCurrentNowTime();

            this.filteredAndSortedTasks = ko.computed(function () {
                var tasks = _this.allTasks();
                var column = _this.sortColumn();
                var asc = _this.sortAsc();

                var sortFunc = function (left, right) {
                    if (left[column] === right[column]) {
                        return 0;
                    }
                    var test = asc ? (function (l, r) {
                        return l < r;
                    }) : (function (l, r) {
                        return l > r;
                    });
                    return test(left[column], right[column]) ? 1 : -1;
                };

                return tasks.sort(sortFunc);
            });
        }
        runningTasks.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            this.columnWidths = [
                ko.observable(100),
                ko.observable(265),
                ko.observable(300),
                ko.observable(200),
                ko.observable(360)
            ];
            this.registerColumnResizing();
            return this.fetchTasks();
        };

        runningTasks.prototype.deactivate = function () {
            clearTimeout(this.updateNowTimeoutHandle);
            this.unregisterColumnResizing();
        };

        runningTasks.prototype.fetchTasks = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getRunningTasksCommand(db).execute().done(function (results) {
                    return _this.processRunningTasksResults(results);
                });
            }

            return null;
        };

        runningTasks.prototype.processRunningTasksResults = function (results) {
            var _this = this;
            var now = moment();
            results.forEach(function (r) {
                r['TimeStampText'] = _this.createHumanReadableTime(r.StartTime);
                r['IsVisible'] = ko.computed(function () {
                    return _this.matchesFilterAndSearch(r);
                });
                r['Killable'] = ko.computed(function () {
                    return _this.canKill(r);
                });
                r['ExceptionText'] = r.Exception ? JSON.stringify(r.Exception, null, 2) : '';
            });
            this.allTasks(results.reverse());
        };

        runningTasks.prototype.canKill = function (task) {
            var status = task.TaskStatus === "Running" || task.TaskStatus === "Created" || task.TaskStatus === "WaitingToRun" || task.TaskStatus === "WaitingForActivation";
            var taskType = task.TaskType != runningTasks.TypeIndexDeleteOperation && task.TaskType != runningTasks.TypeSuggestionQuery && task.TaskType != runningTasks.TypeRestoreDatabase && task.TaskType != runningTasks.TypeRestoreFilesystem && task.TaskType != runningTasks.TypeCompactDatabase && task.TaskType != runningTasks.TypeCompactFilesystem;
            return status && taskType;
        };

        runningTasks.prototype.matchesFilterAndSearch = function (task) {
            var searchTextThrottled = this.searchTextThrottled().toLowerCase();
            var filterType = this.filterType();
            var matchesLogLevel = filterType === null || task.TaskType === filterType;
            var matchesSearchText = !searchTextThrottled || (task.Payload && task.Payload.toLowerCase().indexOf(searchTextThrottled) >= 0) || (task.ExceptionText && task.ExceptionText.toLowerCase().indexOf(searchTextThrottled) >= 0);

            return matchesLogLevel && matchesSearchText;
        };

        runningTasks.prototype.createHumanReadableTime = function (time) {
            var _this = this;
            if (time) {
                return ko.computed(function () {
                    var dateMoment = moment(time);
                    var agoInMs = dateMoment.diff(_this.now());
                    return moment.duration(agoInMs).humanize(true) + dateMoment.format(" (MM/DD/YY, h:mma)");
                });
            }

            return ko.computed(function () {
                return time;
            });
        };

        runningTasks.prototype.selectTask = function (task) {
            this.selectedTask(task);
        };

        runningTasks.prototype.taskKill = function (task) {
            var _this = this;
            new killRunningTaskCommand(this.activeDatabase(), task.Id).execute().always(function () {
                return setTimeout(function () {
                    _this.selectedTask(null);
                    _this.fetchTasks();
                }, 1000);
            });
        };

        runningTasks.prototype.tableKeyDown = function (sender, e) {
            var isKeyUp = e.keyCode === 38;
            var isKeyDown = e.keyCode === 40;
            if (isKeyUp || isKeyDown) {
                e.preventDefault();

                var oldSelection = this.selectedTask();
                if (oldSelection) {
                    var oldSelectionIndex = this.allTasks.indexOf(oldSelection);
                    var newSelectionIndex = oldSelectionIndex;
                    if (isKeyUp && oldSelectionIndex > 0) {
                        newSelectionIndex--;
                    } else if (isKeyDown && oldSelectionIndex < this.allTasks().length - 1) {
                        newSelectionIndex++;
                    }

                    this.selectedTask(this.allTasks()[newSelectionIndex]);
                    var newSelectedRow = $("#runningTasksContainer table tbody tr:nth-child(" + (newSelectionIndex + 1) + ")");
                    if (newSelectedRow) {
                        this.ensureRowVisible(newSelectedRow);
                    }
                }
            }
        };

        runningTasks.prototype.ensureRowVisible = function (row) {
            var table = $("#runningTasksTableContainer");
            var scrollTop = table.scrollTop();
            var scrollBottom = scrollTop + table.height();
            var scrollHeight = scrollBottom - scrollTop;

            var rowPosition = row.position();
            var rowTop = rowPosition.top;
            var rowBottom = rowTop + row.height();

            if (rowTop < 0) {
                table.scrollTop(scrollTop + rowTop);
            } else if (rowBottom > scrollHeight) {
                table.scrollTop(scrollTop + (rowBottom - scrollHeight));
            }
        };

        runningTasks.prototype.setFilterTypeAll = function () {
            this.filterType(null);
        };

        runningTasks.prototype.setFilterTypeSuggestionQuery = function () {
            this.filterType(runningTasks.TypeSuggestionQuery);
        };

        runningTasks.prototype.setFilterTypeBulkInsert = function () {
            this.filterType(runningTasks.TypeBulkInsert);
        };

        runningTasks.prototype.setFilterTypeIndexBulkOperation = function () {
            this.filterType(runningTasks.TypeIndexBulkOperation);
        };

        runningTasks.prototype.setFilterTypeIndexDeleteOperation = function () {
            this.filterType(runningTasks.TypeIndexDeleteOperation);
        };

        runningTasks.prototype.setFilterTypeImportDatabase = function () {
            this.filterType(runningTasks.TypeImportDatabase);
        };

        runningTasks.prototype.setFilterTypeRestoreDatabase = function () {
            this.filterType(runningTasks.TypeRestoreDatabase);
        };

        runningTasks.prototype.setFilterTypeRestoreFilesystem = function () {
            this.filterType(runningTasks.TypeRestoreFilesystem);
        };

        runningTasks.prototype.setFilterTypeCompactDatabase = function () {
            this.filterType(runningTasks.TypeCompactDatabase);
        };

        runningTasks.prototype.setFilterTypeCompactFilesystem = function () {
            this.filterType(runningTasks.TypeCompactFilesystem);
        };

        runningTasks.prototype.setFilterTypeIoTest = function () {
            this.filterType(runningTasks.TypeIoTest);
        };

        runningTasks.prototype.updateCurrentNowTime = function () {
            var _this = this;
            this.now(moment());
            this.updateNowTimeoutHandle = setTimeout(function () {
                return _this.updateCurrentNowTime();
            }, 60000);
        };

        runningTasks.prototype.sortBy = function (columnName, logs, event) {
            if (this.sortColumn() === columnName) {
                this.sortAsc(!this.sortAsc());
            } else {
                this.sortColumn(columnName);
                this.sortAsc(true);
            }
        };

        runningTasks.prototype.registerColumnResizing = function () {
            var _this = this;
            var resizingColumn = false;
            var startX = 0;
            var startingWidth = 0;
            var columnIndex = 0;

            $(document).on("mousedown.tasksTableColumnResize", ".column-handle", function (e) {
                columnIndex = parseInt($(e.currentTarget).attr("column"));
                startingWidth = _this.columnWidths[columnIndex]();
                startX = e.pageX;
                resizingColumn = true;
            });

            $(document).on("mouseup.tasksTableColumnResize", "", function (e) {
                resizingColumn = false;
            });

            $(document).on("mousemove.tasksTableColumnResize", "", function (e) {
                if (resizingColumn) {
                    var targetColumnSize = startingWidth + e.pageX - startX;
                    _this.columnWidths[columnIndex](targetColumnSize);

                    // Stop propagation of the event so the text selection doesn't fire up
                    if (e.stopPropagation)
                        e.stopPropagation();
                    if (e.preventDefault)
                        e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false;

                    return false;
                }
            });
        };

        runningTasks.prototype.unregisterColumnResizing = function () {
            $(document).off("mousedown.tasksTableColumnResize");
            $(document).off("mouseup.tasksTableColumnResize");
            $(document).off("mousemove.tasksTableColumnResize");
        };
        runningTasks.TypeSuggestionQuery = "SuggestionQuery";
        runningTasks.TypeBulkInsert = "BulkInsert";
        runningTasks.TypeIndexBulkOperation = "IndexBulkOperation";
        runningTasks.TypeIndexDeleteOperation = "IndexDeleteOperation";
        runningTasks.TypeImportDatabase = "ImportDatabase";
        runningTasks.TypeRestoreDatabase = "RestoreDatabase";
        runningTasks.TypeRestoreFilesystem = "RestoreFilesystem";
        runningTasks.TypeCompactDatabase = "CompactDatabase";
        runningTasks.TypeCompactFilesystem = "CompactFilesystem";
        runningTasks.TypeIoTest = "IoTest";
        return runningTasks;
    })(viewModelBase);

    
    return runningTasks;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/savePatch", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var savePatch = (function (_super) {
        __extends(savePatch, _super);
        function savePatch() {
            _super.apply(this, arguments);
            this.nextTask = $.Deferred();
            this.nextTaskStarted = false;
            this.patchName = ko.observable();
        }
        savePatch.prototype.cancel = function () {
            dialog.close(this);
        };

        savePatch.prototype.saveThePatch = function () {
            this.nextTaskStarted = true;
            this.nextTask.resolve(this.patchName());
            dialog.close(this);
        };

        savePatch.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.nextTaskStarted) {
                this.nextTask.reject();
            }
        };

        savePatch.prototype.onExit = function () {
            return this.nextTask.promise();
        };
        return savePatch;
    })(dialogViewModelBase);

    
    return savePatch;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/saveTransformerWithNewNameConfirm", ["require", "exports", "commands/saveTransformerCommand", "plugins/dialog", "viewmodels/dialogViewModelBase", "common/messagePublisher"], function(require, exports, saveTransformerCommand, dialog, dialogViewModelBase, messagePublisher) {
    var saveTransformerWithNewNameConfirm = (function (_super) {
        __extends(saveTransformerWithNewNameConfirm, _super);
        function saveTransformerWithNewNameConfirm(savedTransformer, db) {
            _super.call(this);
            this.savedTransformer = savedTransformer;
            this.db = db;
            this.saveTask = $.Deferred();

            if (!savedTransformer) {
                throw new Error("Transformer must not be null");
            }

            this.message = "If you wish to save a new transformer with this new name press OK, to cancel the save command press Cancel";
        }
        saveTransformerWithNewNameConfirm.prototype.saveTransformer = function () {
            var _this = this;
            new saveTransformerCommand(this.savedTransformer, this.db).execute().done(function (trans) {
                return _this.saveTask.resolve(trans);
            });
            dialog.close(this);
        };

        saveTransformerWithNewNameConfirm.prototype.cancel = function () {
            this.saveTask.reject();
            messagePublisher.reportInfo("Transformer Not Saved!");
            dialog.close(this);
        };
        return saveTransformerWithNewNameConfirm;
    })(dialogViewModelBase);

    
    return saveTransformerWithNewNameConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/scriptedIndexes", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", "common/aceEditorBindingHandler", "models/scriptedIndex", "commands/getScriptedIndexesCommand", "commands/saveScriptedIndexesCommand", "common/appUrl"], function(require, exports, viewModelBase, getDatabaseStatsCommand, aceEditorBindingHandler, scriptedIndex, getScriptedIndexesCommand, saveScriptedIndexesCommand, appUrl) {
    var scriptedIndexes = (function (_super) {
        __extends(scriptedIndexes, _super);
        function scriptedIndexes() {
            var _this = this;
            _super.call(this);
            this.allScriptedIndexes = ko.observableArray();
            this.activeScriptedIndexes = ko.observableArray().extend({ required: true });
            this.indexNames = ko.observableArray();
            this.isFirstLoad = ko.observable(true);

            aceEditorBindingHandler.install();
            this.inactiveIndexNames = ko.computed(function () {
                var activeIndexNames = _this.allScriptedIndexes().filter(function (index) {
                    return !index.isMarkedToDelete();
                }).map(function (index) {
                    return index.indexName();
                });
                return _this.indexNames().filter(function (indexName) {
                    return activeIndexNames.indexOf(indexName) < 0;
                });
            }, this);
            this.firstIndex = ko.computed(function () {
                return !_this.isFirstLoad() ? 0 : -1;
            }, this);
        }
        scriptedIndexes.prototype.canActivate = function (args) {
            var _this = this;
            var deferred = $.Deferred();
            var db = this.activeDatabase();
            if (db) {
                this.fetchAllIndexes(db).done(function () {
                    _this.fetchAllScriptedIndexes(db).done(function () {
                        return deferred.resolve({ can: true });
                    }).fail(function () {
                        return deferred.resolve({ redirect: appUrl.forDatabaseSettings(_this.activeDatabase()) });
                    });
                });
            }
            return deferred;
        };

        scriptedIndexes.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.dirtyFlag = new ko.DirtyFlag([this.activeScriptedIndexes]);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        scriptedIndexes.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            this.addScriptsLabelPopover();
            this.initializeCollapsedInvalidElements();

            $('pre').each(function (index, currentPreElement) {
                if (currentPreElement) {
                    var editor = ko.utils.domData.get(currentPreElement, "aceEditor");
                    var editorValue = editor.getSession().getValue();
                    _this.initializeAceValidity(currentPreElement, editorValue);
                }
            });
        };

        scriptedIndexes.prototype.createScriptedIndex = function (indexName) {
            var _this = this;
            if (this.isFirstLoad()) {
                this.isFirstLoad(false);
            }
            var results = this.allScriptedIndexes().filter(function (index) {
                return index.indexName() == indexName;
            });
            var activeScriptedIndex = results[0];
            if (activeScriptedIndex) {
                activeScriptedIndex.cancelDeletion();
            } else {
                activeScriptedIndex = scriptedIndex.emptyForIndex(indexName);
                this.allScriptedIndexes.unshift(activeScriptedIndex);
            }
            this.activeScriptedIndexes.unshift(activeScriptedIndex);

            var twoCreatedPreElements = $('.in pre');
            var editor = ko.utils.domData.get(twoCreatedPreElements[0], "aceEditor");
            editor.focus();

            twoCreatedPreElements.each(function (index, preElement) {
                _this.initializeAceValidity(preElement, "");
            });
            this.initializeCollapsedInvalidElements();
        };

        scriptedIndexes.prototype.removeScriptedIndex = function (scriptedIndexToDelete) {
            this.activeScriptedIndexes.remove(scriptedIndexToDelete);
            scriptedIndexToDelete.markToDelete();
        };

        scriptedIndexes.prototype.saveChanges = function () {
            var _this = this;
            var db = this.activeDatabase();
            new saveScriptedIndexesCommand(this.allScriptedIndexes(), db).execute().done(function (result) {
                _this.updateIndexes(result);
                _this.dirtyFlag().reset(); //Resync Changes
            });
        };

        scriptedIndexes.prototype.fetchAllIndexes = function (db) {
            var _this = this;
            return new getDatabaseStatsCommand(db).execute().done(function (results) {
                return _this.performAllIndexesResult(results);
            });
        };

        scriptedIndexes.prototype.performAllIndexesResult = function (results) {
            this.indexNames(results.Indexes.map(function (i) {
                return i.Name;
            }));
        };

        scriptedIndexes.prototype.fetchAllScriptedIndexes = function (db) {
            var _this = this;
            return new getScriptedIndexesCommand(db).execute().done(function (indexes) {
                _this.allScriptedIndexes.pushAll(indexes);
                _this.activeScriptedIndexes.pushAll(indexes);
            });
        };

        scriptedIndexes.prototype.addScriptsLabelPopover = function () {
            var indexScriptpopOverSettings = {
                html: true,
                trigger: 'hover',
                content: 'Index Scripts are written in JScript.<br/><br/>Example:</br><pre><span class="code-keyword">var</span> company = LoadDocument(<span class="code-keyword">this</span>.Company);<br/><span class="code-keyword">if</span>(company == null) <span class="code-keyword">return</span>;<br/>company.Orders = { Count: <span class="code-keyword">this</span>.Count, Total: <span class="code-keyword">this</span>.Total };<br/>PutDocument(<span class="code-keyword">this</span>.Company, company);</pre>',
                selector: '.index-script-label'
            };
            $('#accordion').popover(indexScriptpopOverSettings);
            var deleteScriptPopOverSettings = {
                html: true,
                trigger: 'hover',
                content: 'Index Scripts are written in JScript.<br/><br/>Example:</br><pre><span class="code-keyword">var</span> company = LoadDocument(<span class="code-keyword">this</span>.Company);<br/><span class="code-keyword">if</span> (company == null) <span class="code-keyword">return</span>;<br/><span class="code-keyword">delete</span> company.Orders;<br/>PutDocument(<span class="code-keyword">this</span>.Company, company);</pre>',
                selector: '.delete-script-label'
            };
            $('#scriptedIndexesForm').popover(deleteScriptPopOverSettings);
        };

        //when pressing the save button, show all elements which are collapsed and at least one of its' fields isn't valid.
        scriptedIndexes.prototype.initializeCollapsedInvalidElements = function () {
            $('textarea').bind('invalid', function (e) {
                var element = e.target;
                if (!element.validity.valid) {
                    var parentElement = $(this).parents('.panel-default');
                    parentElement.children('.collapse').collapse('show');
                }
            });
        };

        scriptedIndexes.prototype.initializeAceValidity = function (element, editorValue) {
            if (editorValue === "") {
                var textarea = $(element).find('textarea')[0];
                textarea.setCustomValidity("Please fill out this field.");
            }
        };

        scriptedIndexes.prototype.updateIndexes = function (serverIndexes) {
            for (var i = 0; i < this.allScriptedIndexes().length; i++) {
                var index = this.allScriptedIndexes()[i];
                var serverIndex = serverIndexes.first(function (k) {
                    return k.Key === index.getId();
                });
                if (serverIndex && !serverIndex.Deleted) {
                    index.__metadata.etag = serverIndex.Etag;
                    index.__metadata.lastModified = serverIndex.Metadata['Last-Modified'];
                } else if (serverIndex && serverIndex.Deleted) {
                    this.allScriptedIndexes().splice(i--, 1);
                }
            }
        };
        return scriptedIndexes;
    })(viewModelBase);

    
    return scriptedIndexes;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/selectColumns", ["require", "exports", "models/document", "plugins/dialog", "viewmodels/dialogViewModelBase", 'models/customColumnParams', 'commands/saveDocumentCommand', 'commands/deleteDocumentCommand', 'common/autoCompleterSupport', "common/messagePublisher"], function(require, exports, document, dialog, dialogViewModelBase, customColumnParams, saveDocumentCommand, deleteDocumentCommand, autoCompleterSupport, messagePublisher) {
    var selectColumns = (function (_super) {
        __extends(selectColumns, _super);
        function selectColumns(customColumns, customFunctions, context, database) {
            var _this = this;
            _super.call(this);
            this.customColumns = customColumns;
            this.customFunctions = customFunctions;
            this.context = context;
            this.database = database;
            this.nextTask = $.Deferred();
            this.nextTaskStarted = false;
            this.autoCompleteBase = ko.observableArray([]);
            this.autoCompleteResults = ko.observableArray([]);
            this.completionSearchSubscriptions = [];
            this.maxTableHeight = ko.observable();
            this.lineHeight = 51;
            this.generateCompletionBase();
            this.regenerateBindingSubscriptions();
            this.monitorForNewRows();
            this.autoCompleterSupport = new autoCompleterSupport(this.autoCompleteBase, this.autoCompleteResults);

            this.maxTableHeight(Math.floor($(window).height() * 0.43));

            $(window).resize(function () {
                _this.maxTableHeight(Math.floor($(window).height() * 0.43));
                _this.alignBoxVertically();
            });

            this.isScrollNeeded = ko.computed(function () {
                var currentColumnsCount = _this.customColumns.columns().length;
                var currentColumnHeight = currentColumnsCount * _this.lineHeight;

                if (currentColumnHeight > _this.maxTableHeight()) {
                    return true;
                }

                return false;
            });
        }
        selectColumns.prototype.generateCompletionBase = function () {
            var _this = this;
            this.autoCompleteBase([]);
            this.customColumns.columns().forEach(function (column) {
                return _this.autoCompleteBase().push(column.binding);
            });

            var moduleSource = "var exports = {}; " + this.customFunctions.functions + "; return exports;";
            var exports = new Function(moduleSource)();
            for (var funcName in exports) {
                this.autoCompleteBase().push(ko.observable(funcName + "()"));
            }
        };

        selectColumns.prototype.regenerateBindingSubscriptions = function () {
            var _this = this;
            this.completionSearchSubscriptions.forEach(function (subscription) {
                return subscription.dispose();
            });
            this.completionSearchSubscriptions = [];
            this.customColumns.columns().forEach(function (column, index) {
                return _this.completionSearchSubscriptions.push(column.binding.subscribe(_this.searchForCompletions.bind(_this)));
            });
        };

        selectColumns.prototype.monitorForNewRows = function () {
            var _this = this;
            this.customColumns.columns.subscribe(function (changes) {
                var somethingRemoved = false;
                changes.forEach(function (change) {
                    if (change.status === "added") {
                        _this.completionSearchSubscriptions.push(change.value.binding.subscribe(_this.searchForCompletions.bind(_this)));
                    } else if (change.status === "deleted") {
                        somethingRemoved = true;
                    }

                    if (somethingRemoved) {
                        _this.regenerateBindingSubscriptions();
                    }
                });
            }, null, "arrayChange");
        };

        selectColumns.prototype.attached = function () {
            _super.prototype.attached.call(this);
            this.form = $("#selectColumnsForm");
        };

        selectColumns.prototype.cancel = function () {
            dialog.close(this);
        };

        selectColumns.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.nextTaskStarted) {
                this.nextTask.reject();
            }
        };

        selectColumns.prototype.onExit = function () {
            return this.nextTask.promise();
        };

        selectColumns.prototype.changeCurrentColumns = function () {
            this.nextTaskStarted = true;
            this.nextTask.resolve(this.customColumns);
            dialog.close(this);
        };

        selectColumns.prototype.insertNewRow = function () {
            this.customColumns.columns.push(customColumnParams.empty());

            if (!this.isScrollNeeded()) {
                this.alignBoxVertically();
            }
        };

        selectColumns.prototype.deleteRow = function (row) {
            this.customColumns.columns.remove(row);

            if (!this.isScrollNeeded()) {
                this.alignBoxVertically();
            }
        };

        selectColumns.prototype.moveUp = function (row) {
            var i = this.customColumns.columns.indexOf(row);
            if (i >= 1) {
                var array = this.customColumns.columns();
                this.customColumns.columns.splice(i - 1, 2, array[i], array[i - 1]);
            }
        };

        selectColumns.prototype.moveDown = function (row) {
            var i = this.customColumns.columns.indexOf(row);
            if (i >= 0 && i < this.customColumns.columns().length - 1) {
                var array = this.customColumns.columns();
                this.customColumns.columns.splice(i, 2, array[i + 1], array[i]);
            }
        };

        selectColumns.prototype.customScheme = function (val) {
            if (this.customColumns.customMode() != val) {
                this.customColumns.customMode(val);
                this.alignBoxVertically();
            }
        };

        selectColumns.prototype.alignBoxVertically = function () {
            var messageBoxHeight = parseInt($(".messageBox").css('height'), 10);
            var windowHeight = $(window).height();
            var messageBoxMarginTop = parseInt($(".messageBox").css('margin-top'), 10);
            var newTopPercent = Math.floor(((windowHeight - messageBoxHeight) / 2 - messageBoxMarginTop) / windowHeight * 100);
            var newTopPercentString = newTopPercent.toString() + '%';
            $(".modalHost").css('top', newTopPercentString);
        };

        selectColumns.prototype.saveAsDefault = function () {
            var _this = this;
            if (this.form[0].checkValidity() === true) {
                if (this.customColumns.customMode()) {
                    var configurationDocument = new document(this.customColumns.toDto());
                    new saveDocumentCommand(this.context, configurationDocument, this.database, false).execute().done(function () {
                        return _this.onConfigSaved();
                    }).fail(function () {
                        return messagePublisher.reportError("Unable to save configuration!");
                    });
                } else {
                    new deleteDocumentCommand(this.context, this.database).execute().done(function () {
                        return _this.onConfigSaved();
                    }).fail(function () {
                        return messagePublisher.reportError("Unable to save configuration!");
                    });
                }
            } else {
                messagePublisher.reportWarning('Configuration contains errors. Not saving it.');
            }
        };

        selectColumns.prototype.onConfigSaved = function () {
            messagePublisher.reportSuccess('Configuration saved!');
        };

        selectColumns.prototype.generateBindingInputId = function (index) {
            return 'binding-' + index;
        };

        selectColumns.prototype.enterKeyPressed = function () {
            var focusedBindingInput = $("[id ^= 'binding-']:focus");
            if (focusedBindingInput.length) {
                // insert first completion
                if (this.autoCompleteResults().length > 0) {
                    this.completeTheWord(this.autoCompleteResults()[0]());
                }

                // prevent submitting the form and closing dialog when accepting completion
                return false;
            }
            return _super.prototype.enterKeyPressed.call(this);
        };

        selectColumns.prototype.consumeUpDownArrowKeys = function (columnParams, event) {
            if (event.keyCode === 38 || event.keyCode === 40) {
                event.preventDefault();
                return false;
            }
            return true;
        };

        selectColumns.prototype.searchForCompletions = function () {
            this.activeInput = $("[id ^= 'binding-']:focus");
            this.autoCompleterSupport.searchForCompletions(this.activeInput);
        };

        selectColumns.prototype.completeTheWord = function (selectedCompletion) {
            if (this.activeInput.length > 0) {
                this.autoCompleterSupport.completeTheWord(this.activeInput, selectedCompletion);
            }
        };
        return selectColumns;
    })(dialogViewModelBase);

    
    return selectColumns;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/settings", ["require", "exports", "plugins/router", "common/appUrl", "viewmodels/viewModelBase"], function(require, exports, durandalRouter, appUrl, viewModelBase) {
    var settings = (function (_super) {
        __extends(settings, _super);
        function settings() {
            var _this = this;
            _super.call(this);
            this.router = null;
            this.bundleMap = { quotas: "Quotas", replication: "Replication", sqlreplication: "SQL Replication", versioning: "Versioning", periodicexport: "Periodic Export", scriptedindexresults: "Scripted Index" };
            this.sqlSubBundles = ["sqlreplicationconnectionstringsmanagement", "editsqlreplication"];
            this.userDatabasePages = ko.observableArray(["Database Settings", "Custom Functions"]);

            this.appUrls = appUrl.forCurrentDatabase();

            var databaseSettingsRoute = { route: ['databases/settings', 'databases/settings/databaseSettings'], moduleId: 'viewmodels/databaseSettings', title: 'Database Settings', nav: true, hash: appUrl.forCurrentDatabase().databaseSettings };
            var quotasRoute = { route: 'databases/settings/quotas', moduleId: 'viewmodels/quotas', title: 'Quotas', nav: true, hash: appUrl.forCurrentDatabase().quotas };
            var replicationsRoute = { route: 'databases/settings/replication', moduleId: 'viewmodels/replications', title: 'Replication', nav: true, hash: appUrl.forCurrentDatabase().replications };
            var sqlReplicationsRoute = { route: 'databases/settings/sqlReplication', moduleId: 'viewmodels/sqlReplications', title: 'SQL Replication', nav: true, hash: appUrl.forCurrentDatabase().sqlReplications };
            var editsqlReplicationsRoute = { route: 'databases/settings/editSqlReplication(/:sqlReplicationName)', moduleId: 'viewmodels/editSqlReplication', title: 'Edit SQL Replication', nav: true, hash: appUrl.forCurrentDatabase().editSqlReplication };
            var sqlReplicationsConnectionsRoute = { route: 'databases/settings/sqlReplicationConnectionStringsManagement', moduleId: 'viewmodels/sqlReplicationConnectionStringsManagement', title: 'SQL Replication Connection Strings', nav: true, hash: appUrl.forCurrentDatabase().sqlReplicationsConnections };
            var versioningRoute = { route: 'databases/settings/versioning', moduleId: 'viewmodels/versioning', title: 'Versioning', nav: true, hash: appUrl.forCurrentDatabase().versioning };
            var periodicExportRoute = { route: 'databases/settings/periodicExport', moduleId: 'viewmodels/periodicExport', title: 'Periodic Export', nav: true, hash: appUrl.forCurrentDatabase().periodicExport };

            //var scriptedIndexesRoute = { route: 'databases/settings/scriptedIndex', moduleId: 'viewmodels/scriptedIndexes', title: 'Scripted Index', nav: true, hash: appUrl.forCurrentDatabase().scriptedIndexes };
            var customFunctionsEditorRoute = { route: 'databases/settings/customFunctionsEditor', moduleId: 'viewmodels/customFunctionsEditor', title: 'Custom Functions', nav: true, hash: appUrl.forCurrentDatabase().customFunctionsEditor };

            this.router = durandalRouter.createChildRouter().map([
                databaseSettingsRoute,
                quotasRoute,
                replicationsRoute,
                sqlReplicationsRoute,
                sqlReplicationsConnectionsRoute,
                editsqlReplicationsRoute,
                versioningRoute,
                periodicExportRoute,
                customFunctionsEditorRoute
            ]).buildNavigationModel();

            this.router.guardRoute = function (instance, instruction) {
                return _this.getValidRoute(instance, instruction);
            };

            appUrl.mapUnknownRoutes(this.router);

            this.activeSubViewTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                return activeRoute != null ? activeRoute.title : "";
            });
        }
        /**
        * Checks whether the route can be navigated to. Returns true if it can be navigated to, or a redirect URI if it can't be navigated to.
        * This is used for preventing a navigating to system-only pages when the current databagse is non-system, and vice-versa.
        */
        settings.prototype.getValidRoute = function (instance, instruction) {
            var db = this.activeDatabase();
            var pathArr = instruction.fragment.split('/');
            var bundelName = pathArr[pathArr.length - 1].toLowerCase();
            var isLegalBundelName = (this.bundleMap[bundelName] != undefined);
            var isBundleExists = this.userDatabasePages.indexOf(this.bundleMap[bundelName]) > -1;
            var isSqlSubBundle = this.sqlSubBundles.indexOf(bundelName) > -1;
            var isSqlBundleExists = this.userDatabasePages.indexOf("SQL Replication") > -1;

            if (db.isSystem) {
                return appUrl.forDocuments(null, db);
            } else if ((isLegalBundelName && isBundleExists == false) || (isSqlSubBundle && isSqlBundleExists == false)) {
                return appUrl.forCurrentDatabase().databaseSettings();
            }

            return true;
        };

        settings.prototype.isEditingSqlReplication = function (navigationalModel, curNavHash) {
            var activeRoute = navigationalModel.first(function (r) {
                return r.isActive();
            });
            if (!!activeRoute && !!curNavHash && !!activeRoute.hash) {
                return curNavHash.indexOf('databases/settings/sqlReplication') >= 0 && (activeRoute.route.indexOf('databases/settings/editSqlReplication') >= 0 || activeRoute.route.indexOf('databases/settings/sqlReplicationConnectionStringsManagement') >= 0);
            }
            return false;
        };

        settings.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.userDatabasePages(["Database Settings", "Custom Functions"]);
            var db = this.activeDatabase();
            var bundles = db.activeBundles();

            bundles.forEach(function (bundle) {
                var bundleName = _this.bundleMap[bundle.toLowerCase()];
                if (bundleName != undefined) {
                    _this.userDatabasePages.push(bundleName);
                }
            });
        };

        settings.prototype.routeIsVisible = function (route) {
            var bundleTitle = route.title;

            if (this.userDatabasePages.indexOf(bundleTitle) !== -1) {
                // Database Settings, Quotas, Replication, SQL Replication, Versioning, Periodic Export and Scripted Index are visible only when we're on a user database.
                return true;
            }

            return false;
        };
        return settings;
    })(viewModelBase);

    
    return settings;
});
/// <reference path="../../Scripts/typings/nprogress/nprogress.d.ts" />
/// <reference path="../../Scripts/typings/bootstrap/bootstrap.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/shell", ["require", "exports", "plugins/router", "durandal/app", "durandal/system", "viewmodels/viewModelBase", "durandal/viewLocator", "models/database", "models/filesystem/filesystem", "models/counter/counterStorage", "models/collection", "models/license", "common/appUrl", "common/uploadQueueHelper", "common/alertArgs", "common/alertType", "common/dynamicHeightBindingHandler", "common/autoCompleteBindingHandler", "common/changesApi", "common/oauthContext", "common/messagePublisher", "commands/getDatabaseStatsCommand", "commands/getDatabasesCommand", "commands/getServerBuildVersionCommand", "commands/getLatestServerBuildVersionCommand", "commands/getClientBuildVersionCommand", "commands/getLicenseStatusCommand", "commands/getDocumentsMetadataByIDPrefixCommand", "commands/getDocumentWithMetadataCommand", "commands/filesystem/getFileSystemsCommand", "commands/filesystem/getFileSystemStatsCommand", "commands/counter/getCounterStoragesCommand", "commands/getSystemDocumentCommand", "viewmodels/recentErrors", "viewmodels/enterApiKey", "viewmodels/latestBuildReminder", "common/extensions", "common/serverBuildReminder"], function(require, exports, router, app, sys, viewModelBase, viewLocator, database, filesystem, counterStorage, collection, license, appUrl, uploadQueueHelper, alertArgs, alertType, dynamicHeightBindingHandler, autoCompleteBindingHandler, changesApi, oauthContext, messagePublisher, getDatabaseStatsCommand, getDatabasesCommand, getServerBuildVersionCommand, getLatestServerBuildVersionCommand, getClientBuildVersionCommand, getLicenseStatusCommand, getDocumentsMetadataByIDPrefixCommand, getDocumentWithMetadataCommand, getFileSystemsCommand, getFileSystemStatsCommand, getCounterStoragesCommand, getSystemDocumentCommand, recentErrors, enterApiKey, latestBuildReminder, extensions, serverBuildReminder) {
    var shell = (function (_super) {
        __extends(shell, _super);
        function shell() {
            var _this = this;
            _super.call(this);
            this.router = router;
            this.canShowDatabaseNavbar = ko.computed(function () {
                return !!_this.lastActivatedResource() && _this.lastActivatedResource().type == database.type && (_this.appUrls.isAreaActive('databases')() || _this.appUrls.isAreaActive('resources')());
            });
            this.goToDocumentSearch = ko.observable();
            this.goToDocumentSearchResults = ko.observableArray();
            this.canShowFileSystemNavbar = ko.computed(function () {
                return !!_this.lastActivatedResource() && _this.lastActivatedResource().type == filesystem.type && (_this.appUrls.isAreaActive('filesystems')() || _this.appUrls.isAreaActive('resources')());
            });
            this.canShowCountersNavbar = ko.computed(function () {
                return !!_this.lastActivatedResource() && _this.lastActivatedResource().type == counterStorage.type && (_this.appUrls.isAreaActive('counterstorages')() || _this.appUrls.isAreaActive('resources')());
            });
            this.canShowResourcesNavbar = ko.computed(function () {
                var canDb = _this.canShowDatabaseNavbar();
                var canFs = _this.canShowFileSystemNavbar();
                var canCnt = _this.canShowCountersNavbar();
                return canDb || canFs || canCnt;
            });
            this.currentAlert = ko.observable();
            this.serverBuildVersion = ko.observable();
            this.clientBuildVersion = ko.observable();
            this.localLicenseStatus = license.licenseStatus;
            this.recordedErrors = ko.observableArray();
            this.newIndexUrl = appUrl.forCurrentDatabase().newIndex;
            this.newTransformerUrl = appUrl.forCurrentDatabase().newTransformer;
            this.currentRawUrl = ko.observable("");
            this.rawUrlIsVisible = ko.computed(function () {
                return _this.currentRawUrl().length > 0;
            });
            this.activeArea = ko.observable("Databases");
            this.hasReplicationSupport = ko.computed(function () {
                return !!_this.activeDatabase() && _this.activeDatabase().activeBundles.contains("Replication");
            });

            this.preLoadRecentErrorsView();
            extensions.install();
            oauthContext.enterApiKeyTask = this.setupApiKey();
            oauthContext.enterApiKeyTask.done(function () {
                return _this.globalChangesApi = new changesApi(appUrl.getSystemDatabase());
            });

            ko.postbox.subscribe("Alert", function (alert) {
                return _this.showAlert(alert);
            });
            ko.postbox.subscribe("LoadProgress", function (alertType) {
                return _this.dataLoadProgress(alertType);
            });
            ko.postbox.subscribe("ActivateDatabaseWithName", function (databaseName) {
                return _this.activateDatabaseWithName(databaseName);
            });
            ko.postbox.subscribe("SetRawJSONUrl", function (jsonUrl) {
                return _this.currentRawUrl(jsonUrl);
            });
            ko.postbox.subscribe("ActivateDatabase", function (db) {
                return _this.activateDatabase(db);
            });
            ko.postbox.subscribe("ActivateFilesystem", function (fs) {
                return _this.activateFileSystem(fs);
            });
            ko.postbox.subscribe("ActivateCounterStorage", function (cs) {
                return _this.activateCounterStorage(cs);
            });
            ko.postbox.subscribe("UploadFileStatusChanged", function (uploadStatus) {
                return _this.uploadStatusChanged(uploadStatus);
            });
            ko.postbox.subscribe("ChangesApiReconnected", function (rs) {
                return _this.reloadDataAfterReconnection(rs);
            });

            this.currentConnectedResource = appUrl.getSystemDatabase();
            this.appUrls = appUrl.forCurrentDatabase();

            this.goToDocumentSearch.throttle(250).subscribe(function (search) {
                return _this.fetchGoToDocSearchResults(search);
            });
            dynamicHeightBindingHandler.install();
            autoCompleteBindingHandler.install();

            this.isSystemConnected = ko.computed(function () {
                var activeDb = _this.activeDatabase();
                var systemDb = _this.systemDatabase;
                return (!!activeDb && !!systemDb) ? systemDb.name != activeDb.name : false;
            });

            this.isActiveDatabaseDisabled = ko.computed(function () {
                var activeDb = _this.activeDatabase();
                return !!activeDb ? activeDb.disabled() || !activeDb.isLicensed() : false;
            });

            this.isActiveFileSystemDisabled = ko.computed(function () {
                var activeFs = _this.activeFilesystem();
                return !!activeFs ? activeFs.disabled() || !activeFs.isLicensed() : false;
            });

            this.isCounterStorageDisabled = ko.computed(function () {
                var activeCs = _this.activeCounterStorage();
                return !!activeCs ? activeCs.disabled() : false;
            });

            this.isActiveResourceDisabled = ko.computed(function () {
                var activeRs = _this.lastActivatedResource();
                return !!activeRs ? activeRs.disabled() : false;
            });

            this.listedResources = ko.computed(function () {
                var currentResource = _this.lastActivatedResource();
                if (!!currentResource) {
                    return shell.resources().filter(function (rs) {
                        return (rs.type != currentResource.type || (rs.type == currentResource.type && rs.name != currentResource.name)) && rs.name != '<system>';
                    });
                }
                return shell.resources();
            });
        }
        // Override canActivate: we can always load this page, regardless of any system db prompt.
        shell.prototype.canActivate = function (args) {
            return true;
        };

        shell.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            oauthContext.enterApiKeyTask.done(function () {
                return _this.connectToRavenServer();
            });

            NProgress.set(.7);
            router.map([
                { route: "admin/settings*details", title: "Admin Settings", moduleId: "viewmodels/adminSettings", nav: true, hash: this.appUrls.adminSettings },
                { route: ["", "resources"], title: "Resources", moduleId: "viewmodels/resources", nav: true, hash: this.appUrls.resourcesManagement },
                { route: "databases/documents", title: "Documents", moduleId: "viewmodels/documents", nav: true, hash: this.appUrls.documents },
                { route: "databases/conflicts", title: "Conflicts", moduleId: "viewmodels/conflicts", nav: true, hash: this.appUrls.conflicts },
                { route: "databases/patch", title: "Patch", moduleId: "viewmodels/patch", nav: true, hash: this.appUrls.patch },
                { route: "databases/upgrade", title: "Upgrade in progress", moduleId: "viewmodels/upgrade", nav: false, hash: this.appUrls.upgrade },
                { route: "databases/indexes*details", title: "Indexes", moduleId: "viewmodels/indexesShell", nav: true, hash: this.appUrls.indexes },
                { route: "databases/transformers*details", title: "Transformers", moduleId: "viewmodels/transformersShell", nav: false, hash: this.appUrls.transformers },
                { route: "databases/query*details", title: "Query", moduleId: "viewmodels/queryShell", nav: true, hash: this.appUrls.query(null) },
                { route: "databases/tasks*details", title: "Tasks", moduleId: "viewmodels/tasks", nav: true, hash: this.appUrls.tasks },
                { route: "databases/settings*details", title: "Settings", moduleId: "viewmodels/settings", nav: true, hash: this.appUrls.settings },
                { route: "databases/status*details", title: "Status", moduleId: "viewmodels/status", nav: true, hash: this.appUrls.status },
                { route: "databases/edit", title: "Edit Document", moduleId: "viewmodels/editDocument", nav: false },
                { route: "filesystems/files", title: "Files", moduleId: "viewmodels/filesystem/filesystemFiles", nav: true, hash: this.appUrls.filesystemFiles },
                { route: "filesystems/search", title: "Search", moduleId: "viewmodels/filesystem/search", nav: true, hash: this.appUrls.filesystemSearch },
                { route: "filesystems/synchronization*details", title: "Synchronization", moduleId: "viewmodels/filesystem/synchronization", nav: true, hash: this.appUrls.filesystemSynchronization },
                { route: "filesystems/status*details", title: "Status", moduleId: "viewmodels/filesystem/status", nav: true, hash: this.appUrls.filesystemStatus },
                { route: "filesystems/configuration", title: "Configuration", moduleId: "viewmodels/filesystem/configuration", nav: true, hash: this.appUrls.filesystemConfiguration },
                { route: "filesystems/edit", title: "Edit File", moduleId: "viewmodels/filesystem/filesystemEditFile", nav: false },
                { route: ["", "counterstorages"], title: "Counter Storages", moduleId: "viewmodels/counter/counterStorages", nav: true, hash: this.appUrls.couterStorages },
                { route: "counterstorages/counters", title: "counters", moduleId: "viewmodels/counter/counterStoragecounters", nav: true, hash: this.appUrls.counterStorageCounters },
                { route: "counterstorages/replication", title: "replication", moduleId: "viewmodels/counter/counterStorageReplication", nav: true, hash: this.appUrls.counterStorageReplication },
                { route: "counterstorages/stats", title: "stats", moduleId: "viewmodels/counter/counterStorageStats", nav: true, hash: this.appUrls.counterStorageStats },
                { route: "counterstorages/configuration", title: "configuration", moduleId: "viewmodels/counter/counterStorageConfiguration", nav: true, hash: this.appUrls.counterStorageConfiguration }
            ]).buildNavigationModel();

            // Show progress whenever we navigate.
            router.isNavigating.subscribe(function (isNavigating) {
                return _this.showNavigationProgress(isNavigating);
            });
            router.on('router:navigation:cancelled', function () {
                return _this.showNavigationProgress(false);
            });

            appUrl.mapUnknownRoutes(router);

            window.addEventListener("beforeunload", function () {
                _this.cleanupNotifications();
                _this.globalChangesApi.dispose();
                shell.disconnectFromResourceChangesApi();
            });
        };

        // Called by Durandal when shell.html has been put into the DOM.
        // The view must be attached to the DOM before we can hook up keyboard shortcuts.
        shell.prototype.attached = function () {
            var _this = this;
            jwerty.key("ctrl+alt+n", function (e) {
                e.preventDefault();
                _this.newDocument();
            });

            jwerty.key("enter", function (e) {
                e.preventDefault();
                return false;
            }, this, "#goToDocInput");

            router.activeInstruction.subscribe(function (val) {
                if (!!val && val.config.route.split('/').length == 1)
                    _this.activeArea(val.config.title);
            });

            sys.error = function (e) {
                console.error(e);
                messagePublisher.reportError("Failed to load routed module!", e);
            };
        };

        shell.prototype.preLoadRecentErrorsView = function () {
            // preload this view as in case of failure server can't serve it.
            viewLocator.locateView("views/recentErrors");
        };

        shell.prototype.activateDatabase = function (db) {
            if (!!db) {
                this.updateDbChangesApi(db);
                shell.fetchDbStats(db);
                shell.databases().forEach(function (d) {
                    return d.isSelected(d.name === db.name);
                });
                shell.fileSystems().filter(function (f) {
                    return f.isSelected();
                }).forEach(function (f) {
                    return f.isSelected(false);
                });
                shell.counterStorages().filter(function (c) {
                    return c.isSelected();
                }).forEach(function (c) {
                    return c.isSelected(false);
                });
            }
        };

        shell.prototype.activateFileSystem = function (fs) {
            if (!!fs) {
                this.updateFsChangesApi(fs);
                shell.fetchFsStats(fs);
                shell.fileSystems().forEach(function (f) {
                    return f.isSelected(f.name === fs.name);
                });
                shell.databases().filter(function (d) {
                    return d.isSelected();
                }).forEach(function (d) {
                    return d.isSelected(false);
                });
                shell.counterStorages().filter(function (c) {
                    return c.isSelected();
                }).forEach(function (c) {
                    return c.isSelected(false);
                });
            }
        };

        shell.prototype.activateCounterStorage = function (cs) {
            if (!!cs) {
                this.updateCsChangesApi(cs);
                shell.fetchCsStats(cs);
                shell.counterStorages().forEach(function (c) {
                    return c.isSelected(c.name === cs.name);
                });
                shell.databases().filter(function (d) {
                    return d.isSelected();
                }).forEach(function (d) {
                    return d.isSelected(false);
                });
                shell.fileSystems().filter(function (f) {
                    return f.isSelected();
                }).forEach(function (f) {
                    return f.isSelected(false);
                });
            }
        };

        shell.prototype.setupApiKey = function () {
            // try to find api key as studio hash parameter
            var hash = window.location.hash;
            if (hash === "#has-api-key") {
                return this.showApiKeyDialog();
            } else if (hash.match(/#api-key/g)) {
                var match = /#api-key=(.*)/.exec(hash);
                if (match && match.length == 2) {
                    oauthContext.apiKey(match[1]);
                    window.location.hash = "#";
                }
            }
            return $.Deferred().resolve();
        };

        shell.prototype.showNavigationProgress = function (isNavigating) {
            if (isNavigating) {
                NProgress.start();

                var currentProgress = parseFloat(NProgress.status);
                var newProgress = isNaN(currentProgress) ? 0.5 : currentProgress + (currentProgress / 2);
                NProgress.set(newProgress);
            } else {
                NProgress.done();
                this.activeArea(appUrl.checkIsAreaActive("filesystems") ? "File Systems" : "Databases");
            }
        };

        shell.prototype.reloadDataAfterReconnection = function (rs) {
            var _this = this;
            if (rs.name === "<system>") {
                this.fetchStudioConfig();
                this.fetchServerBuildVersion();
                this.fetchClientBuildVersion();
                this.fetchLicenseStatus();

                var databasesLoadTask = new getDatabasesCommand().execute().done(function (results) {
                    return _this.updateResourceObservableArray(shell.databases, results, _this.activeDatabase);
                });
                var fileSystemsLoadTask = new getFileSystemsCommand().execute().done(function (results) {
                    return _this.updateResourceObservableArray(shell.fileSystems, results, _this.activeFilesystem);
                });
                var counterStoragesLoadTask = new getCounterStoragesCommand().execute().done(function (results) {
                    return _this.updateResourceObservableArray(shell.counterStorages, results, _this.activeCounterStorage);
                });

                $.when(databasesLoadTask, fileSystemsLoadTask, counterStoragesLoadTask).done(function () {
                    var connectedResource = _this.currentConnectedResource;
                    var resourceObservableArray = (connectedResource instanceof database) ? shell.databases : (connectedResource instanceof filesystem) ? shell.fileSystems : shell.counterStorages;
                    var activeResourceObservable = (connectedResource instanceof database) ? _this.activeDatabase : (connectedResource instanceof filesystem) ? _this.activeFilesystem : _this.activeCounterStorage;
                    _this.selectNewActiveResourceIfNeeded(resourceObservableArray, activeResourceObservable);
                });
            }
        };

        shell.prototype.updateResourceObservableArray = function (resourceObservableArray, recievedResourceArray, activeResourceObservable) {
            var deletedResources = [];

            resourceObservableArray().forEach(function (rs) {
                if (rs.name != '<system>') {
                    var existingResource = recievedResourceArray.first(function (recievedResource) {
                        return recievedResource.name == rs.name;
                    });
                    if (existingResource == null) {
                        deletedResources.push(rs);
                    }
                }
            });

            resourceObservableArray.removeAll(deletedResources);

            recievedResourceArray.forEach(function (recievedResource) {
                var foundResource = resourceObservableArray().first(function (rs) {
                    return rs.name == recievedResource.name;
                });
                if (foundResource == null) {
                    resourceObservableArray.push(recievedResource);
                } else {
                    foundResource.disabled(recievedResource.disabled());
                }
            });
        };

        shell.prototype.selectNewActiveResourceIfNeeded = function (resourceObservableArray, activeResourceObservable) {
            var activeResource = activeResourceObservable();
            var actualResourceObservableArray = resourceObservableArray().filter(function (rs) {
                return rs.name != '<system>';
            });

            if (!!activeResource && actualResourceObservableArray.contains(activeResource) == false) {
                if (actualResourceObservableArray.length > 0) {
                    resourceObservableArray().first().activate();
                } else {
                    shell.disconnectFromResourceChangesApi();
                    activeResourceObservable(null);
                }

                this.navigate(appUrl.forResources());
            }
        };

        shell.prototype.createNotifications = function () {
            var _this = this;
            return [
                this.globalChangesApi.watchDocsStartingWith("Raven/Databases/", function (e) {
                    return _this.changesApiFiredForResource(e, shell.databases, _this.activeDatabase, 0 /* Database */);
                }),
                this.globalChangesApi.watchDocsStartingWith("Raven/FileSystems/", function (e) {
                    return _this.changesApiFiredForResource(e, shell.fileSystems, _this.activeFilesystem, 1 /* Filesystem */);
                }),
                this.globalChangesApi.watchDocsStartingWith("Raven/Counters/", function (e) {
                    return _this.changesApiFiredForResource(e, shell.counterStorages, _this.activeCounterStorage, 2 /* CounterStorage */);
                }),
                this.globalChangesApi.watchDocsStartingWith("Raven/StudioConfig", function () {
                    return _this.fetchStudioConfig();
                }),
                this.globalChangesApi.watchDocsStartingWith("Raven/Alerts", function () {
                    return _this.fetchSystemDatabaseAlerts();
                })
            ];
        };

        shell.prototype.changesApiFiredForResource = function (e, resourceObservableArray, activeResourceObservable, resourceType) {
            var _this = this;
            if (!!e.Id && (e.Type === "Delete" || e.Type === "Put")) {
                var receivedResourceName = e.Id.slice(e.Id.lastIndexOf('/') + 1);

                if (e.Type === "Delete") {
                    var resourceToDelete = resourceObservableArray.first(function (rs) {
                        return rs.name == receivedResourceName;
                    });
                    if (!!resourceToDelete) {
                        resourceObservableArray.remove(resourceToDelete);

                        this.selectNewActiveResourceIfNeeded(resourceObservableArray, activeResourceObservable);
                    }
                } else {
                    var getSystemDocumentTask = new getSystemDocumentCommand(e.Id).execute();
                    getSystemDocumentTask.done(function (dto) {
                        var existingResource = resourceObservableArray.first(function (rs) {
                            return rs.name == receivedResourceName;
                        });

                        if (existingResource == null) {
                            existingResource = _this.createNewResource(resourceType, receivedResourceName, dto);
                            resourceObservableArray.unshift(existingResource);
                        } else {
                            if (existingResource.disabled() != dto.Disabled) {
                                existingResource.disabled(dto.Disabled);
                                if (dto.Disabled == false && _this.currentConnectedResource.name == receivedResourceName) {
                                    existingResource.activate();
                                }
                            }
                        }

                        if (resourceType == 0 /* Database */) {
                            var bundles = !!dto.Settings["Raven/ActiveBundles"] ? dto.Settings["Raven/ActiveBundles"].split(";") : [];
                            existingResource.activeBundles(bundles);

                            var indexingDisabled = _this.getIndexingDisbaledValue(dto.Settings["Raven/IndexingDisabled"]);
                            existingResource.indexingDisabled(indexingDisabled);

                            var isRejectclientsEnabled = _this.getIndexingDisbaledValue(dto.Settings["Raven/RejectClientsModeEnabled"]);
                            existingResource.rejectClientsMode(isRejectclientsEnabled);
                        }
                    });
                }
            }
        };

        shell.prototype.getIndexingDisbaledValue = function (indexingDisabledString) {
            if (indexingDisabledString === undefined || indexingDisabledString == null)
                return false;

            if (indexingDisabledString.toLowerCase() == 'true')
                return true;

            return false;
        };

        shell.prototype.createNewResource = function (resourceType, resourceName, dto) {
            var newResource = null;

            if (resourceType == 0 /* Database */) {
                newResource = new database(resourceName, dto.Disabled);
            } else if (resourceType == 1 /* Filesystem */) {
                newResource = new filesystem(resourceName, dto.Disabled);
            } else if (resourceType == 2 /* CounterStorage */) {
                newResource = new counterStorage(resourceName, dto.Disabled);
            }

            return newResource;
        };

        shell.prototype.selectResource = function (rs) {
            rs.activate();

            var locationHash = window.location.hash;
            var isMainPage = locationHash == appUrl.forResources();
            if (isMainPage == false) {
                var updatedUrl = appUrl.forCurrentPage(rs);
                this.navigate(updatedUrl);
            }
        };

        shell.prototype.databasesLoaded = function (databases) {
            this.systemDatabase = new database("<system>");
            this.systemDatabase.isSystem = true;
            this.systemDatabase.isVisible(false);
            shell.databases(databases.concat([this.systemDatabase]));
        };

        shell.fileSystemsLoaded = function (fileSystems) {
            shell.fileSystems(fileSystems);
        };

        shell.prototype.counterStoragesLoaded = function (results) {
            shell.counterStorages(results);
        };

        shell.prototype.launchDocEditor = function (docId, docsList) {
            var editDocUrl = appUrl.forEditDoc(docId, docsList ? docsList.collectionName : null, docsList ? docsList.currentItemIndex() : null, this.activeDatabase());
            this.navigate(editDocUrl);
        };

        shell.loadFileSystems = function () {
            return new getFileSystemsCommand().execute().done(function (results) {
                return shell.fileSystemsLoaded(results);
            });
        };

        shell.prototype.connectToRavenServer = function () {
            var _this = this;
            this.databasesLoadedTask = new getDatabasesCommand().execute().fail(function (result) {
                return _this.handleRavenConnectionFailure(result);
            }).done(function (results) {
                _this.databasesLoaded(results);
                _this.fetchStudioConfig();
                _this.fetchServerBuildVersion();
                _this.fetchClientBuildVersion();
                _this.fetchLicenseStatus();
                _this.fetchSystemDatabaseAlerts();
                router.activate();
            });

            var fileSystemsLoadedTask = shell.loadFileSystems();

            var counterStoragesLoadedTask = new getCounterStoragesCommand().execute().done(function (results) {
                return _this.counterStoragesLoaded(results);
            });

            $.when(this.databasesLoadedTask, fileSystemsLoadedTask, counterStoragesLoadedTask).always(function () {
                var locationHash = window.location.hash;
                if (appUrl.getFileSystem()) {
                    _this.activateResource(appUrl.getFileSystem(), shell.fileSystems, appUrl.forResources);
                } else if (appUrl.getCounterStorage()) {
                    _this.activateResource(appUrl.getCounterStorage(), shell.counterStorages, appUrl.forResources);
                } else if ((locationHash.indexOf(appUrl.forAdminSettings()) == -1)) {
                    _this.activateResource(appUrl.getDatabase(), shell.databases, appUrl.forResources);
                }
            });
        };

        shell.prototype.activateResource = function (resource, resourceObservableArray, url) {
            if (!!resource) {
                var newResource = resourceObservableArray.first(function (rs) {
                    return rs.name == resource.name;
                });
                if (newResource != null) {
                    newResource.activate();
                } else {
                    messagePublisher.reportError("The resource " + resource.name + " doesn't exist!");
                    this.navigate(url());
                }
            }
        };

        shell.prototype.navigateToResources = function () {
            shell.disconnectFromResourceChangesApi();

            if (!!this.activeDatabase()) {
                shell.databases().length == 1 ? this.activeDatabase(null) : this.activeDatabase().activate();
            } else if (!!this.activeFilesystem()) {
                this.activeFilesystem().activate();
            } else if (!!this.activeCounterStorage()) {
                this.activeCounterStorage().activate();
            }

            this.navigate(appUrl.forResources());
        };

        shell.prototype.fetchStudioConfig = function () {
            new getDocumentWithMetadataCommand("Raven/StudioConfig", this.systemDatabase).execute().done(function (doc) {
                appUrl.warnWhenUsingSystemDatabase = doc["WarnWhenUsingSystemDatabase"];
            });
        };

        shell.prototype.handleRavenConnectionFailure = function (result) {
            var _this = this;
            NProgress.done();
            sys.log("Unable to connect to Raven.", result);
            var tryAgain = 'Try again';
            var messageBoxResultPromise = this.confirmationMessage(':-(', "Couldn't connect to Raven. Details in the browser console.", [tryAgain]);
            messageBoxResultPromise.done(function () {
                NProgress.start();
                _this.connectToRavenServer();
            });
        };

        shell.prototype.dataLoadProgress = function (splashType) {
            if (!splashType) {
                NProgress.configure({ showSpinner: false });
                NProgress.done();
            } else if (splashType == 2 /* warning */) {
                NProgress.configure({ showSpinner: true });
                NProgress.start();
            } else {
                NProgress.done();
                NProgress.configure({ showSpinner: false });
                this.showAlert(new alertArgs(3 /* danger */, "Load time is too long", "The server might not be responding."));
            }
        };

        shell.prototype.showAlert = function (alert) {
            var _this = this;
            if (alert.displayInRecentErrors && (alert.type === 3 /* danger */ || alert.type === 2 /* warning */)) {
                this.recordedErrors.unshift(alert);
            }

            var currentAlert = this.currentAlert();
            if (currentAlert) {
                this.queuedAlert = alert;
                this.closeAlertAndShowNext(currentAlert);
            } else {
                this.currentAlert(alert);
                var fadeTime = 2000;

                /*            if (alert.title.indexOf("Changes stream was disconnected.") == 0) {
                fadeTime = 100000000;
                }*/
                if (alert.type === 3 /* danger */ || alert.type === 2 /* warning */) {
                    fadeTime = 5000; // If there are pending alerts, show the error alert for 4 seconds before fading out.
                }
                setTimeout(function () {
                    _this.closeAlertAndShowNext(alert);
                }, fadeTime);
            }
        };

        shell.prototype.closeAlertAndShowNext = function (alertToClose) {
            var _this = this;
            var alertElement = $('#' + alertToClose.id);
            if (alertElement.length === 0) {
                return;
            }

            // If the mouse is over the alert, keep it around.
            if (alertElement.is(":hover")) {
                setTimeout(function () {
                    return _this.closeAlertAndShowNext(alertToClose);
                }, 1000);
            } else {
                alertElement.alert('close');
            }
        };

        shell.prototype.onAlertHidden = function () {
            this.currentAlert(null);
            var nextAlert = this.queuedAlert;
            if (nextAlert) {
                this.queuedAlert = null;
                this.showAlert(nextAlert);
            }
        };

        shell.prototype.newDocument = function () {
            this.launchDocEditor(null);
        };

        shell.prototype.activateDatabaseWithName = function (databaseName) {
            var _this = this;
            if (this.databasesLoadedTask) {
                this.databasesLoadedTask.done(function () {
                    var matchingDatabase = shell.databases().first(function (db) {
                        return db.name == databaseName;
                    });
                    if (matchingDatabase && _this.activeDatabase() !== matchingDatabase) {
                        ko.postbox.publish("ActivateDatabase", matchingDatabase);
                    }
                });
            }
        };

        shell.prototype.updateDbChangesApi = function (db) {
            if (this.currentConnectedResource.name != db.name || this.currentConnectedResource.name == db.name && (db.disabled() || !db.isLicensed())) {
                // disconnect from the current database changes api and set the current connected database
                shell.disconnectFromResourceChangesApi();
                this.currentConnectedResource = db;
            }

            if (!db.disabled() && (shell.currentResourceChangesApi() == null || !this.appUrls.isAreaActive('databases')()) || db.name == "<system>" && this.currentConnectedResource.name == db.name) {
                // connect to changes api, if it's not disabled and the changes api isn't already connected
                shell.currentResourceChangesApi(new changesApi(db, 5000));
                shell.changeSubscriptionArray = [
                    shell.currentResourceChangesApi().watchAllDocs(function () {
                        return shell.fetchDbStats(db);
                    }),
                    shell.currentResourceChangesApi().watchAllIndexes(function () {
                        return shell.fetchDbStats(db);
                    }),
                    shell.currentResourceChangesApi().watchBulks(function () {
                        return shell.fetchDbStats(db);
                    })
                ];
            }
        };

        shell.prototype.updateFsChangesApi = function (fs) {
            if (this.currentConnectedResource.name != fs.name || this.currentConnectedResource.name == fs.name && (fs.disabled() || !fs.isLicensed())) {
                // disconnect from the current filesystem changes api and set the current connected filesystem
                shell.disconnectFromResourceChangesApi();
                this.currentConnectedResource = fs;
            }

            if (!fs.disabled() && fs.isLicensed() && (shell.currentResourceChangesApi() == null || !this.appUrls.isAreaActive('filesystems')())) {
                // connect to changes api, if it's not disabled and the changes api isn't already connected
                shell.currentResourceChangesApi(new changesApi(fs, 5000));
                shell.changeSubscriptionArray = [
                    shell.currentResourceChangesApi().watchFsFolders("", function () {
                        return shell.fetchFsStats(fs);
                    })
                ];
            }
        };

        shell.prototype.updateCsChangesApi = function (cs) {
            if (this.currentConnectedResource.name != cs.name || this.currentConnectedResource.name == cs.name && cs.disabled()) {
                // disconnect from the current filesystem changes api and set the current connected filesystem
                shell.disconnectFromResourceChangesApi();
                this.currentConnectedResource = cs;
            }

            if (!cs.disabled() && (shell.currentResourceChangesApi() == null || !this.appUrls.isAreaActive('counterstorages')())) {
                // connect to changes api, if it's not disabled and the changes api isn't already connected
                shell.currentResourceChangesApi(new changesApi(cs, 5000));
                shell.changeSubscriptionArray = [];
            }
        };

        shell.disconnectFromResourceChangesApi = function () {
            if (shell.currentResourceChangesApi()) {
                shell.changeSubscriptionArray.forEach(function (subscripbtion) {
                    return subscripbtion.off();
                });
                shell.changeSubscriptionArray = [];
                shell.currentResourceChangesApi().dispose();
                if (shell.currentResourceChangesApi().getResourceName() != '<system>') {
                    viewModelBase.isConfirmedUsingSystemDatabase = false;
                }
                shell.currentResourceChangesApi(null);
            }
        };

        shell.fetchDbStats = function (db) {
            if (db && !db.disabled() && db.isLicensed()) {
                new getDatabaseStatsCommand(db).execute().done(function (result) {
                    return db.statistics(result);
                });
            }
        };

        shell.fetchFsStats = function (fs) {
            if (fs && !fs.disabled() && fs.isLicensed()) {
                new getFileSystemStatsCommand(fs).execute().done(function (result) {
                    return fs.statistics(result);
                });
            }
        };

        shell.fetchCsStats = function (cs) {
            if (cs && !cs.disabled() && cs.isLicensed()) {
                //TODO: implememnt fetching of counter storage stats
                /*            new getCounterStorageStatsCommand(cs)
                .execute()
                .done(result=> cs.statistics(result));*/
            }
        };

        shell.prototype.getCurrentActiveFeatureName = function () {
            if (this.appUrls.isAreaActive('admin')()) {
                return 'Manage Your Server';
            } else {
                return 'Resources';
            }
        };

        shell.prototype.getCurrentActiveFeatureHref = function () {
            if (this.appUrls.isAreaActive('admin')()) {
                return this.appUrls.adminSettings();
            } else {
                return this.appUrls.resources();
            }
        };

        shell.prototype.goToDoc = function (doc) {
            this.goToDocumentSearch("");
            this.navigate(appUrl.forEditDoc(doc['@metadata']['@id'], null, null, this.activeDatabase()));
        };

        shell.prototype.getDocCssClass = function (doc) {
            return collection.getCollectionCssClass(doc['@metadata']['Raven-Entity-Name'], this.activeDatabase());
        };

        shell.prototype.fetchServerBuildVersion = function () {
            var _this = this;
            new getServerBuildVersionCommand().execute().done(function (serverBuildResult) {
                _this.serverBuildVersion(serverBuildResult);

                var currentBuildVersion = serverBuildResult.BuildVersion;
                if (serverBuildReminder.isReminderNeeded() && currentBuildVersion != 13) {
                    new getLatestServerBuildVersionCommand().execute().done(function (latestServerBuildResult) {
                        if (latestServerBuildResult.LatestBuild > currentBuildVersion) {
                            var latestBuildReminderViewModel = new latestBuildReminder(latestServerBuildResult);
                            app.showDialog(latestBuildReminderViewModel);
                        }
                    });
                }
            });
        };

        shell.prototype.fetchClientBuildVersion = function () {
            var _this = this;
            new getClientBuildVersionCommand().execute().done(function (result) {
                _this.clientBuildVersion(result);
            });
        };

        shell.prototype.fetchLicenseStatus = function () {
            new getLicenseStatusCommand().execute().done(function (result) {
                if (result.Status.contains("AGPL")) {
                    result.Status = "Development Only";
                }
                license.licenseStatus(result);
            });
        };

        shell.prototype.fetchGoToDocSearchResults = function (query) {
            var _this = this;
            if (query.length >= 2) {
                new getDocumentsMetadataByIDPrefixCommand(query, 10, this.activeDatabase()).execute().done(function (results) {
                    if (_this.goToDocumentSearch() === query) {
                        _this.goToDocumentSearchResults(results);
                    }
                });
            } else if (query.length == 0) {
                this.goToDocumentSearchResults.removeAll();
            }
        };

        shell.prototype.showApiKeyDialog = function () {
            var dialog = new enterApiKey();
            return app.showDialog(dialog).then(function () {
                return window.location.href = "#";
            });
        };

        shell.prototype.showErrorsDialog = function () {
            var errorDetails = new recentErrors(this.recordedErrors);
            app.showDialog(errorDetails);
        };

        shell.prototype.uploadStatusChanged = function (item) {
            var queue = uploadQueueHelper.parseUploadQueue(window.localStorage[uploadQueueHelper.localStorageUploadQueueKey + item.filesystem.name], item.filesystem);
            uploadQueueHelper.updateQueueStatus(item.id(), item.status(), queue);
            uploadQueueHelper.updateLocalStorage(queue, item.filesystem);
        };

        shell.prototype.showLicenseStatusDialog = function () {
            require(["viewmodels/licensingStatus"], function (licensingStatus) {
                var dialog = new licensingStatus(license.licenseStatus());
                app.showDialog(dialog);
            });
        };

        shell.prototype.fetchSystemDatabaseAlerts = function () {
            new getDocumentWithMetadataCommand("Raven/Alerts", this.systemDatabase).execute().done(function (doc) {
                //
            });
        };

        shell.prototype.iconName = function (rs) {
            if (rs.type === database.type) {
                return "fa fa-database";
            } else if (rs.type === filesystem.type) {
                return "fa fa-file-image-o";
            } else {
                return "fa fa-calculator";
            }
        };
        shell.databases = ko.observableArray();

        shell.fileSystems = ko.observableArray();

        shell.counterStorages = ko.observableArray();

        shell.resources = ko.computed(function () {
            var result = [].concat(shell.fileSystems(), shell.databases());
            return result.sort(function (a, b) {
                return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;
            });
        });

        shell.currentResourceChangesApi = ko.observable(null);
        return shell;
    })(viewModelBase);

    
    return shell;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/showDataDialog", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var showDataDialog = (function (_super) {
        __extends(showDataDialog, _super);
        function showDataDialog(title, inputData, elementToFocusOnDismissal) {
            _super.call(this, elementToFocusOnDismissal);
            this.title = title;
            this.inputData = inputData;
        }
        showDataDialog.prototype.canActivate = function (args) {
            return true;
        };

        showDataDialog.prototype.attached = function () {
            _super.prototype.attached.call(this);
            this.selectText();
        };

        showDataDialog.prototype.deactivate = function () {
            $("#inputData").unbind('keydown.jwerty');
        };

        showDataDialog.prototype.selectText = function () {
            $("#inputData").select();
        };

        showDataDialog.prototype.close = function () {
            dialog.close(this);
        };
        return showDataDialog;
    })(dialogViewModelBase);

    
    return showDataDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/sqlReplicationConnectionStringsManagement", ["require", "exports", "viewmodels/viewModelBase", "commands/getDocumentWithMetadataCommand", "models/sqlReplicationConnections", "models/predefinedSqlConnection", "models/document", "commands/saveDocumentCommand", 'common/appUrl', "viewmodels/editSqlReplication"], function(require, exports, viewModelBase, getDocumentWithMetadataCommand, sqlReplicationConnections, predefinedSqlConnection, document, saveDocumentCommand, appUrl, editSqlReplication) {
    var sqlReplicationConnectionStringsManagement = (function (_super) {
        __extends(sqlReplicationConnectionStringsManagement, _super);
        function sqlReplicationConnectionStringsManagement() {
            _super.call(this);
            this.htmlSelector = "#sqlReplicationConnectionsManagement";
            this.connections = ko.observable();
        }
        sqlReplicationConnectionStringsManagement.prototype.loadConnections = function () {
            var _this = this;
            return new getDocumentWithMetadataCommand("Raven/SqlReplication/Connections", this.activeDatabase()).execute().done(function (x) {
                var dto = x.toDto(true);
                _this.connections(new sqlReplicationConnections(dto));
                if (_this.connections().predefinedConnections().length > 0) {
                    _this.connections().predefinedConnections().forEach(function (x) {
                        return _this.subscribeToSqlReplicationConnectionName(x);
                    });
                }
            }).fail(function () {
                _this.connections(sqlReplicationConnections.empty());
            });
        };

        sqlReplicationConnectionStringsManagement.prototype.getActiveDatabase = function () {
            return this.getActiveDatabase();
        };

        sqlReplicationConnectionStringsManagement.prototype.canActivate = function () {
            var def = $.Deferred();
            this.loadConnections().always(function () {
                return def.resolve({ can: true });
            });
            return def;
        };

        sqlReplicationConnectionStringsManagement.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);
            this.dirtyFlag = new ko.DirtyFlag([this.connections]);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        sqlReplicationConnectionStringsManagement.prototype.save = function () {
            var _this = this;
            var newDoc = new document(this.connections().toDto());
            this.attachReservedMetaProperties("Raven/SqlReplication/Connections", newDoc.__metadata);

            var saveCommand = new saveDocumentCommand("Raven/SqlReplication/Connections", newDoc, this.activeDatabase());
            var saveTask = saveCommand.execute();
            saveTask.done(function () {
                return _this.dirtyFlag().reset();
            });
        };

        sqlReplicationConnectionStringsManagement.prototype.attachReservedMetaProperties = function (id, target) {
            target.etag = '';
            target.ravenEntityName = !target.ravenEntityName ? document.getEntityNameFromId(id) : target.ravenEntityName;
            target.id = id;
        };

        sqlReplicationConnectionStringsManagement.prototype.getSqlReplicationConnectionsUrl = function () {
            return appUrl.forSqlReplicationConnections(this.activeDatabase());
        };

        sqlReplicationConnectionStringsManagement.prototype.addSqlReplicationConnection = function () {
            var newPredefinedConnection;
            newPredefinedConnection = predefinedSqlConnection.empty();
            this.connections().predefinedConnections.splice(0, 0, newPredefinedConnection);
            this.subscribeToSqlReplicationConnectionName(newPredefinedConnection);
            newPredefinedConnection.name("New");
        };

        sqlReplicationConnectionStringsManagement.prototype.removeSqlReplicationConnection = function (connection) {
            this.connections().predefinedConnections.remove(connection);
        };

        sqlReplicationConnectionStringsManagement.prototype.subscribeToSqlReplicationConnectionName = function (con) {
            var _this = this;
            con.name.subscribe(function (previousName) {
                //Get the previous value of 'name' here before it's set to newValue
                var nameInputArray = $('input[name="name"]').each(function (index, inputField) {
                    inputField.setCustomValidity("");
                });
            }, this, "beforeChange");
            con.name.subscribe(function (newName) {
                var message = "";
                if (newName === "") {
                    message = "Please fill out this field.";
                } else if (_this.isSqlPredefinedConnectionNameExists(newName)) {
                    message = "SQL Replication Connection name already exists.";
                }
                $('input[name="name"]').filter(function () {
                    return this.value === newName;
                }).each(function (index, element) {
                    element.setCustomValidity(message);
                });
            });
        };

        sqlReplicationConnectionStringsManagement.prototype.isSqlPredefinedConnectionNameExists = function (connectionName) {
            if (this.connections().predefinedConnections().count(function (x) {
                return x.name() == connectionName;
            }) > 1) {
                return true;
            }
            return false;
        };

        sqlReplicationConnectionStringsManagement.prototype.providerChanged = function (obj, event) {
            if (event.originalEvent) {
                var curConnectionString = !!obj.connectionString() ? obj.connectionString().trim() : "";
                if (curConnectionString === "" || editSqlReplication.sqlProvidersConnectionStrings.first(function (x) {
                    return x.ConnectionString == curConnectionString;
                })) {
                    var matchingConnectionStringPair = editSqlReplication.sqlProvidersConnectionStrings.first(function (x) {
                        return x.ProviderName == event.originalEvent.srcElement.selectedOptions[0].value;
                    });
                    if (!!matchingConnectionStringPair) {
                        var matchingConnectionStringValue = matchingConnectionStringPair.ConnectionString;
                        obj.connectionString(matchingConnectionStringValue);
                    }
                }
            }
        };
        return sqlReplicationConnectionStringsManagement;
    })(viewModelBase);

    
    return sqlReplicationConnectionStringsManagement;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/sqlReplicationPerfStats", ["require", "exports", "viewmodels/viewModelBase", "common/generalUtils", "commands/getSqlReplicationPerfStatsCommand", "d3/d3", 'nvd3', "viewmodels/shell", "commands/getDatabaseSettingsCommand"], function(require, exports, viewModelBase, generalUtils, getSqlReplicationPerfStatsCommand, d3, nv, shell, getDatabaseSettingsCommand) {
    var sqlReplicationPerfStats = (function (_super) {
        __extends(sqlReplicationPerfStats, _super);
        function sqlReplicationPerfStats() {
            _super.apply(this, arguments);
            this.hasReplicationEnabled = ko.observable(false);
            this.jsonData = [];
            this.rawJsonData = [];
            this.hiddenNames = d3.set([]);
            this.replicationNames = [];
            this.refreshGraphObservable = ko.observable();
            this.margin = { top: 40, right: 20, bottom: 40, left: 40 };
            this.barWidth = 30;
            this.barPadding = 15;
            this.legendWidth = 0;
            this.isoFormat = d3.time.format.iso;
            this.xTickFormat = d3.time.format("%H:%M:%S");
            this.color = d3.scale.category20();
        }
        sqlReplicationPerfStats.prototype.fetchJsonData = function () {
            return new getSqlReplicationPerfStatsCommand(this.activeDatabase()).execute();
        };

        sqlReplicationPerfStats.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                _this.checkIfHasReplicationEnabled();
            });
            this.checkIfHasReplicationEnabled();
        };

        sqlReplicationPerfStats.prototype.checkIfHasReplicationEnabled = function () {
            var _this = this;
            new getDatabaseSettingsCommand(this.activeDatabase()).execute().done(function (document) {
                var documentSettings = document.Settings["Raven/ActiveBundles"];
                _this.hasReplicationEnabled(documentSettings.toLowerCase().indexOf("sqlreplication") !== -1);
            });
        };

        sqlReplicationPerfStats.prototype.attached = function () {
            var _this = this;
            $("#replicationStatsContainer").resize().on('DynamicHeightSet', function () {
                return _this.onWindowHeightChanged();
            });
            $("#replicationStatsContainer").scroll(function () {
                return _this.graphScrolled();
            });
            this.refresh();
            this.refreshSubscription = this.refreshGraphObservable.throttle(5000).subscribe(function (e) {
                return _this.refresh();
            });
        };

        sqlReplicationPerfStats.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchDocsStartingWith("Raven/SqlReplication/Status", function (e) {
                    return _this.processUpdate(e);
                })];
        };

        sqlReplicationPerfStats.prototype.processUpdate = function (e) {
            this.refreshGraphObservable(new Date().getTime());
        };

        sqlReplicationPerfStats.prototype.filterJsonData = function () {
            var _this = this;
            this.jsonData = [];

            this.rawJsonData.forEach(function (v) {
                var filteredStats = v.Stats.filter(function (s) {
                    return !_this.hiddenNames.has(s.ReplicationName);
                });
                if (filteredStats.length > 0) {
                    _this.jsonData.push({
                        'Started': v.Started,
                        'Stats': filteredStats
                    });
                }
            });
        };

        sqlReplicationPerfStats.prototype.refresh = function () {
            var _this = this;
            return this.fetchJsonData().done(function (data) {
                _this.rawJsonData = _this.mergeJsonData(_this.rawJsonData, data);
                _this.replicationNames = _this.findReplicationNames(_this.rawJsonData);
                _this.filterJsonData();
                _this.redrawGraph();
            });
        };

        sqlReplicationPerfStats.prototype.mergeJsonData = function (currentData, incomingData) {
            // create lookup map to avoid O(n^2)
            var dateLookup = d3.map();
            currentData.forEach(function (d, i) {
                dateLookup.set(d.Started, i);
            });

            incomingData.forEach(function (d) {
                if (dateLookup.has(d.Started)) {
                    var index = dateLookup.get(d.Started);
                    currentData[index] = d;
                } else {
                    currentData.push(d);
                }
            });
            return currentData;
        };

        sqlReplicationPerfStats.prototype.computeBarWidths = function (data) {
            var _this = this;
            var cumulative = 10;
            var result = data.map(function (perfData) {
                var prevValue = cumulative;
                perfData.sectionWidth = perfData.Stats.length * _this.barWidth + _this.barPadding * 2;
                cumulative += perfData.sectionWidth;
                return prevValue;
            });
            result.push(cumulative);
            return result;
        };

        sqlReplicationPerfStats.prototype.graphScrolled = function () {
            var leftScroll = $("#replicationStatsContainer").scrollLeft();
            var self = this;
            this.svg.select('.y.axis').attr("transform", "translate(" + leftScroll + ",0)");

            this.svg.select('#dataClip rect').attr('x', leftScroll);

            this.svg.select('.legend_bg_group').attr("transform", "translate(" + leftScroll + ",0)");

            this.svg.select('.controlls').selectAll(".legend").attr("transform", function (d, i) {
                return "translate(" + leftScroll + "," + i * 20 + ")";
            });
            nv.tooltip.cleanup();
        };

        sqlReplicationPerfStats.prototype.toggleGroupVisible = function (groupName) {
            nv.tooltip.cleanup();
            var alreadyHidden = this.hiddenNames.has(groupName);
            if (alreadyHidden) {
                this.hiddenNames.remove(groupName);
            } else {
                this.hiddenNames.add(groupName);
            }
            d3.select('.rect-legend-' + generalUtils.escape(groupName)).classed('legendHidden', !alreadyHidden);
            this.filterJsonData();
            this.redrawGraph();

            // we have to manually trigger on scroll even to fix firefox issue (missing event call)
            this.graphScrolled();
        };

        sqlReplicationPerfStats.prototype.redrawGraph = function () {
            var self = this;

            this.width = $("#replicationStatsContainer").width() - this.margin.left - this.margin.right;
            this.height = $("#replicationStatsContainer").height() - this.margin.top - this.margin.bottom - 20; // substract scroll width

            var cumulativeWidths = this.computeBarWidths(this.jsonData);

            this.x0Scale = d3.scale.ordinal().range(cumulativeWidths);
            this.yScale = d3.scale.linear().range([self.height, 0]);
            this.xAxis = d3.svg.axis().scale(self.x0Scale).orient("bottom").tickFormat(function (d) {
                return "";
            }).tickPadding(20);
            this.yAxis = d3.svg.axis().scale(self.yScale).orient("left").tickFormat(d3.format(".2s"));

            var totalHeight = self.height + self.margin.top + self.margin.bottom;

            // get higer value from total (visiable and not visible graph width) and viewbox width.
            var totalWidth = Math.max(cumulativeWidths[cumulativeWidths.length - 1], this.width) + this.margin.left + this.margin.right;

            $("#replicationStatsContainer").css('overflow-x', cumulativeWidths[cumulativeWidths.length - 1] > this.width ? 'scroll' : 'hidden');

            this.svg = d3.select("#replicationStatsGraph").attr("width", totalWidth).attr("height", totalHeight).style({ height: totalHeight + 'px' }).style({ width: totalWidth + 'px' }).attr("viewBox", "0 0 " + totalWidth + " " + totalHeight);

            this.svg.selectAll('.main_group').attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            this.svg.selectAll('defs').data([this.jsonData]).enter().append('defs').append('clipPath').attr('id', 'dataClip').append('rect').attr('x', 0).attr('y', 0).attr('width', 1200000).attr('height', 50000);

            var svgEnter = this.svg.selectAll(".main_group").data([this.jsonData]).enter();

            svgEnter.append('g').attr('class', 'main_group').attr('clip-path', "url(#dataClip)").attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            var controllsEnter = this.svg.selectAll(".controlls").data([this.jsonData]).enter().append("g").attr('class', 'controlls').attr("transform", "translate(" + self.margin.left + "," + self.margin.top + ")");

            controllsEnter.append("g").attr("class", "x axis");

            controllsEnter.append('g').attr('class', 'y axis');

            controllsEnter.append('g').attr('class', 'legend_bg_group').append('rect').attr('class', 'legend_bg').attr('x', self.width).attr('y', 0).attr('width', 0).attr('height', 0);

            controllsEnter.select('.y.axis').append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Batch size");

            this.x0Scale.domain(d3.nest().key(function (d) {
                return d.Started;
            }).sortKeys(d3.ascending).entries(self.jsonData).map(function (d) {
                return d.key;
            }));

            this.yScale.domain([0, d3.max(this.jsonData, function (d) {
                    return d3.max(d.Stats, function (dd) {
                        return dd.BatchSize;
                    });
                })]);

            this.svg.select(".x.axis").attr('clip-path', "url(#dataClip)").attr("transform", "translate(0," + self.height + ")").transition().call(self.xAxis);

            this.svg.select('.y.axis').transition().call(self.yAxis);

            var frame = this.svg.select('.main_group').selectAll(".frame").data(self.jsonData, function (d) {
                return d.Started;
            });

            frame.exit().remove();

            frame.transition().attr("transform", function (d) {
                return "translate(" + self.x0Scale(d.Started) + ",0)";
            });

            frame.select('.date_tick').transition().attr('x', function (d) {
                return d.sectionWidth / 2;
            }).attr('y', self.height + 16);

            var frameEnter = frame.enter().append("g").attr("class", "frame").attr("transform", function (d) {
                return "translate(" + self.x0Scale(d.Started) + ",0)";
            });

            frameEnter.append("text").attr('class', 'date_tick').attr('text-anchor', 'middle').attr('x', function (d) {
                return d.sectionWidth / 2;
            }).attr('y', self.height + 16).text(function (d) {
                return self.xTickFormat(self.isoFormat.parse(d.Started));
            });

            frameEnter.append("g").attr('class', 'inputs');

            var inputCounts = frame.select('.inputs').selectAll(".inputCounts").data(function (d) {
                return d.Stats;
            }, function (d) {
                return d.ReplicationName;
            });

            inputCounts.exit().remove();

            inputCounts.transition().attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth + self.barPadding;
            }).attr("y", function (d) {
                return self.yScale(d.BatchSize);
            }).attr("height", function (d) {
                return self.height - self.yScale(d.BatchSize);
            }).style("fill", function (d) {
                return self.color(d.ReplicationName);
            });

            inputCounts.enter().append("rect").attr("class", "inputCounts").attr("width", self.barWidth).attr("x", function (d, i) {
                return i * self.barWidth + self.barPadding;
            }).attr("y", function (d) {
                return self.height;
            }).attr("height", 0).style("fill", function (d) {
                return self.color(d.ReplicationName);
            }).on('click', function (d) {
                nv.tooltip.cleanup();
                var offset = $(this).offset();
                var leftScroll = $("#replicationStatsContainer").scrollLeft();
                var containerOffset = $("#replicationStatsContainer").offset();
                nv.tooltip.show([offset.left - containerOffset.left + leftScroll + self.barWidth, offset.top - containerOffset.top], self.getTooltip(d), 's', 5, document.getElementById("replicationStatsContainer"), "selectable-tooltip");
            }).transition().attr("height", function (d) {
                return self.height - self.yScale(d.BatchSize);
            }).attr("y", function (d) {
                return self.yScale(d.BatchSize);
            });

            this.legend = this.svg.select('.controlls').selectAll(".legend").data(this.replicationNames, function (d) {
                return d;
            });

            this.legend.selectAll("rect").transition().attr("x", this.width - 18);

            this.legend.selectAll("text").transition().attr("x", this.width - 24).text(function (d) {
                return d;
            });

            var legendEnter = this.legend.enter().append("g").attr("class", "legend").attr("transform", function (d, i) {
                return "translate(0," + i * 20 + ")";
            });

            legendEnter.append("rect").attr("x", this.width - 18).attr('class', function (d) {
                return 'rect-legend-' + generalUtils.escape(d);
            }).attr("width", 18).attr("height", 18).style("fill", self.color).style("stroke", self.color).on('click', function (d) {
                return self.toggleGroupVisible(d);
            });

            legendEnter.append("text").attr("x", this.width - 24).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function (d) {
                return d;
            });

            this.legendWidth = d3.max($(".legend text"), function (d) {
                return d.getBBox().width;
            }) + 40;

            this.svg.select('.legend_bg').attr('y', -6).attr('height', this.replicationNames.length * 20 + 10).attr('width', this.legendWidth).attr('x', this.width - this.legendWidth + 10);
        };

        sqlReplicationPerfStats.prototype.onWindowHeightChanged = function () {
            nv.tooltip.cleanup();
            this.width = $("#replicationStatsContainer").width();
            this.height = $("#replicationStatsContainer").height();
            this.redrawGraph();
        };

        sqlReplicationPerfStats.prototype.getTooltip = function (d) {
            return "<strong>Replication Name:</strong> <span>" + d.ReplicationName + "</span><br />" + "<strong>Duration milliseconds:</strong> <span>" + d.DurationMilliseconds + "</span><br />" + "<strong>Batch size:</strong> <span>" + d.BatchSize + "</span><br />";
        };

        sqlReplicationPerfStats.prototype.detached = function () {
            _super.prototype.detached.call(this);

            $("#visualizerContainer").off('DynamicHeightSet');
            nv.tooltip.cleanup();
            if (this.refreshSubscription != null) {
                this.refreshSubscription.dispose();
            }
        };

        sqlReplicationPerfStats.prototype.findReplicationNames = function (jsonData) {
            var statsInline = d3.merge(jsonData.map(function (d) {
                return d.Stats;
            }));
            var byKey = d3.nest().key(function (d) {
                return d.ReplicationName;
            }).sortKeys(d3.ascending).rollup(function (l) {
                return l.length;
            }).entries(statsInline);
            return byKey.map(function (d) {
                return d.key;
            });
        };
        return sqlReplicationPerfStats;
    })(viewModelBase);

    
    return sqlReplicationPerfStats;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/sqlReplications", ["require", "exports", "viewmodels/viewModelBase", "commands/getSqlReplicationsCommand", "common/appUrl", "viewmodels/sqlReplicationStatsDialog", "durandal/app", "models/document", "viewmodels/deleteDocuments", "common/messagePublisher", "commands/resetSqlReplicationCommand"], function(require, exports, viewModelBase, getSqlReplicationsCommand, appUrl, sqlReplicationStatsDialog, app, document, deleteDocuments, messagePublisher, resetSqlReplicationCommand) {
    var sqlReplications = (function (_super) {
        __extends(sqlReplications, _super);
        function sqlReplications() {
            _super.call(this);
            this.replications = ko.observableArray();
            this.itemNumber = function (index) {
                return index + 1;
            };
        }
        sqlReplications.prototype.showStats = function (replicationName) {
            var viewModel = new sqlReplicationStatsDialog(this.activeDatabase(), replicationName);
            app.showDialog(viewModel);
        };

        sqlReplications.prototype.getSqlReplicationUrl = function (sqlReplicationName) {
            return appUrl.forEditSqlReplication(sqlReplicationName, this.activeDatabase());
        };

        sqlReplications.prototype.getSqlReplicationConnectionStringsUrl = function (sqlReplicationName) {
            return appUrl.forSqlReplicationConnections(this.activeDatabase());
        };

        sqlReplications.prototype.canActivate = function (args) {
            var _this = this;
            var deferred = $.Deferred();

            var db = this.activeDatabase();
            if (db) {
                this.fetchSqlReplications(db).done(function () {
                    return deferred.resolve({ can: true });
                }).fail(function () {
                    return deferred.resolve({ redirect: appUrl.forSettings(_this.activeDatabase()) });
                });
            }
            return deferred;
        };

        sqlReplications.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
        };

        sqlReplications.prototype.compositionComplete = function () {
            _super.prototype.compositionComplete.call(this);
        };

        sqlReplications.prototype.removeSqlReplication = function (sr) {
            var _this = this;
            var newDoc = new document(sr);

            if (newDoc) {
                var viewModel = new deleteDocuments([newDoc]);
                viewModel.deletionTask.done(function () {
                    _this.fetchSqlReplications(_this.activeDatabase());
                });
                app.showDialog(viewModel, sqlReplications.sqlReplicationsSelector);
            }
        };

        sqlReplications.prototype.resetSqlReplication = function (replicationId) {
            var _this = this;
            app.showMessage("You are about to reset this SQL Replication, forcing replication of all collection items", "SQL Replication Reset", ["Cancel", "Reset"]).then(function (dialogResult) {
                if (dialogResult === "Reset") {
                    new resetSqlReplicationCommand(_this.activeDatabase(), replicationId).execute().done(function () {
                        return messagePublisher.reportSuccess("SQL replication " + replicationId + " was reset successfully!");
                    }).fail(function () {
                        return messagePublisher.reportError("SQL replication " + replicationId + " failed to reset!");
                    });
                }
            });
        };

        sqlReplications.prototype.fetchSqlReplications = function (db) {
            var _this = this;
            return new getSqlReplicationsCommand(db).execute().done(function (results) {
                _this.replications(results);
            });
        };
        sqlReplications.sqlReplicationsSelector = "#sqlReplications";
        return sqlReplications;
    })(viewModelBase);

    
    return sqlReplications;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/sqlReplicationSimulationDialog", ["require", "exports", "viewmodels/dialogViewModelBase", "commands/simulateSqlReplicationCommand", "commands/getDocumentsMetadataByIDPrefixCommand", "plugins/dialog", "models/collection", "models/sqlReplicationSimulatedCommand"], function(require, exports, dialogViewModelBase, simulateSqlReplicationCommand, getDocumentsMetadataByIDPrefixCommand, dialog, collection, sqlReplicationSimulatedCommand) {
    var sqlReplicationSimulationDialog = (function (_super) {
        __extends(sqlReplicationSimulationDialog, _super);
        function sqlReplicationSimulationDialog(db, simulatedSqlReplication) {
            var _this = this;
            _super.call(this);
            this.db = db;
            this.simulatedSqlReplication = simulatedSqlReplication;
            this.simulationResults = ko.observableArray([]);
            this.rolledBackTransactionPassed = ko.observable(false);
            this.documentAutocompletes = ko.observableArray();
            this.documentId = ko.observable();
            this.lastSearchedDocumentID = ko.observable("");
            this.rolledbackTransactionPerformed = ko.observable(false);
            this.lastAlert = ko.observable("");
            this.waitingToAnswer = ko.observable(false);
            this.documentId.throttle(250).subscribe(function (search) {
                return _this.fetchDocumentIdAutocompletes(search);
            });
            this.isAutoCompleteVisible = ko.computed(function () {
                return _this.lastSearchedDocumentID() !== _this.documentId() && (_this.documentAutocompletes().length > 1 || _this.documentAutocompletes().length == 1 && _this.documentId() !== _this.documentAutocompletes()[0]);
            });
        }
        sqlReplicationSimulationDialog.prototype.toggleCommandParamView = function (command) {
            command.showParamsValues.toggle();
        };

        sqlReplicationSimulationDialog.prototype.getResults = function (performRolledbackTransaction) {
            var _this = this;
            this.lastSearchedDocumentID(this.documentId());
            this.waitingToAnswer(true);
            new simulateSqlReplicationCommand(this.db, this.simulatedSqlReplication, this.documentId(), performRolledbackTransaction).execute().done(function (result) {
                if (!!result.Results) {
                    _this.simulationResults(result.Results.map(function (x) {
                        return x.Commands;
                    }).reduce(function (x, y) {
                        return x.concat(y);
                    }).map(function (x) {
                        return new sqlReplicationSimulatedCommand(!performRolledbackTransaction, x);
                    }));
                } else {
                    _this.simulationResults([]);
                }

                _this.rolledBackTransactionPassed(!result.LastAlert);

                if (!!result.LastAlert) {
                    _this.lastAlert(result.LastAlert.Exception);
                } else {
                    _this.lastAlert("");
                }
                _this.rolledbackTransactionPerformed(performRolledbackTransaction);
            }).fail(function () {
                _this.simulationResults([]);
                _this.rolledBackTransactionPassed(false);
            }).always(function () {
                return _this.waitingToAnswer(false);
            });
        };

        // overrid dialogViewModelBase shortcuts behavior
        sqlReplicationSimulationDialog.prototype.attached = function () {
            $("#docIdInput").focus();
            var that = this;
            jwerty.key("esc", function (e) {
                e.preventDefault();
                dialog.close(that);
            }, this, this.dialogSelectorName == "" ? dialogViewModelBase.dialogSelector : this.dialogSelectorName);
        };

        sqlReplicationSimulationDialog.prototype.fetchDocumentIdAutocompletes = function (query) {
            var _this = this;
            if (query.length >= 2) {
                new getDocumentsMetadataByIDPrefixCommand(query, 10, this.db).execute().done(function (results) {
                    if (_this.documentId() === query) {
                        if (results.length == 1 && _this.documentId() == results[0]) {
                            _this.documentAutocompletes.removeAll();
                            return;
                        }
                        _this.documentAutocompletes(results);
                    }
                });
            } else if (query.length == 0) {
                this.documentAutocompletes.removeAll();
            }
        };

        sqlReplicationSimulationDialog.prototype.documentIdSubmitted = function (submittedDocumentId) {
            this.documentId(submittedDocumentId);
            $('#docIdInput').focus();
            this.getResults(false);
        };

        sqlReplicationSimulationDialog.prototype.getDocCssClass = function (doc) {
            return collection.getCollectionCssClass(doc['@metadata']['Raven-Entity-Name'], this.db);
        };

        sqlReplicationSimulationDialog.prototype.keyPressedOnDocumentAutocomplete = function (doc, event) {
            if (event.keyCode == 13 && !!doc) {
                var docId = !!doc['@metadata'] ? doc['@metadata']['@id'] : null;
                if (!!docId) {
                    this.documentId(docId);
                }
            }
        };

        sqlReplicationSimulationDialog.prototype.cancel = function () {
            dialog.close(this);
        };
        return sqlReplicationSimulationDialog;
    })(dialogViewModelBase);

    
    return sqlReplicationSimulationDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/sqlReplicationStatsDialog", ["require", "exports", "viewmodels/dialogViewModelBase", "plugins/dialog", "commands/getSqlReplicationStatsCommand"], function(require, exports, dialogViewModelBase, dialog, getSqlReplicationStatsCommand) {
    var sqlReplicationStatsDialog = (function (_super) {
        __extends(sqlReplicationStatsDialog, _super);
        function sqlReplicationStatsDialog(activeDatabase, sqlReplicationName) {
            _super.call(this);
            this.activeDatabase = activeDatabase;
            this.sqlReplicationName = sqlReplicationName;
            this.repData = ko.observable();
        }
        sqlReplicationStatsDialog.prototype.activate = function (args) {
            this.fetchSqlReplicationStats();
        };

        sqlReplicationStatsDialog.prototype.cancel = function () {
            dialog.close(this);
        };

        sqlReplicationStatsDialog.prototype.fetchSqlReplicationStats = function () {
            var _this = this;
            return new getSqlReplicationStatsCommand(this.activeDatabase, this.sqlReplicationName).execute().done(function (result) {
                _this.repData(result);
            }).fail(function () {
                _this.repData(null);
            });
        };
        return sqlReplicationStatsDialog;
    })(dialogViewModelBase);

    
    return sqlReplicationStatsDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statistics", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", "viewmodels/shell", "common/optional"], function(require, exports, viewModelBase, getDatabaseStatsCommand, shell, optional) {
    var statistics = (function (_super) {
        __extends(statistics, _super);
        function statistics() {
            _super.apply(this, arguments);
            this.stats = ko.observable();
            this.indexes = ko.observableArray();
            this.refreshStatsObservable = ko.observable();
        }
        statistics.prototype.attached = function () {
            var _this = this;
            this.statsSubscription = this.refreshStatsObservable.throttle(3000).subscribe(function (e) {
                return _this.fetchStats();
            });
            this.fetchStats();
        };

        statistics.prototype.detached = function () {
            _super.prototype.detached.call(this);

            if (this.statsSubscription != null) {
                this.statsSubscription.dispose();
            }
        };

        statistics.prototype.fetchStats = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getDatabaseStatsCommand(db).execute().done(function (result) {
                    return _this.processStatsResults(result);
                });
            }

            return null;
        };

        statistics.prototype.createNotifications = function () {
            var _this = this;
            return [
                shell.currentResourceChangesApi().watchAllDocs(function (e) {
                    return _this.refreshStatsObservable(new Date().getTime());
                }),
                shell.currentResourceChangesApi().watchAllIndexes(function (e) {
                    return _this.refreshStatsObservable(new Date().getTime());
                })
            ];
        };

        statistics.prototype.processStatsResults = function (results) {
            var _this = this;
            // Attach some human readable dates to the indexes.
            // Attach string versions numbers with thousands separator to the indexes.
            results['CountOfDocumentsLocale'] = optional.val(results.CountOfDocuments).bind(function (v) {
                return v;
            }).bind(function (v) {
                return v.toLocaleString();
            });
            results['CurrentNumberOfItemsToIndexInSingleBatchLocale'] = optional.val(results.CurrentNumberOfItemsToIndexInSingleBatch).bind(function (v) {
                return v.toLocaleString();
            });
            results['CurrentNumberOfItemsToReduceInSingleBatchLocale'] = optional.val(results.CurrentNumberOfItemsToReduceInSingleBatch).bind(function (v) {
                return v.toLocaleString();
            });
            results.Indexes.forEach(function (i) {
                i['CreatedTimestampText'] = optional.val(i.CreatedTimestamp).bind(function (v) {
                    return v.toHumanizedDate();
                });
                i['LastIndexedTimestampText'] = optional.val(i.LastIndexedTimestamp).bind(function (v) {
                    return v.toHumanizedDate();
                });
                i['LastQueryTimestampText'] = optional.val(i.LastQueryTimestamp).bind(function (v) {
                    return v.toHumanizedDate();
                });
                i['LastIndexingTimeText'] = optional.val(i.LastIndexingTime).bind(function (v) {
                    return v.toHumanizedDate();
                });
                i['LastReducedTimestampText'] = optional.val(i.LastReducedTimestamp).bind(function (v) {
                    return v.toHumanizedDate();
                });

                i['DocsCountLocale'] = optional.val(i.DocsCount).bind(function (v) {
                    return v.toLocaleString();
                });
                i['ReduceIndexingAttemptsLocale'] = optional.val(i.ReduceIndexingAttempts).bind(function (v) {
                    return v.toLocaleString();
                });
                i['ReduceIndexingErrorsLocale'] = optional.val(i.ReduceIndexingErrors).bind(function (v) {
                    return v.toLocaleString();
                });
                i['ReduceIndexingSuccessesLocale'] = optional.val(i.ReduceIndexingSuccesses).bind(function (v) {
                    return v.toLocaleString();
                });
                i['IndexingAttemptsLocale'] = optional.val(i.IndexingAttempts).bind(function (v) {
                    return v.toLocaleString();
                });
                i['IndexingErrorsLocale'] = optional.val(i.IndexingErrors).bind(function (v) {
                    return v.toLocaleString();
                });
                i['IndexingSuccessesLocale'] = optional.val(i.IndexingSuccesses).bind(function (v) {
                    return v.toLocaleString();
                });
            });
            results.Indexes.sort(function (a, b) {
                return a.Name < b.Name ? -1 : a.Name > b.Name ? 1 : 0;
            });

            this.stats(results);

            var existingIndexes = this.indexes().map(function (i) {
                return i().Name;
            });
            var newIndexes = results.Indexes.map(function (i) {
                return i.Name;
            });

            var enteringIndexes = newIndexes.filter(function (i) {
                return !existingIndexes.contains(i);
            });
            var exitIndexes = existingIndexes.filter(function (i) {
                return !newIndexes.contains(i);
            });
            var sameIndexes = newIndexes.filter(function (i) {
                return existingIndexes.contains(i);
            });

            this.indexes.pushAll(enteringIndexes.map(function (idx) {
                return ko.observable(results.Indexes.first(function (item) {
                    return item.Name == idx;
                }));
            }));
            this.indexes.removeAll(exitIndexes.map(function (idx) {
                return _this.indexes().first(function (item) {
                    return item().Name == idx;
                });
            }));

            sameIndexes.forEach(function (idx) {
                var newData = results.Indexes.first(function (item) {
                    return item.Name == idx;
                });
                _this.indexes().first(function (item) {
                    return item().Name == idx;
                })(newData);
            });
        };
        return statistics;
    })(viewModelBase);

    
    return statistics;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/status", ["require", "exports", "plugins/router", "viewmodels/viewModelBase", "common/appUrl"], function(require, exports, durandalRouter, viewModelBase, appUrl) {
    var status = (function (_super) {
        __extends(status, _super);
        function status() {
            var _this = this;
            _super.call(this);

            this.appUrls = appUrl.forCurrentDatabase();

            this.router = durandalRouter.createChildRouter().map([
                { route: 'databases/status', moduleId: 'viewmodels/statistics', title: 'Stats', nav: true, hash: appUrl.forCurrentDatabase().status },
                { route: 'databases/status/indexStats', moduleId: 'viewmodels/indexStats', title: 'Index stats', nav: true, hash: appUrl.forCurrentDatabase().indexStats },
                { route: 'databases/status/metrics*details', moduleId: 'viewmodels/metrics', title: 'Metrics', nav: true, hash: appUrl.forCurrentDatabase().metrics },
                { route: 'databases/status/logs', moduleId: 'viewmodels/logs', title: 'Logs', nav: true, hash: appUrl.forCurrentDatabase().logs },
                { route: 'databases/status/runningTasks', moduleId: 'viewmodels/runningTasks', title: 'Running Tasks', nav: true, hash: appUrl.forCurrentDatabase().runningTasks },
                { route: 'databases/status/alerts', moduleId: 'viewmodels/alerts', title: 'Alerts', nav: true, hash: appUrl.forCurrentDatabase().alerts },
                { route: 'databases/status/indexErrors', moduleId: 'viewmodels/indexErrors', title: 'Index Errors', nav: true, hash: appUrl.forCurrentDatabase().indexErrors },
                { route: 'databases/status/replicationStats', moduleId: 'viewmodels/replicationStats', title: 'Replication Stats', nav: true, hash: appUrl.forCurrentDatabase().replicationStats },
                { route: 'databases/status/sqlReplicationPerfStats', moduleId: 'viewmodels/sqlReplicationPerfStats', title: 'Sql Replication stats', nav: true, hash: appUrl.forCurrentDatabase().sqlReplicationPerfStats },
                { route: 'databases/status/userInfo', moduleId: 'viewmodels/userInfo', title: 'User Info', nav: true, hash: appUrl.forCurrentDatabase().userInfo },
                { route: 'databases/status/visualizer', moduleId: 'viewmodels/visualizer', title: 'Map/Reduce Visualizer', nav: true, hash: appUrl.forCurrentDatabase().visualizer },
                { route: 'databases/status/debug*details', moduleId: 'viewmodels/statusDebug', title: 'Debug', nav: true, hash: appUrl.forCurrentDatabase().statusDebug },
                { route: 'databases/status/infoPackage', moduleId: 'viewmodels/infoPackage', title: 'Gather Debug Info', nav: true, hash: appUrl.forCurrentDatabase().infoPackage }
            ]).buildNavigationModel();

            status.statusRouter = this.router;

            appUrl.mapUnknownRoutes(this.router);

            this.currentRouteTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                return activeRoute != null ? activeRoute.title : "";
            });
        }
        return status;
    })(viewModelBase);

    
    return status;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebug", ["require", "exports", "viewmodels/viewModelBase", "common/appUrl", "viewmodels/status"], function(require, exports, viewModelBase, appUrl, status) {
    var statusDebug = (function (_super) {
        __extends(statusDebug, _super);
        function statusDebug() {
            var _this = this;
            _super.call(this);

            this.router = status.statusRouter.createChildRouter().map([
                { route: 'databases/status/debug', moduleId: 'viewmodels/statusDebugChanges', title: 'Changes', tooltip: "Shows information about active changes API subscriptions", nav: true, hash: appUrl.forCurrentDatabase().statusDebugChanges },
                { route: 'databases/status/debug/metrics', moduleId: 'viewmodels/statusDebugMetrics', title: 'Metrics', tooltip: "Shows database metrics", nav: true, hash: appUrl.forCurrentDatabase().statusDebugMetrics },
                { route: 'databases/status/debug/config', moduleId: 'viewmodels/statusDebugConfig', title: 'Config', tooltip: "Displays server configuration", nav: true, hash: appUrl.forCurrentDatabase().statusDebugConfig },
                { route: 'databases/status/debug/docrefs', moduleId: 'viewmodels/statusDebugDocrefs', title: 'Doc refs', tooltip: "Allows to find documents referenced by given document id", nav: true, hash: appUrl.forCurrentDatabase().statusDebugDocrefs },
                { route: 'databases/status/debug/currentlyIndexing', moduleId: 'viewmodels/statusDebugCurrentlyIndexing', title: 'Currently indexing', tooltip: "Displays currently performed indexing work", nav: true, hash: appUrl.forCurrentDatabase().statusDebugCurrentlyIndexing },
                { route: 'databases/status/debug/queries', moduleId: 'viewmodels/statusDebugQueries', title: 'Queries', tooltip: "Displays currently running queries", nav: true, hash: appUrl.forCurrentDatabase().statusDebugQueries },
                { route: 'databases/status/debug/tasks', moduleId: 'viewmodels/statusDebugTasks', title: 'Tasks', tooltip: "Displays currently running index tasks", nav: true, hash: appUrl.forCurrentDatabase().statusDebugTasks },
                { route: 'databases/status/debug/routes', moduleId: 'viewmodels/statusDebugRoutes', title: 'Routes', tooltip: "Displays all available routes", nav: true, hash: appUrl.forCurrentDatabase().statusDebugRoutes },
                { route: 'databases/status/debug/requestTracing', moduleId: 'viewmodels/statusDebugRequestTracing', title: 'Request tracing', tooltip: "Displays recent requests with their statuses and execution times", nav: true, hash: appUrl.forCurrentDatabase().statusDebugRequestTracing },
                { route: 'databases/status/debug/sqlReplication', moduleId: 'viewmodels/statusDebugSqlReplication', title: 'Sql Replication', tooltip: "Shows information about sql replication", nav: true, hash: appUrl.forCurrentDatabase().statusDebugSqlReplication },
                { route: 'databases/status/debug/indexFields', moduleId: 'viewmodels/statusDebugIndexFields', title: 'Index fields', tooltip: "Shows names of indexed fields based on entered index definition", nav: true, hash: appUrl.forCurrentDatabase().statusDebugIndexFields },
                { route: 'databases/status/debug/slowDocCounts', moduleId: 'viewmodels/statusDebugSlowDocCounts', title: 'Doc counts', tooltip: "Shows document counts (VERY SLOW)", nav: true, hash: appUrl.forCurrentDatabase().statusDebugSlowDocCounts },
                { route: 'databases/status/debug/identities', moduleId: 'viewmodels/statusDebugIdentities', title: 'Identities', tooltip: "Shows identities values for collections", nav: true, hash: appUrl.forCurrentDatabase().statusDebugIdentities },
                { route: 'databases/status/debug/websocket', moduleId: 'viewmodels/statusDebugWebSocket', title: 'Web Socket', tooltip: "Allows to debug websockets connection", nav: true, hash: appUrl.forCurrentDatabase().statusDebugWebSocket }
            ]).buildNavigationModel();

            appUrl.mapUnknownRoutes(this.router);

            this.currentRouteTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                return activeRoute != null ? activeRoute.title : "";
            });
        }
        return statusDebug;
    })(viewModelBase);

    
    return statusDebug;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugChanges", ["require", "exports", "commands/getStatusDebugChangesCommand", "viewmodels/viewModelBase"], function(require, exports, getStatusDebugChangesCommand, viewModelBase) {
    var statusDebugChanges = (function (_super) {
        __extends(statusDebugChanges, _super);
        function statusDebugChanges() {
            _super.apply(this, arguments);
            this.data = ko.observable();
        }
        statusDebugChanges.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchStatusDebugChanges();
            });
            return this.fetchStatusDebugChanges();
        };

        statusDebugChanges.prototype.fetchStatusDebugChanges = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugChangesCommand(db).execute().done(function (results) {
                    return _this.data(results);
                });
            }

            return null;
        };
        return statusDebugChanges;
    })(viewModelBase);

    
    return statusDebugChanges;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugConfig", ["require", "exports", "commands/getStatusDebugConfigCommand", "viewmodels/viewModelBase", "common/aceEditorBindingHandler"], function(require, exports, getStatusDebugConfigCommand, viewModelBase, aceEditorBindingHandler) {
    var statusDebugConfig = (function (_super) {
        __extends(statusDebugConfig, _super);
        function statusDebugConfig() {
            _super.call(this);
            this.data = ko.observable();

            aceEditorBindingHandler.install();
        }
        statusDebugConfig.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            var editorElement = $("#statusDebugConfigEditor");
            if (editorElement.length > 0) {
                this.editor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }

            $("#statusDebugConfigEditor").on('DynamicHeightSet', function () {
                return _this.editor.resize();
            });
        };

        statusDebugConfig.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#statusDebugConfigEditor").off('DynamicHeightSet');
        };

        statusDebugConfig.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchStatusDebugConfig();
            });
            return this.fetchStatusDebugConfig();
        };

        statusDebugConfig.prototype.fetchStatusDebugConfig = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugConfigCommand(db).execute().done(function (results) {
                    return _this.data(JSON.stringify(results, null, 4));
                });
            }

            return null;
        };
        return statusDebugConfig;
    })(viewModelBase);

    
    return statusDebugConfig;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugCurrentlyIndexing", ["require", "exports", "commands/getStatusDebugCurrentlyIndexingCommand", "viewmodels/viewModelBase"], function(require, exports, getStatusDebugCurrentlyIndexingCommand, viewModelBase) {
    var statusDebugCurrentlyIndexing = (function (_super) {
        __extends(statusDebugCurrentlyIndexing, _super);
        function statusDebugCurrentlyIndexing() {
            _super.apply(this, arguments);
            this.data = ko.observable();
            this.autoRefresh = ko.observable(true);
        }
        statusDebugCurrentlyIndexing.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchCurrentlyIndexing();
            });
            return this.fetchCurrentlyIndexing();
        };

        statusDebugCurrentlyIndexing.prototype.modelPolling = function () {
            if (this.autoRefresh()) {
                this.fetchCurrentlyIndexing();
            }
        };

        statusDebugCurrentlyIndexing.prototype.toggleAutoRefresh = function () {
            this.autoRefresh(!this.autoRefresh());
            $("#refresh-btn").blur();
        };

        statusDebugCurrentlyIndexing.prototype.fetchCurrentlyIndexing = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugCurrentlyIndexingCommand(db).execute().done(function (results) {
                    return _this.data(results);
                });
            }

            return null;
        };
        return statusDebugCurrentlyIndexing;
    })(viewModelBase);

    
    return statusDebugCurrentlyIndexing;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugDocrefs", ["require", "exports", "viewmodels/viewModelBase", "models/customColumns", 'models/customColumnParams', "common/pagedList", "commands/getDocRefsCommand"], function(require, exports, viewModelBase, customColumns, customColumnParams, pagedList, getDocRefsCommand) {
    var statusDebugDocrefs = (function (_super) {
        __extends(statusDebugDocrefs, _super);
        function statusDebugDocrefs() {
            _super.apply(this, arguments);
            var _this = this;
            this.currentDocRefs = ko.observable();
            this.columns = ko.observable(customColumns.empty());
            this.docId = ko.observable("");
            this.canSearch = ko.computed(function () {
                return _this.docId().length > 0;
            });
            this.resultsCount = ko.computed(function () {
                if (!_this.currentDocRefs())
                    return -1;

                return _this.currentDocRefs().totalResultCount();
            });
        }
        statusDebugDocrefs.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            this.columns().columns([
                new customColumnParams({ Header: "Id", Binding: "Id", DefaultWidth: 300 })
            ]);
        };

        statusDebugDocrefs.prototype.fetchDocRefs = function () {
            this.currentDocRefs(this.createPagedList(this.activeDatabase()));
        };

        statusDebugDocrefs.prototype.createPagedList = function (db) {
            var _this = this;
            var fetcher = function (skip, take) {
                return new getDocRefsCommand(db, _this.docId(), skip, take).execute();
            };

            return new pagedList(fetcher);
        };
        return statusDebugDocrefs;
    })(viewModelBase);

    
    return statusDebugDocrefs;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugIdentities", ["require", "exports", "viewmodels/viewModelBase", "common/pagedList", "models/customColumns", 'models/customColumnParams', "commands/getIdentitiesCommand"], function(require, exports, viewModelBase, pagedList, customColumns, customColumnParams, getIdentitiesCommand) {
    var statusDebugIdentities = (function (_super) {
        __extends(statusDebugIdentities, _super);
        function statusDebugIdentities() {
            _super.apply(this, arguments);
            var _this = this;
            this.currentIdentities = ko.observable();
            this.columns = ko.observable(customColumns.empty());
            this.resultsCount = ko.computed(function () {
                if (!_this.currentIdentities())
                    return -1;

                return _this.currentIdentities().totalResultCount();
            });
        }
        statusDebugIdentities.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            this.columns().columns([
                new customColumnParams({ Header: "Key", Binding: "Key", DefaultWidth: 300 }),
                new customColumnParams({ Header: "Value", Binding: "Value", DefaultWidth: 300 })
            ]);
            this.fetchIdentities();
        };

        statusDebugIdentities.prototype.fetchIdentities = function () {
            this.currentIdentities(this.createPagedList(this.activeDatabase()));
        };

        statusDebugIdentities.prototype.createPagedList = function (db) {
            var fetcher = function (skip, take) {
                return new getIdentitiesCommand(db, skip, take).execute();
            };
            return new pagedList(fetcher);
        };
        return statusDebugIdentities;
    })(viewModelBase);

    
    return statusDebugIdentities;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugIndexFields", ["require", "exports", "commands/getStatusDebugIndexFieldsCommand", "viewmodels/viewModelBase", "common/aceEditorBindingHandler"], function(require, exports, getStatusDebugIndexFieldsCommand, viewModelBase, aceEditorBindingHandler) {
    var statusDebugIndexFields = (function (_super) {
        __extends(statusDebugIndexFields, _super);
        function statusDebugIndexFields() {
            _super.call(this);
            this.result = ko.observable();
            this.indexStr = ko.observable("");
            aceEditorBindingHandler.install();
        }
        statusDebugIndexFields.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            var editorElement = $("#statusDebugIndexFieldsEditor");
            if (editorElement.length > 0) {
                this.editor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }

            $("#statusDebugIndexFieldsEditor").on('DynamicHeightSet', function () {
                return _this.editor.resize();
            });
        };

        statusDebugIndexFields.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#statusDebugIndexFieldsEditor").off('DynamicHeightSet');
        };

        statusDebugIndexFields.prototype.attached = function () {
            $("#indexDefLabel").popover({
                html: true,
                trigger: 'hover',
                container: '.form-horizontal',
                content: 'Enter index definition and click <kbd>Show index fields</kbd>.<br /> Example:<pre><span class="code-keyword">from</span> doc <span class="code-keyword">in</span> docs <span class="code-keyword">select new</span> { Id = doc.Id }</pre>'
            });
        };

        statusDebugIndexFields.prototype.fetchIndexFields = function () {
            var _this = this;
            this.result(null);
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugIndexFieldsCommand(db, this.indexStr()).execute().done(function (results) {
                    return _this.result(results);
                });
                //TODO: how do we handle failure?
            }

            return null;
        };
        return statusDebugIndexFields;
    })(viewModelBase);

    
    return statusDebugIndexFields;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugMetrics", ["require", "exports", "commands/getStatusDebugMetricsCommand", "viewmodels/viewModelBase"], function(require, exports, getStatusDebugMetricsCommand, viewModelBase) {
    var statusDebugMetrics = (function (_super) {
        __extends(statusDebugMetrics, _super);
        function statusDebugMetrics() {
            _super.apply(this, arguments);
            var _this = this;
            this.data = ko.observable();
            this.requestPercentiles = ko.computed(function () {
                if (_this.data()) {
                    return _this.extractPercentiles(_this.data().RequestsDuration.Percentiles);
                }
                return null;
            });
            this.staleIndexMapsPercentiles = ko.computed(function () {
                if (_this.data()) {
                    return _this.extractPercentiles(_this.data().StaleIndexMaps.Percentiles);
                }
                return null;
            });
            this.staleIndexReducesPercentiles = ko.computed(function () {
                if (_this.data()) {
                    return _this.extractPercentiles(_this.data().StaleIndexReduces.Percentiles);
                }
                return null;
            });
            this.gauges = ko.computed(function () {
                if (_this.data()) {
                    return $.map(_this.data().Gauges, function (v, k) {
                        return {
                            key: k,
                            values: $.map(v, function (innerValue, innerKey) {
                                return {
                                    key: innerKey,
                                    value: innerValue
                                };
                            })
                        };
                    });
                }
                return null;
            });
            this.replicationDestinations = ko.computed(function () {
                if (_this.data()) {
                    // sample destinations using ReplicationDurationHistogram
                    return $.map(_this.data().ReplicationBatchSizeHistogram, function (v, key) {
                        return key;
                    });
                }
                return null;
            });
        }
        statusDebugMetrics.prototype.extractPercentiles = function (input) {
            var result = [];
            for (var prop in input) {
                var v = input[prop];
                result.push({ "key": prop, "value": v });
            }
            return result;
        };

        statusDebugMetrics.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchStatusDebugMetrics();
            });
            return this.fetchStatusDebugMetrics();
        };

        statusDebugMetrics.prototype.fetchStatusDebugMetrics = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugMetricsCommand(db).execute().done(function (results) {
                    return _this.data(results);
                });
            }

            return null;
        };
        return statusDebugMetrics;
    })(viewModelBase);

    
    return statusDebugMetrics;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugQueries", ["require", "exports", "commands/getStatusDebugQueriesCommand", "commands/getKillQueryCommand", "viewmodels/viewModelBase", "common/aceEditorBindingHandler", "models/statusDebugQueriesGroup", "models/statusDebugQueriesQuery"], function(require, exports, getStatusDebugQueriesCommand, getKillQueryCommand, viewModelBase, aceEditorBindingHandler, statusDebugQueriesGroup, statusDebugQueriesQuery) {
    var statusDebugQueries = (function (_super) {
        __extends(statusDebugQueries, _super);
        function statusDebugQueries() {
            _super.call(this);
            this.data = ko.observableArray();
            this.autoRefresh = ko.observable(true);

            aceEditorBindingHandler.install();
        }
        statusDebugQueries.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchCurrentQueries();
            });
            return this.fetchCurrentQueries();
        };

        statusDebugQueries.prototype.modelPolling = function () {
            if (this.autoRefresh()) {
                this.fetchCurrentQueries();
            }
        };

        statusDebugQueries.prototype.toggleAutoRefresh = function () {
            this.autoRefresh(!this.autoRefresh());
            $("#refresh-btn").blur();
        };

        statusDebugQueries.prototype.fetchCurrentQueries = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugQueriesCommand(db).execute().done(function (results) {
                    return _this.onResultsLoaded(results);
                });
            }

            return null;
        };

        statusDebugQueries.prototype.onResultsLoaded = function (results) {
            var _this = this;
            var currentGroups = $.map(this.data(), function (group) {
                return group.indexName;
            });

            $.map(results, function (dtoGroup) {
                if (dtoGroup.Queries.length > 0) {
                    var foundGroup = _this.data().first(function (item) {
                        return item.indexName === dtoGroup.IndexName;
                    });
                    if (foundGroup) {
                        currentGroups.remove(dtoGroup.IndexName);
                    } else {
                        foundGroup = new statusDebugQueriesGroup(dtoGroup);
                        _this.data.push(foundGroup);
                    }
                    _this.updateGroup(foundGroup, dtoGroup);
                }
            });

            // remove empty and unused groups
            currentGroups.forEach(function (group) {
                var foundGroup = _this.data.first(function (item) {
                    return item.indexName === group;
                });
                if (foundGroup) {
                    _this.data.remove(foundGroup);
                }
            });
        };

        statusDebugQueries.prototype.updateGroup = function (group, dtoGroup) {
            var currentQueryIds = $.map(group.queries(), function (query) {
                return query.queryId;
            });

            $.map(dtoGroup.Queries, function (dtoQuery) {
                var foundQuery = group.queries.first(function (item) {
                    return item.queryId == dtoQuery.QueryId;
                });
                if (foundQuery) {
                    currentQueryIds.remove(foundQuery.queryId);
                    foundQuery.duration(dtoQuery.Duration);
                } else {
                    group.queries.push(new statusDebugQueriesQuery(dtoQuery));
                }
            });

            // remove unused queries
            currentQueryIds.forEach(function (query) {
                var foundQuery = group.queries.first(function (item) {
                    return item.queryId == query;
                });
                if (foundQuery) {
                    group.queries.remove(foundQuery);
                }
            });
        };

        statusDebugQueries.prototype.killQuery = function (queryId) {
            var _this = this;
            new getKillQueryCommand(this.activeDatabase(), queryId).execute().done(function () {
                // find and delete query from model
                _this.data().forEach(function (group) {
                    var foundQuery = group.queries.first(function (q) {
                        return q.queryId == queryId;
                    });
                    if (foundQuery) {
                        group.queries.remove(foundQuery);
                    }
                });
            });
        };
        return statusDebugQueries;
    })(viewModelBase);

    
    return statusDebugQueries;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugRequestTracing", ["require", "exports", "viewmodels/viewModelBase", "commands/getStatusDebugRequestTracingCommand"], function(require, exports, viewModelBase, getStatusDebugRequestTracingCommand) {
    var statusDebugRequestTracing = (function (_super) {
        __extends(statusDebugRequestTracing, _super);
        function statusDebugRequestTracing() {
            var _this = this;
            _super.call(this);
            this.allEntries = ko.observableArray();
            this.statusFilter = ko.observable("All");
            this.selectedEntry = ko.observable();

            this.failedCount = ko.computed(function () {
                return _this.allEntries().count(function (l) {
                    return l.StatusCode >= 400;
                });
            });
            this.successCount = ko.computed(function () {
                return _this.allEntries().count(function (l) {
                    return l.StatusCode < 400;
                });
            });
            this.activeDatabase.subscribe(function () {
                return _this.fetchRequestTracing();
            });
        }
        statusDebugRequestTracing.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            return this.fetchRequestTracing();
        };

        statusDebugRequestTracing.prototype.fetchRequestTracing = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugRequestTracingCommand(db).execute().done(function (results) {
                    return _this.processResults(results);
                });
            }

            return null;
        };

        statusDebugRequestTracing.prototype.processResults = function (results) {
            var _this = this;
            results.forEach(function (r) {
                r['IsVisible'] = ko.computed(function () {
                    return _this.matchesFilter(r);
                });
            });
            this.allEntries(results.reverse());
        };

        statusDebugRequestTracing.prototype.matchesFilter = function (entry) {
            var statusFilter = this.statusFilter();

            var matchesStatusFilter = true;
            if (statusFilter === "Success" && entry.StatusCode >= 400) {
                matchesStatusFilter = false;
            } else if (statusFilter === "Failed" && entry.StatusCode < 400) {
                matchesStatusFilter = false;
            }

            return matchesStatusFilter;
        };

        statusDebugRequestTracing.prototype.selectEntry = function (entry) {
            this.selectedEntry(entry);
        };

        statusDebugRequestTracing.prototype.tableKeyDown = function (sender, e) {
            var isKeyUp = e.keyCode === 38;
            var isKeyDown = e.keyCode === 40;
            if (isKeyUp || isKeyDown) {
                e.preventDefault();

                var oldSelection = this.selectedEntry();
                if (oldSelection) {
                    var oldSelectionIndex = this.allEntries.indexOf(oldSelection);
                    var newSelectionIndex = oldSelectionIndex;
                    if (isKeyUp && oldSelectionIndex > 0) {
                        newSelectionIndex--;
                    } else if (isKeyDown && oldSelectionIndex < this.allEntries().length - 1) {
                        newSelectionIndex++;
                    }

                    this.selectedEntry(this.allEntries()[newSelectionIndex]);
                    var newSelectedRow = $("#requestTracingTableContainer table tbody tr:nth-child(" + (newSelectionIndex + 1) + ")");
                    if (newSelectedRow) {
                        this.ensureRowVisible(newSelectedRow);
                    }
                }
            }
        };

        statusDebugRequestTracing.prototype.showContextMenu = function () {
            //alert("this");
        };

        statusDebugRequestTracing.prototype.ensureRowVisible = function (row) {
            var table = $("#requestTracingTableContainer");
            var scrollTop = table.scrollTop();
            var scrollBottom = scrollTop + table.height();
            var scrollHeight = scrollBottom - scrollTop;

            var rowPosition = row.position();
            var rowTop = rowPosition.top;
            var rowBottom = rowTop + row.height();

            if (rowTop < 0) {
                table.scrollTop(scrollTop + rowTop);
            } else if (rowBottom > scrollHeight) {
                table.scrollTop(scrollTop + (rowBottom - scrollHeight));
            }
        };

        statusDebugRequestTracing.prototype.setStatusAll = function () {
            this.statusFilter("All");
        };

        statusDebugRequestTracing.prototype.setStatusSuccess = function () {
            this.statusFilter("Success");
        };

        statusDebugRequestTracing.prototype.setStatusFailed = function () {
            this.statusFilter("Failed");
        };
        return statusDebugRequestTracing;
    })(viewModelBase);

    
    return statusDebugRequestTracing;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugRoutes", ["require", "exports", "commands/getStatusDebugRoutesCommand", "viewmodels/viewModelBase", "common/aceEditorBindingHandler"], function(require, exports, getStatusDebugRoutesCommand, viewModelBase, aceEditorBindingHandler) {
    var statusDebugRoutes = (function (_super) {
        __extends(statusDebugRoutes, _super);
        function statusDebugRoutes() {
            _super.call(this);
            this.data = ko.observable();

            aceEditorBindingHandler.install();
        }
        statusDebugRoutes.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            var editorElement = $("#statusDebugRoutesEditor");
            if (editorElement.length > 0) {
                this.editor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }

            $("#statusDebugRoutesEditor").on('DynamicHeightSet', function () {
                return _this.editor.resize();
            });
        };

        statusDebugRoutes.prototype.detached = function () {
            _super.prototype.detached.call(this);
            $("#statusDebugRoutesEditor").off('DynamicHeightSet');
        };

        statusDebugRoutes.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
            return this.fetchRoutes();
        };

        statusDebugRoutes.prototype.fetchRoutes = function () {
            var _this = this;
            return new getStatusDebugRoutesCommand().execute().done(function (results) {
                return _this.data(JSON.stringify(results, null, 4));
            });
        };
        return statusDebugRoutes;
    })(viewModelBase);

    
    return statusDebugRoutes;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugSlowDocCounts", ["require", "exports", "commands/getStatusDebugSlowDocCountsCommand", "viewmodels/viewModelBase", "common/generalUtils"], function(require, exports, getStatusDebugSlowDocCountsCommand, viewModelBase, genUtils) {
    var statusDebugSlowDocCounts = (function (_super) {
        __extends(statusDebugSlowDocCounts, _super);
        function statusDebugSlowDocCounts() {
            _super.apply(this, arguments);
            this.data = ko.observable();
            this.canSearch = ko.observable(true);
        }
        statusDebugSlowDocCounts.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.resetView();
            });
            return this.resetView();
        };

        statusDebugSlowDocCounts.prototype.resetView = function () {
            this.data(null);
            this.canSearch(true);
        };

        statusDebugSlowDocCounts.prototype.formatTimeSpan = function (input) {
            var timeParts = input.split(":");
            var miliPart;
            var sec = 0, milisec = 0;
            if (timeParts.length == 3) {
                miliPart = timeParts[2].split(".");
                sec = parseInt(miliPart[0]);
                var tmpMili;
                if (miliPart[1][0] == '0') {
                    tmpMili = miliPart[1].substring(1, 3);
                } else {
                    tmpMili = miliPart[1].substring(0, 3);
                }
                milisec = parseInt(tmpMili);
            }
            var hours = parseInt(timeParts[0]);
            var min = parseInt(timeParts[1]);

            var timeStr = "";
            if (hours > 0) {
                timeStr = hours + " Hours ";
            }
            if (min > 0) {
                timeStr += min + " Min ";
            }
            if (sec > 0) {
                timeStr += sec + " Sec ";
            }
            if ((timeStr == "") && (milisec > 0)) {
                timeStr = milisec + " Ms ";
            }
            return timeStr;
        };
        statusDebugSlowDocCounts.prototype.formatBytesToSize = function (bytes) {
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            if (bytes == 0)
                return 'n/a';
            var i = Math.floor(Math.log(bytes) / Math.log(1024));

            if (i < 0) {
                // number < 1
                return genUtils.formatAsCommaSeperatedString(bytes, 4) + ' Bytes';
            }

            var res = bytes / Math.pow(1024, i);
            var newRes = genUtils.formatAsCommaSeperatedString(res, 2);

            return newRes + ' ' + sizes[i];
        };

        statusDebugSlowDocCounts.prototype.fetchDocCounts = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                this.canSearch(false);
                return new getStatusDebugSlowDocCountsCommand(db).execute().done(function (results) {
                    _this.data(results);
                }).always(function () {
                    return _this.canSearch(true);
                });
            }

            return null;
        };
        return statusDebugSlowDocCounts;
    })(viewModelBase);

    
    return statusDebugSlowDocCounts;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugSqlReplication", ["require", "exports", "commands/getStatusDebugSqlReplicationCommand", "viewmodels/viewModelBase", "common/sqlReplicationStats"], function(require, exports, getStatusDebugSqlReplicationCommand, viewModelBase, sqlReplicationStats) {
    var statusDebugSqlReplication = (function (_super) {
        __extends(statusDebugSqlReplication, _super);
        function statusDebugSqlReplication() {
            _super.call(this);
            this.data = ko.observable();
        }
        statusDebugSqlReplication.prototype.activate = function (args) {
            var _this = this;
            var widthUnit = 8;
            this.columnWidths = [
                ko.observable(widthUnit),
                ko.observable(12),
                ko.observable(widthUnit),
                ko.observable(widthUnit),
                ko.observable(widthUnit),
                ko.observable(widthUnit),
                ko.observable(10),
                ko.observable(6),
                ko.observable(18),
                ko.observable(6),
                ko.observable(6),
                ko.observable(6),
                ko.observable(6),
                ko.observable(6),
                ko.observable(4 * 6),
                ko.observable(6),
                ko.observable(6),
                ko.observable(6),
                ko.observable(6),
                ko.observable(6),
                ko.observable(6)
            ];
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchSqlReplicationStats();
            });
            this.registerColumnResizing();
            return this.fetchSqlReplicationStats();
        };

        statusDebugSqlReplication.prototype.deactivate = function () {
            this.unregisterColumnResizing();
        };

        statusDebugSqlReplication.prototype.fetchSqlReplicationStats = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugSqlReplicationCommand(db).execute().done(function (results) {
                    _this.data(results.map(function (x) {
                        return new sqlReplicationStats(x);
                    }));
                });
            }

            return null;
        };

        statusDebugSqlReplication.prototype.registerColumnResizing = function () {
            var _this = this;
            var resizingColumn = false;
            var startX = 0;
            var startingWidth = 0;
            var columnIndex = 0;

            $(document).on("mousedown.logTableColumnResize", ".column-handle", function (e) {
                columnIndex = parseInt($(e.currentTarget).attr("column"));
                startingWidth = _this.columnWidths[columnIndex]();
                startX = e.pageX;
                resizingColumn = true;
            });

            $(document).on("mouseup.logTableColumnResize", "", function (e) {
                resizingColumn = false;
            });

            $(document).on("mousemove.logTableColumnResize", "", function (e) {
                if (resizingColumn) {
                    var elemFontSize = parseInt(window.getComputedStyle(e.toElement, null).fontSize, 10);

                    var targetColumnSize = startingWidth + (e.pageX - startX) / elemFontSize;
                    _this.columnWidths[columnIndex](targetColumnSize);

                    // Stop propagation of the event so the text selection doesn't fire up
                    if (e.stopPropagation)
                        e.stopPropagation();
                    if (e.preventDefault)
                        e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false;

                    return false;
                }
            });
        };

        statusDebugSqlReplication.prototype.unregisterColumnResizing = function () {
            $(document).off("mousedown.logTableColumnResize");
            $(document).off("mouseup.logTableColumnResize");
            $(document).off("mousemove.logTableColumnResize");
        };
        return statusDebugSqlReplication;
    })(viewModelBase);

    
    return statusDebugSqlReplication;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugTasks", ["require", "exports", "commands/getStatusDebugTasksCommand", "viewmodels/viewModelBase"], function(require, exports, getStatusDebugTasksCommand, viewModelBase) {
    var statusDebugTasks = (function (_super) {
        __extends(statusDebugTasks, _super);
        function statusDebugTasks() {
            _super.apply(this, arguments);
            this.data = ko.observable();
        }
        statusDebugTasks.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchTasks();
            });
            return this.fetchTasks();
        };

        statusDebugTasks.prototype.fetchTasks = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getStatusDebugTasksCommand(db).execute().done(function (results) {
                    return _this.data(results);
                });
            }

            return null;
        };
        return statusDebugTasks;
    })(viewModelBase);

    
    return statusDebugTasks;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/statusDebugWebSocket", ["require", "exports", "common/appUrl", "viewmodels/viewModelBase", "commands/getSingleAuthTokenCommand"], function(require, exports, appUrl, viewModelBase, getSingleAuthTokenCommand) {
    var statusDebugWebSocket = (function (_super) {
        __extends(statusDebugWebSocket, _super);
        function statusDebugWebSocket() {
            _super.apply(this, arguments);
            this.results = ko.observable("");
        }
        statusDebugWebSocket.prototype.test = function () {
            var _this = this;
            if ("WebSocket" in window) {
                var getTokenTask = new getSingleAuthTokenCommand(this.activeDatabase()).execute();

                getTokenTask.done(function (tokenObject) {
                    var token = tokenObject.Token;
                    var connectionString = 'singleUseAuthToken=' + token + '&id=test&coolDownWithDataLoss=1000&isMultyTenantTransport=false';
                    _this.connectWebSocket(connectionString);
                }).fail(function (e) {
                    if (e.status == 0) {
                        _this.appendLog("Connection has closed (during getToken)");
                    } else {
                        _this.appendLog(e.responseJSON.Error);
                    }
                });
            } else {
                this.appendLog("Looks like your browser doesn't support web sockets");
            }
        };

        statusDebugWebSocket.prototype.connectWebSocket = function (connectionString) {
            var _this = this;
            var connectionOpened = false;

            var wsProtocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            var url = wsProtocol + window.location.host + appUrl.forResourceQuery(this.activeDatabase()) + '/websocket/validate?' + connectionString;

            this.appendLog("Connecting to web socket using url: " + url);

            var webSocket = new WebSocket(url);

            webSocket.onerror = function (e) {
                if (connectionOpened == false) {
                    _this.appendLog("Server doesn't support web sockets protocol");
                } else {
                    _this.appendLog("WebSocket Error" + JSON.stringify(e));
                }
            };
            webSocket.onmessage = function (e) {
                var data = JSON.parse(e.data);
                _this.appendLog("Got message from websocket. Status Code = " + data.StatusCode + ", message = " + data.StatusMessage);
                setTimeout(function () {
                    return webSocket.close(1000, "CLOSE_NORMAL");
                }, 50);
            };
            webSocket.onclose = function (e) {
                if (e.wasClean == false) {
                    _this.appendLog("WebSocket disconnected in unclean way");
                } else {
                    _this.appendLog("Closed WebSocket connection");
                }
            };
            webSocket.onopen = function () {
                _this.appendLog("Connected to WebSocket");
                connectionOpened = true;
            };
        };

        statusDebugWebSocket.prototype.appendLog = function (msg) {
            this.results(this.results() + msg + "\r\n");
        };
        return statusDebugWebSocket;
    })(viewModelBase);

    
    return statusDebugWebSocket;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/studioConfig", ["require", "exports", "viewmodels/viewModelBase", "commands/getDocumentWithMetadataCommand", "common/appUrl", "models/document", "common/serverBuildReminder"], function(require, exports, viewModelBase, getDocumentWithMetadataCommand, appUrl, documentClass, serverBuildReminder) {
    var studioConfig = (function (_super) {
        __extends(studioConfig, _super);
        function studioConfig() {
            var _this = this;
            _super.call(this);
            this.configDocument = ko.observable();
            this.warnWhenUsingSystemDatabase = ko.observable(true);
            this.timeUntilRemindToUpgrade = ko.observable();
            this.documentId = "Raven/StudioConfig";
            this.systemDatabase = appUrl.getSystemDatabase();

            this.timeUntilRemindToUpgrade(serverBuildReminder.get());
            this.mute = ko.computed(function () {
                var lastBuildCheck = _this.timeUntilRemindToUpgrade();
                var timestamp = Date.parse(lastBuildCheck);
                var isLegalDate = !isNaN(timestamp);
                return isLegalDate;
            });
            this.timeUntilRemindToUpgradeMessage = ko.computed(function () {
                if (_this.mute()) {
                    var lastBuildCheck = _this.timeUntilRemindToUpgrade();
                    var lastBuildCheckMoment = moment(lastBuildCheck);
                    return 'muted for another ' + lastBuildCheckMoment.add('days', 7).fromNow(true);
                }
                return 'mute for a week';
            });
        }
        studioConfig.prototype.canActivate = function (args) {
            var _this = this;
            var deffered = $.Deferred();

            new getDocumentWithMetadataCommand(this.documentId, this.systemDatabase).execute().done(function (doc) {
                _this.configDocument(doc);
                _this.warnWhenUsingSystemDatabase(doc["WarnWhenUsingSystemDatabase"]);
            }).fail(function () {
                return _this.configDocument(documentClass.empty());
            }).always(function () {
                return deffered.resolve({ can: true });
            });

            return deffered;
        };

        studioConfig.prototype.attached = function () {
            var self = this;
            $(window).bind('storage', function (e) {
                if (e.originalEvent.key == serverBuildReminder.localStorageName) {
                    self.timeUntilRemindToUpgrade(serverBuildReminder.get());
                }
            });
        };

        studioConfig.prototype.setSystemDatabaseWarning = function (warnSetting) {
            var _this = this;
            if (this.warnWhenUsingSystemDatabase() !== warnSetting) {
                var newDocument = this.configDocument();
                this.warnWhenUsingSystemDatabase(warnSetting);
                newDocument["WarnWhenUsingSystemDatabase"] = warnSetting;
                var saveTask = this.saveStudioConfig(newDocument);
                saveTask.fail(function () {
                    return _this.warnWhenUsingSystemDatabase(!warnSetting);
                });
            }
        };

        studioConfig.prototype.setUpgradeReminder = function (upgradeSetting) {
            serverBuildReminder.mute(upgradeSetting);
        };

        studioConfig.prototype.saveStudioConfig = function (newDocument) {
            var _this = this;
            var deferred = $.Deferred();

            require(["commands/saveDocumentCommand"], function (saveDocumentCommand) {
                var saveTask = new saveDocumentCommand(_this.documentId, newDocument, _this.systemDatabase).execute();
                saveTask.done(function (saveResult) {
                    _this.configDocument(newDocument);
                    _this.configDocument().__metadata['@etag'] = saveResult[0].Etag;
                    deferred.resolve();
                }).fail(function () {
                    return deferred.reject();
                });
            });

            return deferred;
        };
        return studioConfig;
    })(viewModelBase);

    
    return studioConfig;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/tasks", ["require", "exports", "plugins/router", "common/appUrl", "viewmodels/viewModelBase"], function(require, exports, durandalRouter, appUrl, viewModelBase) {
    var tasks = (function (_super) {
        __extends(tasks, _super);
        function tasks() {
            var _this = this;
            _super.call(this);
            this.router = null;

            this.isOnSystemDatabase = ko.computed(function () {
                return _this.activeDatabase() && _this.activeDatabase().isSystem;
            });
            this.isOnUserDatabase = ko.computed(function () {
                return _this.activeDatabase() && !_this.isOnSystemDatabase();
            });
            this.appUrls = appUrl.forCurrentDatabase();

            var importDatabaseUrl = ko.computed(function () {
                return appUrl.forImportDatabase(_this.activeDatabase());
            });
            var exportDatabaseUrl = ko.computed(function () {
                return appUrl.forExportDatabase(_this.activeDatabase());
            });
            var toggleIndexingUrl = ko.computed(function () {
                return appUrl.forToggleIndexing(_this.activeDatabase());
            });
            var sampleDataUrl = ko.computed(function () {
                return appUrl.forSampleData(_this.activeDatabase());
            });
            var csvImportUrl = ko.computed(function () {
                return appUrl.forCsvImport(_this.activeDatabase());
            });

            this.router = durandalRouter.createChildRouter().map([
                { route: ['databases/tasks', 'databases/tasks/importDatabase'], moduleId: 'viewmodels/importDatabase', title: 'Import Database', nav: true, hash: importDatabaseUrl },
                { route: 'databases/tasks/exportDatabase', moduleId: 'viewmodels/exportDatabase', title: 'Export Database', nav: true, hash: exportDatabaseUrl },
                { route: 'databases/tasks/toggleIndexing', moduleId: 'viewmodels/toggleIndexing', title: 'Toggle Indexing', nav: true, hash: toggleIndexingUrl },
                { route: 'databases/tasks/sampleData', moduleId: 'viewmodels/createSampleData', title: 'Create Sample Data', nav: true, hash: sampleDataUrl },
                { route: 'databases/tasks/csvImport', moduleId: 'viewmodels/csvImport', title: 'CSV Import', nav: true, hash: csvImportUrl }
            ]).buildNavigationModel();

            appUrl.mapUnknownRoutes(this.router);

            this.activeSubViewTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                return activeRoute != null ? activeRoute.title : "";
            });
        }
        tasks.prototype.activate = function (args) {
            _super.prototype.activate.call(this, args);
        };

        tasks.prototype.routeIsVisible = function (route) {
            var systemOnlyPages = ["Restore Database", "Database Settings", "Replication", "SQL Replication"];
            if (jQuery.inArray(route.title, systemOnlyPages) !== -1) {
                return this.isOnSystemDatabase();
            } else {
                return true;
            }
        };
        return tasks;
    })(viewModelBase);

    
    return tasks;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/toggleIndexing", ["require", "exports", "commands/stopIndexingCommand", "commands/startIndexingCommand", "commands/getIndexingStatusCommand", "viewmodels/viewModelBase"], function(require, exports, stopIndexingCommand, startIndexingCommand, getIndexingStatusCommand, viewModelBase) {
    var toggleIndexing = (function (_super) {
        __extends(toggleIndexing, _super);
        function toggleIndexing() {
            _super.call(this);
            this.indexingStatus = ko.observable();
            this.getIndexStatus();
        }
        toggleIndexing.prototype.disableIndexing = function () {
            var _this = this;
            new stopIndexingCommand(this.activeDatabase()).execute().done(function () {
                return _this.getIndexStatus();
            });
        };

        toggleIndexing.prototype.enableIndexing = function () {
            var _this = this;
            new startIndexingCommand(this.activeDatabase()).execute().done(function () {
                return _this.getIndexStatus();
            });
        };

        toggleIndexing.prototype.getIndexStatus = function () {
            var _this = this;
            new getIndexingStatusCommand(this.activeDatabase()).execute().done(function (result) {
                return _this.indexingStatus(result.IndexingStatus);
            });
        };
        return toggleIndexing;
    })(viewModelBase);

    
    return toggleIndexing;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/trafficWatch", ["require", "exports", "durandal/app", "viewmodels/viewModelBase", "viewmodels/watchTrafficConfigDialog", "common/trafficWatchClient", "commands/getSingleAuthTokenCommand", "moment", "common/fileDownloader"], function(require, exports, app, viewModelBase, watchTrafficConfigDialog, trafficWatchClient, getSingleAuthTokenCommand, moment, fileDownloader) {
    var trafficWatch = (function (_super) {
        __extends(trafficWatch, _super);
        function trafficWatch() {
            var _this = this;
            _super.call(this);
            this.logConfig = ko.observable();
            this.isConnected = ko.observable(false);
            this.recentEntries = ko.observableArray([]);
            this.now = ko.observable();
            this.updateNowTimeoutHandle = 0;
            this.selectedLog = ko.observable();
            this.keepDown = ko.observable(false);
            this.watchedRequests = ko.observable(0);
            this.averageRequestDuration = ko.observable();
            this.summedRequestsDuration = 0;
            this.minRequestDuration = ko.observable(1000000);
            this.maxRequestDuration = ko.observable(0);
            this.startTraceTime = ko.observable();
            this.showLogDetails = ko.observable(false);
            this.startTraceTimeHumanized = ko.computed(function () {
                var a = _this.now();
                if (!!_this.startTraceTime()) {
                    return _this.parseHumanReadableTimeString(_this.startTraceTime().toString(), true, false);
                }
                return "";
            });
        }
        trafficWatch.prototype.canActivate = function (args) {
            return true;
        };

        trafficWatch.prototype.activate = function (args) {
            var widthUnit = 0.08;
            this.columnWidths = [
                ko.observable(100 * widthUnit),
                ko.observable(100 * widthUnit),
                ko.observable(100 * widthUnit),
                ko.observable(100 * widthUnit),
                ko.observable(100 * widthUnit * 7),
                ko.observable(100 * widthUnit)
            ];
            this.registerColumnResizing();
        };

        trafficWatch.prototype.attached = function () {
            this.showLogDetails.subscribe(function (x) {
                $(".logRecords").toggleClass("logRecords-small");
            });
            this.updateCurrentNowTime();
            this.logRecordsElement = document.getElementById("logRecords");
        };

        trafficWatch.prototype.registerColumnResizing = function () {
            var _this = this;
            var resizingColumn = false;
            var startX = 0;
            var startingWidth = 0;
            var columnIndex = 0;

            $(document).on("mousedown.logTableColumnResize", ".column-handle", function (e) {
                columnIndex = parseInt($(e.currentTarget).attr("column"));
                startingWidth = _this.columnWidths[columnIndex]();
                startX = e.pageX;
                resizingColumn = true;
            });

            $(document).on("mouseup.logTableColumnResize", "", function (e) {
                resizingColumn = false;
            });

            $(document).on("mousemove.logTableColumnResize", "", function (e) {
                if (resizingColumn) {
                    var logsRecordsContainerWidth = $("#logRecordsContainer").width();
                    var targetColumnSize = startingWidth + 100 * (e.pageX - startX) / logsRecordsContainerWidth;
                    _this.columnWidths[columnIndex](targetColumnSize);

                    // Stop propagation of the event so the text selection doesn't fire up
                    if (e.stopPropagation)
                        e.stopPropagation();
                    if (e.preventDefault)
                        e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false;

                    return false;
                }
            });
        };

        trafficWatch.prototype.configureConnection = function () {
            var _this = this;
            var configDialog = new watchTrafficConfigDialog();
            app.showDialog(configDialog);

            configDialog.configurationTask.done(function (x) {
                _this.logConfig(x);
                _this.reconnect();
            });
        };

        trafficWatch.prototype.reconnect = function () {
            var _this = this;
            if (!this.watchClient) {
                if (!this.logConfig) {
                    app.showMessage("Cannot reconnect, please configure connection properly", "Connection Error");
                    return;
                }
                this.connect();
            } else {
                this.disconnect().done(function () {
                    _this.connect();
                });
            }
        };

        trafficWatch.prototype.connect = function () {
            var _this = this;
            if (!!this.watchClient) {
                this.reconnect();
                return;
            }
            if (!this.logConfig()) {
                this.configureConnection();
                return;
            }

            var tokenDeferred = $.Deferred();

            if (!this.logConfig().SingleAuthToken) {
                new getSingleAuthTokenCommand(this.logConfig().Resource, this.logConfig().WatchedResourceMode == "AdminView").execute().done(function (tokenObject) {
                    _this.logConfig().SingleAuthToken = tokenObject;
                    tokenDeferred.resolve();
                }).fail(function (e) {
                    app.showMessage("You are not authorized to trace this resource", "Authorization error");
                });
            } else {
                tokenDeferred.resolve();
            }

            tokenDeferred.done(function () {
                _this.watchClient = new trafficWatchClient(_this.logConfig().ResourcePath, _this.logConfig().SingleAuthToken.Token);
                _this.watchClient.connect();
                _this.watchClient.connectionOpeningTask.done(function () {
                    _this.isConnected(true);
                    _this.watchClient.watchTraffic(function (event) {
                        _this.processHttpTraceMessage(event);
                    });
                    if (!_this.startTraceTime()) {
                        _this.startTraceTime(_this.now());
                    }
                });
                _this.logConfig().SingleAuthToken = null;
            });
        };

        trafficWatch.prototype.disconnect = function () {
            var _this = this;
            if (!!this.watchClient) {
                this.watchClient.disconnect();
                return this.watchClient.connectionClosingTask.done(function () {
                    _this.watchClient = null;
                    _this.isConnected(false);
                });
            } else {
                app.showMessage("Cannot disconnect, connection does not exist", "Disconnect");
                return $.Deferred().reject();
            }
        };

        trafficWatch.prototype.deactivate = function () {
            _super.prototype.deactivate.call(this);
            if (this.isConnected() == true)
                this.disconnect();
        };

        trafficWatch.prototype.processHttpTraceMessage = function (e) {
            var logObject;
            logObject = {
                Time: this.createHumanReadableTime(e.TimeStamp, false, true),
                Duration: e.ElapsedMilliseconds,
                Resource: e.TenantName,
                Method: e.HttpMethod,
                Url: e.RequestUri,
                CustomInfo: e.CustomInfo,
                TimeStampText: this.createHumanReadableTime(e.TimeStamp, true, false)
            };

            if (logObject.CustomInfo) {
                console.log;
                logObject.CustomInfo = decodeURIComponent(logObject.CustomInfo).replaceAll("\n", "<Br />").replaceAll("Inner Request", "<strong>Inner Request</strong>");
            }

            if (e.InnerRequestsCount > 0) {
                logObject.Url = "(" + e.InnerRequestsCount + " requests) " + logObject.Url;
            }

            if (this.recentEntries().length == this.logConfig().MaxEntries) {
                this.recentEntries.shift();
            }
            this.recentEntries.push(logObject);

            if (this.keepDown() == true) {
                this.logRecordsElement.scrollTop = this.logRecordsElement.scrollHeight * 1.1;
            }

            this.watchedRequests(this.watchedRequests() + 1);
            this.summedRequestsDuration += e.ElapsedMilliseconds;
            this.averageRequestDuration((this.summedRequestsDuration / this.watchedRequests()).toFixed(2));
            this.minRequestDuration(this.minRequestDuration() > e.ElapsedMilliseconds ? e.ElapsedMilliseconds : this.minRequestDuration());
            this.maxRequestDuration(this.maxRequestDuration() < e.ElapsedMilliseconds ? e.ElapsedMilliseconds : this.maxRequestDuration());
        };

        trafficWatch.prototype.selectLog = function (log) {
            this.selectedLog(log);
            this.showLogDetails(true);
            $(".logRecords").addClass("logRecords-small");
        };

        trafficWatch.prototype.updateCurrentNowTime = function () {
            var _this = this;
            this.now(moment());
            if (this.updateNowTimeoutHandle != 0)
                clearTimeout(this.updateNowTimeoutHandle);
            this.updateNowTimeoutHandle = setTimeout(function () {
                return _this.updateCurrentNowTime();
            }, 1000);
        };

        trafficWatch.prototype.createHumanReadableTime = function (time, chainHumanized, chainDateTime) {
            var _this = this;
            if (typeof chainHumanized === "undefined") { chainHumanized = true; }
            if (typeof chainDateTime === "undefined") { chainDateTime = true; }
            if (time) {
                return ko.computed(function () {
                    return _this.parseHumanReadableTimeString(time, chainHumanized, chainDateTime);
                });
            }

            return ko.computed(function () {
                return time;
            });
        };

        trafficWatch.prototype.parseHumanReadableTimeString = function (time, chainHumanized, chainDateTime) {
            if (typeof chainHumanized === "undefined") { chainHumanized = true; }
            if (typeof chainDateTime === "undefined") { chainDateTime = true; }
            var dateMoment = moment(time);
            var humanized = "", formattedDateTime = "";
            var agoInMs = dateMoment.diff(this.now());
            if (chainHumanized == true)
                humanized = moment.duration(agoInMs).humanize(true);
            if (chainDateTime == true)
                formattedDateTime = dateMoment.format(" (ddd MMM DD YYYY HH:mm:ss.SS[GMT]ZZ)");
            return humanized + formattedDateTime;
        };

        trafficWatch.prototype.formatLogRecord = function (logRecord) {
            return 'Request #' + logRecord.RequestId.toString().paddingRight(' ', 4) + ' ' + logRecord.HttpMethod.paddingLeft(' ', 7) + ' - ' + logRecord.ElapsedMilliseconds.toString().paddingRight(' ', 5) + ' ms - ' + logRecord.TenantName.paddingLeft(' ', 10) + ' - ' + logRecord.ResponseStatusCode + ' - ' + logRecord.RequestUri;
        };

        trafficWatch.prototype.resetStats = function () {
            this.watchedRequests(0);
            this.averageRequestDuration("0");
            this.summedRequestsDuration = 0;
            this.minRequestDuration(1000000);
            this.maxRequestDuration(0);
            this.startTraceTime(null);
        };

        trafficWatch.prototype.exportTraffic = function () {
            fileDownloader.downloadAsJson(this.recentEntries(), "traffic.json");
        };

        trafficWatch.prototype.clearLogs = function () {
            this.recentEntries.removeAll();
        };

        trafficWatch.prototype.toggleKeepDown = function () {
            this.keepDown.toggle();
            if (this.keepDown() == true) {
                this.logRecordsElement.scrollTop = this.logRecordsElement.scrollHeight * 1.1;
            }
        };
        return trafficWatch;
    })(viewModelBase);

    
    return trafficWatch;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/transformers", ["require", "exports", "viewmodels/viewModelBase", "models/transformer", "commands/getTransformersCommand", "common/appUrl", "viewmodels/deleteTransformerConfirm", "durandal/app", "viewmodels/shell", "viewmodels/copyTransformerDialog"], function(require, exports, viewModelBase, transformer, getTransformersCommand, appUrl, deleteTransformerConfirm, app, shell, copyTransformerDialog) {
    var Transformers = (function (_super) {
        __extends(Transformers, _super);
        function Transformers() {
            var _this = this;
            _super.call(this);
            this.newTransformerUrl = appUrl.forCurrentDatabase().newTransformer;
            this.transformersGroups = ko.observableArray();
            this.containerSelector = "#transformersContainer";
            this.transformersMutex = true;
            this.allTransformersExpanded = ko.observable(true);
            this.expandCollapseTitle = ko.computed(function () {
                return _this.allTransformersExpanded() ? "Collapse all" : "Expand all";
            });

            this.appUrls = appUrl.forCurrentDatabase();
        }
        Transformers.prototype.canActivate = function (args) {
            _super.prototype.canActivate.call(this, args);

            var deferred = $.Deferred();
            var db = this.activeDatabase();
            if (db) {
                this.fetchTransformers(db).done(function () {
                    return deferred.resolve({ can: true });
                });
            }
            return deferred;
        };

        Transformers.prototype.attached = function () {
            var _this = this;
            this.createKeyboardShortcut("Alt+N", function () {
                return _this.navigate(_this.newTransformerUrl());
            }, this.containerSelector);
            ko.postbox.publish("SetRawJSONUrl", appUrl.forTransformersRawData(this.activeDatabase()));
        };

        Transformers.prototype.fetchTransformers = function (db) {
            var _this = this;
            return new getTransformersCommand(db).execute().done(function (transformers) {
                transformers.map(function (curTransformer) {
                    return new transformer().initFromLoad(curTransformer);
                }).forEach(function (i) {
                    return _this.putTransformerIntoGroups(i);
                });
            });
        };

        Transformers.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchAllTransformers(function (e) {
                    return _this.processTransformerEvent(e);
                })];
        };

        Transformers.prototype.processTransformerEvent = function (e) {
            var _this = this;
            if (e.Type == "TransformerRemoved") {
                this.removeTransformersFromAllGroups(this.findTransformersByName(e.Name));
            } else {
                if (this.transformersMutex == true) {
                    this.transformersMutex = false;
                    setTimeout(function () {
                        _this.fetchTransformers(_this.activeDatabase()).always(function () {
                            return _this.transformersMutex = true;
                        });
                    }, 5000);
                }
            }
        };

        Transformers.prototype.findTransformersByName = function (transformerName) {
            var result = new Array();
            this.transformersGroups().forEach(function (g) {
                g.transformers().forEach(function (i) {
                    if (i.name() == transformerName) {
                        result.push(i);
                    }
                });
            });

            return result;
        };

        Transformers.prototype.putTransformerIntoGroups = function (trans) {
            var groupName = trans.name().split("/")[0];
            var group = this.transformersGroups.first(function (g) {
                return g.entityName === groupName;
            });

            if (group) {
                var existingTrans = group.transformers.first(function (cur) {
                    return cur.name() == trans.name();
                });

                if (!existingTrans) {
                    group.transformers.push(trans);
                }
            } else {
                this.transformersGroups.push({ entityName: groupName, transformers: ko.observableArray([trans]) });
            }
        };

        Transformers.prototype.toggleExpandAll = function () {
            $(".index-group-content").collapse("toggle");
            this.allTransformersExpanded.toggle();
        };

        Transformers.prototype.deleteAllTransformers = function () {
            var allTransformers;
            allTransformers = this.getAllTransformers();
            this.promptDeleteTransformers(allTransformers);
        };

        Transformers.prototype.getAllTransformers = function () {
            var all = [];
            this.transformersGroups().forEach(function (g) {
                return all.pushAll(g.transformers());
            });
            return all.distinct();
        };

        Transformers.prototype.deleteTransformer = function (transformerToDelete) {
            this.promptDeleteTransformers([transformerToDelete]);
        };

        Transformers.prototype.pasteTransformer = function () {
            app.showDialog(new copyTransformerDialog('', this.activeDatabase(), true));
        };

        Transformers.prototype.copyTransformer = function (t) {
            app.showDialog(new copyTransformerDialog(t.name(), this.activeDatabase(), false));
        };

        Transformers.prototype.promptDeleteTransformers = function (transformers) {
            var _this = this;
            var db = this.activeDatabase();
            var deleteViewmodel = new deleteTransformerConfirm(transformers.map(function (i) {
                return i.name();
            }), db);
            deleteViewmodel.deleteTask.done(function () {
                return _this.removeTransformersFromAllGroups(transformers);
            });
            app.showDialog(deleteViewmodel);
        };

        Transformers.prototype.removeTransformersFromAllGroups = function (transformers) {
            this.transformersGroups().forEach(function (transGroup) {
                return transGroup.transformers.removeAll(transformers);
            });
            this.transformersGroups.remove(function (item) {
                return item.transformers().length === 0;
            });
        };
        return Transformers;
    })(viewModelBase);

    
    return Transformers;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/transformersShell", ["require", "exports", "plugins/router", "viewmodels/viewModelBase", "common/appUrl"], function(require, exports, durandalRouter, viewModelBase, appUrl) {
    var transformerShell = (function (_super) {
        __extends(transformerShell, _super);
        function transformerShell() {
            var _this = this;
            _super.call(this);
            this.indexesUrl = appUrl.forCurrentDatabase().indexes;

            this.appUrls = appUrl.forCurrentDatabase();

            this.router = durandalRouter.createChildRouter().map([
                { route: 'databases/transformers', moduleId: 'viewmodels/transformers', title: 'Transformers', nav: true },
                { route: 'databases/transformers/edit(/:transformerName)', moduleId: 'viewmodels/editTransformer', title: 'Edit Transformer', nav: true }
            ]).buildNavigationModel();

            appUrl.mapUnknownRoutes(this.router);

            this.currentBreadcrumbTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                if (activeRoute && activeRoute.title === "Transformers") {
                    return "All";
                }

                return activeRoute != null ? activeRoute.title : "";
            });
        }
        return transformerShell;
    })(viewModelBase);

    
    return transformerShell;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/upgrade", ["require", "exports", "viewmodels/viewModelBase", "commands/getDatabaseStatsCommand", "plugins/router", "common/appUrl"], function(require, exports, viewModelBase, getDatabaseStatsCommand, router, appUrl) {
    var upgrade = (function (_super) {
        __extends(upgrade, _super);
        function upgrade() {
            _super.apply(this, arguments);
            this.inProgress = ko.observable(true);
        }
        upgrade.prototype.attached = function () {
            var _this = this;
            this.poolStats();
            ko.postbox.subscribe("ActivateDatabase", function (db) {
                return _this.dbChanged(db);
            });
        };

        upgrade.prototype.dbChanged = function (db) {
            router.navigate(appUrl.forDocuments(null, db));
        };

        upgrade.prototype.poolStats = function () {
            var _this = this;
            this.fetchStats().done(function () {
                _this.inProgress(false);
            }).fail(function () {
                _this.timeoutHandle = setTimeout(_this.poolStats(), 500);
            });
        };

        upgrade.prototype.detached = function () {
            clearTimeout(this.timeoutHandle);
        };

        upgrade.prototype.fetchStats = function () {
            var db = this.activeDatabase();
            if (db) {
                return new getDatabaseStatsCommand(db).execute();
            }

            return null;
        };
        return upgrade;
    })(viewModelBase);

    
    return upgrade;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/userInfo", ["require", "exports", "commands/getUserInfoCommand", "viewmodels/viewModelBase"], function(require, exports, getUserInfoCommand, viewModelBase) {
    var userInfo = (function (_super) {
        __extends(userInfo, _super);
        function userInfo() {
            _super.apply(this, arguments);
            this.data = ko.observable();
        }
        userInfo.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.activeDatabase.subscribe(function () {
                return _this.fetchUserInfo();
            });
            return this.fetchUserInfo();
        };

        userInfo.prototype.fetchUserInfo = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                return new getUserInfoCommand(db).execute().done(function (results) {
                    return _this.data(results);
                });
            }

            return null;
        };
        return userInfo;
    })(viewModelBase);

    
    return userInfo;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/versioning", ["require", "exports", "viewmodels/viewModelBase", "models/versioningEntry", "common/appUrl", "commands/getVersioningsCommand", "commands/saveVersioningCommand"], function(require, exports, viewModelBase, versioningEntry, appUrl, getVersioningsCommand, saveVersioningCommand) {
    var versioning = (function (_super) {
        __extends(versioning, _super);
        function versioning() {
            _super.call(this);
            this.versionings = ko.observableArray().extend({ required: true });
            this.versionings = ko.observableArray();
        }
        versioning.prototype.canActivate = function (args) {
            var _this = this;
            _super.prototype.canActivate.call(this, args);

            var deferred = $.Deferred();
            var db = this.activeDatabase();
            if (db) {
                this.fetchVersioningEntries(db).done(function () {
                    return deferred.resolve({ can: true });
                }).fail(function () {
                    return deferred.resolve({ redirect: appUrl.forDatabaseSettings(_this.activeDatabase()) });
                });
            }
            return deferred;
        };

        versioning.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.toRemove = [];

            this.dirtyFlag = new ko.DirtyFlag([this.versionings]);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        versioning.prototype.fetchVersioningEntries = function (db) {
            var _this = this;
            var task = new getVersioningsCommand(db).execute();

            task.done(function (versionings) {
                return _this.versioningsLoaded(versionings);
            });

            return task;
        };

        versioning.prototype.saveChanges = function () {
            var _this = this;
            var db = this.activeDatabase();
            if (db) {
                var saveTask = new saveVersioningCommand(db, this.versionings().map(function (v) {
                    return v.toDto(true);
                }), this.toRemove.map(function (v) {
                    return v.toDto(true);
                })).execute();
                saveTask.done(function (saveResult) {
                    _this.versioningsSaved(saveResult);
                });
            }
        };

        versioning.prototype.createNewVersioning = function () {
            this.versionings.push(new versioningEntry());
        };

        versioning.prototype.removeVersioning = function (entry) {
            if (entry.fromDatabase()) {
                // If this entry is in database schedule the removal
                this.toRemove.push(entry);
            }
            this.versionings.remove(entry);
        };

        versioning.prototype.versioningsLoaded = function (data) {
            this.versionings(data);
            this.dirtyFlag().reset();
        };

        versioning.prototype.versioningsSaved = function (saveResult) {
            for (var i = 0; i < this.versionings().length; i++) {
                this.versionings()[i].__metadata.etag = saveResult[i].Etag;
            }

            // After save the collection names are not editable
            this.versionings().forEach(function (v) {
                v.fromDatabase(true);
            });

            this.dirtyFlag().reset();
            this.toRemove = [];
        };
        return versioning;
    })(viewModelBase);

    
    return versioning;
});
define("viewmodels/viewModelBase", ["require", "exports", "common/appUrl", "models/filesystem/filesystem", "models/counter/counterStorage", "plugins/router", "durandal/app", "viewmodels/viewSystemDatabaseConfirm", "common/oauthContext", "common/messagePublisher", "viewmodels/confirmationDialog"], function(require, exports, appUrl, filesystem, counterStorage, router, app, viewSystemDatabaseConfirm, oauthContext, messagePublisher, confirmationDialog) {
    /*
    * Base view model class that provides basic view model services, such as tracking the active database and providing a means to add keyboard shortcuts.
    */
    var viewModelBase = (function () {
        function viewModelBase() {
            var _this = this;
            this.activeDatabase = ko.observable().subscribeTo("ActivateDatabase", true);
            this.activeFilesystem = ko.observable().subscribeTo("ActivateFilesystem", true);
            this.activeCounterStorage = ko.observable().subscribeTo("ActivateCounterStorage", true);
            this.lastActivatedResource = ko.observable().subscribeTo("ActivateDatabase", true).subscribeTo("ActivateFilesystem", true).subscribeTo("ActivateCounterStorage", true);
            this.keyboardShortcutDomContainers = [];
            this.notifications = [];
            this.postboxSubscriptions = [];
            this.dirtyFlag = new ko.DirtyFlag([]);
            this.beforeUnloadListener = function (e) {
                var isDirty = _this.dirtyFlag().isDirty();
                if (isDirty) {
                    var message = "You have unsaved data.";
                    e = e || window.event;

                    // For IE and Firefox
                    if (e) {
                        e.returnValue = message;
                    }

                    // For Safari
                    return message;
                }
            };
        }
        /*
        * Called by Durandal when checking whether this navigation is allowed.
        * Possible return values: boolean, promise<boolean>, {redirect: 'some/other/route'}, promise<{redirect: 'some/other/route'}>
        *
        * We use this to determine whether we should allow navigation to a system DB page.
        * p.s. from Judah: a big scary prompt when loading the system DB is a bit heavy-handed, no?
        */
        viewModelBase.prototype.canActivate = function (args) {
            var resource = appUrl.getResource();

            if (resource instanceof filesystem) {
                var fs = this.activeFilesystem();

                if (!!fs && fs.disabled()) {
                    messagePublisher.reportError("File system '" + fs.name + "' is disabled!", "You can't access any section of the file system while it's disabled.");
                    return { redirect: appUrl.forResources() };
                }
            } else if (resource instanceof counterStorage) {
                var cs = this.activeCounterStorage();

                if (!!cs && cs.disabled()) {
                    messagePublisher.reportError("Counter Storage '" + cs.name + "' is disabled!", "You can't access any section of the counter storage while it's disabled.");
                    return { redirect: appUrl.forResources() };
                }
            } else {
                var db = this.activeDatabase();

                // we only want to prompt warning to system db if we are in the databases section
                if (!!db && db.isSystem) {
                    return this.promptNavSystemDb();
                } else if (!!db && db.disabled()) {
                    messagePublisher.reportError("Database '" + db.name + "' is disabled!", "You can't access any section of the database while it's disabled.");
                    return { redirect: appUrl.forResources() };
                }

                viewModelBase.isConfirmedUsingSystemDatabase = false;
            }

            return true;
        };

        /*
        * Called by Durandal when the view model is loaded and before the view is inserted into the DOM.
        */
        viewModelBase.prototype.activate = function (args) {
            var _this = this;
            var db = appUrl.getDatabase();
            var currentDb = this.activeDatabase();
            if (!!db && (!currentDb || currentDb.name !== db.name)) {
                ko.postbox.publish("ActivateDatabaseWithName", db.name);
            }

            oauthContext.enterApiKeyTask.done(function () {
                return _this.notifications = _this.createNotifications();
            });

            this.postboxSubscriptions = this.createPostboxSubscriptions();
            this.modelPollingStart();

            window.addEventListener("beforeunload", this.beforeUnloadListener, false);

            ko.postbox.publish("SetRawJSONUrl", "");
        };

        /*
        * Called by Durandal when the view model is loaded and after the view is inserted into the DOM.
        */
        viewModelBase.prototype.compositionComplete = function () {
            this.dirtyFlag().reset(); //Resync Changes
        };

        /*
        * Called by Durandal before deactivate in order to determine whether removing from the DOM is necessary.
        */
        viewModelBase.prototype.canDeactivate = function (isClose) {
            var isDirty = this.dirtyFlag().isDirty();
            if (isDirty) {
                var discard = "Discard changes";
                var stay = "Stay on this page";
                var discardStayResult = $.Deferred();
                var confirmation = this.confirmationMessage("Unsaved changes", "You have unsaved changes. How do you want to proceed?", [discard, stay], true);
                confirmation.done(function (result) {
                    result.can = !result.can;
                    discardStayResult.resolve(result);
                });

                return discardStayResult;
            }

            return true;
        };

        /*
        * Called by Durandal when the view model is unloaded and after the view is removed from the DOM.
        */
        viewModelBase.prototype.detached = function () {
            this.activeDatabase.unsubscribeFrom("ActivateDatabase");
            this.activeFilesystem.unsubscribeFrom("ActivateFilesystem");
            this.activeCounterStorage.unsubscribeFrom("ActivateCounterStorage");
            this.cleanupNotifications();
            this.cleanupPostboxSubscriptions();
            window.removeEventListener("beforeunload", this.beforeUnloadListener, false);
        };

        /*
        * Called by Durandal when the view model is unloading and the view is about to be removed from the DOM.
        */
        viewModelBase.prototype.deactivate = function () {
            var _this = this;
            this.keyboardShortcutDomContainers.forEach(function (el) {
                return _this.removeKeyboardShortcuts(el);
            });
            this.modelPollingStop();
        };

        viewModelBase.prototype.createNotifications = function () {
            return [];
        };

        viewModelBase.prototype.cleanupNotifications = function () {
            this.notifications.forEach(function (notification) {
                return notification.off();
            });
            this.notifications = [];
        };

        viewModelBase.prototype.createPostboxSubscriptions = function () {
            return [];
        };

        viewModelBase.prototype.cleanupPostboxSubscriptions = function () {
            this.postboxSubscriptions.forEach(function (subscription) {
                return subscription.dispose();
            });
            this.postboxSubscriptions = [];
        };

        /*
        * Creates a keyboard shortcut local to the specified element and its children.
        * The shortcut will be removed as soon as the view model is deactivated.
        * Also defines shortcut for ace editor, if ace editor was received
        */
        viewModelBase.prototype.createKeyboardShortcut = function (keys, handler, elementSelector) {
            jwerty.key(keys, function (e) {
                e.preventDefault();
                handler();
            }, this, elementSelector);

            if (!this.keyboardShortcutDomContainers.contains(elementSelector)) {
                this.keyboardShortcutDomContainers.push(elementSelector);
            }
        };

        viewModelBase.prototype.removeKeyboardShortcuts = function (elementSelector) {
            $(elementSelector).unbind('keydown.jwerty');
        };

        /*
        * Navigates to the specified URL, recording a navigation event in the browser's history.
        */
        viewModelBase.prototype.navigate = function (url) {
            router.navigate(url);
        };

        /*
        * Navigates by replacing the current URL. It does not record a new entry in the browser's navigation history.
        */
        viewModelBase.prototype.updateUrl = function (url) {
            var options = {
                replace: true,
                trigger: false
            };
            router.navigate(url, options);
        };

        viewModelBase.prototype.modelPolling = function () {
        };

        viewModelBase.prototype.forceModelPolling = function () {
            this.modelPolling();
        };

        viewModelBase.prototype.modelPollingStart = function () {
            var _this = this;
            this.modelPolling();

            // clear previous pooling handle (if any)
            if (viewModelBase.modelPollingHandle) {
                this.modelPollingStop();
                viewModelBase.modelPollingHandle = null;
            }
            viewModelBase.modelPollingHandle = setInterval(function () {
                return _this.modelPolling();
            }, 5000);
            this.activeDatabase.subscribe(function () {
                return _this.forceModelPolling();
            });
            this.activeFilesystem.subscribe(function () {
                return _this.forceModelPolling();
            });
        };

        viewModelBase.prototype.modelPollingStop = function () {
            clearInterval(viewModelBase.modelPollingHandle);
        };

        viewModelBase.prototype.confirmationMessage = function (title, confirmationMessage, options, forceRejectWithResolve) {
            if (typeof options === "undefined") { options = ['No', 'Yes']; }
            if (typeof forceRejectWithResolve === "undefined") { forceRejectWithResolve = false; }
            var viewTask = $.Deferred();
            var confirmTask = app.showDialog(new confirmationDialog(confirmationMessage, title, options));

            confirmTask.done(function (answer) {
                var isConfirmed = answer === options.last();
                if (isConfirmed) {
                    viewTask.resolve({ can: true });
                } else if (!forceRejectWithResolve) {
                    viewTask.reject();
                } else {
                    viewTask.resolve({ can: false });
                }
            });

            return viewTask;
        };

        viewModelBase.prototype.canContinueIfNotDirty = function (title, confirmationMessage) {
            var deferred = $.Deferred();

            var isDirty = this.dirtyFlag().isDirty();
            if (isDirty) {
                var confirmationMessageViewModel = this.confirmationMessage(title, confirmationMessage);
                confirmationMessageViewModel.done(function () {
                    return deferred.resolve();
                });
            } else {
                deferred.resolve();
            }

            return deferred;
        };

        viewModelBase.prototype.promptNavSystemDb = function (forceRejectWithResolve) {
            if (typeof forceRejectWithResolve === "undefined") { forceRejectWithResolve = false; }
            var canNavTask = $.Deferred();

            if (!appUrl.warnWhenUsingSystemDatabase || viewModelBase.isConfirmedUsingSystemDatabase) {
                canNavTask.resolve({ can: true });
            } else {
                var systemDbConfirm = new viewSystemDatabaseConfirm("Meddling with the system database could cause irreversible damage");
                systemDbConfirm.viewTask.fail(function () {
                    return forceRejectWithResolve == false ? canNavTask.resolve({ redirect: appUrl.forResources() }) : canNavTask.reject();
                }).done(function () {
                    viewModelBase.isConfirmedUsingSystemDatabase = true;
                    canNavTask.resolve({ can: true });
                });
                app.showDialog(systemDbConfirm);
            }

            return canNavTask;
        };

        viewModelBase.prototype.AddNotification = function (subscription) {
            this.notifications.push(subscription);
        };

        viewModelBase.prototype.RemoveNotification = function (subscription) {
            this.notifications.remove(subscription);
        };
        viewModelBase.isConfirmedUsingSystemDatabase = false;
        return viewModelBase;
    })();

    
    return viewModelBase;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/viewSystemDatabaseConfirm", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var viewSystemDatabaseConfirm = (function (_super) {
        __extends(viewSystemDatabaseConfirm, _super);
        function viewSystemDatabaseConfirm(confirmationMessage, previousDb) {
            if (typeof previousDb === "undefined") { previousDb = null; }
            _super.call(this);
            this.confirmationMessage = confirmationMessage;
            this.previousDb = previousDb;
            this.viewTask = $.Deferred();
            this.wasConfirmed = false;
        }
        viewSystemDatabaseConfirm.prototype.viewSystemDatabase = function () {
            this.viewTask.resolve();
            this.wasConfirmed = true;
            dialog.close(this);
        };

        viewSystemDatabaseConfirm.prototype.cancel = function () {
            this.viewTask.reject(this.previousDb);
            this.wasConfirmed = false;
            dialog.close(this);
        };

        viewSystemDatabaseConfirm.prototype.detached = function () {
            _super.prototype.detached.call(this);

            if (!this.wasConfirmed) {
                this.viewTask.reject(this.previousDb);
            }
        };
        return viewSystemDatabaseConfirm;
    })(dialogViewModelBase);

    
    return viewSystemDatabaseConfirm;
});
/// <reference path="../../Scripts/typings/jquery.fullscreen/jquery.fullscreen.d.ts"/>
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/visualizer", ["require", "exports", "durandal/app", "common/appUrl", "common/jsonUtil", "common/generalUtils", "common/svgDownloader", "common/fileDownloader", "common/chunkFetcher", "plugins/router", "viewmodels/visualizerKeys", "viewmodels/visualizerImport", "viewmodels/viewModelBase", "commands/queryIndexDebugDocsCommand", "commands/queryIndexDebugMapCommand", "commands/queryIndexDebugReduceCommand", "commands/queryIndexDebugAfterReduceCommand", "commands/getDatabaseStatsCommand", 'd3/d3', 'nvd3'], function(require, exports, app, appUrl, jsonUtil, generalUtils, svgDownloader, fileDownloader, chunkFetcher, router, visualizerKeys, visualizerImport, viewModelBase, queryIndexDebugDocsCommand, queryIndexDebugMapCommand, queryIndexDebugReduceCommand, queryIndexDebugAfterReduceCommand, getDatabaseStatsCommand, d3, nv) {
    var visualizer = (function (_super) {
        __extends(visualizer, _super);
        function visualizer() {
            _super.apply(this, arguments);
            var _this = this;
            this.indexes = ko.observableArray();
            this.indexName = ko.observable(visualizer.chooseIndexText);
            this.onlineMode = ko.observable(true);
            this.showLoadingIndicator = ko.observable(false);
            this.docKey = ko.observable("");
            this.docKeys = ko.observableArray();
            this.docKeysSearchResults = ko.observableArray();
            this.reduceKey = ko.observable("");
            this.reduceKeys = ko.observableArray();
            this.reduceKeysSearchResults = ko.observableArray();
            this.hasIndexSelected = ko.computed(function () {
                return _this.indexName() !== visualizer.chooseIndexText;
            });
            this.colors = d3.scale.category10();
            this.colorMap = {};
            this.selectedDocs = ko.observableArray();
            this.currentlySelectedNodes = d3.set([]);
            this.currentlySelectedLinks = d3.set([]);
            this.tree = null;
            this.nodes = [];
            this.links = [];
            this.margin = {
                left: 10,
                right: 10,
                bottom: 10,
                top: 10
            };
            this.boxSpacing = 30;
            this.node = null;
            this.link = null;
            this.hasSaveAsPngSupport = ko.computed(function () {
                return !(navigator && navigator.msSaveBlob);
            });
        }
        visualizer.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            if (args && args.index) {
                this.indexName(args.index);
            }

            this.editIndexUrl = ko.computed(function () {
                return appUrl.forEditIndex(_this.indexName(), _this.activeDatabase());
            });

            this.runQueryUrl = ko.computed(function () {
                return appUrl.forQuery(_this.activeDatabase(), _this.indexName());
            });
            this.reduceKey.throttle(250).subscribe(function (search) {
                return _this.fetchReduceKeySearchResults(search);
            });
            this.docKey.throttle(250).subscribe(function (search) {
                return _this.fetchDocKeySearchResults(search);
            });

            this.selectedDocs.subscribe(function () {
                return _this.repaintSelectedNodes();
            });

            $(document).bind("fullscreenchange", function () {
                if ($(document).fullScreen()) {
                    $("#fullScreenButton i").removeClass("fa-expand").addClass("fa-compress");
                } else {
                    $("#fullScreenButton i").removeClass("fa-compress").addClass("fa-expand");
                }
            });

            return this.fetchAllIndexes();
        };

        visualizer.prototype.attached = function () {
            var _this = this;
            var that = this;
            this.createKeyboardShortcut("esc", function () {
                return that.tooltipClose();
            }, "body");

            this.resetChart();
            var svg = d3.select("#visualizer");
            this.diagonal = d3.svg.diagonal().projection(function (d) {
                return [d.y, d.x];
            });
            this.node = svg.selectAll(".node");
            this.link = svg.selectAll(".link");

            $("#visualizerContainer").resize().on('DynamicHeightSet', function () {
                return _this.onWindowHeightChanged();
            });
            this.width = $("#visualizerContainer").width();
            this.height = $("#visualizerContainer").height();
            this.updateScale();
            this.drawHeader();
        };

        visualizer.prototype.resetChart = function () {
            this.tooltipClose();
            this.reduceKey("");
            this.reduceKeys([]);
            this.docKey("");
            this.docKeys([]);
            this.tree = {
                level: 5,
                name: 'root',
                children: []
            };
            this.colorMap = {};

            this.currentlySelectedNodes = d3.set([]);
            this.currentlySelectedLinks = d3.set([]);
        };

        visualizer.prototype.fetchReduceKeySearchResults = function (query) {
            var _this = this;
            if (query.length >= 2) {
                new queryIndexDebugMapCommand(this.indexName(), this.activeDatabase(), { startsWith: query }, 0, 10).execute().done(function (results) {
                    if (_this.reduceKey() === query) {
                        _this.reduceKeysSearchResults(results.sort());
                    }
                });
            } else if (query.length == 0) {
                this.reduceKeysSearchResults.removeAll();
            }
        };

        visualizer.prototype.fetchDocKeySearchResults = function (query) {
            var _this = this;
            if (query.length >= 2) {
                new queryIndexDebugDocsCommand(this.indexName(), this.activeDatabase(), query, 0, 10).execute().done(function (results) {
                    if (_this.docKey() === query) {
                        _this.docKeysSearchResults(results.sort());
                    }
                });
            } else if (query.length == 0) {
                this.docKeysSearchResults.removeAll();
            }
        };

        visualizer.prototype.updateScale = function () {
            this.xScale = d3.scale.linear().domain([0, 5]).range([this.margin.left, this.width - this.margin.left - this.margin.right]);
            this.boxWidth = this.width / 7;
        };

        visualizer.prototype.drawHeader = function () {
            var _this = this;
            var header = d3.select("#visHeader");
            var headerData = ["Input", "Map", "Reduce 0", "Reduce 1", "Reduce 2"];
            var texts = header.selectAll("text").data(headerData);

            texts.attr('x', function (d, i) {
                return _this.xScale(i) + _this.boxWidth / 2;
            });

            texts.enter().append("text").attr('y', 20).attr('x', function (d, i) {
                return _this.xScale(i) + _this.boxWidth / 2;
            }).text(function (d) {
                return d;
            }).attr("text-anchor", "middle");
        };

        visualizer.prototype.detached = function () {
            _super.prototype.detached.call(this);

            $("#visualizerContainer").off('DynamicHeightSet');
            nv.tooltip.cleanup();
        };

        visualizer.prototype.onWindowHeightChanged = function () {
            this.width = $("#visualizerContainer").width();
            this.updateScale();
            this.drawHeader();
            this.updateGraph();
        };

        visualizer.prototype.addDocKey = function (key) {
            var _this = this;
            if (key && !this.docKeys.contains(key)) {
                this.docKeys.push(key);
            }
            new queryIndexDebugMapCommand(this.indexName(), this.activeDatabase(), { sourceId: key }, 0, 1024).execute().then(function (results) {
                results.forEach(function (r) {
                    return _this.addReduceKey(r);
                });
            });
        };

        visualizer.prototype.addReduceKey = function (key) {
            var _this = this;
            this.showLoadingIndicator(true);
            var self = this;
            if (key && !this.reduceKeys().contains(key)) {
                this.reduceKeys.push(key);

                this.colorMap[key] = this.colors(Object.keys(this.colorMap).length);
                this.reduceKey("");

                this.fetchDataFor(key).then(function (subTree) {
                    if (self.tree.children === undefined) {
                        self.tree.children = [];
                    }
                    if (subTree.children.length > 0) {
                        self.tree.children.push(subTree);
                        self.updateGraph();
                    }
                }).always(function () {
                    return _this.showLoadingIndicator(false);
                });
            } else {
                this.showLoadingIndicator(false);
            }
        };

        visualizer.prototype.setSelectedIndex = function (indexName) {
            this.indexName(indexName);
            this.resetChart();
            this.updateGraph();
        };

        visualizer.prototype.clearChart = function () {
            this.indexName(visualizer.chooseIndexText);
            this.onlineMode(true);
            this.resetChart();
            this.updateGraph();
        };

        visualizer.prototype.fetchAllIndexes = function () {
            var _this = this;
            return new getDatabaseStatsCommand(this.activeDatabase()).execute().done(function (results) {
                return _this.indexes(results.Indexes.map(function (i) {
                    return {
                        name: i.Name,
                        hasReduce: !!i.LastReducedTimestamp
                    };
                }).filter(function (i) {
                    return i.hasReduce;
                }));
            });
        };

        visualizer.makeLinkId = function (link) {
            if ("cachedId" in link) {
                return link.cachedId;
            } else {
                var result = "link-" + visualizer.makeNodeId(link.source.origin) + "-" + visualizer.makeNodeId(link.target.origin);
                link.cachedId = result;
                return result;
            }
        };

        visualizer.makeNodeId = function (data) {
            if ("cachedId" in data) {
                return data.cachedId;
            } else {
                var nodeId = null;
                if (data.level == 4) {
                    nodeId = "node-" + data.level + "-" + data.payload.Data["__reduce_key"];
                } else if (data.payload) {
                    nodeId = "node-" + data.level + "-" + data.payload.ReduceKey + "-" + data.payload.Source + "-" + data.payload.Bucket;
                } else {
                    nodeId = "node-" + data.level + "-" + data.name;
                }
                nodeId = generalUtils.escape(nodeId);
                data.cachedId = nodeId;
                return nodeId;
            }
        };

        visualizer.prototype.estimateHeight = function () {
            var level1Nodes = 0;
            var nodes = [this.tree];
            var node = null;
            while ((node = nodes.pop()) != null) {
                if (node.level == 1)
                    level1Nodes++;
                if ((children = node.children) && (n = children.length)) {
                    var n, children;
                    while (--n >= 0)
                        nodes.push(children[n]);
                }
            }
            return this.boxSpacing * level1Nodes + this.margin.top + this.margin.bottom;
        };

        visualizer.prototype.goToDoc = function (docName) {
            router.navigate(appUrl.forEditDoc(docName, null, null, this.activeDatabase()));
        };

        visualizer.prototype.getTooltip = function (data) {
            var content = "";
            if (data.level == 0) {
                content += '<button data-bind="click: goToDoc.bind($root, \'' + data.name + '\')" class="btn" type="button">Go to document</button>';
            } else {
                var dataFormatted = JSON.stringify(data.payload.Data, undefined, 2);
                content += '<button type="button" class="close" data-bind="click: tooltipClose" aria-hidden="true"><i class="fa fa-times"></i></button>' + "<table> ";

                if (data.level < 4) {
                    content += "<tr><td><strong>Reduce Key</strong></td><td>" + data.payload.ReduceKey + "</td></tr>" + "<tr><td><strong>Timestamp</strong></td><td>" + data.payload.Timestamp + "</td></tr>" + "<tr><td><strong>Etag</strong></td><td>" + data.payload.Etag + "</td></tr>" + "<tr><td><strong>Bucket</strong></td><td>" + data.payload.Bucket + "</td></tr>" + "<tr><td><strong>Source</strong></td><td>" + data.payload.Source + "</td></tr>";
                }

                content += "<tr><td><strong>Data</strong></td><td><pre>" + jsonUtil.syntaxHighlight(dataFormatted) + "</pre></td></tr>" + "</table>";
            }
            return content;
        };

        visualizer.prototype.updateGraph = function () {
            var _this = this;
            this.height = this.estimateHeight();
            var self = this;

            d3.select("#visualizer").style({ height: self.height + 'px' }).attr("viewBox", "0 0 " + this.width + " " + this.height);

            this.graph = d3.layout.cluster().size([this.height - this.margin.top - this.margin.bottom, this.width - this.margin.left - this.margin.right]);
            this.nodes = this.graph.nodes(this.tree);
            this.links = this.graph.links(this.nodes);
            this.remapNodesAndLinks();
            this.links = this.links.filter(function (l) {
                return l.target.level < 4;
            }).map(function (l) {
                return {
                    source: {
                        y: self.xScale(l.source.level),
                        x: l.source.x + self.margin.top,
                        origin: l.source
                    },
                    target: {
                        y: self.xScale(l.target.level) + self.boxWidth,
                        x: l.target.x + self.margin.top,
                        origin: l.target
                    }
                };
            });

            this.node = this.node.data(this.nodes);
            this.link = this.link.data(this.links);

            var existingNodes = this.node.attr("transform", function (d) {
                return "translate(" + self.xScale(d.level) + "," + (d.x + _this.margin.top) + ")";
            });

            existingNodes.select("rect").attr('width', self.boxWidth);

            existingNodes.select('text').attr('x', self.boxWidth / 2);

            this.link.attr("d", this.diagonal);

            this.link.enter().append("path").attr("class", "link").attr("id", visualizer.makeLinkId).attr("d", this.diagonal);

            var enteringNodes = this.node.enter().append("g").attr("id", visualizer.makeNodeId).attr("transform", function (d) {
                return "translate(" + self.xScale(d.level) + "," + (d.x + _this.margin.top) + ")";
            });

            enteringNodes.filter(function (d) {
                return d.level > 4;
            }).classed("hidden", true);

            enteringNodes.append("rect").attr('class', 'nodeRect').attr('x', 0).attr('y', -10).attr("fill", function (d) {
                return d.level > 0 ? self.colorMap[d.name] : 'white';
            }).attr('width', self.boxWidth).attr('height', 20).attr('rx', 5).on("click", function (d) {
                nv.tooltip.cleanup();
                var offset = $(this).offset();
                var containerOffset = $("#visualizerSection").offset();
                nv.tooltip.show([offset.left - containerOffset.left + self.boxWidth / 2, offset.top - containerOffset.top], self.getTooltip(d), 'n', 25, document.getElementById("visualizerSection"), "selectable-tooltip");
                $(".nvtooltip").each(function (i, elem) {
                    ko.applyBindings(self, elem);
                });
            });

            enteringNodes.filter(function (d) {
                return d.level <= 3;
            }).append("rect").attr('class', 'nodeCheck').attr('x', 3).attr('y', -7).attr('width', 14).attr('height', 14).attr('rx', 2).on("click", function (d) {
                nv.tooltip.cleanup();
                var selected = this.classList.contains("selected");
                d3.select(this).classed("selected", !selected);

                if (selected) {
                    self.selectedDocs.remove(d);
                } else {
                    if (!self.selectedDocs.contains(d)) {
                        self.selectedDocs.push(d);
                    }
                }
            });

            enteringNodes.append("text").attr("x", self.boxWidth / 2).attr("y", 4.5).text(function (d) {
                return d.name;
            });

            this.node.exit().remove();
            this.link.exit().remove();
        };

        visualizer.prototype.fetchDataFor = function (key) {
            var _this = this;
            var allDataFetched = $.Deferred();

            var mapFetcherTask = new chunkFetcher(function (skip, take) {
                return new queryIndexDebugMapCommand(_this.indexName(), _this.activeDatabase(), { key: key }, skip, take).execute();
            }).execute();
            var reduce1FetcherTask = new chunkFetcher(function (skip, take) {
                return new queryIndexDebugReduceCommand(_this.indexName(), _this.activeDatabase(), 1, key, skip, take).execute();
            }).execute();
            var reduce2FetcherTask = new chunkFetcher(function (skip, take) {
                return new queryIndexDebugReduceCommand(_this.indexName(), _this.activeDatabase(), 2, key, skip, take).execute();
            }).execute();
            var indexEntryTask = new queryIndexDebugAfterReduceCommand(this.indexName(), this.activeDatabase(), [key]).execute();

            $.when(mapFetcherTask, reduce1FetcherTask, reduce2FetcherTask, indexEntryTask).then(function (map, reduce1, reduce2, indexEntries) {
                if (map.length == 0 && reduce1.length == 0 && reduce2.length == 0) {
                    allDataFetched.resolve({
                        level: 4,
                        name: key,
                        children: []
                    });
                    return;
                }

                var mapGroupedByBucket = d3.nest().key(function (k) {
                    return String(k.Bucket);
                }).map(map, d3.map);

                var reduce1GropedByBucket = d3.nest().key(function (d) {
                    return String(d.Bucket);
                }).map(reduce1, d3.map);

                var indexEntry = indexEntries[0];

                if (reduce2.length == 0 && reduce1.length == 0) {
                    var subTree = map.map(function (m) {
                        return {
                            name: m.ReduceKey,
                            payload: m,
                            level: 1,
                            children: [
                                {
                                    name: m.Source,
                                    level: 0,
                                    children: []
                                }
                            ]
                        };
                    });

                    allDataFetched.resolve({
                        level: 4,
                        name: key,
                        payload: { Data: indexEntry },
                        children: subTree
                    });
                }

                if (reduce2.length > 0 && reduce1.length > 0) {
                    var subTree = reduce2.map(function (r2) {
                        return {
                            name: r2.ReduceKey,
                            payload: r2,
                            level: 3,
                            children: reduce1GropedByBucket.get(r2.Source).map(function (r1) {
                                return {
                                    name: r1.ReduceKey,
                                    payload: r1,
                                    level: 2,
                                    children: mapGroupedByBucket.get(r1.Source).map(function (m) {
                                        return {
                                            name: m.ReduceKey,
                                            payload: m,
                                            level: 1,
                                            children: [
                                                {
                                                    name: m.Source,
                                                    level: 0,
                                                    children: []
                                                }
                                            ]
                                        };
                                    })
                                };
                            })
                        };
                    });
                    allDataFetched.resolve({
                        level: 4,
                        name: key,
                        payload: { Data: indexEntry },
                        children: subTree
                    });
                }
            }, function () {
                allDataFetched.reject();
            });
            return allDataFetched;
        };

        visualizer.prototype.tooltipClose = function () {
            nv.tooltip.cleanup();
        };

        visualizer.prototype.selectReduceKey = function (value) {
            this.addReduceKey(value);
            this.reduceKey("");
        };

        visualizer.prototype.selectDocKey = function (value) {
            this.addDocKey(value);
            this.docKey("");
        };

        visualizer.prototype.transiviteClosure = function () {
            var result = d3.set([]);
            var nodes = this.selectedDocs();
            var queue = [];
            queue.pushAll(nodes);

            this.treeTranverse(queue, function (node) {
                return result.add(visualizer.makeNodeId(node));
            });

            return result;
        };

        visualizer.prototype.treeTranverse = function (queue, callback, refPropName) {
            if (typeof refPropName === "undefined") { refPropName = "connections"; }
            var everQueued = d3.set([]);

            while (queue.length > 0) {
                var node = queue.shift();
                callback(node);

                if (node[refPropName]) {
                    node[refPropName].forEach(function (c) {
                        var nodeId = visualizer.makeNodeId(c);
                        if (!everQueued.has(nodeId)) {
                            queue.push(c);
                            everQueued.add(nodeId);
                        }
                    });
                }
            }
        };

        visualizer.prototype.exportTree = function (root) {
            var _this = this;
            return {
                level: root.level,
                name: root.name,
                payload: root.payload,
                children: root.children ? $.map(root.children, function (v, i) {
                    return _this.exportTree(v);
                }) : undefined
            };
        };

        visualizer.prototype.computeLinks = function (nodes) {
            var output = d3.set([]);

            this.links.forEach(function (link) {
                var node1 = visualizer.makeNodeId(link.source.origin);
                var node2 = visualizer.makeNodeId(link.target.origin);

                if (nodes.has(node1) && nodes.has(node2)) {
                    output.add(visualizer.makeLinkId(link));
                }
            });
            return output;
        };

        visualizer.prototype.repaintSelectedNodes = function () {
            var newClosure = this.transiviteClosure();
            var currentClosure = this.currentlySelectedNodes;
            var currentLinks = this.currentlySelectedLinks;
            var newLinks = this.computeLinks(newClosure);

            // remove all works in situ
            var incoming = newClosure.values();
            incoming.removeAll(currentClosure.values());
            var outgoing = currentClosure.values();
            outgoing.removeAll(newClosure.values());
            var incomingLinks = newLinks.values();
            incomingLinks.removeAll(currentLinks.values());
            var outgoingLinks = currentLinks.values();
            outgoingLinks.removeAll(newLinks.values());

            incoming.forEach(function (name) {
                return d3.select("#" + name).select('rect').classed("highlight", true);
            });
            outgoing.forEach(function (name) {
                return d3.select("#" + name).select('rect').classed("highlight", false);
            });
            incomingLinks.forEach(function (name) {
                return d3.select("#" + name).classed("selected", true);
            });
            outgoingLinks.forEach(function (name) {
                return d3.select("#" + name).classed("selected", false);
            });

            this.currentlySelectedNodes = newClosure;
            this.currentlySelectedLinks = newLinks;
        };

        visualizer.prototype.remapNodesAndLinks = function () {
            var seenNames = {};
            var nodesToDelete = [];

            // process nodes
            this.nodes.forEach(function (node) {
                if (node.level == 0) {
                    if (node.name in seenNames) {
                        nodesToDelete.push(node);
                    } else {
                        seenNames[node.name] = node;
                    }
                }
            });
            this.nodes.removeAll(nodesToDelete);

            // process links
            this.links = this.links.map(function (link) {
                if (!("connections" in link.target)) {
                    link.target.connections = [];
                }
                if (link.target.level == 0) {
                    var newTarget = seenNames[link.target.name];
                    link.target = newTarget;
                    if (!link.target.connections.contains(link.source)) {
                        link.target.connections.push(link.source);
                    }
                    return link;
                } else {
                    if (!link.target.connections.contains(link.source)) {
                        link.target.connections.push(link.source);
                    }
                    return link;
                }
            });
        };

        visualizer.prototype.toggleFullscreen = function () {
            if ($(document).fullScreen()) {
                $("#visualizerSection").width('').height('');
                $("#keysDialogBtn").removeAttr('disabled');
            } else {
                $("#visualizerSection").width("100%").height("100%");
                $("#keysDialogBtn").attr('disabled', 'disabled');
            }

            $("#visualizerSection").toggleFullScreen();
        };

        visualizer.prototype.displayKeyInfo = function () {
            app.showDialog(new visualizerKeys(this));
        };

        visualizer.prototype.saveAsSvg = function () {
            svgDownloader.downloadSvg(d3.select('#visualizer').node(), 'visualization.svg', function (e) {
                return visualizer.visualizationCss;
            });
        };

        visualizer.prototype.saveAsPng = function () {
            svgDownloader.downloadPng(d3.select('#visualizer').node(), 'visualization.png', function (e) {
                return visualizer.visualizationCss;
            });
        };

        visualizer.prototype.saveAsJson = function () {
            var model = {
                indexName: this.indexName(),
                docKeys: this.docKeys(),
                reduceKeys: this.reduceKeys(),
                tree: this.exportTree(this.tree)
            };

            fileDownloader.downloadAsJson(model, "visualizer.json");
        };

        visualizer.prototype.chooseImportFile = function () {
            var _this = this;
            var dialog = new visualizerImport();
            dialog.task().done(function (importedData) {
                _this.clearChart();
                _this.onlineMode(false);
                _this.docKeys(importedData.docKeys);
                _this.reduceKeys(importedData.reduceKeys);

                importedData.reduceKeys.forEach(function (reduceKey) {
                    _this.colorMap[reduceKey] = _this.colors(Object.keys(_this.colorMap).length);
                });

                _this.tree = importedData.tree;
                _this.indexName(importedData.indexName);
                _this.updateGraph();
            });

            app.showDialog(dialog);
        };
        visualizer.chooseIndexText = "Select an index";

        visualizer.visualizationCss = '* { box-sizing: border-box; }\n' + '.hidden { display: none !important; visibility: hidden !important; }\n' + 'svg text { font-style: normal; font-variant: normal; font-weight: normal; font-size: 12px; line-height: normal; font-family: Arial; }\n' + '.nodeRect { stroke: rgb(119, 119, 119); stroke-width: 1.5px; fill-opacity: 0.4 !important; }\n' + '.nodeCheck { stroke-width: 2px; stroke: rgb(0, 0, 0); fill: rgb(255, 255, 255); }\n' + '.hidden { display: none; }\n' + 'g { font-style: normal; font-variant: normal; font-weight: normal; font-size: 10px; line-height: normal; font-family: sans - serif; cursor: pointer; }\n' + '.link { fill: none; stroke: rgb(204, 204, 204); stroke-width: 1.5px; }\n' + 'text { pointer-events: none; text-anchor: middle; }\n' + '.link.selected { fill: none; stroke: black; stroke-width: 2.5px; } \n';
        return visualizer;
    })(viewModelBase);

    
    return visualizer;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/visualizerImport", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var visualizerImport = (function (_super) {
        __extends(visualizerImport, _super);
        function visualizerImport() {
            _super.apply(this, arguments);
            this.importTask = $.Deferred();
            this.hasFileSelected = ko.observable(false);
            this.isImporting = ko.observable(false);
        }
        visualizerImport.prototype.fileSelected = function (args) {
            this.hasFileSelected(true);
        };

        visualizerImport.prototype.doImport = function () {
            var _this = this;
            var fileInput = document.querySelector("#importFilePicker");
            var self = this;
            var file = fileInput.files[0];
            var reader = new FileReader();
            reader.onload = function () {
                self.dataImported(this.result);
            };
            reader.onerror = function (error) {
                return _this.importTask.reject(error);
            };
            reader.readAsText(file);
        };

        visualizerImport.prototype.dataImported = function (result) {
            var json = JSON.parse(result);
            this.importTask.resolve(json);
            dialog.close(this);
        };

        visualizerImport.prototype.cancel = function () {
            dialog.close(this);
        };

        visualizerImport.prototype.task = function () {
            return this.importTask.promise();
        };
        return visualizerImport;
    })(dialogViewModelBase);

    
    return visualizerImport;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/visualizerKeys", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var visualizerKeys = (function (_super) {
        __extends(visualizerKeys, _super);
        function visualizerKeys(visualizer) {
            _super.call(this);
            this.visualizer = visualizer;
        }
        visualizerKeys.prototype.cancel = function () {
            dialog.close(this);
        };
        return visualizerKeys;
    })(dialogViewModelBase);

    
    return visualizerKeys;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/watchTrafficConfigDialog", ["require", "exports", "durandal/app", "plugins/dialog", "viewmodels/dialogViewModelBase", "viewmodels/shell", "commands/getDatabasesCommand", "commands/filesystem/getFileSystemsCommand", "commands/getSingleAuthTokenCommand", 'common/appUrl'], function(require, exports, app, dialog, dialogViewModelBase, shell, getDatabasesCommand, getFileSystemsCommand, getSingleAuthTokenCommand, appUrl) {
    var watchTrafficConfigDialog = (function (_super) {
        __extends(watchTrafficConfigDialog, _super);
        function watchTrafficConfigDialog() {
            var _this = this;
            _super.call(this);
            this.configurationTask = $.Deferred();
            this.watchedResourceMode = ko.observable("SingleResourceView");
            this.resourceName = ko.observable('');
            this.lastSearchedwatchedResourceName = ko.observable();
            this.resourceAutocompletes = ko.observableArray([]);
            this.maxEntries = ko.observable(1000);
            this.allResources = ko.observableArray([]);
            this.resourceName.throttle(250).subscribe(function (search) {
                return _this.fetchResourcesAutocompletes(search);
            });
            this.isAutoCompleteVisible = ko.computed(function () {
                return _this.lastSearchedwatchedResourceName() !== _this.resourceName() && (_this.resourceAutocompletes().length > 1 || _this.resourceAutocompletes().length == 1 && _this.resourceName() !== _this.resourceAutocompletes()[0]);
            });

            $(window).resize(function () {
                _this.alignBoxVertically();
            });

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newResourceName = _this.resourceName();
                var foundDb = shell.databases.first(function (db) {
                    return newResourceName == db.name;
                });
                var foundFs = shell.fileSystems.first(function (fs) {
                    return newResourceName == fs.name;
                });

                if (!foundDb && !foundFs && newResourceName.length > 0) {
                    errorMessage = "Database or filesystem name doesn't exist!";
                }

                return errorMessage;
            });
        }
        watchTrafficConfigDialog.prototype.canActivate = function () {
            var _this = this;
            var loadDialogDeferred = $.Deferred();
            var databasesLoadTask = new getDatabasesCommand().execute();
            var fileSystemsLoadTask = new getFileSystemsCommand().execute();
            $.when(databasesLoadTask, fileSystemsLoadTask).always(function (databases, filesystems) {
                if (!!databases && databases.length > 0) {
                    databases.forEach(function (x) {
                        return _this.allResources.push(x);
                    });
                }
                if (!!filesystems && filesystems.length > 0) {
                    filesystems.forEach(function (x) {
                        if (!_this.allResources.first(function (y) {
                            return y.name == x.name;
                        }))
                            _this.allResources.push(x);
                    });
                }
                loadDialogDeferred.resolve({ can: true });
            });
            return loadDialogDeferred;
        };

        watchTrafficConfigDialog.prototype.activate = function (args) {
        };
        watchTrafficConfigDialog.prototype.bindingComplete = function () {
            document.getElementById("watchedResource").focus();
        };

        watchTrafficConfigDialog.prototype.enterKeyPressed = function () {
            return true;
        };
        watchTrafficConfigDialog.prototype.fetchResourcesAutocompletes = function (search) {
            if (this.resourceName() === search) {
                if (this.resourceAutocompletes.length == 1 && this.resourceName() == this.resourceAutocompletes()[0]) {
                    this.resourceAutocompletes.removeAll();
                    return;
                }
                this.resourceAutocompletes(this.allResources().filter(function (x) {
                    return x.name.toLowerCase().indexOf(search.toLowerCase()) == 0;
                }).map(function (x) {
                    return x.name;
                }));
            }
        };

        watchTrafficConfigDialog.prototype.cancel = function () {
            dialog.close(this);
        };

        watchTrafficConfigDialog.prototype.deactivate = function () {
            this.configurationTask.reject();
        };

        watchTrafficConfigDialog.prototype.confirmConfig = function () {
            var _this = this;
            var tracedResource;
            if ((!this.resourceName() || this.resourceName().trim() == "") && this.watchedResourceMode() == "SingleResourceView") {
                app.showMessage("Resource name should be chosen", "Validation Error");
                return;
            }
            if (this.watchedResourceMode() == "SingleResourceView" && !this.allResources.first(function (x) {
                return x.name == _this.resourceName();
            })) {
                app.showMessage("Resource name is not recognized", "Validation Error");
                return;
            }
            if (this.watchedResourceMode() == "SingleResourceView")
                tracedResource = this.allResources.first(function (x) {
                    return x.name == _this.resourceName();
                });

            tracedResource = !!tracedResource ? tracedResource : appUrl.getSystemDatabase();
            var resourcePath = appUrl.forResourceQuery(tracedResource);

            var getTokenTask = new getSingleAuthTokenCommand(tracedResource, this.watchedResourceMode() == "AdminView").execute();

            getTokenTask.done(function (tokenObject) {
                _this.configurationTask.resolve({
                    Resource: tracedResource,
                    ResourceName: tracedResource.name,
                    ResourcePath: resourcePath,
                    MaxEntries: _this.maxEntries(),
                    WatchedResourceMode: _this.watchedResourceMode(),
                    SingleAuthToken: tokenObject
                });
                dialog.close(_this);
            }).fail(function (e) {
                var response = JSON.parse(e.responseText);
                var msg = e.statusText;
                if ("Error" in response) {
                    msg += ": " + response.Error;
                } else if ("Reason" in response) {
                    msg += ": " + response.Reason;
                }
                app.showMessage(msg, "Error");
            });
        };

        watchTrafficConfigDialog.prototype.alignBoxVertically = function () {
            var messageBoxHeight = parseInt($(".messageBox").css('height'), 10);
            var windowHeight = $(window).height();
            var messageBoxMarginTop = parseInt($(".messageBox").css('margin-top'), 10);
            var newTopPercent = Math.floor(((windowHeight - messageBoxHeight) / 2 - messageBoxMarginTop) / windowHeight * 100);
            var newTopPercentString = newTopPercent.toString() + '%';
            $(".modalHost").css('top', newTopPercentString);
        };

        watchTrafficConfigDialog.prototype.generateBindingInputId = function (index) {
            return 'binding-' + index;
        };
        return watchTrafficConfigDialog;
    })(dialogViewModelBase);

    
    return watchTrafficConfigDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/windowsAuth", ["require", "exports", "models/windowsAuthSetup", "models/windowsAuthData", "viewmodels/viewModelBase", "commands/getWindowsAuthCommand"], function(require, exports, windowsAuthSetup, windowsAuthData, viewModelBase, getWindowsAuthCommand) {
    var windowsAuth = (function (_super) {
        __extends(windowsAuth, _super);
        function windowsAuth() {
            _super.apply(this, arguments);
            this.setup = ko.observable().extend({ required: true });
            this.isUsersSectionActive = ko.observable(true);
        }
        windowsAuth.prototype.canActivate = function (args) {
            var deffered = $.Deferred();
            this.setup(new windowsAuthSetup({ RequiredUsers: [], RequiredGroups: [] }));
            this.fetchWindowsAuth().always(function () {
                return deffered.resolve({ can: true });
            });

            return deffered;
        };

        windowsAuth.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.dirtyFlag = new ko.DirtyFlag([this.setup]);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        windowsAuth.prototype.compositionComplete = function () {
            _super.prototype.compositionComplete.call(this);
            $("form").on("keypress", 'input[name="databaseName"]', function (e) {
                return e.which != 13;
            });
        };

        windowsAuth.prototype.fetchWindowsAuth = function () {
            var _this = this;
            return new getWindowsAuthCommand().execute().done(function (result) {
                return _this.setup(result);
            });
        };

        windowsAuth.prototype.saveChanges = function () {
            var _this = this;
            require(["commands/saveWindowsAuthCommand"], function (saveWindowsAuthCommand) {
                new saveWindowsAuthCommand(_this.setup().toDto()).execute().done(function () {
                    return _this.dirtyFlag().reset();
                });
            });
        };

        windowsAuth.prototype.addUserSettings = function () {
            var newAuthData = windowsAuthData.empty();
            windowsAuthSetup.subscribeToObservableName(newAuthData, this.setup().requiredUsers);
            this.setup().requiredUsers.push(newAuthData);
        };

        windowsAuth.prototype.removeUserSettings = function (data) {
            this.setup().requiredUsers.remove(data);
        };

        windowsAuth.prototype.addGroupSettings = function () {
            var newAuthData = windowsAuthData.empty();
            windowsAuthSetup.subscribeToObservableName(newAuthData, this.setup().requiredGroups);
            this.setup().requiredGroups.push(newAuthData);
        };

        windowsAuth.prototype.removeGroupSettings = function (data) {
            this.setup().requiredGroups.remove(data);
        };
        return windowsAuth;
    })(viewModelBase);

    
    return windowsAuth;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/counterStorageConfiguration", ["require", "exports", "viewmodels/viewModelBase"], function(require, exports, viewModelBase) {
    var counterStorageConfiguration = (function (_super) {
        __extends(counterStorageConfiguration, _super);
        function counterStorageConfiguration() {
            _super.apply(this, arguments);
        }
        counterStorageConfiguration.prototype.canActivate = function (args) {
            return true;
        };
        return counterStorageConfiguration;
    })(viewModelBase);

    
    return counterStorageConfiguration;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/counterStoragecounters", ["require", "exports", "models/counter/counterGroup", "commands/counter/getCountersCommand", "commands/counter/getCounterGroupsCommand", "commands/counter/updateCounterCommand", "viewmodels/viewModelBase", "durandal/app"], function(require, exports, counterGroup, getCountersCommand, getCounterGroupsCommand, updateCounterCommand, viewModelBase, app) {
    var counterStorageCounters = (function (_super) {
        __extends(counterStorageCounters, _super);
        function counterStorageCounters() {
            _super.call(this);
            this.counterGroups = ko.observableArray([]);
            this.selectedCounterGroup = ko.observable();
            this.selectedCountersIndices = ko.observableArray();
            this.currentCountersPagedItems = ko.observable();
            this.fetchGroups();
        }
        counterStorageCounters.prototype.fetchGroups = function () {
            var _this = this;
            new getCounterGroupsCommand(this.activeCounterStorage()).execute().done(function (results) {
                return _this.groupsLoaded(results);
            });
        };
        counterStorageCounters.prototype.getCountersGrid = function () {
            var gridContents = $(counterStorageCounters.gridSelector).children()[0];
            if (gridContents) {
                return ko.dataFor(gridContents);
            }

            return null;
        };

        // Skip the system database prompt from the base class.
        counterStorageCounters.prototype.canActivate = function (args) {
            return true;
        };

        counterStorageCounters.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);
            this.hasAnyCounterSelected = ko.computed(function () {
                return _this.selectedCountersIndices().length > 0;
            });
        };

        counterStorageCounters.prototype.addOrEditCounter = function (counterToUpdate) {
            var _this = this;
            require(["viewmodels/counter/editCounterDialog"], function (editCounterDialog) {
                var editCounterDialogViewModel = new editCounterDialog(counterToUpdate);
                editCounterDialogViewModel.updateTask.done(function (editedCounter, delta) {
                    new updateCounterCommand(_this.activeCounterStorage(), editedCounter, delta).execute().done(function () {
                        _this.fetchGroups(); //TODO: remove this after changes api is implemented
                    });
                });
                app.showDialog(editCounterDialogViewModel);
            });
        };

        counterStorageCounters.prototype.resetCounter = function (counterToReset) {
            var _this = this;
            var confirmationMessageViewModel = this.confirmationMessage('Reset Counter', 'Are you sure you want to reset the counter?');
            confirmationMessageViewModel.done(function () {
                require(["commands/counter/resetCounterCommand"], function (resetCounterCommand) {
                    new resetCounterCommand(_this.activeCounterStorage(), counterToReset).execute().done(function () {
                        _this.fetchGroups(); //TODO: remove this after changes api is implemented
                    });
                });
            });
        };

        counterStorageCounters.prototype.selectGroup = function (group) {
            this.selectedCounterGroup(group);

            if (group.counters().length === 0) {
                var groupName = group.name();
                var command;

                if (groupName == "All Groups") {
                    command = new getCountersCommand(this.activeCounterStorage(), 0, 128);
                } else {
                    command = new getCountersCommand(this.activeCounterStorage(), 0, 128, groupName);
                }
                command.execute().done(function (results) {
                    return group.counters(results);
                });
            }
        };

        counterStorageCounters.prototype.groupsLoaded = function (groups) {
            var _this = this;
            this.counterGroups(groups);

            this.allCounterGroups = new counterGroup({ Name: "All Groups" }); // Create the "All Groups" pseudo collection.
            this.allCounterGroups.numOfCounters = ko.computed(function () {
                return _this.counterGroups().filter(function (c) {
                    return c !== _this.allCounterGroups;
                }).map(function (c) {
                    return c.numOfCounters();
                }).reduce(function (first, second) {
                    return first + second;
                }, 0);
            }); // And sum them up.

            this.counterGroups.unshift(this.allCounterGroups);

            this.selectGroup(groups[0]);
        };
        counterStorageCounters.gridSelector = "#countersGrid";
        return counterStorageCounters;
    })(viewModelBase);

    
    return counterStorageCounters;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/counterStorageReplication", ["require", "exports", "common/appUrl", "viewmodels/viewModelBase", "models/counter/counterStorageReplicationSetup", "models/counter/counterStorageReplicationDestination", "commands/counter/getCounterStorageReplicationCommand", "commands/counter/saveCounterStorageReplicationCommand"], function(require, exports, appUrl, viewModelBase, counterStorageReplicationSetup, counterStorageReplicationDestination, getCounterStorageReplicationCommand, saveCounterStorageReplicationCommand) {
    var counterStorageReplication = (function (_super) {
        __extends(counterStorageReplication, _super);
        function counterStorageReplication() {
            _super.apply(this, arguments);
            this.replicationsSetup = ko.observable().extend({ required: true });
        }
        counterStorageReplication.prototype.canActivate = function (args) {
            var deferred = $.Deferred();
            var counterStorage = this.activeCounterStorage();
            if (counterStorage) {
                this.fetchCountersDestinations(counterStorage).done(function () {
                    return deferred.resolve({ can: true });
                }).fail(function () {
                    return deferred.resolve({ redirect: appUrl.forCounterStorage(counterStorage) });
                });
            }
            return deferred;
        };

        counterStorageReplication.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.dirtyFlag = new ko.DirtyFlag([this.replicationsSetup]);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        counterStorageReplication.prototype.fetchCountersDestinations = function (counterStorage, reportFetchProgress) {
            var _this = this;
            if (typeof reportFetchProgress === "undefined") { reportFetchProgress = false; }
            var deferred = $.Deferred();
            if (counterStorage) {
                new getCounterStorageReplicationCommand(counterStorage, reportFetchProgress).execute().done(function (data) {
                    return _this.replicationsSetup(new counterStorageReplicationSetup({ Destinations: data.Destinations }));
                }).fail(function () {
                    return _this.replicationsSetup(new counterStorageReplicationSetup({ Destinations: [] }));
                }).always(function () {
                    return deferred.resolve({ can: true });
                });
            }
            return deferred;
        };

        counterStorageReplication.prototype.saveChanges = function () {
            var _this = this;
            var counter = this.activeCounterStorage();
            if (counter) {
                new saveCounterStorageReplicationCommand(this.replicationsSetup().toDto(), counter).execute().done(function () {
                    return _this.dirtyFlag().reset();
                });
            }
        };

        counterStorageReplication.prototype.createNewDestination = function () {
            var cs = this.activeCounterStorage();
            this.replicationsSetup().destinations.unshift(counterStorageReplicationDestination.empty(cs.name));
        };

        counterStorageReplication.prototype.removeDestination = function (resplicationDestination) {
            this.replicationsSetup().destinations.remove(resplicationDestination);
        };

        counterStorageReplication.prototype.refreshFromServer = function () {
            var _this = this;
            var canContinue = this.canContinueIfNotDirty('Unsaved Data', 'You have unsaved data. Are you sure you want to refresh the data from the server?');
            canContinue.done(function () {
                _this.fetchCountersDestinations(_this.activeCounterStorage(), true).done(function () {
                    return _this.dirtyFlag().reset();
                });
            });
        };
        return counterStorageReplication;
    })(viewModelBase);

    
    return counterStorageReplication;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/counterStorages", ["require", "exports", "durandal/app", "viewmodels/viewModelBase", 'viewmodels/shell', "models/counter/counterStorage", "commands/counter/createCounterStorageCommand", "common/appUrl"], function(require, exports, app, viewModelBase, shell, counterStorage, createCounterStorageCommand, appUrl) {
    var counterStorages = (function (_super) {
        __extends(counterStorages, _super);
        function counterStorages() {
            var _this = this;
            _super.call(this);
            this.counterStorages = ko.observableArray();
            this.selectedCounterStorage = ko.observable();
            this.searchCounterStorageByText = ko.observable();
            this.optionsClicked = ko.observable(false);

            this.counterStorages = shell.counterStorages;
            this.searchCounterStorageByText.extend({ throttle: 200 }).subscribe(function (s) {
                return _this.filterCounterStorages(s);
            });

            var currentCounterStorage = this.activeCounterStorage();
            if (!!currentCounterStorage) {
                this.selectCounterStorage(currentCounterStorage, false);
            }
        }
        // Override canActivate: we can always load this page, regardless of any system db prompt.
        counterStorages.prototype.canActivate = function (args) {
            return true;
        };

        counterStorages.prototype.attached = function () {
            this.counterStoragesLoaded();
        };

        counterStorages.prototype.counterStoragesLoaded = function () {
            // If we have no counter storages, show the "create a new counter storage" screen.
            if (this.counterStorages().length === 0) {
                this.createNewCountersStorage();
            } else {
                // If we have just a few counter storages, grab the cs stats for all of them.
                // (Otherwise, we'll grab them when we click them.)
                var few = 20;
                var enabledCounterStorages = this.counterStorages().filter(function (db) {
                    return !db.disabled();
                });
                if (enabledCounterStorages.length < few) {
                    enabledCounterStorages.forEach(function (cs) {
                        return shell.fetchCsStats(cs);
                    });
                }
            }
        };

        counterStorages.prototype.addNewCounterStorage = function (counterStorageName) {
            var counterStorageInArray = this.counterStorages.first(function (cs) {
                return cs.name == counterStorageName;
            });

            if (!counterStorageInArray) {
                var newCounterStorage = new counterStorage(counterStorageName);
                this.counterStorages.unshift(newCounterStorage);
                return newCounterStorage;
            }

            return counterStorageInArray;
        };

        counterStorages.prototype.onCounterStorageDeleted = function (counterStorageName) {
            var counterStorageInArray = this.counterStorages.first(function (cs) {
                return cs.name == counterStorageName;
            });

            if (!!counterStorageInArray) {
                this.counterStorages.remove(counterStorageInArray);

                if ((this.counterStorages().length > 0) && (this.counterStorages.contains(this.activeCounterStorage()) === false)) {
                    this.selectCounterStorage(this.counterStorages().first());
                }
            }
        };

        counterStorages.prototype.filterCounterStorages = function (filterString) {
            var filterStringLower = filterString.toLowerCase();
            this.counterStorages().forEach(function (x) {
                var isMatch = !filterString || (x.name.toLowerCase().indexOf(filterStringLower) >= 0);
                x.isVisible(isMatch);
            });

            var selectedCounterStorage = this.selectedCounterStorage();
            if (selectedCounterStorage && !selectedCounterStorage.isVisible()) {
                selectedCounterStorage.isSelected(false);
                this.selectedCounterStorage(null);
            }
        };

        counterStorages.prototype.createNewCountersStorage = function () {
            var _this = this;
            require(["viewmodels/counter/createCounterStorage"], function (createCounterStorage) {
                var createCounterStorageiewModel = new createCounterStorage(_this.counterStorages);
                createCounterStorageiewModel.creationTask.done(function (counterStorageName, counterStoragePath) {
                    counterStoragePath = !!counterStoragePath && counterStoragePath.length > 0 ? counterStoragePath : "~/Counters/" + counterStorageName;
                    _this.showCreationAdvancedStepsIfNecessary(counterStorageName, counterStoragePath);
                });
                app.showDialog(createCounterStorageiewModel);
            });
        };

        counterStorages.prototype.showCreationAdvancedStepsIfNecessary = function (counterStorageName, counterStoragePath) {
            var _this = this;
            new createCounterStorageCommand(counterStorageName, counterStoragePath).execute().done(function () {
                var newCounterStorage = _this.addNewCounterStorage(counterStorageName);
                _this.selectCounterStorage(newCounterStorage);
            });
        };

        counterStorages.prototype.deleteSelectedCounterStorage = function () {
            var _this = this;
            var cs = this.selectedCounterStorage();
            if (!!cs) {
                require(["viewmodels/counter/deleteCounterStorageConfirm"], function (deleteCounterStorageConfirm) {
                    var confirmDeleteVm = new deleteCounterStorageConfirm(cs);
                    confirmDeleteVm.deleteTask.done(function () {
                        return _this.onCounterStorageDeleted(cs.name);
                    });
                    app.showDialog(confirmDeleteVm);
                });
            }
        };

        counterStorages.prototype.selectCounterStorage = function (cs, activateCounterStorage) {
            if (typeof activateCounterStorage === "undefined") { activateCounterStorage = true; }
            if (this.optionsClicked() == false) {
                if (activateCounterStorage) {
                    cs.activate();
                }
                this.selectedCounterStorage(cs);
            }

            this.optionsClicked(false);
        };

        counterStorages.prototype.getCounterStorageUrl = function (storage) {
            return appUrl.forCounterStorageCounters(storage);
        };
        return counterStorages;
    })(viewModelBase);

    
    return counterStorages;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/counterStorageStats", ["require", "exports", "viewmodels/viewModelBase"], function(require, exports, viewModelBase) {
    var counterStorageStats = (function (_super) {
        __extends(counterStorageStats, _super);
        function counterStorageStats() {
            _super.apply(this, arguments);
        }
        counterStorageStats.prototype.canActivate = function (args) {
            return true;
        };
        return counterStorageStats;
    })(viewModelBase);

    
    return counterStorageStats;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/createCounterStorage", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, dialogViewModelBase) {
    var createCounterStorage = (function (_super) {
        __extends(createCounterStorage, _super);
        function createCounterStorage(counterStorages) {
            _super.call(this);
            this.creationTask = $.Deferred();
            this.creationTaskStarted = false;
            this.counterStorageName = ko.observable('');
            this.counterStoragePath = ko.observable('');
            this.counterStorageNameFocus = ko.observable(true);
            this.counterStorages = ko.observableArray();
            this.maxNameLength = 200;
            this.counterStorages = counterStorages;
        }
        createCounterStorage.prototype.attached = function () {
            var _this = this;
            _super.prototype.attached.call(this);
            var inputElement = $("#counterStorageName")[0];
            this.counterStorageName.subscribe(function (newCounterStorageName) {
                var errorMessage = '';

                if (_this.isCounterStorageNameExists(newCounterStorageName.toLowerCase(), _this.counterStorages())) {
                    errorMessage = "Database Name Already Exists!";
                } else if ((errorMessage = _this.CheckName(newCounterStorageName)) != '') {
                }
                inputElement.setCustomValidity(errorMessage);
            });
            this.subscribeToPath("#databasePath", this.counterStoragePath, "Path");

            this.counterStorageNameFocus(true);
        };

        createCounterStorage.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.creationTaskStarted) {
                this.creationTask.reject();
            }
        };

        createCounterStorage.prototype.cancel = function () {
            dialog.close(this);
        };

        createCounterStorage.prototype.nextOrCreate = function () {
            var counterStorageName = this.counterStorageName();

            this.creationTaskStarted = true;
            this.creationTask.resolve(this.counterStorageName(), this.counterStoragePath());
            dialog.close(this);
        };

        createCounterStorage.prototype.isCounterStorageNameExists = function (databaseName, counterStorages) {
            for (var i = 0; i < counterStorages.length; i++) {
                if (databaseName == counterStorages[i].name.toLowerCase()) {
                    return true;
                }
            }
            return false;
        };

        createCounterStorage.prototype.CheckName = function (name) {
            var rg1 = /^[^\\/\*:\?"<>\|]+$/;
            var rg2 = /^\./;
            var rg3 = /^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i;

            var message = '';
            if (!$.trim(name)) {
                message = "An empty counter storage name is forbidden for use!";
            } else if (name.length > this.maxNameLength) {
                message = "The counter storage length can't exceed " + this.maxNameLength + " characters!";
            } else if (!rg1.test(name)) {
                message = "The counter storage name can't contain any of the following characters: \ / * : ?" + ' " ' + "< > |";
            } else if (rg2.test(name)) {
                message = "The counter storage name can't start with a dot!";
            } else if (rg3.test(name)) {
                message = "The name '" + name + "' is forbidden for use!";
            }
            return message;
        };

        createCounterStorage.prototype.subscribeToPath = function (tag, element, pathName) {
            var _this = this;
            var inputElement = $(tag)[0];
            element.subscribe(function (path) {
                var errorMessage = _this.isPathLegal(path, pathName);
                inputElement.setCustomValidity(errorMessage);
            });
        };

        createCounterStorage.prototype.isPathLegal = function (name, pathName) {
            var rg1 = /^[^\\*:\?"<>\|]+$/;
            var rg2 = /^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i;
            var errorMessage = null;

            if (!$.trim(name) == false) {
                if (name.length > 30) {
                    errorMessage = "The path name for the '" + pathName + "' can't exceed " + 30 + " characters!";
                } else if (!rg1.test(name)) {
                    errorMessage = "The " + pathName + " can't contain any of the following characters: * : ?" + ' " ' + "< > |";
                } else if (rg2.test(name)) {
                    errorMessage = "The name '" + name + "' is forbidden for use!";
                }
            }
            return errorMessage;
        };
        return createCounterStorage;
    })(dialogViewModelBase);

    
    return createCounterStorage;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/deleteCounterStorageConfirm", ["require", "exports", "commands/counter/deleteCounterStorageCommand", "plugins/dialog", "viewmodels/dialogViewModelBase"], function(require, exports, deleteCounterStorageCommand, dialog, dialogViewModelBase) {
    var deleteCounterStorageConfirm = (function (_super) {
        __extends(deleteCounterStorageConfirm, _super);
        function deleteCounterStorageConfirm(storageToDelete) {
            _super.call(this);
            this.storageToDelete = storageToDelete;
            this.isKeepingFiles = ko.observable(true);
            this.deleteTask = $.Deferred();

            if (!storageToDelete) {
                throw new Error("Must specified counter storage to delete.");
            }
        }
        deleteCounterStorageConfirm.prototype.keepFiles = function () {
            this.isKeepingFiles(true);
        };

        deleteCounterStorageConfirm.prototype.deleteEverything = function () {
            this.isKeepingFiles(false);
        };

        deleteCounterStorageConfirm.prototype.deleteCounterStorage = function () {
            var _this = this;
            new deleteCounterStorageCommand(this.storageToDelete.name, this.isKeepingFiles() === false).execute().done(function (results) {
                return _this.deleteTask.resolve(results);
            }).fail(function (details) {
                return _this.deleteTask.reject(details);
            });

            dialog.close(this);
        };

        deleteCounterStorageConfirm.prototype.cancel = function () {
            this.deleteTask.reject();
            dialog.close(this);
        };
        return deleteCounterStorageConfirm;
    })(dialogViewModelBase);

    
    return deleteCounterStorageConfirm;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/counter/editCounterDialog", ["require", "exports", "plugins/dialog", "viewmodels/dialogViewModelBase", "models/counter/counter"], function(require, exports, dialog, dialogViewModelBase, counter) {
    var editCounterDialog = (function (_super) {
        __extends(editCounterDialog, _super);
        function editCounterDialog(editedCounter) {
            _super.call(this);
            this.updateTask = $.Deferred();
            this.updateTaskStarted = false;
            this.isNewCounter = ko.observable(false);
            this.editedCounter = ko.observable();
            this.counterDelta = ko.observable(0);
            this.maxNameLength = 200;

            if (!editedCounter) {
                this.isNewCounter(true);
                this.editedCounter(new counter({ Name: '', Group: '', OverallTotal: 0, Servers: [] }));
            } else {
                this.editedCounter(editedCounter);
            }
            this.counterDelta(0);
        }
        editCounterDialog.prototype.cancel = function () {
            dialog.close(this);
        };

        editCounterDialog.prototype.nextOrCreate = function () {
            this.updateTaskStarted = true;
            this.updateTask.resolve(this.editedCounter(), this.counterDelta());
            dialog.close(this);
        };

        editCounterDialog.prototype.attached = function () {
            var _this = this;
            _super.prototype.attached.call(this);
            this.counterDelta(0);
            var inputElement = $("#counterId")[0];
            this.editedCounter().id.subscribe(function (newCounterId) {
                var errorMessage = '';

                if ((errorMessage = _this.CheckName(newCounterId, 'counter name')) != '') {
                }
                inputElement.setCustomValidity(errorMessage);
            });
            this.editedCounter().group.subscribe(function (newCounterId) {
                var errorMessage = '';

                if ((errorMessage = _this.CheckName(newCounterId, 'group name')) != '') {
                }
                inputElement.setCustomValidity(errorMessage);
            });
            //todo: maybe check validity of delta
        };

        editCounterDialog.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.updateTaskStarted) {
                this.updateTask.reject();
            }
        };

        editCounterDialog.prototype.CheckName = function (name, fieldName) {
            var message = '';
            if (!$.trim(name)) {
                message = "An empty " + fieldName + " is forbidden for use!";
            } else if (name.length > this.maxNameLength) {
                message = "The  " + fieldName + " length can't exceed " + this.maxNameLength + " characters!";
            }
            return message;
        };
        return editCounterDialog;
    })(dialogViewModelBase);

    
    return editCounterDialog;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/backupFilesystem", ["require", "exports", "viewmodels/viewModelBase", "viewmodels/shell"], function(require, exports, viewModelBase, shell) {
    var backupFilesystem = (function (_super) {
        __extends(backupFilesystem, _super);
        function backupFilesystem() {
            var _this = this;
            _super.call(this);
            this.incremental = ko.observable(false);
            this.filesystemName = ko.observable('');
            this.backupLocation = ko.observable('');
            this.backupStatusMessages = ko.observableArray();
            this.isBusy = ko.observable();

            this.filesystemNames = ko.computed(function () {
                return shell.fileSystems().map(function (fs) {
                    return fs.name;
                });
            });

            this.searchResults = ko.computed(function () {
                var newFilesystemName = _this.filesystemName();
                return _this.filesystemNames().filter(function (name) {
                    return name.toLowerCase().indexOf(newFilesystemName.toLowerCase()) > -1;
                });
            });

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newFilesystemName = _this.filesystemName();
                var foundFs = shell.fileSystems.first(function (fs) {
                    return newFilesystemName == fs.name;
                });

                if (!foundFs && newFilesystemName.length > 0) {
                    errorMessage = "Filesystem name doesn't exist!";
                }

                return errorMessage;
            });
        }
        backupFilesystem.prototype.canActivate = function (args) {
            return true;
        };

        backupFilesystem.prototype.compositionComplete = function () {
            _super.prototype.compositionComplete.call(this);
            $('form :input[name="filesystemName"]').on("keypress", function (e) {
                return e.which != 13;
            });
        };

        backupFilesystem.prototype.startBackup = function () {
            var _this = this;
            this.isBusy(true);

            var updateBackupStatus = function (newBackupStatus) {
                _this.backupStatusMessages(newBackupStatus.Messages);
                _this.isBusy(!!newBackupStatus.IsRunning);
            };

            require(["commands/filesystem/backupFilesystemCommand"], function (backupFilesystemCommand) {
                var fsToBackup = shell.fileSystems.first(function (fs) {
                    return fs.name == _this.filesystemName();
                });
                new backupFilesystemCommand(fsToBackup, _this.backupLocation(), updateBackupStatus, _this.incremental()).execute().always(function () {
                    return _this.isBusy(false);
                });
            });
        };
        return backupFilesystem;
    })(viewModelBase);

    
    return backupFilesystem;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/compactFilesystem", ["require", "exports", "viewmodels/viewModelBase", "viewmodels/shell"], function(require, exports, viewModelBase, shell) {
    var compactFilesystem = (function (_super) {
        __extends(compactFilesystem, _super);
        function compactFilesystem() {
            var _this = this;
            _super.call(this);
            this.filesystemName = ko.observable('');
            this.isBusy = ko.observable();

            this.filesystemNames = ko.computed(function () {
                return shell.fileSystems().map(function (fs) {
                    return fs.name;
                });
            });

            this.searchResults = ko.computed(function () {
                var newFilesystemName = _this.filesystemName();
                return _this.filesystemNames().filter(function (name) {
                    return name.toLowerCase().indexOf(newFilesystemName.toLowerCase()) > -1;
                });
            });

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newFilesystemName = _this.filesystemName();
                var foundFs = shell.fileSystems.first(function (fs) {
                    return newFilesystemName == fs.name;
                });

                if (!foundFs && newFilesystemName.length > 0) {
                    errorMessage = "Filesystem name doesn't exist!";
                }

                return errorMessage;
            });
        }
        compactFilesystem.prototype.canActivate = function (args) {
            return true;
        };

        compactFilesystem.prototype.compositionComplete = function () {
            _super.prototype.compositionComplete.call(this);
            $('form :input[name="filesystemName"]').on("keypress", function (e) {
                return e.which != 13;
            });
        };

        compactFilesystem.prototype.startCompact = function () {
            var _this = this;
            this.isBusy(true);

            require(["commands/filesystem/compactFilesystemCommand"], function (compactFilesystemCommand) {
                var fsToCompact = shell.fileSystems.first(function (fs) {
                    return fs.name == _this.filesystemName();
                });
                new compactFilesystemCommand(fsToCompact).execute().always(function () {
                    return _this.isBusy(false);
                });
            });
        };
        return compactFilesystem;
    })(viewModelBase);

    
    return compactFilesystem;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/configuration", ["require", "exports", "durandal/app", "plugins/router", "common/appUrl", "ace/ace", "viewmodels/viewModelBase", "viewmodels/shell", "commands/filesystem/getConfigurationCommand", "models/filesystem/configurationKey", "common/aceEditorBindingHandler", "common/messagePublisher"], function(require, exports, app, router, appUrl, ace, viewModelBase, shell, getConfigurationCommand, configurationKey, aceEditorBindingHandler, messagePublisher) {
    var configuration = (function (_super) {
        __extends(configuration, _super);
        function configuration() {
            var _this = this;
            _super.call(this);
            this.router = router;
            this.keys = ko.observableArray();
            this.selectedKeyValue = ko.observable();
            this.selectedKey = ko.observable().subscribeTo("ActivateConfigurationKey").distinctUntilChanged();
            this.currentKey = ko.observable();
            this.configurationKeyText = ko.observable('').extend({ required: true });
            this.isBusy = ko.observable(false);
            this.enabled = true;
            aceEditorBindingHandler.install();
            this.selectedKey.subscribe(function (k) {
                return _this.selectedKeyChanged(k);
            });

            // When we programmatically change a configuration doc, push it into the editor.
            //this.subscription = this.configurationKeyText.subscribe(() => this.updateConfigurationText());
            this.text = ko.computed({
                read: function () {
                    return _this.configurationKeyText();
                },
                write: function (text) {
                    _this.configurationKeyText(text);
                },
                owner: this
            });
        }
        configuration.prototype.activate = function (navigationArgs) {
            var _this = this;
            _super.prototype.activate.call(this, navigationArgs);

            this.appUrls = appUrl.forCurrentFilesystem();

            this.dirtyFlag = new ko.DirtyFlag([this.configurationKeyText]);

            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
            return this.loadKeys(this.activeFilesystem());
        };

        configuration.prototype.attached = function () {
            var _this = this;
            this.activeFilesystem.subscribe(function (x) {
                _this.loadKeys(x);
            });

            $('.keys-collection').contextmenu({
                target: '#keys-context-menu'
            });

            this.initializeDocEditor();
            this.configurationEditor.focus();
            this.setupKeyboardShortcuts();
        };

        configuration.prototype.compositionComplete = function () {
            var _this = this;
            _super.prototype.compositionComplete.call(this);

            var editorElement = $("#configurationEditor");
            if (editorElement.length > 0) {
                this.editor = ko.utils.domData.get(editorElement[0], "aceEditor");
            }
            $("#configurationEditor").on('DynamicHeightSet', function () {
                return _this.editor.resize();
            });

            this.focusOnEditor();
        };

        configuration.prototype.detached = function () {
            _super.prototype.detached.call(this);
            this.selectedKey.unsubscribeFrom("ActivateConfigurationKey");
            $("#configurationEditor").off('DynamicHeightSet');
        };

        configuration.prototype.focusOnEditor = function () {
            if (!!this.editor) {
                this.editor.focus();
            }
        };

        configuration.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchFsConfig(function (e) {
                    return _this.processFsConfigNotification(e);
                })];
        };

        configuration.prototype.processFsConfigNotification = function (e) {
            switch (e.Action) {
                case 0 /* Set */:
                    this.addKey(e.Name);
                    break;
                case 1 /* Delete */:
                    this.removeKey(e.Name);
                    break;
                default:
                    console.error("Unknown notification action.");
            }
        };

        configuration.prototype.selectKeyValue = function (selection) {
            this.selectedKeyValue(selection);
        };

        configuration.prototype.setupKeyboardShortcuts = function () {
            var _this = this;
            this.createKeyboardShortcut("alt+shift+del", function () {
                return _this.deleteConfiguration();
            }, configuration.configSelector);
        };

        configuration.prototype.initializeDocEditor = function () {
            // Startup the Ace editor with JSON syntax highlighting.
            // TODO: Just use the simple binding handler instead.
            this.configurationEditor = ace.edit("configurationEditor");
            this.configurationEditor.setTheme("ace/theme/xcode");
            this.configurationEditor.setFontSize("16px");
            this.configurationEditor.getSession().setMode("ace/mode/json");
        };

        configuration.prototype.updateConfigurationText = function () {
            if (this.configurationEditor) {
                this.configurationEditor.getSession().setValue(this.configurationKeyText());
            }
        };

        configuration.prototype.loadKeys = function (fs) {
            var _this = this;
            if (this.enabled) {
                return new getConfigurationCommand(fs).execute().done(function (x) {
                    _this.keys(x);
                    if (x.length > 0) {
                        _this.selectKey(x[0]);
                    } else {
                        _this.enableEditor(false);
                    }
                });
            }
            return $.Deferred().resolve();
        };

        configuration.prototype.selectKey = function (key) {
            key.activate();
        };

        configuration.prototype.enableEditor = function (enable) {
            this.configurationEditor.setReadOnly(!enable);
            this.configurationEditor.getSession().setUseWorker(enable);
            if (!enable) {
                this.configurationKeyText("");
                this.dirtyFlag().reset();
            }

            this.enabled = enable;
        };

        configuration.prototype.selectedKeyChanged = function (selected) {
            var _this = this;
            if (selected) {
                this.isBusy(true);
                selected.getValues().done(function (data) {
                    _this.configurationKeyText(data);
                }).always(function () {
                    _this.dirtyFlag().reset();
                    _this.isBusy(false);
                });

                this.currentKey(selected);
                this.focusOnEditor();
            }
        };

        configuration.prototype.save = function () {
            var _this = this;
            var message = "";
            try  {
                var jsonConfigDoc = JSON.parse(this.configurationKeyText());
            } catch (e) {
                if (jsonConfigDoc == undefined) {
                    message = "The configuration key data isn't a legal JSON expression!";
                }
                this.focusOnEditor();
            }
            if (message != "") {
                messagePublisher.reportError(message, undefined, undefined, false);
                return;
            }

            require(["commands/filesystem/saveConfigurationCommand"], function (saveConfigurationCommand) {
                var saveCommand = new saveConfigurationCommand(_this.activeFilesystem(), _this.currentKey(), jsonConfigDoc);
                var saveTask = saveCommand.execute();
                saveTask.done(function () {
                    return _this.dirtyFlag().reset();
                });
            });
        };

        configuration.prototype.refreshConfig = function () {
            this.selectedKeyChanged(this.currentKey());
        };

        configuration.prototype.deleteConfiguration = function () {
            var _this = this;
            require(["viewmodels/filesystem/deleteConfigurationKeys"], function (deleteConfigurationKeys) {
                var deleteConfigurationKeyViewModel = new deleteConfigurationKeys(_this.activeFilesystem(), [_this.currentKey()]);
                deleteConfigurationKeyViewModel.deletionTask.done(function () {
                    _this.removeKey(_this.currentKey().key);
                });
                app.showDialog(deleteConfigurationKeyViewModel);
            });
        };

        configuration.prototype.removeKey = function (key) {
            var foundKey = this.keys().filter(function (configKey) {
                return configKey.key == key;
            });

            if (foundKey.length > 0) {
                var currentIndex = this.keys.indexOf(this.currentKey());
                var foundIndex = this.keys.indexOf(foundKey[0]);
                var newIndex = currentIndex;
                if (currentIndex + 1 == this.keys().length) {
                    newIndex = currentIndex - 1;
                }

                this.keys.remove(foundKey[0]);
                if (this.keys()[newIndex] && currentIndex == foundIndex) {
                    this.selectKey(this.keys()[newIndex]);
                } else {
                    this.enableEditor(false);
                }
            }
        };

        configuration.prototype.addKey = function (key) {
            var foundKey = this.keys.first(function (configKey) {
                return configKey.key == key;
            });

            if (!foundKey) {
                var newKey = new configurationKey(this.activeFilesystem(), key);
                this.keys.push(newKey);
                if (this.keys().length > 0 && !this.enabled) {
                    this.enableEditor(true);
                }
                return newKey;
            }

            return foundKey;
        };

        configuration.prototype.newConfigurationKey = function () {
            var _this = this;
            require(["viewmodels/filesystem/createConfigurationKey", "commands/filesystem/saveConfigurationCommand"], function (createConfigurationKey, saveConfigurationCommand) {
                var createConfigurationKeyViewModel = new createConfigurationKey(_this.keys());
                createConfigurationKeyViewModel.creationTask.done(function (key) {
                    new saveConfigurationCommand(_this.activeFilesystem(), new configurationKey(_this.activeFilesystem(), key), JSON.parse("{}")).execute().done(function () {
                        var newKey = _this.addKey(key);
                        _this.selectKey(newKey);
                    }).fail(function (qXHR, textStatus, errorThrown) {
                        return messagePublisher.reportError("Could not create Configuration Key!", errorThrown);
                    });
                });
                app.showDialog(createConfigurationKeyViewModel);
            });
        };
        configuration.configSelector = "#settingsContainer";
        return configuration;
    })(viewModelBase);

    
    return configuration;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/createConfigurationKey", ["require", "exports", "viewmodels/dialogViewModelBase", "plugins/dialog", "common/messagePublisher"], function(require, exports, dialogViewModelBase, dialog, messagePublisher) {
    var createConfigurationKey = (function (_super) {
        __extends(createConfigurationKey, _super);
        function createConfigurationKey(keys) {
            _super.call(this);
            this.creationTask = $.Deferred();
            this.creationTaskStarted = false;
            this.configurationKeyName = ko.observable('');
            this.configurationKeyNameFocus = ko.observable(true);
            this.keys = keys;
        }
        createConfigurationKey.prototype.cancel = function () {
            dialog.close(this);
        };

        createConfigurationKey.prototype.attached = function () {
            _super.prototype.attached.call(this);
            this.configurationKeyNameFocus(true);
        };

        createConfigurationKey.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.creationTaskStarted) {
                this.creationTask.reject();
            }
        };

        createConfigurationKey.prototype.create = function () {
            // For now we're just creating the filesystem.
            var configKeyName = this.configurationKeyName();

            if (this.isClientSideInputOk(configKeyName)) {
                this.creationTaskStarted = true;
                this.creationTask.resolve(configKeyName);
                dialog.close(this);
            }
        };

        createConfigurationKey.prototype.isClientSideInputOk = function (keyName) {
            var errorMessage = "";

            if (keyName == null) {
                errorMessage = "Please fill out the Configuration Key name field";
            } else if (this.isConfigurationKeyExists(keyName, this.keys) === true) {
                errorMessage = "Configuration Key Already Exists!";
            } else if ((errorMessage = this.checkInput(keyName)) != null) {
            }

            if (errorMessage != null) {
                messagePublisher.reportError(errorMessage);
                this.configurationKeyNameFocus(true);
                return false;
            }
            return true;
        };

        createConfigurationKey.prototype.checkInput = function (name) {
            var message = null;

            //not implemented for the moment
            return message;
        };

        createConfigurationKey.prototype.isConfigurationKeyExists = function (keyName, configurationKeys) {
            for (var i = 0; i < configurationKeys.length; i++) {
                if (keyName == configurationKeys[i].key) {
                    return true;
                }
            }
            return false;
        };
        return createConfigurationKey;
    })(dialogViewModelBase);

    
    return createConfigurationKey;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/createFilesystem", ["require", "exports", "viewmodels/viewModelBase", "plugins/dialog"], function(require, exports, viewModelBase, dialog) {
    var createFilesystem = (function (_super) {
        __extends(createFilesystem, _super);
        function createFilesystem(filesystems, parent) {
            var _this = this;
            _super.call(this);
            this.filesystems = filesystems;
            this.parent = parent;
            this.creationTask = $.Deferred();
            this.creationTaskStarted = false;
            this.fileSystemName = ko.observable('');
            this.fileSystemPath = ko.observable('');
            this.fileSystemLogsPath = ko.observable('');
            this.storageEngine = ko.observable('');
            this.fileSystemNameFocus = ko.observable(true);

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newFileSystemName = _this.fileSystemName();

                if (_this.isFilesystemNameExists(newFileSystemName, _this.filesystems()) == true) {
                    errorMessage = "File system name already exists!";
                } else if ((errorMessage = _this.checkName(newFileSystemName)) != '') {
                }

                return errorMessage;
            });

            this.pathCustomValidityError = ko.computed(function () {
                var newPath = _this.fileSystemPath();
                var errorMessage = _this.isPathLegal(newPath, "Path");
                return errorMessage;
            });

            this.logsCustomValidityError = ko.computed(function () {
                var newPath = _this.fileSystemLogsPath();
                var errorMessage = _this.isPathLegal(newPath, "Logs");
                return errorMessage;
            });
        }
        createFilesystem.prototype.attached = function () {
            this.fileSystemNameFocus(true);
        };

        createFilesystem.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.creationTaskStarted) {
                this.creationTask.reject();
            }
        };

        createFilesystem.prototype.nextOrCreate = function () {
            // For now we're just creating the filesystem.
            this.creationTaskStarted = true;
            dialog.close(this.parent);
            this.creationTask.resolve({
                name: this.fileSystemName(),
                path: this.fileSystemPath(),
                logsPath: this.fileSystemLogsPath(),
                storageEngine: this.storageEngine()
            });
        };

        createFilesystem.prototype.isFilesystemNameExists = function (fileSystemName, filesystems) {
            fileSystemName = fileSystemName.toLowerCase();
            for (var i = 0; i < filesystems.length; i++) {
                if (fileSystemName == filesystems[i].name.toLowerCase()) {
                    return true;
                }
            }
            return false;
        };

        createFilesystem.prototype.checkName = function (name) {
            var rg1 = /^[^\\/:\*\?"<>\|]+$/;
            var rg2 = /^\./;
            var rg3 = /^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i;
            var maxLength = 260 - 30;

            var message = "";
            if (!$.trim(name)) {
                message = "Please fill out the file system name field!";
            } else if (name.length > maxLength) {
                message = "The file system length can't exceed " + maxLength + " characters!";
            } else if (!rg1.test(name)) {
                message = "The file system name can't contain any of the following characters: \ / : * ?" + ' " ' + "< > |";
            } else if (rg2.test(name)) {
                message = "The file system name can't start with a dot!";
            } else if (rg3.test(name)) {
                message = "The name '" + name + "' is forbidden for use!";
            }
            return message;
        };

        createFilesystem.prototype.isPathLegal = function (name, pathName) {
            var rg1 = /^[^*\?"<>\|]+$/;
            var rg2 = /^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i;
            var errorMessage = "";

            if (!$.trim(name) == false) {
                if (name.length > 248) {
                    errorMessage = "The path name for the '" + pathName + "' can't exceed " + 248 + " characters!";
                } else if (!rg1.test(name)) {
                    errorMessage = "The " + pathName + " can't contain any of the following characters: * : ?" + ' " ' + "< > |";
                } else if (rg2.test(name)) {
                    errorMessage = "The name '" + name + "' is forbidden for use!";
                }
            }
            return errorMessage;
        };
        return createFilesystem;
    })(viewModelBase);

    
    return createFilesystem;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/createFolderInFilesystem", ["require", "exports", "viewmodels/dialogViewModelBase", "plugins/dialog", "common/messagePublisher"], function(require, exports, dialogViewModelBase, dialog, messagePublisher) {
    var createFolderInFilesystem = (function (_super) {
        __extends(createFolderInFilesystem, _super);
        function createFolderInFilesystem(folders) {
            _super.call(this);
            this.creationTask = $.Deferred();
            this.creationTaskStarted = false;
            this.folderName = ko.observable('');
            this.folders = folders;
        }
        createFolderInFilesystem.prototype.cancel = function () {
            dialog.close(this);
        };

        createFolderInFilesystem.prototype.attached = function () {
            _super.prototype.attached.call(this);
            //this.folderName(true);
        };

        createFolderInFilesystem.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.creationTaskStarted) {
                this.creationTask.reject();
            }
        };

        createFolderInFilesystem.prototype.create = function () {
            var folderName = this.folderName();

            if (this.isClientSideInputOK(folderName)) {
                this.creationTaskStarted = true;
                this.creationTask.resolve(folderName.toLowerCase());
                dialog.close(this);
            }
        };

        createFolderInFilesystem.prototype.isClientSideInputOK = function (folderName) {
            var errorMessage;

            if (folderName == null) {
                errorMessage = "Please fill in the folder Name";
            } else if (this.folderExists(folderName, this.folders) === true) {
                errorMessage = "Folder already exists!";
            }

            if (errorMessage != null) {
                messagePublisher.reportError(errorMessage);
                return false;
            }
            return true;
        };

        createFolderInFilesystem.prototype.folderExists = function (folderName, folders) {
            for (var i = 0; i < folders.length; i++) {
                if (folderName.toLowerCase() == folders[i]) {
                    return true;
                }
            }
            return false;
        };

        createFolderInFilesystem.prototype.enterKeyPressed = function () {
            var submit = this.folderName != null;

            if (this.folderName())
                submit = false;

            submit = this.folderName() && this.folderName().trim() != "";

            if (submit) {
                _super.prototype.enterKeyPressed.call(this);
            }

            return submit;
        };
        return createFolderInFilesystem;
    })(dialogViewModelBase);

    
    return createFolderInFilesystem;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/deleteConfigurationKeys", ["require", "exports", "plugins/dialog", "commands/filesystem/deleteConfigurationKeyCommand", "viewmodels/dialogViewModelBase"], function(require, exports, dialog, deleteConfigurationKeyCommand, dialogViewModelBase) {
    var deleteConfigurationKeys = (function (_super) {
        __extends(deleteConfigurationKeys, _super);
        function deleteConfigurationKeys(fs, keys, elementToFocusOnDismissal) {
            _super.call(this, elementToFocusOnDismissal);
            this.fs = fs;
            this.keys = ko.observableArray();
            this.deletionStarted = false;
            this.deletionTask = $.Deferred();

            if (keys.length === 0) {
                throw new Error("Must have at least one key to delete.");
            }

            this.keys(keys);
        }
        deleteConfigurationKeys.prototype.deleteKeys = function () {
            var _this = this;
            this.deletionStarted = true;
            var deleteItemsIds = this.keys().map(function (i) {
                return i.key;
            });
            var deletionTasks = [];
            for (var i = 0; i < deleteItemsIds.length; i++) {
                deletionTasks.push(new deleteConfigurationKeyCommand(this.fs, deleteItemsIds[i]).execute());
            }

            var combinedTask = $.when.apply($, deletionTasks);

            combinedTask.done(function () {
                return _this.deletionTask.resolve(_this.keys());
            }).fail(function (response) {
                return _this.deletionTask.reject(response);
            });

            dialog.close(this);
        };

        deleteConfigurationKeys.prototype.cancel = function () {
            dialog.close(this);
        };

        deleteConfigurationKeys.prototype.deactivate = function (args) {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never carried it out.
            if (!this.deletionStarted) {
                this.deletionTask.reject();
            }
        };
        return deleteConfigurationKeys;
    })(dialogViewModelBase);

    
    return deleteConfigurationKeys;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/filesystemEditFile", ["require", "exports", "durandal/app", "plugins/router", "common/appUrl", "ace/ace", "commands/filesystem/getFileCommand", "commands/filesystem/updateFileMetadataCommand", "viewmodels/viewModelBase", "viewmodels/deleteItems"], function(require, exports, app, router, appUrl, ace, getFileCommand, updateFileMetadataCommand, viewModelBase, deleteItems) {
    var filesystemEditFile = (function (_super) {
        __extends(filesystemEditFile, _super);
        function filesystemEditFile() {
            var _this = this;
            _super.call(this);
            this.fileName = ko.observable();
            this.file = ko.observable();
            this.topRecentFiles = ko.computed(function () {
                return _this.getTopRecentFiles();
            });
            this.fileMetadataText = ko.observable();
            this.isBusy = ko.observable(false);
            this.metaPropsToRestoreOnSave = [];

            // When we programmatically change the document text or meta text, push it into the editor.
            this.fileMetadataText.subscribe(function () {
                return _this.updateFileEditorText();
            });
            this.fileName.subscribe(function (x) {
                return _this.loadFile(x);
            });
        }
        filesystemEditFile.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);
            this.metadata = ko.computed(function () {
                return _this.file() ? _this.file().__metadata : null;
            });
            this.filesystemForEditedFile = appUrl.getFileSystem();
            if (args.id != null) {
                this.appendRecentFile(args.id);
                this.fileName(args.id);
            }

            this.metadata.subscribe(function (meta) {
                return _this.metadataChanged(meta);
            });
        };

        // Called when the view is attached to the DOM.
        filesystemEditFile.prototype.attached = function () {
            this.initializeFileEditor();
            this.setupKeyboardShortcuts();
            this.focusOnEditor();
        };

        filesystemEditFile.prototype.setupKeyboardShortcuts = function () {
            var _this = this;
            this.createKeyboardShortcut("alt+shift+del", function () {
                return _this.deleteFile();
            }, filesystemEditFile.editFileSelector);
        };

        filesystemEditFile.prototype.initializeFileEditor = function () {
            var _this = this;
            // Startup the Ace editor with JSON syntax highlighting.
            // TODO: Just use the simple binding handler instead.
            this.fileMetadataEditor = ace.edit("fileMetadataEditor");
            this.fileMetadataEditor.setTheme("ace/theme/xcode");
            this.fileMetadataEditor.setFontSize("16px");
            this.fileMetadataEditor.getSession().setMode("ace/mode/json");
            $("#fileMetadataEditor").on('blur', ".ace_text-input", function () {
                return _this.storeFileEditorTextIntoObservable();
            });
            this.updateFileEditorText();
        };

        filesystemEditFile.prototype.focusOnEditor = function () {
            this.fileMetadataEditor.focus();
        };

        filesystemEditFile.prototype.updateFileEditorText = function () {
            if (this.fileMetadataEditor) {
                this.fileMetadataEditor.getSession().setValue(this.fileMetadataText());
            }
        };

        filesystemEditFile.prototype.storeFileEditorTextIntoObservable = function () {
            if (this.fileMetadataEditor) {
                var editorText = this.fileMetadataEditor.getSession().getValue();
                this.fileMetadataText(editorText);
            }
        };

        filesystemEditFile.prototype.loadFile = function (fileName) {
            var _this = this;
            new getFileCommand(this.activeFilesystem(), fileName).execute().done(function (result) {
                return _this.file(result);
            });
        };

        filesystemEditFile.prototype.navigateToFiles = function () {
            var filesUrl = appUrl.forFilesystemFiles(this.activeFilesystem());
            router.navigate(filesUrl);
        };

        filesystemEditFile.prototype.saveFileMetadata = function () {
            var _this = this;
            //the name of the document was changed and we have to save it as a new one
            var meta = JSON.parse(this.fileMetadataText());
            var currentDocumentId = this.fileName();

            this.metaPropsToRestoreOnSave.forEach(function (p) {
                return meta[p.name] = p.value;
            });

            var saveCommand = new updateFileMetadataCommand(this.fileName(), meta, this.activeFilesystem(), true);
            var saveTask = saveCommand.execute();
            saveTask.done(function () {
                _this.dirtyFlag().reset(); // Resync Changes

                _this.loadFile(_this.fileName());
            });
        };

        filesystemEditFile.prototype.downloadFile = function () {
            var url = appUrl.forResourceQuery(this.activeFilesystem()) + "/files/" + this.fileName();
            window.location.assign(url);
        };

        filesystemEditFile.prototype.refreshFile = function () {
            this.loadFile(this.fileName());
        };

        filesystemEditFile.prototype.saveInObservable = function () {
            this.storeFileEditorTextIntoObservable();
        };

        filesystemEditFile.prototype.deleteFile = function () {
            var _this = this;
            var file = this.file();
            if (file) {
                var viewModel = new deleteItems([file]);
                viewModel.deletionTask.done(function () {
                    var filesUrl = appUrl.forFilesystemFiles(_this.activeFilesystem());
                    router.navigate(filesUrl);
                });
                app.showDialog(viewModel, filesystemEditFile.editFileSelector);
            }

            this.dirtyFlag().reset(); // Resync Changes
        };

        filesystemEditFile.prototype.getTopRecentFiles = function () {
            var _this = this;
            var currentFilesystemName = this.activeFilesystem().name;
            var recentFilesForCurFilesystem = filesystemEditFile.recentDocumentsInFilesystem().first(function (x) {
                return x.filesystemName === currentFilesystemName;
            });
            if (recentFilesForCurFilesystem) {
                var value = recentFilesForCurFilesystem.recentFiles().filter(function (x) {
                    return x !== _this.fileName();
                }).slice(0, 5).map(function (fileId) {
                    return {
                        fileId: fileId,
                        fileUrl: appUrl.forEditFile(fileId, _this.activeFilesystem())
                    };
                });
                return value;
            } else {
                return [];
            }
        };

        filesystemEditFile.prototype.metadataChanged = function (meta) {
            if (meta) {
                //this.metaPropsToRestoreOnSave.length = 0;
                var metaDto = this.metadata().toDto();

                // We don't want to show certain reserved properties in the metadata text area.
                // Remove them from the DTO, restore them on save.
                var metaPropsToRemove = ["Raven-Last-Modified", "Raven-Creation-Date", "Last-Modified", "Creation-Date", "ETag", "RavenFS-Size"];

                for (var property in metaDto) {
                    if (metaDto.hasOwnProperty(property) && metaPropsToRemove.contains(property)) {
                        var value = metaDto[property];
                        if (typeof (value) != "string" && typeof (value) != "number") {
                            this.metaPropsToRestoreOnSave.push({ name: property, value: JSON.stringify(value) });
                        } else {
                            this.metaPropsToRestoreOnSave.push({ name: property, value: metaDto[property].toString() });
                        }
                        delete metaDto[property];
                    }
                }

                var metaString = this.stringify(metaDto);
                this.fileMetadataText(metaString);
            }
        };

        filesystemEditFile.prototype.appendRecentFile = function (fileId) {
            var _this = this;
            var existingRecentFilesStore = filesystemEditFile.recentDocumentsInFilesystem.first(function (x) {
                return x.filesystemName == _this.filesystemForEditedFile.name;
            });
            if (existingRecentFilesStore) {
                var existingDocumentInStore = existingRecentFilesStore.recentFiles.first(function (x) {
                    return x === fileId;
                });
                if (!existingDocumentInStore) {
                    if (existingRecentFilesStore.recentFiles().length == 5) {
                        existingRecentFilesStore.recentFiles.pop();
                    }
                    existingRecentFilesStore.recentFiles.unshift(fileId);
                }
            } else {
                filesystemEditFile.recentDocumentsInFilesystem.push({ filesystemName: this.filesystemForEditedFile.name, recentFiles: ko.observableArray([fileId]) });
            }
        };

        filesystemEditFile.prototype.stringify = function (obj) {
            var prettifySpacing = 4;
            return JSON.stringify(obj, null, prettifySpacing);
        };
        filesystemEditFile.editFileSelector = "#editFileContainer";
        filesystemEditFile.recentDocumentsInFilesystem = ko.observableArray();
        return filesystemEditFile;
    })(viewModelBase);

    
    return filesystemEditFile;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/filesystemFiles", ["require", "exports", "plugins/router", "common/appUrl", "durandal/app", "viewmodels/shell", "common/pagedList", "commands/filesystem/getFilesCommand", "viewmodels/filesystem/createFolderInFilesystem", "common/treeBindingHandler", "viewmodels/viewModelBase", "models/filesystem/folder", "common/fileUploadBindingHandler", "common/uploadQueueHelper"], function(require, exports, router, appUrl, app, shell, pagedList, getFilesystemFilesCommand, createFolderInFilesystem, treeBindingHandler, viewModelBase, folder, fileUploadBindingHandler, uploadQueueHelper) {
    var filesystemFiles = (function (_super) {
        __extends(filesystemFiles, _super);
        function filesystemFiles() {
            var _this = this;
            _super.call(this);
            this.fileName = ko.observable();
            this.allFilesPagedItems = ko.observable();
            this.selectedFilesIndices = ko.observableArray();
            this.isSelectAll = ko.observable(false);
            this.selectedFolder = ko.observable();
            this.addedFolder = ko.observable();
            this.currentLevelSubdirectories = ko.observableArray();
            this.uploadFiles = ko.observable();
            this.uploadQueue = ko.observableArray();
            this.folderNotificationSubscriptions = {};

            this.uploadQueue.subscribe(function (x) {
                return _this.newUpload(x);
            });
            fileUploadBindingHandler.install();
            treeBindingHandler.install();
        }
        filesystemFiles.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.appUrls = appUrl.forCurrentFilesystem();
            this.hasAnyFileSelected = ko.computed(function () {
                return _this.selectedFilesIndices().length > 0;
            });

            this.loadFiles();
            this.selectedFolder.subscribe(function (newValue) {
                return _this.folderChanged(newValue);
            });

            var storageKeyForFs = uploadQueueHelper.localStorageUploadQueueKey + this.activeFilesystem().name;
            if (window.localStorage.getItem(storageKeyForFs)) {
                this.uploadQueue(uploadQueueHelper.parseUploadQueue(window.localStorage.getItem(storageKeyForFs), this.activeFilesystem()));
            }
        };

        filesystemFiles.prototype.attached = function (view, parent) {
            this.collapseUploadQueuePanel();
        };

        filesystemFiles.prototype.deactivate = function () {
            _super.prototype.deactivate.call(this);
        };

        filesystemFiles.prototype.loadFiles = function () {
            this.allFilesPagedItems(this.createPagedList(this.selectedFolder()));

            return this.allFilesPagedItems;
        };

        filesystemFiles.prototype.folderChanged = function (newFolder) {
            var _this = this;
            this.loadFiles();

            // treat notifications events
            if (!newFolder) {
                newFolder = "/";
            }

            if (!this.folderNotificationSubscriptions[newFolder]) {
                this.folderNotificationSubscriptions[newFolder] = shell.currentResourceChangesApi().watchFsFolders(newFolder, function (e) {
                    var callbackFolder = new folder(newFolder);
                    if (!callbackFolder)
                        return;
                    switch (e.Action) {
                        case 0 /* Add */: {
                            var eventFolder = folder.getFolderFromFilePath(e.File);

                            if (!eventFolder || !treeBindingHandler.isNodeExpanded(filesystemFiles.treeSelector, callbackFolder.path)) {
                                return;
                            }

                            //check if the file is new at the folder level to add it
                            if (callbackFolder.isFileAtFolderLevel(e.File)) {
                                _this.loadFiles();
                            } else {
                                //check if a new folder at this level was added so we add it to the tree
                                var subPaths = eventFolder.getSubpathsFrom(callbackFolder.path);
                                if (subPaths.length > 1 && !treeBindingHandler.nodeExists(filesystemFiles.treeSelector, subPaths[1].path)) {
                                    var newNode = {
                                        key: subPaths[1].path,
                                        title: subPaths[1].name,
                                        isLazy: true,
                                        isFolder: true
                                    };
                                    _this.addedFolder(newNode);
                                }
                            }

                            break;
                        }
                        case 1 /* Delete */: {
                            var eventFolder = folder.getFolderFromFilePath(e.File);

                            //check if the file is new at the folder level to remove it from the table
                            if (callbackFolder.isFileAtFolderLevel(e.File)) {
                                _this.loadFiles();
                            } else {
                                //reload node and its children
                                treeBindingHandler.reloadNode(filesystemFiles.treeSelector, callbackFolder.path);
                            }
                            break;
                        }
                        case 3 /* Renaming */: {
                            //nothing to do here
                        }
                        case 4 /* Renamed */: {
                            //reload files to load the new names
                            if (callbackFolder.isFileAtFolderLevel(e.File)) {
                                _this.loadFiles();
                            }
                            break;
                        }
                        case 2 /* Update */: {
                            //check if the file is new at the folder level to add it
                            if (callbackFolder.isFileAtFolderLevel(e.File)) {
                                _this.loadFiles();
                            }
                            break;
                        }
                        default:
                            console.error("unknown notification action");
                    }
                });
            }
        };

        filesystemFiles.prototype.createPagedList = function (directory) {
            var _this = this;
            var fetcher = function (skip, take) {
                return _this.fetchFiles(directory, skip, take);
            };
            var list = new pagedList(fetcher);
            return list;
        };

        filesystemFiles.prototype.fetchFiles = function (directory, skip, take) {
            var task = new getFilesystemFilesCommand(appUrl.getFileSystem(), directory, skip, take).execute();

            return task;
        };

        filesystemFiles.prototype.fileSystemChanged = function (fs) {
            if (!!fs) {
                this.loadFiles();
            }
        };
        filesystemFiles.prototype.editSelectedFile = function () {
            var grid = this.getFilesGrid();
            if (grid) {
                grid.editLastSelectedItem();
            }
        };

        filesystemFiles.prototype.toggleSelectAll = function () {
            this.isSelectAll.toggle();

            var filesGrid = this.getFilesGrid();
            if (filesGrid && this.isSelectAll()) {
                filesGrid.selectSome();
            } else if (filesGrid && !this.isSelectAll()) {
                filesGrid.selectNone();
            }
        };

        filesystemFiles.prototype.getFilesGrid = function () {
            var gridContents = $(filesystemFiles.gridSelector).children()[0];
            if (gridContents) {
                return ko.dataFor(gridContents);
            }

            return null;
        };

        filesystemFiles.prototype.createFolder = function () {
            var _this = this;
            var createFolderVm = new createFolderInFilesystem(this.currentLevelSubdirectories());
            createFolderVm.creationTask.done(function (folderName) {
                var parentDirectory = _this.selectedFolder() ? _this.selectedFolder() : "";
                var newNode = {
                    key: parentDirectory + "/" + folderName,
                    title: folderName,
                    isLazy: true,
                    isFolder: true,
                    addClass: treeBindingHandler.transientNodeStyle
                };
                _this.addedFolder(newNode);
            });

            app.showDialog(createFolderVm);
        };

        filesystemFiles.prototype.deleteSelectedFiles = function () {
            var grid = this.getFilesGrid();
            if (grid) {
                grid.deleteSelectedItems();
            }

            this.isSelectAll(false);
        };

        filesystemFiles.prototype.downloadSelectedFiles = function () {
            var grid = this.getFilesGrid();
            if (grid) {
                var selectedItem = grid.getSelectedItems(1).first();
                var selectedFolder = this.selectedFolder();
                var url = appUrl.forResourceQuery(this.activeFilesystem()) + "/files" + selectedFolder + "/" + selectedItem.getId();
                window.location.assign(url);
            }
        };

        filesystemFiles.prototype.clearUploadQueue = function () {
            window.localStorage.removeItem(uploadQueueHelper.localStorageUploadQueueKey + this.activeFilesystem().name);
            this.uploadQueue.removeAll();
        };

        filesystemFiles.prototype.navigateToFiles = function () {
            router.navigate(appUrl.forFilesystemFiles(this.activeFilesystem()));
        };

        filesystemFiles.prototype.uploadSuccess = function (x) {
            ko.postbox.publish("UploadFileStatusChanged", x);
            uploadQueueHelper.updateQueueStatus(x.id(), uploadQueueHelper.uploadedStatus, this.uploadQueue());
            this.uploadQueue(uploadQueueHelper.sortUploadQueue(this.uploadQueue()));
            var persistedFolder = folder.getFolderFromFilePath(x.fileName());
            if (persistedFolder) {
                treeBindingHandler.updateNodeHierarchyStyle(filesystemFiles.treeSelector, persistedFolder.path, "");
                treeBindingHandler.setNodeLoadStatus(filesystemFiles.treeSelector, persistedFolder.path, 0);
            }

            this.loadFiles();
        };

        filesystemFiles.prototype.uploadFailed = function (x) {
            ko.postbox.publish("UploadFileStatusChanged", x);
            uploadQueueHelper.updateQueueStatus(x.id(), uploadQueueHelper.failedStatus, this.uploadQueue());
            this.uploadQueue(uploadQueueHelper.sortUploadQueue(this.uploadQueue()));
        };

        filesystemFiles.prototype.newUpload = function (x) {
            if (x && x.length > 0) {
                uploadQueueHelper.updateLocalStorage(x, this.activeFilesystem());
                var waitingItems = x.filter(function (x) {
                    return x.status() === uploadQueueHelper.queuedStatus || x.status() === uploadQueueHelper.uploadingStatus;
                });
                for (var i = 0; i < waitingItems.length; i++) {
                    var persistedFolder = folder.getFolderFromFilePath(waitingItems[i].fileName());
                    treeBindingHandler.setNodeLoadStatus(filesystemFiles.treeSelector, persistedFolder.path, 1);
                }
            }
        };

        filesystemFiles.prototype.toggleCollapseUploadQueue = function () {
            if ($(filesystemFiles.uploadQueuePanelToggleSelector).hasClass('opened')) {
                this.collapseUploadQueuePanel();
            } else {
                this.expandUploadQueuePanel();
            }
        };

        filesystemFiles.prototype.expandUploadQueuePanel = function () {
            $(filesystemFiles.uploadQueuePanelToggleSelector).addClass("opened").find('i').removeClass('fa-angle-double-up').addClass('fa-angle-double-down');
            $(filesystemFiles.uploadQueueSelector).removeClass("hidden");
            $(filesystemFiles.uploadQueuePanelCollapsedSelector).addClass("hidden");
            $(".upload-queue").removeClass("upload-queue-min");
        };

        filesystemFiles.prototype.collapseUploadQueuePanel = function () {
            $(filesystemFiles.uploadQueuePanelToggleSelector).removeClass('opened').find('i').removeClass('fa-angle-double-down').addClass('fa-angle-double-up');
            $(filesystemFiles.uploadQueueSelector).addClass("hidden");
            $(filesystemFiles.uploadQueuePanelCollapsedSelector).removeClass("hidden");
            $(".upload-queue").addClass("upload-queue-min");
        };
        filesystemFiles.treeSelector = "#filesTree";
        filesystemFiles.gridSelector = "#filesGrid";
        filesystemFiles.uploadQueuePanelToggleSelector = "#uploadQueuePanelToggle";
        filesystemFiles.uploadQueueSelector = "#uploadQueue";
        filesystemFiles.uploadQueuePanelCollapsedSelector = "#uploadQueuePanelCollapsed";
        return filesystemFiles;
    })(viewModelBase);

    
    return filesystemFiles;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/filesystemStatistics", ["require", "exports", "viewmodels/viewModelBase", "commands/filesystem/getFileSystemStatsCommand"], function(require, exports, viewModelBase, getFileSystemStatsCommand) {
    var filesystemStatistics = (function (_super) {
        __extends(filesystemStatistics, _super);
        function filesystemStatistics() {
            _super.apply(this, arguments);
            this.stats = ko.observable();
        }
        filesystemStatistics.prototype.fetchStats = function () {
            var _this = this;
            var db = this.activeFilesystem();
            if (db) {
                return new getFileSystemStatsCommand(db).execute().done(function (result) {
                    return _this.processStatsResults(result);
                });
            }

            return null;
        };

        filesystemStatistics.prototype.modelPolling = function () {
            this.fetchStats();
        };

        filesystemStatistics.prototype.processStatsResults = function (results) {
            if (filesystemStatistics != null) {
                this.stats(results);
            }
        };
        return filesystemStatistics;
    })(viewModelBase);

    
    return filesystemStatistics;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/resolveConflict", ["require", "exports", "viewmodels/dialogViewModelBase", "plugins/dialog"], function(require, exports, dialogViewModelBase, dialog) {
    var resolveConflict = (function (_super) {
        __extends(resolveConflict, _super);
        function resolveConflict(message, title) {
            _super.call(this);
            this.resolveTask = $.Deferred();
            this.resolveTaskStarted = false;
            this.message = ko.observable('');
            this.title = ko.observable('');
            this.message = message;
            this.title = title;
        }
        resolveConflict.prototype.cancel = function () {
            dialog.close(this);
        };

        resolveConflict.prototype.deactivate = function () {
            // If we were closed via X button or other dialog dismissal, reject the deletion task since
            // we never started it.
            if (!this.resolveTaskStarted) {
                this.resolveTask.reject();
            }
        };

        resolveConflict.prototype.resolve = function () {
            this.resolveTaskStarted = true;
            this.resolveTask.resolve();
            dialog.close(this);
        };
        return resolveConflict;
    })(dialogViewModelBase);

    
    return resolveConflict;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/restoreFilesystem", ["require", "exports", "viewmodels/viewModelBase", "viewmodels/shell", "commands/getDocumentWithMetadataCommand", "common/appUrl", "commands/filesystem/monitorRestoreCommand"], function(require, exports, viewModelBase, shell, getDocumentWithMetadataCommand, appUrl, monitorRestoreCommand) {
    var restoreFilesystem = (function (_super) {
        __extends(restoreFilesystem, _super);
        function restoreFilesystem() {
            var _this = this;
            _super.call(this);
            this.defrag = ko.observable(false);
            this.backupLocation = ko.observable('');
            this.filesystemLocation = ko.observable();
            this.filesystemName = ko.observable();
            this.restoreStatusMessages = ko.observableArray();
            this.isBusy = ko.observable();
            this.anotherRestoreInProgres = ko.observable(false);
            this.keepDown = ko.observable(false);

            this.nameCustomValidityError = ko.computed(function () {
                var errorMessage = '';
                var newFilesystemName = _this.filesystemName();
                var foundFs = shell.fileSystems.first(function (fs) {
                    return newFilesystemName == fs.name;
                });

                if (!!foundFs && newFilesystemName.length > 0) {
                    errorMessage = "Filesystem name already exists!";
                }

                return errorMessage;
            });
        }
        restoreFilesystem.prototype.canActivate = function (args) {
            var _this = this;
            this.isBusy(true);
            var deferred = $.Deferred();
            var db = appUrl.getSystemDatabase();
            var self = this;

            new getDocumentWithMetadataCommand("Raven/Restore/InProgress", db, true).execute().fail(function () {
                return deferred.resolve({ redirect: appUrl.forSettings(db) });
            }).done(function (result) {
                if (result) {
                    // looks like another restore is in progress
                    _this.anotherRestoreInProgres(true);
                    new monitorRestoreCommand($.Deferred(), result.Resource, _this.updateRestoreStatus.bind(self)).execute().always(function () {
                        $("#rawLogsContainer").resize();
                        _this.anotherRestoreInProgres(false);
                    });
                } else {
                    _this.isBusy(false);
                }
                deferred.resolve({ can: true });
            });

            return deferred;
        };

        restoreFilesystem.prototype.updateRestoreStatus = function (newRestoreStatus) {
            this.restoreStatusMessages(newRestoreStatus.Messages);
            if (this.keepDown()) {
                var logsPre = document.getElementById('restoreLogPre');
                logsPre.scrollTop = logsPre.scrollHeight;
            }
            this.isBusy(!!newRestoreStatus.IsRunning);
        };

        restoreFilesystem.prototype.toggleKeepDown = function () {
            this.keepDown.toggle();
            if (this.keepDown() == true) {
                var logsPre = document.getElementById('restoreLogPre');
                logsPre.scrollTop = logsPre.scrollHeight;
            }
        };

        restoreFilesystem.prototype.startRestore = function () {
            var _this = this;
            this.isBusy(true);
            var self = this;

            var restoreFilesystemDto = {
                BackupLocation: this.backupLocation(),
                FilesystemLocation: this.filesystemLocation(),
                FilesystemName: this.filesystemName()
            };

            require(["commands/filesystem/startRestoreCommand"], function (startRestoreCommand) {
                new startRestoreCommand(_this.defrag(), restoreFilesystemDto, self.updateRestoreStatus.bind(self)).execute();
            });
        };
        return restoreFilesystem;
    })(viewModelBase);

    
    return restoreFilesystem;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/search", ["require", "exports", "durandal/app", "plugins/router", "common/appUrl", "viewmodels/viewModelBase", "commands/filesystem/searchByQueryCommand", "common/pagedList"], function(require, exports, app, router, appUrl, viewModelBase, searchByQueryCommand, pagedList) {
    var search = (function (_super) {
        __extends(search, _super);
        function search() {
            var _this = this;
            _super.call(this);
            this.router = router;
            this.searchUrl = appUrl.forCurrentDatabase().filesystemSearch;
            this.searchText = ko.observable("");
            this.allFilesPagedItems = ko.observable();
            this.selectedFilesIndices = ko.observableArray();

            this.searchText.extend({ throttle: 200 }).subscribe(function (s) {
                return _this.searchFiles(s);
            });
        }
        search.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.appUrls = appUrl.forCurrentFilesystem();

            this.activeFilesystem.subscribe(function (fs) {
                _this.searchFiles("");
                _this.searchText("");
            });

            this.loadFiles();
        };

        search.prototype.attached = function () {
        };

        search.prototype.clear = function () {
            this.searchText("");
        };

        search.prototype.search = function () {
            this.searchFiles(this.searchText());
        };

        search.prototype.searchFiles = function (query) {
            this.allFilesPagedItems(this.createPagedList(query));
        };

        search.prototype.loadFiles = function () {
            this.allFilesPagedItems(this.createPagedList(""));
        };

        search.prototype.createPagedList = function (query) {
            var _this = this;
            var fetcher = function (skip, take) {
                return _this.fetchFiles(query, skip, take);
            };
            return new pagedList(fetcher);
        };

        search.prototype.fetchFiles = function (query, skip, take) {
            var task = new searchByQueryCommand(appUrl.getFileSystem(), query, skip, take, null).execute();
            return task;
        };

        search.prototype.fileNameStartsWith = function () {
            var _this = this;
            require(["viewmodels/filesystem/searchSingleInputClause"], function (searchSingleInputClause) {
                var searchSingleInputClauseViewModel = new searchSingleInputClause("Filename starts with: ");
                searchSingleInputClauseViewModel.applyFilterTask.done(function (input) {
                    return _this.addToSearchInput("__fileName:" + _this.escapeQueryString(input) + "*");
                });
                app.showDialog(searchSingleInputClauseViewModel);
            });
        };

        search.prototype.fileNameEndsWith = function () {
            var _this = this;
            require(["viewmodels/filesystem/searchSingleInputClause"], function (searchSingleInputClause) {
                var searchSingleInputClauseViewModel = new searchSingleInputClause("Filename ends with: ");
                searchSingleInputClauseViewModel.applyFilterTask.done(function (input) {
                    return _this.addToSearchInput("__rfileName:" + String.prototype.reverse(_this.escapeQueryString(input)) + "*");
                });
                app.showDialog(searchSingleInputClauseViewModel);
            });
        };

        search.prototype.fileSizeBetween = function () {
            var _this = this;
            require(["viewmodels/filesystem/searchFileSizeRangeClause"], function (searchFileSizeRangeClause) {
                var searchFileSizeRangeClauseViewModel = new searchFileSizeRangeClause();
                searchFileSizeRangeClauseViewModel.applyFilterTask.done(function (input) {
                    return _this.addToSearchInput(input);
                });
                app.showDialog(searchFileSizeRangeClauseViewModel);
            });
        };

        search.prototype.hasMetadata = function () {
            var _this = this;
            require(["viewmodels/filesystem/searchHasMetadataClause"], function (searchHasMetadataClause) {
                var searchHasMetadataClauseViewModel = new searchHasMetadataClause(_this.activeFilesystem());
                searchHasMetadataClauseViewModel.applyFilterTask.done(function (input) {
                    return _this.addToSearchInput(_this.escapeQueryString(input));
                });
                app.showDialog(searchHasMetadataClauseViewModel);
            });
        };

        search.prototype.inFolder = function () {
            var _this = this;
            require(["viewmodels/filesystem/searchSingleInputClause"], function (searchSingleInputClause) {
                var searchSingleInputClauseViewModel = new searchSingleInputClause("Folder path: ");
                searchSingleInputClauseViewModel.applyFilterTask.done(function (input) {
                    return _this.addToSearchInput("__directoryName:/" + _this.escapeQueryString(input));
                });
                app.showDialog(searchSingleInputClauseViewModel);
            });
        };

        search.prototype.lastModifiedBetween = function () {
            var _this = this;
            require(["viewmodels/filesystem/searchLastModifiedBetweenClause"], function (searchLastModifiedBetweenClause) {
                var searchLastModifiedBetweenClauseViewModel = new searchLastModifiedBetweenClause();
                searchLastModifiedBetweenClauseViewModel.applyFilterTask.done(function (input) {
                    return _this.addToSearchInput(input);
                });
                app.showDialog(searchLastModifiedBetweenClauseViewModel);
            });
        };

        search.prototype.addToSearchInput = function (input) {
            var currentSearchText = this.searchText();
            if (currentSearchText != null && currentSearchText.trim().length > 0)
                currentSearchText += " AND ";
            this.searchText(currentSearchText + input);
        };

        search.prototype.escapeQueryString = function (query) {
            return query.replace(/([ /\-\_\.])/g, '\\$1');
        };
        search.gridSelector = "#filesGrid";
        return search;
    })(viewModelBase);

    
    return search;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/searchDialogViewModel", ["require", "exports", "viewmodels/dialogViewModelBase", "plugins/dialog"], function(require, exports, dialogViewModelBase, dialog) {
    /*
    * Base view model for search dialogs.
    * Extends from dialogViewModelBase
    * Provides some extra functionality:
    *    - Listens to Enter key and submits the form only if all the fields have been completed
    */
    var searchDialogViewModel = (function (_super) {
        __extends(searchDialogViewModel, _super);
        function searchDialogViewModel(inputs) {
            _super.call(this);
            this.inputs = inputs;
        }
        searchDialogViewModel.prototype.close = function () {
            dialog.close(this);
        };

        searchDialogViewModel.prototype.enterKeyPressed = function () {
            if (this.inputs == null)
                return false;

            var submit = this.enabled();

            if (submit) {
                _super.prototype.enterKeyPressed.call(this);
            }

            return submit;
        };

        searchDialogViewModel.prototype.enabled = function () {
            var submit = true;

            for (var i = 0; i < this.inputs.length; i++) {
                submit = this.inputs[i]() != null && this.inputs[i]().trim() != "";
            }

            return submit;
        };
        searchDialogViewModel.dialogSelector = ".messageBox";
        return searchDialogViewModel;
    })(dialogViewModelBase);

    
    return searchDialogViewModel;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/searchFileSizeRangeClause", ["require", "exports", "viewmodels/filesystem/searchDialogViewModel"], function(require, exports, searchDialogViewModel) {
    var searchFileSizeRangeClause = (function (_super) {
        __extends(searchFileSizeRangeClause, _super);
        function searchFileSizeRangeClause() {
            _super.call(this, [ko.observable(""), ko.observable("")]);
            this.applyFilterTask = $.Deferred();
        }
        searchFileSizeRangeClause.prototype.applyFilter = function () {
            var filter = "__size_numeric:[" + this.convertInputStringToRangeValue(this.inputs[0]()) + " TO " + this.convertInputStringToRangeValue(this.inputs[1]()) + "]";
            this.applyFilterTask.resolve(filter);

            this.close();
        };

        searchFileSizeRangeClause.prototype.convertInputStringToRangeValue = function (input) {
            if (!input)
                return "*";

            var regex = /^(\d+)\s*(\w*)$/;
            if (!regex.test(input))
                return "*";

            var match = regex.exec(input);
            var value = parseInt(match[1]);
            var loweredCaseMultiplier = match[2].toLowerCase();
            var multiplier = this.getMultiplier(loweredCaseMultiplier);

            value *= multiplier;

            return value.toString();
        };

        searchFileSizeRangeClause.prototype.getMultiplier = function (value) {
            if (!value)
                return 1;

            if (value.indexOf("k") > -1)
                return 1024;

            if (value.indexOf("m") > -1)
                return 1024 * 1024;

            if (value.indexOf("g") > -1)
                return 1024 * 1024 * 1024;

            return 1;
        };
        return searchFileSizeRangeClause;
    })(searchDialogViewModel);

    
    return searchFileSizeRangeClause;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/searchHasMetadataClause", ["require", "exports", "viewmodels/filesystem/searchDialogViewModel", "commands/filesystem/searchByTermCommand", "common/autoCompleteBindingHandler"], function(require, exports, searchDialogViewModel, searchByTermCommand, autoCompleteBindingHandler) {
    var searchHasMetadataClause = (function (_super) {
        __extends(searchHasMetadataClause, _super);
        function searchHasMetadataClause(fs) {
            var _this = this;
            _super.call(this, [ko.observable(""), ko.observable("")]);
            this.fs = fs;
            this.applyFilterTask = $.Deferred();
            this.keySearchResults = ko.observableArray();

            this.inputs[0].throttle(250).subscribe(function (search) {
                return _this.fetchKeySearchResults(search);
            });
            autoCompleteBindingHandler.install();
        }
        searchHasMetadataClause.prototype.applyFilter = function () {
            this.applyFilterTask.resolve(this.inputs[0]() + ":" + this.inputs[1]());
            this.close();
        };

        searchHasMetadataClause.prototype.fetchKeySearchResults = function (query) {
            var _this = this;
            if (query.length >= 1) {
                new searchByTermCommand(this.fs, query).execute().done(function (x) {
                    x = x.filter(function (item, pos, arr) {
                        return item[0] != ("_") && !searchHasMetadataClause.ExcludedMetadataFields.contains(item);
                    });
                    _this.keySearchResults(x);
                });
            }
        };

        searchHasMetadataClause.prototype.setKey = function (key) {
            this.inputs[0](key);
        };
        searchHasMetadataClause.ExcludedMetadataFields = ["Content-Length", "Last-Modified", "Content-MD5", "RavenFS-Size", "Origin"];
        return searchHasMetadataClause;
    })(searchDialogViewModel);

    
    return searchHasMetadataClause;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/searchLastModifiedBetweenClause", ["require", "exports", "common/datePickerBindingHandler", "viewmodels/filesystem/searchDialogViewModel"], function(require, exports, datePickerBindingHandler, searchDialogViewModel) {
    var searchLastModifiedBetweenClause = (function (_super) {
        __extends(searchLastModifiedBetweenClause, _super);
        function searchLastModifiedBetweenClause() {
            _super.call(this, []);
            this.applyFilterTask = $.Deferred();
            this.fromDate = ko.observable();
            this.toDate = ko.observable();

            this.inputs.push(ko.computed(function () {
                $("#fromDate").focus();
                return this.fromDate() != null ? this.fromDate().format("YYYY/MM/DD H:mm:ss") : "";
            }, this));

            this.inputs.push(ko.computed(function () {
                $("#toDate").focus();
                return this.toDate() != null ? this.toDate().format("YYYY/MM/DD H:mm:ss") : "";
            }, this));

            datePickerBindingHandler.install();
        }
        searchLastModifiedBetweenClause.prototype.applyFilter = function () {
            if (this.fromDate() == null || this.toDate() == null)
                return false;
            var dates = "__modified:[" + this.fromDate().format("YYYY/MM/DD_H:mm:ss").replaceAll("/", "-").replaceAll(":", "-") + " TO " + this.toDate().format("YYYY/MM/DD_H:mm:ss").replaceAll("/", "-").replaceAll(":", "-") + "]";
            this.applyFilterTask.resolve(dates);

            this.close();
        };
        return searchLastModifiedBetweenClause;
    })(searchDialogViewModel);

    
    return searchLastModifiedBetweenClause;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/searchSingleInputClause", ["require", "exports", "viewmodels/filesystem/searchDialogViewModel"], function(require, exports, searchDialogViewModel) {
    var searchSingleInputClause = (function (_super) {
        __extends(searchSingleInputClause, _super);
        function searchSingleInputClause(label) {
            _super.call(this, [ko.observable("")]);
            this.applyFilterTask = $.Deferred();
            this.label = "";

            this.label = label;
        }
        searchSingleInputClause.prototype.applyFilter = function () {
            this.applyFilterTask.resolve(this.inputs[0]());

            this.close();
        };
        return searchSingleInputClause;
    })(searchDialogViewModel);

    
    return searchSingleInputClause;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/status", ["require", "exports", "common/appUrl", "viewmodels/shell", "viewmodels/viewModelBase", "models/filesystem/synchronizationDetail", "commands/filesystem/getSyncOutgoingActivitiesCommand", "commands/filesystem/getSyncIncomingActivitiesCommand", "commands/filesystem/synchronizeNowCommand"], function(require, exports, appUrl, shell, viewModelBase, synchronizationDetail, getSyncOutgoingActivitiesCommand, getSyncIncomingActivitiesCommand, synchronizeNowCommand) {
    var status = (function (_super) {
        __extends(status, _super);
        function status() {
            _super.apply(this, arguments);
            var _this = this;
            this.pendingActivity = ko.observableArray();
            this.activeActivity = ko.observableArray();
            this.outgoingActivity = ko.computed(function () {
                var pendingOutgoing = ko.utils.arrayFilter(_this.pendingActivity(), function (item) {
                    return item.Direction() === 0 /* Outgoing */;
                });
                var activeOutgoing = ko.utils.arrayFilter(_this.activeActivity(), function (item) {
                    return item.Direction() === 0 /* Outgoing */;
                });
                var allActivity = new Array();
                allActivity.pushAll(activeOutgoing);
                allActivity.pushAll(pendingOutgoing);
                return allActivity.slice(0, 50);
            });
            this.incomingActivity = ko.computed(function () {
                var pendingIncoming = ko.utils.arrayFilter(_this.pendingActivity(), function (item) {
                    return item.Direction() === 1 /* Incoming */;
                });
                var activeIncoming = ko.utils.arrayFilter(_this.activeActivity(), function (item) {
                    return item.Direction() === 1 /* Incoming */;
                });
                var allActivity = new Array();
                allActivity.pushAll(activeIncoming);
                allActivity.pushAll(pendingIncoming);
                return allActivity.slice(0, 50);
            });
            this.isOutgoingActivityVisible = ko.computed(function () {
                return true;
            });
            this.incomingActivityPagedList = ko.observable();
            this.isIncomingActivityVisible = ko.computed(function () {
                return true;
            });
            this.isFsSyncUpToDate = true;
        }
        status.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            this.appUrls = appUrl.forCurrentFilesystem();

            new getSyncOutgoingActivitiesCommand(this.activeFilesystem()).execute().done(function (x) {
                for (var i = 0; i < x.length; i++) {
                    _this.addOrUpdateActivity(x[i]);
                }
            });

            new getSyncIncomingActivitiesCommand(this.activeFilesystem()).execute().done(function (x) {
                for (var i = 0; i < x.length; i++) {
                    _this.addOrUpdateActivity(x[i]);
                }
            });

            if (this.outgoingActivity().length == 0) {
                $("#outgoingActivityCollapse").collapse();
            }
        };

        status.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchFsSync(function (e) {
                    return _this.processFsSync(e);
                })];
        };

        status.prototype.processFsSync = function (e) {
            var _this = this;
            // treat notifications events
            this.isFsSyncUpToDate = false;

            var activity = new synchronizationDetail(e, this.getActionDescription(e.Action));

            if (e.Action != 2 /* Finish */) {
                this.addOrUpdateActivity(activity);
            } else {
                setTimeout(function () {
                    _this.activeActivity.remove(function (item) {
                        return item.fileName() == e.FileName && item.Type() == e.Type;
                    });
                    _this.pendingActivity.remove(function (item) {
                        return item.fileName() == e.FileName && item.Type() == e.Type;
                    });
                }, 3000);
            }
        };

        status.prototype.synchronizeNow = function () {
            var fs = this.activeFilesystem();
            if (fs) {
                new synchronizeNowCommand(fs).execute();
            }
        };

        status.prototype.collapseAll = function () {
            $(".synchronization-group-content").collapse('hide');
        };

        status.prototype.expandAll = function () {
            $(".synchronization-group-content").collapse('show');
        };

        status.prototype.addOrUpdateActivity = function (e) {
            var matchingActivity = this.getMatchingActivity(e);
            if (!matchingActivity) {
                if (e.Status() === "Active") {
                    this.activeActivity.push(e);
                } else {
                    this.pendingActivity.push(e);
                }
            } else if (matchingActivity.Status() === "Pending" && e.Status() === "Active") {
                this.pendingActivity.remove(matchingActivity);
                this.activeActivity.push(e);
            } else {
                matchingActivity.Status(e.Status());
            }
        };

        status.prototype.getMatchingActivity = function (e) {
            var match = ko.utils.arrayFirst(this.pendingActivity(), function (item) {
                return item.fileName() === e.fileName() && item.Type() === e.Type();
            });

            if (!match) {
                match = ko.utils.arrayFirst(this.activeActivity(), function (item) {
                    return item.fileName() === e.fileName() && item.Type() === e.Type();
                });
            }

            return match;
        };

        status.prototype.getActionDescription = function (action) {
            switch (action) {
                case 0 /* Enqueue */:
                    return "Pending";
                case 1 /* Start */:
                    return "Active";
                case 2 /* Finish */:
                    return "Finished";
                default:
                    return "Unknown";
            }
        };
        return status;
    })(viewModelBase);

    
    return status;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/synchronization", ["require", "exports", "plugins/router", "viewmodels/viewModelBase", "common/appUrl"], function(require, exports, durandalRouter, viewModelBase, appUrl) {
    var synchronization = (function (_super) {
        __extends(synchronization, _super);
        function synchronization() {
            var _this = this;
            _super.call(this);

            this.appUrls = appUrl.forCurrentFilesystem();

            this.router = durandalRouter.createChildRouter().map([
                { route: 'filesystems/synchronization', moduleId: 'viewmodels/filesystem/synchronizationConflicts', title: 'Conflicts', nav: true, hash: appUrl.forCurrentFilesystem().filesystemSynchronization },
                { route: 'filesystems/synchronization/destinations', moduleId: 'viewmodels/filesystem/synchronizationDestinations', title: 'Destinations', nav: true, hash: appUrl.forCurrentFilesystem().filesystemSynchronizationDestinations }
            ]).buildNavigationModel();

            synchronization.statusRouter = this.router;

            appUrl.mapUnknownRoutes(this.router);

            this.currentRouteTitle = ko.computed(function () {
                // Is there a better way to get the active route?
                var activeRoute = _this.router.navigationModel().first(function (r) {
                    return r.isActive();
                });
                return activeRoute != null ? activeRoute.title : "";
            });
        }
        synchronization.prototype.canActivate = function (args) {
            return true;
        };
        return synchronization;
    })(viewModelBase);

    
    return synchronization;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/synchronizationConflicts", ["require", "exports", "durandal/app", "viewmodels/shell", "viewmodels/viewModelBase", "models/filesystem/conflictItem", "commands/filesystem/getFilesConflictsCommand", "commands/filesystem/resolveConflictCommand"], function(require, exports, app, shell, viewModelBase, conflictItem, getFilesConflictsCommand, resolveConflictCommand) {
    var synchronizationConflicts = (function (_super) {
        __extends(synchronizationConflicts, _super);
        function synchronizationConflicts() {
            _super.apply(this, arguments);
            var _this = this;
            this.conflicts = ko.observableArray();
            this.selectedConflicts = ko.observableArray();
            this.isConflictsVisible = ko.computed(function () {
                return _this.conflicts().length > 0;
            });
            this.isSelectAllValue = ko.observable(false);
        }
        synchronizationConflicts.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);
            this.activeFilesystemSubscription = this.activeFilesystem.subscribe(function (fs) {
                return _this.fileSystemChanged(fs);
            });

            this.loadConflicts();
        };

        synchronizationConflicts.prototype.deactivate = function () {
            _super.prototype.deactivate.call(this);
            this.activeFilesystemSubscription.dispose();
        };

        synchronizationConflicts.prototype.createNotifications = function () {
            var _this = this;
            return [shell.currentResourceChangesApi().watchFsConflicts(function (e) {
                    return _this.processFsConflicts(e);
                })];
        };

        synchronizationConflicts.prototype.processFsConflicts = function (e) {
            switch (e.Status) {
                case 0 /* Detected */: {
                    this.addConflict(e);
                    break;
                }
                case 1 /* Resolved */: {
                    this.removeResolvedConflict(e);
                    break;
                }
                default:
                    console.error("unknown notification action");
            }
        };

        synchronizationConflicts.prototype.addConflict = function (conflictUpdate) {
            var match = this.conflictsContains(conflictUpdate);
            if (!match) {
                this.conflicts.push(conflictItem.fromConflictNotificationDto(conflictUpdate));
            }
        };

        synchronizationConflicts.prototype.removeResolvedConflict = function (conflictUpdate) {
            var match = this.conflictsContains(conflictUpdate);
            if (match) {
                this.conflicts.remove(match);
                this.selectedConflicts.remove(match.fileName);
            }
            this.isSelectAllValue(false);
        };

        synchronizationConflicts.prototype.conflictsContains = function (e) {
            var match = ko.utils.arrayFirst(this.conflicts(), function (item) {
                return item.fileName === e.FileName;
            });

            return match;
        };

        synchronizationConflicts.prototype.loadConflicts = function () {
            var _this = this;
            var fs = this.activeFilesystem();
            if (fs) {
                var deferred = $.Deferred();

                var conflictsTask = new getFilesConflictsCommand(fs).execute().done(function (x) {
                    return _this.conflicts(x);
                });

                conflictsTask.done(function () {
                    return deferred.resolve();
                });

                return deferred;
            }
        };

        synchronizationConflicts.prototype.collapseAll = function () {
            $(".synchronization-group-content").collapse('hide');
        };

        synchronizationConflicts.prototype.expandAll = function () {
            $(".synchronization-group-content").collapse('show');
        };

        synchronizationConflicts.prototype.resolveWithLocalVersion = function () {
            var _this = this;
            var message = this.selectedConflicts().length == 1 ? "Are you sure you want to resolve the conflict for file <b>" + this.selectedConflicts()[0] + "</b> by choosing the local version?" : "Are you sure you want to resolve the conflict for <b>" + this.selectedConflicts().length + "</b> selected files by choosing the local version?";

            require(["viewmodels/filesystem/resolveConflict"], function (resolveConflict) {
                var resolveConflictViewModel = new resolveConflict(message, "Resolve conflict with local");
                resolveConflictViewModel.resolveTask.done(function (x) {
                    var fs = _this.activeFilesystem();

                    for (var i = 0; i < _this.selectedConflicts().length; i++) {
                        var conflict = _this.selectedConflicts()[i];
                        new resolveConflictCommand(conflict, 1, fs).execute().done(function () {
                            _this.selectedConflicts.remove(conflict);
                        });
                    }
                });
                app.showDialog(resolveConflictViewModel);
            });
        };

        synchronizationConflicts.prototype.resolveWithRemoteVersion = function () {
            var _this = this;
            var message = this.selectedConflicts().length == 1 ? "Are you sure you want to resolve the conflict for file <b>" + this.selectedConflicts()[0] + "</b> by choosing the remote version?" : "Are you sure you want to resolve the conflict for <b>" + this.selectedConflicts().length + "</b> selected files by choosing the remote version?";

            require(["viewmodels/filesystem/resolveConflict"], function (resolveConflict) {
                var resolveConflictViewModel = new resolveConflict(message, "Resolve conflict with remote");
                resolveConflictViewModel.resolveTask.done(function (x) {
                    var fs = _this.activeFilesystem();

                    for (var i = 0; i < _this.selectedConflicts().length; i++) {
                        var conflict = _this.selectedConflicts()[i];
                        new resolveConflictCommand(conflict, 0, fs).execute();
                    }
                });
                app.showDialog(resolveConflictViewModel);
            });
        };

        synchronizationConflicts.prototype.fileSystemChanged = function (fs) {
            if (fs) {
                this.loadConflicts();
            }
        };

        synchronizationConflicts.prototype.isSelectAll = function () {
            return this.isSelectAllValue();
        };

        synchronizationConflicts.prototype.toggleSelectAll = function () {
            this.isSelectAllValue(this.isSelectAllValue() ? false : true);
            if (this.isSelectAllValue()) {
                this.selectedConflicts.pushAll(this.conflicts().map(function (x) {
                    return x.fileName;
                }));
            } else {
                this.selectedConflicts.removeAll();
            }
        };
        return synchronizationConflicts;
    })(viewModelBase);

    
    return synchronizationConflicts;
});
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define("viewmodels/filesystem/synchronizationDestinations", ["require", "exports", "common/appUrl", "viewmodels/shell", "models/filesystem/synchronizationReplicationSetup", "models/filesystem/synchronizationDestination", "viewmodels/viewModelBase", "commands/filesystem/getDestinationsCommand", "commands/filesystem/getFileSystemStatsCommand", "commands/filesystem/saveDestinationCommand"], function(require, exports, appUrl, shell, synchronizationReplicationSetup, synchronizationDestination, viewModelBase, getDestinationsCommand, getFileSystemStatsCommand, saveDestinationCommand) {
    var synchronizationDestinations = (function (_super) {
        __extends(synchronizationDestinations, _super);
        function synchronizationDestinations() {
            _super.apply(this, arguments);
            this.dirtyFlag = new ko.DirtyFlag([]);
            this.replicationsSetup = ko.observable(new synchronizationReplicationSetup({ Destinations: [], Source: null }));
            this.saveIssued = false;
        }
        synchronizationDestinations.prototype.canActivate = function (args) {
            var _this = this;
            _super.prototype.canActivate.call(this, args);

            var deferred = $.Deferred();
            var fs = this.activeFilesystem();
            if (fs) {
                this.fetchDestinations().done(function () {
                    return deferred.resolve({ can: true });
                }).fail(function () {
                    return deferred.resolve({ redirect: appUrl.forFilesystem(_this.activeFilesystem()) });
                });
            }
            return deferred;
        };

        synchronizationDestinations.prototype.activate = function (args) {
            var _this = this;
            _super.prototype.activate.call(this, args);

            if (!this.subscription) {
                this.subscription = shell.currentResourceChangesApi().watchFsDestinations(function (e) {
                    if (e.Name.indexOf("Raven/Synchronization/Destinations") < 0)
                        return;
                    if (!_this.saveIssued && (e.Action == 0 /* Set */ || e.Action == 1 /* Delete */)) {
                        var canContinue = _this.canContinueIfNotDirty('Data has changed', 'Data has changed in the server. Do you want to refresh and overwrite your changes?');
                        canContinue.done(function () {
                            _this.fetchDestinations().done(function (x) {
                                _this.dirtyFlag().reset();
                            });
                        });
                    } else
                        console.error("Unknown notification action.");
                });
            }

            this.dirtyFlag = new ko.DirtyFlag([this.replicationsSetup]);
            this.isSaveEnabled = ko.computed(function () {
                return _this.dirtyFlag().isDirty();
            });
        };

        synchronizationDestinations.prototype.deactivate = function () {
            _super.prototype.deactivate.call(this);
        };

        synchronizationDestinations.prototype.saveChanges = function () {
            var _this = this;
            if (this.replicationsSetup().source()) {
                this.saveReplicationSetup();
            } else {
                var fs = this.activeFilesystem();
                if (fs) {
                    new getFileSystemStatsCommand(fs).execute().done(function (result) {
                        return _this.prepareAndSaveReplicationSetup(result.DatabaseId);
                    });
                }
            }
        };

        synchronizationDestinations.prototype.prepareAndSaveReplicationSetup = function (source) {
            this.replicationsSetup().source(source);
            this.saveReplicationSetup();
        };

        synchronizationDestinations.prototype.saveReplicationSetup = function () {
            var _this = this;
            var fs = this.activeFilesystem();
            if (fs) {
                var self = this;
                this.saveIssued = true;
                new saveDestinationCommand(this.replicationsSetup().toDto(), fs).execute().done(function () {
                    console.log("Reseted dirty flag");
                    _this.dirtyFlag().reset();
                }).always(function () {
                    return _this.saveIssued = false;
                });
                ;
            }
        };

        synchronizationDestinations.prototype.createNewDestination = function () {
            this.replicationsSetup().destinations.unshift(synchronizationDestination.empty());
        };

        synchronizationDestinations.prototype.removeDestination = function (repl) {
            this.replicationsSetup().destinations.remove(repl);
        };

        synchronizationDestinations.prototype.fetchDestinations = function () {
            var _this = this;
            var deferred = $.Deferred();
            var fs = this.activeFilesystem();
            if (fs) {
                new getDestinationsCommand(fs).execute().done(function (data) {
                    return _this.replicationsSetup(new synchronizationReplicationSetup({ Destinations: data.Destinations, Source: null }));
                }).always(function () {
                    return deferred.resolve({ can: true });
                });
            }
            return deferred;
        };
        return synchronizationDestinations;
    })(viewModelBase);

    
    return synchronizationDestinations;
});
define("widgets/virtualTable/cell", ["require", "exports"], function(require, exports) {
    var cell = (function () {
        function cell(data, templateName) {
            this.templateName = templateName;
            this.data = ko.observable();
            this.resetFlag = false;
            this.data(data);
        }
        cell.prototype.reset = function () {
            this.data('');
            this.resetFlag = true;
        };
        cell.defaultTemplate = "defaultTemplate";
        cell.idTemplate = "idTemplate";
        cell.checkboxTemplate = "checkboxTemplate";
        cell.externalIdTemplate = "externalIdTemplate";
        cell.customTemplate = "customTemplate";
        return cell;
    })();

    
    return cell;
});
define("widgets/virtualTable/column", ["require", "exports"], function(require, exports) {
    var column = (function () {
        function column(binding, width, header) {
            this.width = ko.observable(0);
            this.binding = binding;
            this.header = header || binding;
            this.width(width);
        }
        return column;
    })();

    
    return column;
});
define("widgets/virtualTable/row", ["require", "exports", "widgets/virtualTable/cell", 'common/execJs'], function(require, exports, cell, execJs) {
    var row = (function () {
        function row(addIdCell, viewModel) {
            this.viewModel = viewModel;
            this.top = ko.observable(0);
            this.rowIndex = ko.observable(0);
            this.isInUse = ko.observable(false);
            this.cellMap = { Id: null };
            this.collectionClass = ko.observable("");
            this.editUrl = ko.observable("");
            this.isChecked = ko.observable(false);
            this.compiledCustomFunctions = {};
            if (addIdCell) {
                this.addOrUpdateCellMap('Id', null);
            }

            this.viewModel.settings.customFunctions.subscribe(this.extractCustomFunctions);
            this.extractCustomFunctions(this.viewModel.settings.customFunctions());
        }
        row.prototype.calculateExternalIdCellColor = function (cellValue) {
            var cellCollectionName = cellValue.slice(0, cellValue.lastIndexOf('/')).toLocaleLowerCase();
            var matchingCollection = this.viewModel.settings.collections.first(function (c) {
                return c.name.toLocaleLowerCase() == cellCollectionName;
            });

            if (!!matchingCollection) {
                return matchingCollection.colorClass;
            }
            return '';
        };

        row.prototype.extractCustomFunctions = function (newValue) {
            this.compiledCustomFunctions = new Function("var exports = {}; " + newValue.functions + "; return exports;")();
        };

        row.prototype.resetCells = function () {
            for (var prop in this.cellMap) {
                var cellVal = this.cellMap[prop];
                if (cellVal) {
                    cellVal.reset();
                }
            }
            this.collectionClass('');
            this.isChecked(false);
        };

        row.prototype.createPlaceholderCells = function (cellNames) {
            var _this = this;
            cellNames.filter(function (c) {
                return c != "Id";
            }).forEach(function (c) {
                return _this.addOrUpdateCellMap(c, null);
            });
        };

        row.prototype.fillCells = function (rowData) {
            var _this = this;
            var customFunctions = this.viewModel.settings.customFunctions();
            var customColumns = this.viewModel.settings.customColumns();
            this.isInUse(true);
            var rowProperties = rowData.getDocumentPropertyNames();

            if (customColumns.customMode()) {
                customColumns.columns().forEach(function (column, index) {
                    var binding = column.binding();
                    var context = {};
                    var stringify = typeof rowData === "object" && _this.getCellTemplateName(binding, rowData) !== cell.customTemplate;

                    $.each(rowData, function (name, value) {
                        if (stringify) {
                            context[name] = JSON.stringify(value, null, 4);
                            if (context[name] && context[name].length > 250) {
                                context[name] = context[name].substring(0, 250);
                            }
                        } else {
                            context[name] = value;
                        }
                    });

                    for (var p in _this.compiledCustomFunctions) {
                        context[p] = _this.compiledCustomFunctions[p];
                    }

                    var cellValueGenerator = execJs.createSimpleCallableCode("return " + binding + ";", context);
                    _this.addOrUpdateCellMap(binding, cellValueGenerator());
                });
            } else {
                for (var i = 0; i < rowProperties.length; i++) {
                    var prop = rowProperties[i];
                    var cellValue = rowData[prop];

                    // pass json object when not custom template!
                    if (typeof cellValue === "object" && this.getCellTemplateName(prop, rowData) !== cell.customTemplate) {
                        cellValue = JSON.stringify(cellValue, null, 4) || "";
                    }

                    if (cellValue && cellValue.length > 250) {
                        cellValue = cellValue.substring(0, 250);
                    }
                    this.addOrUpdateCellMap(prop, cellValue);
                }
            }

            if (rowData.getId()) {
                this.addOrUpdateCellMap("Id", rowData.getId());
            }
        };

        row.prototype.addOrUpdateCellMap = function (propertyName, data) {
            if (!this.cellMap[propertyName]) {
                this.cellMap[propertyName] = new cell(data, this.getCellTemplateName(propertyName, data));
            } else {
                var cellVal = this.cellMap[propertyName];
                cellVal.data(data);
            }
        };

        row.prototype.getCellData = function (cellName) {
            var cellVal = this.cellMap[cellName];
            if (cellVal) {
                return cellVal.data;
            }

            return '';
        };

        row.prototype.getCellTemplate = function (cellName) {
            var cellVal = this.cellMap[cellName];
            if (cellVal) {
                if (cellVal.resetFlag === true) {
                    cellVal.templateName = this.getCellTemplateName(cellName, this.cellMap[cellName].data());
                    cellVal.resetFlag = false;
                    return cellVal.templateName;
                } else {
                    return cellVal.templateName;
                }
            }

            // Bug fix: http://issues.hibernatingrhinos.com/issue/RavenDB-2002
            // Calling .data() registers it as a Knockout dependency; updating this
            // observable later will cause the cell to redraw, thus fixing the bug.
            if (this.cellMap && this.cellMap.Id) {
                this.cellMap["Id"].data();
            }

            return "nullTemplate";
        };

        row.prototype.getCellTemplateName = function (propertyName, data) {
            if (propertyName === "Id") {
                return cell.idTemplate;
            } else if (propertyName === "__IsChecked") {
                return cell.checkboxTemplate;
            }

            // See if this is an ID or external ID cell.
            if (!!data) {
                if (typeof data == "string") {
                    var cleanData = data.replace('/\t+/g', '').replace(/\s+/g, '').replace('/\n+/g', '');
                    if (/^\[{"[a-zA-Z0-9_-]+":/.test(cleanData) || /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/.test(cleanData))
                        return cell.defaultTemplate;
                    if (/^\w+\/\w+/ig.test(data) && this.viewModel.collectionExists(data)) {
                        return cell.externalIdTemplate;
                    }
                } else if (!!data[propertyName] && typeof data[propertyName] == "string" && /\w+\/\w+/.test(data[propertyName])) {
                    return cell.externalIdTemplate;
                }
            }

            // note: we just inform here about custom template - without specific name of this template.
            var colParam = this.viewModel.settings.customColumns().findConfigFor(propertyName);
            if (colParam && colParam.template() !== cell.defaultTemplate) {
                return cell.customTemplate;
            }

            return cell.defaultTemplate;
        };
        return row;
    })();

    
    return row;
});
define("widgets/virtualTable/viewmodel", ["require", "exports", "plugins/router", "durandal/app", "common/appUrl", "models/document", "models/collection", "viewmodels/deleteItems", "viewmodels/copyDocuments", "widgets/virtualTable/row", "widgets/virtualTable/column", 'models/customColumnParams', 'models/customColumns', 'models/customFunctions'], function(require, exports, router, app, appUrl, document, collection, deleteItems, copyDocuments, row, column, customColumnParams, customColumns, customFunctions) {
    var ctor = (function () {
        function ctor() {
            this.recycleRows = ko.observableArray();
            this.rowHeight = 38;
            this.borderHeight = 2;
            this.viewportHeight = ko.observable(0);
            this.virtualRowCount = ko.observable(0);
            this.columns = ko.observableArray();
            this.scrollThrottleTimeoutHandle = 0;
            this.firstVisibleRow = null;
            this.lastVisibleRow = null;
            this.itemsSourceSubscription = null;
            this.ensureColumnsAnimationFrameHandle = 0;
        }
        ctor.prototype.activate = function (settings) {
            var _this = this;
            var defaults = {
                dynamicHeightTargetSelector: "footer",
                dynamicHeightBottomMargin: 0,
                selectedIndices: ko.observableArray(),
                showCheckboxes: true,
                showIds: true,
                useContextMenu: true,
                maxHeight: 'none',
                customColumnParams: {},
                isIndexMapReduce: ko.observable(true),
                isCopyAllowed: true,
                contextMenuOptions: ["CopyItems", "CopyIDs", "Delete", 'EditItem'],
                selectionEnabled: true,
                customColumns: ko.observable(customColumns.empty()),
                customFunctions: ko.observable(customFunctions.empty()),
                collections: ko.observableArray([]),
                rowsAreLoading: ko.observable(false),
                noResultsMessage: "No records found.",
                isAnyDocumentsAutoSelected: ko.observable(false),
                isAllDocumentsAutoSelected: ko.observable(false)
            };
            this.settings = $.extend(defaults, settings);

            if (!!settings.isIndexMapReduce) {
                this.isIndexMapReduce = settings.isIndexMapReduce;
            } else {
                this.isIndexMapReduce = ko.observable(false);
            }

            this.getCollectionClassFromEntityNameMemoized = this.getCollectionClassFromEntityName.memoize(this);
            this.items = this.settings.itemsSource();
            this.focusableGridSelector = this.settings.gridSelector + " .ko-grid";
            this.virtualHeight = ko.computed(function () {
                return _this.rowHeight * _this.virtualRowCount();
            });
            this.refreshIdAndCheckboxColumn();

            this.itemsSourceSubscription = this.settings.itemsSource.subscribe(function (list) {
                _this.recycleRows().forEach(function (r) {
                    r.resetCells();
                    _this.recycleRows.valueHasMutated();
                    _this.columns.valueHasMutated();
                    r.isInUse(false);
                });
                _this.items = list;
                _this.settings.selectedIndices.removeAll();
                _this.columns.remove(function (c) {
                    return (c.binding !== 'Id' && c.binding !== '__IsChecked');
                });
                _this.gridViewport.scrollTop(0);
                _this.onGridScrolled();

                _this.refreshIdAndCheckboxColumn();
            });

            this.noResults = ko.computed(function () {
                var numOfRowsInUse = _this.recycleRows().filter(function (r) {
                    return r.isInUse();
                }).length;
                return numOfRowsInUse == 0 && !_this.settings.rowsAreLoading();
            });

            this.registerColumnResizing();
        };

        // Attached is called by Durandal when the view is attached to the DOM.
        // We use this to setup some UI-specific things like context menus, row creation, keyboard shortcuts, etc.
        ctor.prototype.attached = function () {
            var _this = this;
            this.grid = $(this.settings.gridSelector);
            if (this.grid.length !== 1) {
                // Don't throw an error here, because the user can cancel navigation, causing the element not to be found on the page.
                //throw new Error("There should be 1 " + this.settings.gridSelector + " on the page, but found " + this.grid.length.toString());
                console.warn("There should be 1 " + this.settings.gridSelector + " on the page, but found " + this.grid.length.toString());
                return;
            }

            this.gridViewport = this.grid.find(".ko-grid-viewport-container");
            this.gridViewport.on('DynamicHeightSet', function () {
                return _this.onWindowHeightChanged();
            });
            this.gridViewport.scroll(function () {
                return _this.onGridScrolled();
            });

            this.setupKeyboardShortcuts();
            if (this.settings.useContextMenu) {
                this.setupContextMenu();
            }
        };

        ctor.prototype.detached = function () {
            $(this.settings.gridSelector).unbind('keydown.jwerty');

            this.gridViewport.off('DynamicHeightSet');
            if (this.itemsSourceSubscription) {
                this.itemsSourceSubscription.dispose();
            }

            this.unregisterColumnResizing();
        };

        ctor.prototype.calculateRecycleRowCount = function () {
            var requiredRowCount = Math.ceil(this.viewportHeight() / this.rowHeight);
            var rowCountWithPadding = requiredRowCount + 10;
            return rowCountWithPadding;
        };

        ctor.prototype.createRecycleRows = function (rowCount) {
            for (var i = this.recycleRows().length; i < rowCount; i++) {
                var newRow = new row(this.settings.showIds, this);
                newRow.createPlaceholderCells(this.columns().map(function (c) {
                    return c.binding;
                }));
                newRow.rowIndex(i);
                var desiredTop = i * this.rowHeight;
                newRow.top(desiredTop);
                this.recycleRows.push(newRow);
            }

            for (var i = rowCount; i < this.recycleRows().length; i++) {
                var r = this.recycleRows()[i];
                r.isInUse(false);
            }

            app.trigger(this.settings.gridSelector + 'RowsCreated', true);
        };

        ctor.prototype.onGridScrolled = function () {
            var _this = this;
            this.settings.rowsAreLoading(true);
            this.ensureRowsCoverViewport();

            this.scrollThrottleTimeoutHandle = this.requestAnimationFrame(function () {
                return _this.loadRowData();
            }, this.scrollThrottleTimeoutHandle);
        };

        ctor.prototype.onWindowHeightChanged = function () {
            var _this = this;
            this.settings.rowsAreLoading(true);
            var newViewportHeight = this.gridViewport.height();
            this.viewportHeight(newViewportHeight);
            var desiredRowCount = this.calculateRecycleRowCount();
            this.createRecycleRows(desiredRowCount);
            this.ensureRowsCoverViewport();
            this.loadRowData();

            // Update row checked states.
            this.recycleRows().forEach(function (r) {
                return r.isChecked(_this.settings.selectedIndices().contains(r.rowIndex()));
            });
        };

        ctor.prototype.setupKeyboardShortcuts = function () {
            var _this = this;
            this.setupKeyboardShortcut("DELETE", function () {
                return _this.deleteSelectedItems();
            });
            this.setupKeyboardShortcut("Ctrl+C,D", function () {
                return _this.copySelectedDocs();
            });
            this.setupKeyboardShortcut("Ctrl+C,I", function () {
                return _this.copySelectedDocIds();
            });
        };

        ctor.prototype.setupKeyboardShortcut = function (keys, handler) {
            jwerty.key(keys, function (e) {
                e.preventDefault();
                handler();
            }, this, this.settings.gridSelector);
        };

        ctor.prototype.setupContextMenu = function () {
            var _this = this;
            var untypedGrid = this.grid;
            untypedGrid.contextmenu({
                target: '#gridContextMenu',
                before: function (e) {
                    var target = e.target;
                    var rowTag = (target.className.indexOf("ko-grid-row") > -1) ? $(target) : $(e.target).parents(".ko-grid-row");
                    var rightClickedElement = rowTag.length ? ko.dataFor(rowTag[0]) : null;

                    if (_this.settings.showCheckboxes == true && !_this.isIndexMapReduce()) {
                        // Select any right-clicked row.
                        if (rightClickedElement && rightClickedElement.isChecked != null && !rightClickedElement.isChecked()) {
                            _this.toggleRowChecked(rightClickedElement, e.shiftKey);
                        }
                    } else {
                        if (rightClickedElement) {
                            _this.settings.selectedIndices([rightClickedElement.rowIndex()]);
                        }
                    }
                    return true;
                }
            });
        };

        ctor.prototype.refreshIdAndCheckboxColumn = function () {
            var containsId = this.columns().first(function (x) {
                return x.binding == "Id";
            });

            if (!containsId && !this.isIndexMapReduce()) {
                if (this.settings.showCheckboxes !== false) {
                    this.columns.push(new column("__IsChecked", 38));
                }
                if (this.settings.showIds !== false) {
                    this.columns.push(new column("Id", ctor.idColumnWidth));
                }
                this.columns.valueHasMutated();
            } else if (containsId && this.isIndexMapReduce()) {
                this.columns.remove(function (c) {
                    return c.binding === 'Id' || c.binding === "__IsChecked";
                });
                this.columns.valueHasMutated();
            }
        };

        ctor.prototype.loadRowData = function () {
            var _this = this;
            if (this.items && this.firstVisibleRow) {
                this.settings.rowsAreLoading(true);

                // The scrolling has paused for a minute. See if we have all the data needed.
                var firstVisibleIndex = this.firstVisibleRow.rowIndex();
                var fetchTask = this.items.fetch(firstVisibleIndex, this.recycleRows().length);
                fetchTask.done(function (resultSet) {
                    var firstVisibleRowIndexHasChanged = firstVisibleIndex !== _this.firstVisibleRow.rowIndex();
                    if (!firstVisibleRowIndexHasChanged) {
                        _this.virtualRowCount(resultSet.totalResultCount);
                        resultSet.items.forEach(function (r, i) {
                            return _this.fillRow(r, i + firstVisibleIndex);
                        });

                        // when we have few rows and we delete once of them there might be old rows that must be removed
                        _this.recycleRows().filter(function (r, i) {
                            return i >= resultSet.items.length + firstVisibleIndex && r.isInUse();
                        }).map(function (r) {
                            return r.isInUse(false);
                        });

                        // Because processing all columns can take time for many columns, we
                        // asynchronously load the column information in the next animation frame.
                        _this.ensureColumnsAnimationFrameHandle = _this.requestAnimationFrame(function () {
                            return _this.ensureColumnsForRows(resultSet.items);
                        }, _this.ensureColumnsAnimationFrameHandle);
                    }
                    _this.settings.rowsAreLoading(false);
                });
            }
        };

        ctor.prototype.requestAnimationFrame = function (action, existingHandleToCancel) {
            if (window.requestAnimationFrame) {
                if (existingHandleToCancel) {
                    window.cancelAnimationFrame(existingHandleToCancel);
                }

                return window.requestAnimationFrame(action);
            } else if (window.msRequestAnimationFrame) {
                if (window.msCancelRequestAnimationFrame) {
                    window.msCancelRequestAnimationFrame(existingHandleToCancel);
                }

                return window.msRequestAnimationFrame(action);
            } else {
                if (existingHandleToCancel) {
                    window.clearTimeout(existingHandleToCancel);
                }

                return setTimeout(action, 1);
            }
        };

        ctor.prototype.fillRow = function (rowData, rowIndex) {
            var rowAtIndex = ko.utils.arrayFirst(this.recycleRows(), function (r) {
                return r.rowIndex() === rowIndex;
            });
            if (rowAtIndex) {
                rowAtIndex.fillCells(rowData);
                rowAtIndex.collectionClass(this.getCollectionClassFromDocument(rowData));
                rowAtIndex.editUrl(appUrl.forEditItem(!!rowData.getUrl() ? rowData.getUrl() : rowData["Id"], appUrl.getResource(), rowIndex, this.getEntityName(rowData)));
            }
        };

        ctor.prototype.editLastSelectedItem = function () {
            var selectedItem = this.getSelectedItems(1).first();
            if (selectedItem) {
                var collectionName = this.items.collectionName;
                var itemIndex = this.settings.selectedIndices().first();
                router.navigate(appUrl.forEditItem(selectedItem.getUrl(), appUrl.getResource(), itemIndex, collectionName));
            }
        };

        ctor.prototype.getCollectionClassFromDocument = function (doc) {
            var entityName = this.getEntityName(doc);
            return this.getCollectionClassFromEntityNameMemoized(entityName);
        };

        ctor.prototype.getCollectionClassFromEntityName = function (entityName) {
            return collection.getCollectionCssClass(entityName, appUrl.getDatabase());
        };

        ctor.prototype.getEntityName = function (item) {
            var obj = item;
            if (obj && obj instanceof document && obj.getEntityName) {
                var documentObj = obj;
                return documentObj.getEntityName();
            }
            return null;
        };

        ctor.prototype.getColumnWidth = function (binding, defaultColumnWidth) {
            if (typeof defaultColumnWidth === "undefined") { defaultColumnWidth = 100; }
            var customColumns = this.settings.customColumns();
            var customConfig = customColumns.findConfigFor(binding);
            if (customConfig && customColumns.customMode() === true) {
                return customConfig.width();
            }

            if (binding === "Id" && defaultColumnWidth > ctor.idColumnWidth) {
                return ctor.idColumnWidth;
            }
            return defaultColumnWidth;
        };

        ctor.prototype.getColumnName = function (binding) {
            if (this.settings.customColumns().hasOverrides()) {
                var customConfig = this.settings.customColumns().findConfigFor(binding);
                if (customConfig) {
                    return customConfig.header();
                }
            } else {
                var columns = this.settings.customColumns().columns();
                for (var i = 0; i < columns.length; i++) {
                    if (columns[i].binding() === binding) {
                        return columns[i].header();
                    }
                }
            }
            return binding;
        };

        ctor.prototype.ensureColumnsForRows = function (rows) {
            // Hot path.
            // This is called when items finish loading and are ready for display.
            // Keep allocations to a minimum.
            var columnsNeeded = {};

            if (this.settings.customColumns().hasOverrides()) {
                var colParams = this.settings.customColumns().columns();
                for (var i = 0; i < colParams.length; i++) {
                    var colParam = colParams[i];
                    columnsNeeded[colParam.binding()] = null;
                }
            } else {
                for (var i = 0; i < rows.length; i++) {
                    var currentRow = rows[i];
                    var rowProperties = currentRow.getDocumentPropertyNames();
                    for (var j = 0; j < rowProperties.length; j++) {
                        var property = rowProperties[j];
                        columnsNeeded[property] = null;
                    }
                }
            }

            var existingColumns = this.columns();
            var desiredColumns = existingColumns.concat([]);

            for (var i = 0; i < existingColumns.length; i++) {
                var colName = existingColumns[i].binding;
                delete columnsNeeded[colName];
            }

            var idColumn = this.columns.first(function (x) {
                return x.binding == "Id";
            });
            var idColumnExists = idColumn ? 1 : 0;

            var unneededColumns = [];
            ko.utils.arrayForEach(existingColumns, function (col) {
                if (col.binding !== "Id" && col.binding !== "__IsChecked" && rows.every(function (row) {
                    return !row.getDocumentPropertyNames().contains(col.binding);
                })) {
                    unneededColumns.push(col.binding);
                }
            });

            desiredColumns = desiredColumns.filter(function (c) {
                return !unneededColumns.contains(c.binding);
            });
            this.settings.customColumns().columns.remove(function (c) {
                return unneededColumns.contains(c.binding());
            });

            var columnsCurrentTotalWidth = 0;
            for (var i = 2; i < existingColumns.length; i++) {
                columnsCurrentTotalWidth += existingColumns[i].width();
            }

            var availiableWidth = this.grid.width() - 200 * idColumnExists - columnsCurrentTotalWidth;
            var freeWidth = availiableWidth;
            var fontSize = parseInt(this.grid.css("font-size"), 10);
            var columnCount = 0;
            for (var binding in columnsNeeded) {
                var curColWidth = (binding.length + 2) * fontSize;
                if (freeWidth - curColWidth < 0) {
                    break;
                }
                freeWidth -= curColWidth;
                columnCount++;
            }
            var freeWidthPerColumn = (freeWidth / (columnCount + 1));

            var firstRow = this.recycleRows().length > 0 ? this.recycleRows()[0] : null;
            for (var binding in columnsNeeded) {
                var curColWidth = (binding.length + 2) * fontSize + freeWidthPerColumn;
                var columnWidth = this.getColumnWidth(binding, curColWidth);
                availiableWidth -= columnWidth;
                if (availiableWidth <= 0) {
                    break;
                }
                var columnName = this.getColumnName(binding);

                // Give priority to any Name column. Put it after the check column (0) and Id (1) columns.
                var newColumn = new column(binding, columnWidth, columnName);
                if ((binding === "Name") && (!this.settings.customColumns().customMode())) {
                    desiredColumns.splice(2, 0, newColumn);
                } else {
                    desiredColumns.push(newColumn);
                }

                var curColumnConfig = this.settings.customColumns().findConfigFor(binding);
                if (!curColumnConfig && !!firstRow) {
                    var curColumnTemplate = firstRow.getCellTemplate(binding);
                    var newCustomColumn = new customColumnParams({
                        Binding: binding,
                        Header: binding,
                        Template: curColumnTemplate,
                        DefaultWidth: availiableWidth > 0 ? Math.floor(columnWidth) : 0
                    });
                    if ((binding === "Name") && (!this.settings.customColumns().customMode())) {
                        this.settings.customColumns().columns.splice(0, 0, newCustomColumn);
                    } else {
                        this.settings.customColumns().columns.push(newCustomColumn);
                    }
                }
            }

            // Update the columns only if we have to.
            var columnsHaveChanged = desiredColumns.length !== existingColumns.length || desiredColumns.some(function (newCol, index) {
                return newCol.binding !== existingColumns[index].binding;
            });
            if (columnsHaveChanged) {
                this.columns(desiredColumns);
            }
        };

        ctor.prototype.ensureRowsCoverViewport = function () {
            // This is hot path, called multiple times when scrolling.
            // Keep allocations to a minimum.
            var viewportTop = this.gridViewport.scrollTop();
            var viewportBottom = viewportTop + this.viewportHeight();
            var positionCheck = viewportTop;

            this.firstVisibleRow = null;
            var rowAtPosition = null;
            while (positionCheck < viewportBottom) {
                rowAtPosition = this.findRowAtY(positionCheck);
                if (!rowAtPosition) {
                    // If there's no row at this position, recycle one.
                    rowAtPosition = this.getOffscreenRow(viewportTop, viewportBottom);

                    // Find out what the new top of the row should be.
                    var rowIndex = Math.floor(positionCheck / this.rowHeight);
                    var desiredNewRowY = rowIndex * this.rowHeight;
                    rowAtPosition.top(desiredNewRowY);
                    rowAtPosition.rowIndex(rowIndex);
                    rowAtPosition.resetCells();
                    rowAtPosition.isChecked(this.settings.selectedIndices.indexOf(rowIndex) !== -1);
                }

                if (!this.firstVisibleRow) {
                    this.firstVisibleRow = rowAtPosition;
                }

                positionCheck = rowAtPosition.top() + this.rowHeight;
            }

            this.lastVisibleRow = rowAtPosition;
        };

        ctor.prototype.getOffscreenRow = function (viewportTop, viewportBottom) {
            // This is hot path, called multiple times when scrolling.
            // Keep allocations to a minimum.
            var rows = this.recycleRows();
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowTop = row.top();
                var rowBottom = rowTop + this.rowHeight;
                if (rowTop > viewportBottom || rowBottom < viewportTop) {
                    return row;
                }
            }

            throw new Error("Bug: couldn't find an offscreen row to recycle. viewportTop = " + viewportTop.toString() + ", viewportBottom = " + viewportBottom.toString() + ", recycle row count = " + rows.length.toString());
        };

        ctor.prototype.findRowAtY = function (y) {
            // This is hot path, called multiple times when scrolling.
            // Keep allocations to a minimum.
            var rows = this.recycleRows();
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var rowTop = row.top();
                var rowBottom = rowTop + this.rowHeight;
                if (rowTop <= y && rowBottom > y) {
                    return row;
                }
            }

            return null;
        };

        ctor.prototype.getTemplateFor = function (columnName) {
            if (this.settings.customColumns().hasOverrides()) {
                var customConfig = this.settings.customColumns().findConfigFor(columnName);
                if (customConfig) {
                    return customConfig.template();
                }
            }
            return undefined;
        };

        ctor.prototype.toggleRowChecked = function (row, isShiftSelect) {
            var _this = this;
            if (typeof isShiftSelect === "undefined") { isShiftSelect = false; }
            if (this.settings.isAllDocumentsAutoSelected()) {
                var cachedIndeices = this.items.getCachedIndices(this.settings.selectedIndices());
                this.settings.selectedIndices(cachedIndeices);
                this.recycleRows().forEach(function (r) {
                    return r.isChecked(_this.settings.selectedIndices().contains(r.rowIndex()));
                });
                this.settings.isAllDocumentsAutoSelected(false);
                this.settings.isAnyDocumentsAutoSelected(true);
            }

            var rowIndex = row.rowIndex();
            var isChecked = row.isChecked();
            var firstIndex = this.settings.selectedIndices.first();
            var toggledIndices = isShiftSelect && this.settings.selectedIndices().length > 0 ? this.getRowIndicesRange(firstIndex, rowIndex) : [rowIndex];
            if (!isChecked) {
                // Going from unchecked to checked.
                if (this.settings.selectedIndices.indexOf(rowIndex) === -1) {
                    toggledIndices.filter(function (i) {
                        return !_this.settings.selectedIndices.contains(i);
                    }).reverse().forEach(function (i) {
                        return _this.settings.selectedIndices.unshift(i);
                    });
                }
            } else {
                // Going from checked to unchecked.
                this.settings.selectedIndices.removeAll(toggledIndices);
            }

            this.recycleRows().forEach(function (r) {
                return r.isChecked(_this.settings.selectedIndices().contains(r.rowIndex()));
            });
        };

        ctor.prototype.selectNone = function () {
            this.settings.selectedIndices([]);
            this.recycleRows().forEach(function (r) {
                return r.isChecked(false);
            });
            this.settings.isAnyDocumentsAutoSelected(false);
            this.settings.isAllDocumentsAutoSelected(false);
        };

        ctor.prototype.selectAll = function (documentCount) {
            var allIndices = [];

            for (var i = 0; i < documentCount; i++) {
                allIndices.push(i);
            }
            this.recycleRows().forEach(function (r) {
                return r.isChecked(true);
            });

            this.settings.selectedIndices(allIndices);

            this.settings.isAnyDocumentsAutoSelected(false);
            this.settings.isAllDocumentsAutoSelected(true);
        };

        ctor.prototype.selectSome = function () {
            var allIndices = [];

            var firstVisibleRowNumber = this.firstVisibleRow.rowIndex();
            var lastVisibleRowNumber = this.lastVisibleRow.rowIndex();
            var numOfRowsInUse = this.recycleRows().filter(function (r) {
                return r.isInUse();
            }).length;
            var actualNumberOfVisibleRows = Math.min(lastVisibleRowNumber - firstVisibleRowNumber, numOfRowsInUse);

            for (var i = firstVisibleRowNumber; i < firstVisibleRowNumber + actualNumberOfVisibleRows; i++) {
                allIndices.push(i);
            }
            this.recycleRows().forEach(function (r) {
                return r.isChecked(allIndices.contains(r.rowIndex()));
            });

            this.settings.selectedIndices(allIndices);

            this.settings.isAllDocumentsAutoSelected(false);
        };

        ctor.prototype.getRowIndicesRange = function (firstRowIndex, secondRowIndex) {
            var isCountingDown = firstRowIndex > secondRowIndex;
            var indices = [];
            if (isCountingDown) {
                for (var i = firstRowIndex; i >= secondRowIndex; i--)
                    indices.unshift(i);
            } else {
                for (var i = firstRowIndex; i <= secondRowIndex; i++)
                    indices.unshift(i);
            }

            return indices;
        };

        ctor.prototype.editItem = function () {
            if (this.settings.selectedIndices().length > 0) {
                ko.postbox.publish("EditItem", this.settings.selectedIndices()[0]);
            }
        };

        ctor.prototype.copySelectedDocs = function () {
            this.showCopyDocDialog(false);
        };

        ctor.prototype.copySelectedDocIds = function () {
            this.showCopyDocDialog(true);
        };

        ctor.prototype.showCopyDocDialog = function (idsOnly) {
            var selectedDocs = this.getSelectedItems();
            var copyDocumentsVm = new copyDocuments(selectedDocs, this.focusableGridSelector);
            copyDocumentsVm.isCopyingDocs(idsOnly === false);
            app.showDialog(copyDocumentsVm);
        };

        ctor.prototype.getSelectedItems = function (max) {
            if (!this.items || this.settings.selectedIndices().length === 0) {
                return [];
            }
            var sliced = max ? this.settings.selectedIndices.slice(0, max) : null;
            var maxSelectedIndices = sliced || this.settings.selectedIndices();
            return this.items.getCachedItemsAt(maxSelectedIndices);
        };

        ctor.prototype.refreshCollectionData = function () {
            this.items.invalidateCache(); // Causes the cache of items to be discarded.
            this.onGridScrolled(); // Forces a re-fetch of the rows in view.
            this.onWindowHeightChanged();
        };

        ctor.prototype.getNumberOfCachedItems = function () {
            var items = this.items;
            if (!!items) {
                return this.items.itemCount();
            }
            return 0;
        };

        ctor.prototype.deleteSelectedItems = function () {
            var _this = this;
            var documents = this.getSelectedItems();
            var deleteDocsVm = new deleteItems(documents, this.focusableGridSelector);

            deleteDocsVm.deletionTask.done(function () {
                var deletedDocIndices = documents.map(function (d) {
                    return _this.items.indexOf(d);
                });
                deletedDocIndices.forEach(function (i) {
                    return _this.settings.selectedIndices.remove(i);
                });
                _this.recycleRows().forEach(function (r) {
                    return r.isChecked(_this.settings.selectedIndices().contains(r.rowIndex()));
                }); // Update row checked states.
                _this.recycleRows().filter(function (r) {
                    return deletedDocIndices.indexOf(r.rowIndex()) >= 0;
                }).forEach(function (r) {
                    return r.isInUse(false);
                });
                _this.items.invalidateCache(); // Causes the cache of items to be discarded.
                _this.onGridScrolled(); // Forces a re-fetch of the rows in view.

                // Forces recalculation of recycled rows, in order to eliminate "duplicate" after delete
                // note: won't run on delete of last document(s) of a collection in order to prevent race condition
                // with changes api. Now we don't use changes api to update the documents list, so this isn't a problem.
                _this.onWindowHeightChanged();
            });
            app.showDialog(deleteDocsVm);
        };

        ctor.prototype.getDocumentHref = function (documentId) {
            if (typeof documentId == "string") {
                return appUrl.forEditItem(documentId, appUrl.getDatabase(), null, null);
            } else {
                return "#";
            }
        };

        ctor.prototype.collectionExists = function (collectionName) {
            var result = this.settings.collections().map(function (c) {
                return collectionName.toLowerCase().substr(0, c.name.length) === c.name.toLowerCase();
            }).reduce(function (p, c) {
                return c || p;
            }, false);
            return result;
        };

        ctor.prototype.registerColumnResizing = function () {
            var _this = this;
            var resizingColumn = false;
            var startX = 0;
            var startingWidth = 0;
            var columnIndex = 0;

            $(this.settings.gridSelector).on("mousedown.virtualTableColumnResize", ".ko-grid-column-handle", function (e) {
                columnIndex = parseInt($(e.currentTarget).attr("column"));
                startingWidth = parseInt(_this.columns()[columnIndex].width().toString());
                startX = e.pageX;
                resizingColumn = true;
            });

            $(this.settings.gridSelector).on("mouseup.virtualTableColumnResize", "", function (e) {
                resizingColumn = false;
            });

            $(this.settings.gridSelector).on("mousemove.virtualTableColumnResize", "", function (e) {
                if (resizingColumn) {
                    var targetColumnSize = startingWidth + e.pageX - startX;
                    _this.columns()[columnIndex].width(targetColumnSize);

                    // Stop propagation of the event so the text selection doesn't fire up
                    if (e.stopPropagation)
                        e.stopPropagation();
                    if (e.preventDefault)
                        e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false;

                    return false;
                }
            });
        };

        ctor.prototype.unregisterColumnResizing = function () {
            $(this.settings.gridSelector).off("mousedown.virtualTableColumnResize");
            $(this.settings.gridSelector).off("mouseup.virtualTableColumnResize");
            $(this.settings.gridSelector).off("mousemove.virtualTableColumnResize");
        };
        ctor.idColumnWidth = 200;
        return ctor;
    })();

    
    return ctor;
});
define("text!views/adminLogs.html", [], function () { return '<section id=\"logsContainer\" style=\"width: 100%; position: relative\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div class=\"form-horizontal\">        <div class=\"form-group logButtons btn-group\">            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: configureConnection\">Configure Connection</button>                <button type=\"button\" class=\"btn btn-success\" data-bind=\"click: reconnect\">Reconnect</button>                <button type=\"button\" class=\"btn btn-warning\" data-bind=\"click: disconnect\">Disconnect</button>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"css: { \'pressed\': keepDown }, click: function () { this.toggleKeepDown() }\">KeepDown</button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: clearLogs\">Clear</button>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: exportLogs\">Export</button>            </div>        </div>    </div>     <div class=\"form-group statsBar\">            <strong class=\"col-sm-12\">Stats:</strong>            <div class=\"small col-sm-offset-1 col-sm-11\" data-bind=\"with: adminLogsConfig\">                <strong>Status: </strong><label data-bind=\"text: ($root.connected() == true ? \'Connected\' : \'Disconnected\'), css: { \'text-danger\': $root.connected() == false, \'text-success\': $root.connected() == true }\"></label>                <strong>; Entries: <label data-bind=\"text: $root.entriesCount()\"></label></strong>                <strong>; Buffer Size: </strong><label data-bind=\"text: $root.adminLogsConfig().maxEntries\"></label>            </div>        </div>    <div id=\"rawLogsContainer\" style=\"position: absolute; top: 100px; bottom: 10px; width: 100%;\">        <pre id=\"adminLogsPre\" style=\"word-wrap: normal; overflow: auto; height: 100%\"></pre>    </div></section>'; } )
define("text!views/adminLogsConfigureDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" style=\"width: 715px;\">    <form data-bind=\"submit: startServerLogging\" id=\"log-config-form\" onkeypress=\"return event.keyCode != 13;\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Custom logging</h4>        </div>                <div class=\"modal-body\">                        <div class=\"row\">                <div class=\"col-md-12\">                    <div class=\"form-group\">                        <label for=\"maxEntries\" class=\"col-sm-4 control-label\">Max log entries</label>                        <div class=\"col-sm-8\">                          <input type=\"number\" data-bind=\"value: logConfig.maxEntries\" class=\"form-control\" id=\"maxEntries\" required max=\"30000\" min=\"1\">                        </div>                    </div>                </div>            </div>            <table class=\"table table-hover\" data-bind=\"css: { \'custom-table\': isScrollNeeded }\">                <thead>                    <tr>                        <th class=\"col-md-4\">Category</th>                        <th class=\"col-md-4\">Level</th>                        <th class=\"col-md-2\">Options</th>                    </tr>                </thead>                <tbody data-bind=\"foreach: logConfig.entries, css: { \'custom-table-tbody\': isScrollNeeded }\">                    <tr>                        <td class=\"col-md-4\"><input class=\"form-control\" required type=\"text\" data-bind=\"value: category\" /></td>                        <td class=\"col-md-4\">                            <select class=\"form-control\" required data-bind=\"value: level\">                                <option value=\"Debug\">Debug</option>                                <option value=\"Info\">Info</option>                                <option value=\"Warn\">Warning</option>                                <option value=\"Error\">Error</option>                                <option value=\"Fatal\">Fatal</option>                            </select>                        </td>                        <td class=\"col-md-2\">                            <div class=\"btn-group\">                                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: $root.deleteRow.bind($root, $data)\"><i class=\"fa fa-trash-o\"></i></button>                            </div>                        </td>                    </tr>                </tbody>            </table>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" class=\"btn btn-primary\">Ok</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"button\" class=\"btn pull-left btn-default\" data-bind=\"click: addCategory\">                <i class=\"fa fa-plus\"></i> Add new category            </button>        </div>    </form></div>'; } )
define("text!views/adminSettings.html", [], function () { return '<br/><div class=\"settings-container row\">    <div class=\"col-md-2\">        <ul class=\"nav nav-pills nav-stacked\">            <!-- ko foreach: router.navigationModel -->            <li data-bind=\"css: { active: isActive() }\">                <a data-bind=\"attr: { href: hash }, text: title\"></a>            </li>            <!-- /ko -->            <li>                <a href=\"#\" data-bind=\"click: navigateToSystemDatabase\">To System Database</a>            </li>        </ul>    </div>    <div class=\"col-md-10\" data-bind=\"router: { cacheViews: false }\">    </div></div>'; } )
define("text!views/alerts.html", [], function () { return '<section id=\"alertsContainer\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div style=\"height: 65%; position: relative;\">        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: saveAlerts\" title=\"Save changes\"><i class=\"fa fa-save\"></i></button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: fetchAlerts\" title=\"Refresh alerts\"><i class=\"fa fa-refresh\"></i></button>        <div class=\"btn-group\" data-toggle=\"buttons\">            <label class=\"btn btn-default active\" data-bind=\"click: setFilterAll\">                <input type=\"radio\" name=\"options\" id=\"option1\"> <span data-bind=\"text: \'All alerts (\' + allAlerts().length + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterUnread\">                <input type=\"radio\" name=\"options\" id=\"option1\"> <span data-bind=\"text: \'Unread (\' + unreadAlertCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterRead\">                <input type=\"radio\" name=\"options\" id=\"option2\"> <span data-bind=\"text: \'Read (\' + readAlertCount() + \')\'\"></span>            </label>        </div>        <div class=\"btn-group\" data-bind=\"with: selectedAlert\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"visible: observed() === false, click: $root.toggleSelectedReadState.bind($root)\">Mark as read</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"visible: observed, click: $root.toggleSelectedReadState.bind($root)\">Mark as unread</button>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                    <i class=\"fa fa-trash-o\"></i>                    <span class=\"caret\"></span>                </button>                <ul class=\"dropdown-menu\" role=\"menu\">                    <li><a href=\"#\" data-bind=\"click: $root.deleteSelectedAlert.bind($root)\">Delete selected alert</a></li>                    <li><a href=\"#\" data-bind=\"click: $root.deleteReadAlerts.bind($root)\">Delete read alerts</a></li>                    <li><a href=\"#\" data-bind=\"click: $root.deleteAllAlerts.bind($root)\">Delete all alerts</a></li>                </ul>            </div>        </div>        <div id=\"alertTableContainer\" style=\"overflow-y: auto; position: absolute; bottom: 10px; top: 40px; width: 100%;\">            <table class=\"table table-condensed single-line-row-table\" data-bind=\"event: { keydown: tableKeyDown }\" tabindex=\"1\">                <thead>                    <tr>                        <th class=\"col-md-1\">Level</th>                        <th class=\"col-md-2\">Reported</th>                        <th class=\"col-md-4\">Title</th>                        <th class=\"col-md-4\" >Message</th>                        <th class=\"col-md-2\">Exception</th>                    </tr>                </thead>                <tbody data-bind=\"foreach: allAlerts, delegatedHandler: \'click\'\">                    <tr data-click=\"selectAlert\" data-bind=\"visible: isVisible, css: { \'unread\': observed() === false, \'selected\': $data === $parent.selectedAlert(), warning: alertLevel === \'Warn\', danger: alertLevel === \'Error\' || alertLevel === \'Fatal\' }\">                        <td data-bind=\"text: alertLevel\"></td>                        <td data-bind=\"text: createdAtHumanized, attr: { title: createdAtHumanized }\"></td>                        <td data-bind=\"text: title, attr: { title: title }\"></td>                        <td data-bind=\"text: message, attr: { title: message }\"></td>                        <td data-bind=\"text: exception, attr: { title: exception }\"></td>                    </tr>                </tbody>            </table>        </div>    </div>    <div class=\"alerts-details panel panel-default\" style=\"height: 30%;\">        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Title</label>            <div class=\"col-md-10\" data-bind=\"with: selectedAlert\">                <p class=\"form-control-static\" data-bind=\"text: title\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Message</label>            <div class=\"col-md-10\" data-bind=\"with: selectedAlert\">                <p class=\"form-control-static\" data-bind=\"text: message\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Exception</label>            <div class=\"col-md-10\" data-bind=\"with: selectedAlert\">                <p class=\"form-control-static exceptionText\" data-bind=\"text: exception\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Reported</label>            <div class=\"col-md-10\" data-bind=\"with: selectedAlert\">                <p class=\"form-control-static\" data-bind=\"text: createdAtHumanized\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Level</label>            <div class=\"col-md-10\" data-bind=\"with: selectedAlert\">                <p class=\"form-control-static\" data-bind=\"text: alertLevel, css: { \'text-warning\': alertLevel === \'Warn\', \'text-danger\': alertLevel === \'Error\' || alertLevel === \'Fatal\' }\"></p>            </div>        </div>    </div></section>'; } )
define("text!views/apiKeys.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: saveChanges\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <div class=\"btn-group\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSaveEnabled\" title=\"Save changes (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: createNewApiKey\" title=\"Create a new API Key (Alt+N)\" accesskey=\"N\">                    <i class=\"fa fa-plus\"></i> Create a new API Key                </button>            </div>            <div class=\"btn-group\">                <div class=\"input-group\" data-bind=\"visible: apiKeys().length > 0\">                    <span class=\"input-group-addon\"><i class=\"fa fa-search\"></i></span>                    <input type=\"text\" class=\"form-control\" placeholder=\"Search for API Keys\" data-bind=\"value: searchText, valueUpdate: \'afterkeydown\'\" />                </div>            </div>        </div>        <div class=\"panel-body\">            <div class=\"text-center\" data-bind=\"visible: apiKeys().length == 0\">                <h3 class=\"text-info\">You don\'t have any API keys. <small>Go ahead and <a href=\"#\" data-bind=\"click: createNewApiKey\">create one now</a>.</small></h3>            </div>            <div data-bind=\"foreach: apiKeys\">                <div class=\"panel api-key-card\" data-bind=\"visible: visible, css: { \'panel-info\': enabled() && isValid($index), \'panel-warning\': !enabled() && isValid($index), \'panel-danger\': !isValid($index) }\">                    <div class=\"panel-heading\">                        <h3 class=\"panel-title\">                            <span data-bind=\"text: name() ? name() : \'[new api key]\'\"></span>                            <button type=\"button\" style=\"display: inline-block;\" class=\"close\" data-bind=\"click: $root.removeApiKey.bind($root)\" title=\"Remove this API key\">                                <i class=\"fa fa-times\"></i>                            </button>                        </h3>                    </div>                    <div class=\"panel-body\">                        <div class=\"form-group\">                            <label class=\"col-sm-3 control-label\">Name</label>                            <div class=\"col-sm-7\">                                <input type=\"text\" class=\"form-control\" required placeholder=\"API Key name\" data-bind=\"value: name, valueUpdate: \'afterkeydown\', customValidity: nameCustomValidity\" />                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-3 control-label\">Secret</label>                            <div class=\"col-sm-7\">                                <input type=\"text\" class=\"form-control\" readonly data-bind=\"value: secret\" onmouseup=\"this.select(); return false;\" />                                <a href=\"javascript:void(0)\" data-bind=\"click: generateSecret\">Generate</a>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-3 control-label\">Full API Key</label>                            <div class=\"col-sm-7\">                                <input type=\"text\" class=\"form-control\" readonly data-bind=\"value: fullApiKey\" onmouseup=\"this.select(); return false;\">                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-3 control-label\">Connection String</label>                            <div class=\"col-sm-7\">                                <input type=\"text\" class=\"form-control\" readonly data-bind=\"value: connectionString\" onmouseup=\"this.select(); return false;\" />                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-3 control-label\">Direct Link</label>                            <div class=\"col-sm-7\">                                <input type=\"text\" class=\"form-control\" readonly data-bind=\"value: directLink\" onmouseup=\"this.select(); return false;\" />                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-3 control-label\">Enabled</label>                            <div class=\"col-sm-7\">                                <div class=\"btn-group\">                                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                        <span data-bind=\"visible: enabled\">Enabled</span>                                        <span data-bind=\"visible: !enabled()\">Disabled</span>                                        <span class=\"caret\"></span>                                    </button>                                    <ul class=\"dropdown-menu\" role=\"menu\">                                        <li><a href=\"#\" data-bind=\"click: enable\">Enabled</a></li>                                        <li><a href=\"#\" data-bind=\"click: disable\">Disabled</a></li>                                    </ul>                                </div>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-3 control-label\">Resources</label>                            <div class=\"col-sm-9\">                                <table class=\"table table-striped table-hover\">                                    <thead>                                        <tr class=\"database-header\" data-bind=\"visible: databases().length > 0\">                                            <td>Name</td>                                            <td>Type</td>                                            <td>                                                <button type=\"button\" style=\"display: inline-block; font-size: 14px;\" class=\"close\" title=\"Add database\" data-bind=\"click: addEmptyDatabase\">                                                    <i class=\"fa fa-plus\"></i>                                                </button>                                            </td>                                        </tr>                                        <tr data-bind=\"visible: databases().length == 0\">                                            <td>                                                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: addEmptyDatabase\" title=\"Add Resource\">                                                    <i class=\"fa fa-plus\"></i> Add Resource                                                </button>                                            </td>                                        </tr>                                    </thead>                                    <tbody data-bind=\"foreach: databases\">                                        <tr>                                            <td>                                                <div class=\"btn-group\">                                                    <input tabindex=\"2\" required type=\"text\" name=\"databaseName\" class=\"form-control\" data-bind=\"value: tenantId, valueUpdate: \'afterkeydown\', customValidity: tenantCustomValidityError, attr: { \'id\': \'databaseName\' + $parentContext.$index() + $index() }\" placeholder=\"Resource name\">                                                    <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#databaseName\' + $parentContext.$index() + $index(), foreach: searchResults\">                                                        <li role=\"presentation\" data-bind=\"click: $parent.tenantId.bind($data)\">                                                            <a role=\"menuitem\" tabindex=\"-1\" href=\"#\" class=\"nounderline\">                                                                <span data-bind=\"text: $data\"></span>                                                            </a>                                                        </li>                                                    </ul>                                                </div>                                            </td>                                            <td>                                                <div class=\"btn-group\">                                                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                        <span data-bind=\"text: currentAccessType\"></span> <span class=\"caret\"></span>                                                    </button>                                                    <ul class=\"dropdown-menu\" role=\"menu\">                                                        <!-- ko foreach: getTypes() -->                                                        <li><a href=\"#\" class=\"nounderline\" data-bind=\"text: $data, click: $parent.currentAccessType.bind($parent)\"></a></li>                                                        <!-- /ko -->                                                    </ul>                                                </div>                                            </td>                                            <td>                                                <button type=\"button\" style=\"display: inline-block;float:none;vertical-align: middle; font-size: 14px;\" class=\"close\" data-bind=\"visible: $parent.databases().length > 1, click: $parent.removeDatabase.bind($parent, $data)\" title=\"Remove this database\">                                                    <i class=\"fa fa-times\"></i>                                                </button>                                            </td>                                        </tr>                                    </tbody>                                </table>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></form>'; } )
define("text!views/backupDatabase.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: startBackup\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <div class=\"btn-group\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"disable: isBusy\">                    <i class=\"fa fa-cloud-upload\"></i>                    <span>Start Backup</span>                </button>            </div>        </div>        <div class=\"panel-body\">            <div class=\"form-group\">                <label for=\"databaseName\" class=\"col-sm-2 control-label\">Database to backup</label>                <div class=\"col-sm-3\">                    <input tabindex=\"2\" required type=\"text\" name=\"databaseName\" class=\"form-control\" id=\"databaseName\" data-bind=\"value: databaseName, valueUpdate: \'afterkeydown\', customValidity: nameCustomValidityError\" placeholder=\"Database name to backup\">                    <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#databaseName\', foreach: searchResults\">                        <li role=\"presentation\" data-bind=\"click: $parent.databaseName.bind($parent, $data)\">                            <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                <span data-bind=\"text: $data\"></span>                            </a>                        </li>                    </ul>                </div>            </div>            <div class=\"form-group\">                <label for=\"location\" class=\"col-sm-2 control-label\">Location</label>                <div class=\"col-sm-5\">                    <input type=\"text\" required class=\"form-control\" id=\"location\" data-bind=\"value: backupLocation\" placeholder=\"C:&#92;path-to-your-backup-folder\">                </div>            </div>            <div class=\"form-group\">                <div class=\"col-sm-offset-2 col-sm-5\">                    <div class=\"checkbox\">                        <label>                            <input type=\"checkbox\" data-bind=\"checked: incremental\"> Incremental                        </label>                    </div>                </div>            </div>            <div class=\"progress progress-striped active\" data-bind=\"visible: isBusy\">                <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>            </div>            <div data-bind=\"foreach: backupStatusMessages, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: \'10px\' }\">                <div data-bind=\"text: \'[\' + Timestamp+ \']\t\' + Severity +\':\t\'+ Message\"></div>            </div>        </div>    </div></form>'; } )
define("text!views/compactDatabase.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: startCompact\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <div class=\"btn-group\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"disable: isBusy\">                    <i class=\"fa fa-hdd-o\"></i>                    <span>Start Compaction</span>                </button>            </div>        </div>        <div class=\"panel-body\">            <div class=\"form-group\">                <label for=\"databaseName\" class=\"col-sm-2 control-label\">Database to compact</label>                <div class=\"col-sm-3\">                    <input tabindex=\"2\" required type=\"text\" name=\"databaseName\" class=\"form-control\" id=\"databaseName\" data-bind=\"value: databaseName, valueUpdate: \'afterkeydown\', customValidity: nameCustomValidityError\" placeholder=\"Database name to compact\">                    <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#databaseName\', foreach: searchResults\">                        <li role=\"presentation\" data-bind=\"click: $parent.databaseName.bind($parent, $data)\">                            <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                <span data-bind=\"text: $data\"></span>                            </a>                        </li>                    </ul>                </div>            </div>            <div class=\"progress progress-striped active\" data-bind=\"visible: isBusy\">                <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>            </div>                        <p>                <i class=\"fa fa-warning text-warning\"></i> <span class=\"text-muted\">Compaction takes database offline.</span>            </p>        </div>    </div></form>'; } )
define("text!views/confirmationDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h3 class=\"modal-title\" data-bind=\"text: title\"></h3>    </div>    <div class=\"modal-body\">        <p class=\"confirmationMessage\" data-bind=\"text: confirmationMessage\"></p>    </div>    <div class=\"modal-footer\" data-bind=\"foreach: options\">        <button type=\"button\" class=\"btn\" data-bind=\"text: $data, click: $root.onOptionClicked.bind($root), css: { \'btn-default\': $index() !== $root.options.length - 1, \'btn-primary\': $index() === $root.options.length - 1 }\"></button>    </div></div>'; } )
define("text!views/conflicts.html", [], function () { return '<div class=\"conflicts-page\">    <div class=\"row\">        <div class=\"col-md-12\">            <div id=\"conflictsGrid\" data-bind=\"widget: {                kind: \'virtualTable\', itemsSource: currentConflictsPagedItems,                selectedIndices: selectedDocumentIndices, gridSelector: \'#conflictsGrid\',                showCheckboxes: false, useContextMenu: false,                customColumns: currentColumns,                noResultsMessage: \'No conflicts found\'            }\"></div>        </div>    </div></div><script type=\"text/html\" id=\"versions-template\">    <span data-bind=\"foreach: { data: $data, as: \'version\' }\">        <a href=\"#\" data-bind=\"attr: { href: $root.getUrlForConflict(version), title: \'Document Id: \' + version.id + \' Server Id: \' + $root.getServerUrlForVersion(version) }\">            <span data-bind=\"  text: ($index() + 1) + $root.getTextForVersion(version)\"></span>        </a>    </span></script>'; } )
define("text!views/copyDocuments.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\"  data-bind=\"style: { width: width() + \'px\', height: height() + \'px\', \'marginLeft\': left() + \'px\', \'marginTop\': top() + \'px\' }\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\"></button>        <h4 class=\"modal-title\">Copy documents</h4>    </div>    <div class=\"modal-body\" data-bind=\"style: { height: bodyHeight() + \'px\' }\">        <h4><strong>CTRL+C, Enter</strong><span> to copy</span></h4>        <ul class=\"nav nav-tabs\">            <li data-bind=\"click: activateDocs, css: { active: isCopyingDocs}\"><a style=\"cursor: pointer;\">Docs</a></li>            <li data-bind=\"click: activateIds, css: { active: isCopyingDocs() === false }\"><a style=\"cursor: pointer;\">Ids</a></li>        </ul>        <textarea id=\"documentsText\" rows=\"10\" style=\"width: 100%; resize: none\" class=\"form-control\" autofocus=\"autofocus\" data-bind=\"style : { height: (bodyHeight() - 110) + \'px\' }, value: documentsOrIdsText, event: { focus: function () { $(this).select(); } }\" />    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: close\">Close</button>         <span class=\"dialogResizer\"></span>    </div></div>'; } )
define("text!views/copyIndexDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\" data-bind=\"text:isPaste === true?\'Paste Index\':\'Copy Index\'\"></h4>    </div>    <div class=\"modal-body\">        <h4>            <strong data-bind=\"text: isPaste === true ? \'CTRL+V, Enter \': \'CTRL+C, Enter \'\"></strong>            <span data-bind=\"text: isPaste === true ? \'to save\' : \'to copy\'\"></span>        </h4>        <div>            <pre data-bind=\"aceEditor: { code: indexJSON, lang: \'ace/mode/json\', getFocus: true, selectAll: true, readOnly: !isPaste, bubbleEscKey: true }\" style=\"width: 600px; height: 400px;\"></pre>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close, visible: isPaste === true\">Close</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: saveIndex, text: isPaste === true ? \'Save Index\' : \'Close\', enable: !!indexJSON(), attr: { title: isPaste ? \'Save the index (Alt+S)\' : \'\', accesskey: isPaste ? \'S\' : \'\' }\"></button>    </div></div>'; } )
define("text!views/copyTransformerDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\" data-bind=\"text: isPaste === true ? \'Paste Transformer\' : \'Copy Transformer\'\"></h4>    </div>    <div class=\"modal-body\">        <h4>            <span data-bind=\"visible: isPaste\">Paste a JSON string containing a transformer.</span>            <span data-bind=\"visible: !isPaste\">                <strong>CTRL+C, Enter</strong> to copy            </span>        </h4>        <div>            <pre data-bind=\"aceEditor: { code: transformerJSON, lang: \'ace/mode/json\', getFocus: true, selectAll: true, readOnly: !isPaste, bubbleEscKey: true }\" style=\"width: 600px; height: 200px;\"></pre>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close, visible: isPaste === true\">Cancel</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: saveTransformer, text: isPaste === true ? \'Save Transformer\' : \'Close\', enable: !!transformerJSON(), attr: { accesskey: isPaste ? \'S\' : \'\', title: isPaste ? \'Save transformer (Alt+S)\' : \'\' }\"></button>    </div></div>'; } )
define("text!views/createDatabase.html", [], function () { return '<div class=\"col-md-7\">    <div class=\"form-group\">        <label for=\"databaseName\">Name</label>        <input autofocus data-bind=\"value: databaseName, customValidity: nameCustomValidityError, valueUpdate: \'afterkeydown\', hasfocus: databaseNameFocus\" type=\"text\" class=\"form-control\" id=\"databaseName\" autocomplete=\"off\" placeholder=\"Database Name\">    </div>    <div class=\"panel-group\" id=\"accordion\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#dbAdvancedOptions\">                        Advanced Settings                    </a>                </h4>            </div>            <div id=\"dbAdvancedOptions\" class=\"panel-collapse collapse\">                <div class=\"panel-body\">                    <div class=\"form-group\">                        <label for=\"databasePath\">Path</label>                        <input data-bind=\"value: databasePath, customValidity: pathCustomValidityError, valueUpdate: \'afterkeydown\', attr: { placeholder: \'~/\' + databaseName() }\" type=\"text\" class=\"form-control\" id=\"databasePath\" autocomplete=\"off\">                    </div>                    <div class=\"form-group\">                        <label for=\"databaseLogs\">Logs</label>                        <input data-bind=\"value: databaseLogsPath, customValidity: logsCustomValidityError, valueUpdate: \'afterkeydown\', attr: { placeholder: \'~/\' + databaseName() }\" type=\"text\" class=\"form-control\" id=\"databaseLogs\" autocomplete=\"off\">                    </div>                    <div class=\"form-group\">                        <label for=\"databaseIndexes\">Indexes</label>                        <input data-bind=\"value: databaseIndexesPath, customValidity: indexesCustomValidityError, valueUpdate: \'afterkeydown\', attr: { placeholder: \'~/\' + databaseName() + \'/Indexes/\' }\" type=\"text\" class=\"form-control\" id=\"databaseIndexes\" autocomplete=\"off\">                    </div>                    <div class=\"form-group\">                        <label for=\"storageEngine\">Storage Engine</label>                        <select data-bind=\"value: storageEngine\" class=\"form-control\" id=\"storageEngine\">                            <option value=\"\">Default</option>                            <option value=\"esent\">Esent</option>                            <option value=\"voron\">Voron</option>                        </select>                    </div>                    <div class=\"form-group\">                        <label for=\"incrementalBackup\">Incremental Backup</label>                        <input type=\"checkbox\" data-bind=\"checked: isIncrementalBackupChecked\" />                        <label for=\"alertTimeout\" data-bind=\"visible: isIncrementalBackupChecked\">Alert timeout in hours:</label>                        <select data-bind=\"value: alertTimeout, visible: isIncrementalBackupChecked\" title=\"Sets the span of time allowed before issuing an alert for missing backup(in hours).\" class=\"form-control\" id=\"alertTimeout\">                            <option value=\"4\">4</option>                            <option value=\"8\">8</option>                            <option value=\"12\">12</option>                            <option value=\"\">24</option>                            <option value=\"48\">48</option>                            <option value=\"72\">72</option>                        </select>                        <label for=\"alertRecurringTimeout\" data-bind=\"visible: isIncrementalBackupChecked\">Alert recurring Timeout in days:</label>                        <select data-bind=\"value: alertRecurringTimeout, visible: isIncrementalBackupChecked\" title=\"Sets the span of time allowed before issuing multiple alerts on the same missed backup(in days).\" class=\"form-control\" id=\"alertRecurringTimeout\">                            <option value=\"1\">1</option>                            <option value=\"2\">2</option>                            <option value=\"4\">4</option>                            <option value=\"\">7</option>                            <option value=\"14\">14</option>                        </select>                    </div>                </div>            </div>        </div>    </div></div><div class=\"col-md-5\">    <div>        <label>Bundles</label>    </div>    <div class=\"btn-group-vertical\" data-toggle=\"buttons-checkbox\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleCompressionBundle, css: { \'license-inactive\': !isBundleActive(\'compression\') }\">            <i data-bind=\"css: {\'fa-check\': isCompressionBundleEnabled }\" class=\"fa fa-fw\"></i> Compression        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleEncryptionBundle, css: { \'license-inactive\': !isBundleActive(\'encryption\') }\">            <i data-bind=\"css: {\'fa-check\': isEncryptionBundleEnabled }\" class=\"fa fa-fw\"></i> Encryption        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleExpirationBundle, css: { \'license-inactive\': !isBundleActive(\'documentExpiration\') }\">            <i data-bind=\"css: {\'fa-check\': isExpirationBundleEnabled }\" class=\"fa fa-fw\"></i> Expiration        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: togglePeriodicExportBundle, css: { \'license-inactive\': !isBundleActive(\'periodicBackup\') }\">            <i data-bind=\"css: {\'fa-check\': isPeriodicExportBundleEnabled }\" class=\"fa fa-fw\"></i> Periodic Export        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleQuotasBundle, css: { \'license-inactive\': !isBundleActive(\'quotas\') }\">            <i data-bind=\"css: {\'fa-check\': isQuotasBundleEnabled }\" class=\"fa fa-fw\"></i> Quotas        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleReplicationBundle, css: { \'license-inactive\': !isBundleActive(\'replication\') }\">            <i data-bind=\"css: {\'fa-check\': isReplicationBundleEnabled }\" class=\"fa fa-fw\"></i> Replication        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleScriptedIndexBundle\">            <i data-bind=\"css: {\'fa-check\': isScriptedIndexBundleEnabled }\" class=\"fa fa-fw\"></i> Scripted Index        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleSqlReplicationBundle\">            <i data-bind=\"css: {\'fa-check\': isSqlReplicationBundleEnabled }\" class=\"fa fa-fw\"></i> SQL Replication        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleVersioningBundle, css: { \'license-inactive\': !isBundleActive(\'versioning\') }\">            <i data-bind=\"css: {\'fa-check\': isVersioningBundleEnabled }\" class=\"fa fa-fw\"></i> Versioning        </button>    </div></div>          '; } )
define("text!views/createEncryption.html", [], function () { return '<div id=\"CreateEncriptionDialog\" class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: save\" class=\"form-horizontal\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\"></button>            <h4 class=\"modal-title\">Create Encryption</h4>        </div>        <div class=\"modal-body\">            <div class=\"form-group\">                <label for=\"keyName\" class=\"col-sm-4 control-label\">Select Key <br /><small class=\"text-muted\">(Base64 Encoding)</small></label>                <div class=\"col-sm-8\">                    <div class=\"input-group\">                        <input required pattern=\"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$\" type=\"text\" class=\"form-control\" id=\"key\" placeholder=\"Key\" data-bind=\"value: key\" autocomplete=\"off\" />                        <span class=\"input-group-btn\">                            <button class=\"btn btn-default\" type=\"button\" data-bind=\"click: refresh_encryption\">                                <i class=\"fa fa-refresh\"></i>                            </button>                        </span>                    </div>                    <p class=\"help-block\">                        <!--You can use the auto generated key or enter one of your own.-->                        <br />                        <i class=\"fa fa-warning text-warning\"></i> Save this key in a safe place. If you lose this key you could lose access to your data.                    </p>                </div>            </div>            <div class=\"form-group\">                <label for=\"encryptionAlgorithm\" class=\"col-sm-4 control-label\">Encryption Algorithm</label>                <div class=\"col-sm-8\">                    <!--<select class=\"form-control\" required data-bind=\"options: [\'DES\', \'RC2\', \'Rijndael\', \'Triple DES\'], value: encryptionAlgorithm, valueAllowUnset: false, hasFocus: algorithmFocus\"></select>-->                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                            <span data-bind=\"text: encryptionAlgorithm\"></span>                            <span class=\"caret\"></span>                        </button>                        <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: [\'DES\', \'RC2\', \'Rijndael\', \'Triple DES\']\">                            <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"text: $data, click: $root.encryptionAlgorithm.bind($root.encryptionAlgorithm, $data)\"></a></li>                        </ul>                    </div>                </div>            </div>            <div class=\"form-group\">                <label for=\"encryptionBits\" class=\"col-sm-4 control-label\">Encryption Key Bits</label>                <div class=\"col-sm-8\">                    <!--<select class=\"form-control\" required data-bind=\"options: [\'128\', \'192\', \'256\'], value: encryptionBits, valueAllowUnset: false, hasFocus: bitsFocus\"></select>-->                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                            <span data-bind=\"text: encryptionBits\"></span>                            <span class=\"caret\"></span>                        </button>                        <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: [\'128\', \'192\', \'256\']\">                            <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"text: $data, click: $root.encryptionBits.bind($root.encryptionBits, $data)\"></a></li>                        </ul>                    </div>                </div>            </div>            <div class=\"form-group\">                <label for=\"encryptedIndexes\" class=\"col-sm-4 control-label\">Indexes</label>                <div class=\"col-sm-8\">                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                            <span data-bind=\"visible: isEncryptedIndexes\">Encrypt</span>                            <span data-bind=\"visible: !isEncryptedIndexes()\">Don\'t encrypt</span>                            <span class=\"caret\"></span>                        </button>                        <ul class=\"dropdown-menu\" role=\"menu\">                            <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"click: isEncryptedIndexes.bind(isEncryptedIndexes, true)\">Encrypt</a></li>                            <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"click: isEncryptedIndexes.bind(isEncryptedIndexes, false)\">Unencrypt</a></li>                        </ul>                    </div>                </div>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"submit\" class=\"btn btn-primary\">Save</button>        </div>    </form></div>'; } )
define("text!views/createEncryptionConfirmation.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h3 class=\"modal-title\">Save Your Encryption Key</h3>    </div>    <div class=\"modal-body\">        <h4>            <strong>Save this key in a safe place.</strong>        </h4>        <div>            <input readonly=\"readonly\" type=\"text\" class=\"form-control input-lg col-sm-9\" id=\"key\" placeholder=\"Key\" autofocus=\"\" data-bind=\"value: key, click: clickKey\">        </div>        <div class=\"clearfix\"></div>        <br />        <p>            <i class=\"fa fa-warning text-warning\"></i> If you lose your key, you could lose access to your data.        </p>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: ok\">OK</button>    </div></div>'; } )
define("text!views/createResource.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" style=\"min-width: 500px;\">    <form id=\"createDbForm\" data-bind=\"submit: nextOrCreate\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\"></button>            <h4 class=\"modal-title\">Create Resource</h4>        </div>        <div class=\"modal-body\" style=\"max-height: 600px; overflow: auto\">            <div class=\"form-group\">                <label for=\"resourceType\">Resource type</label>                <select data-bind=\"value: resourceType\" class=\"form-control\" id=\"resourceType\">                    <option value=\"db\">Database</option>                    <option value=\"fs\">File system</option>                </select>            </div>                        <div id=\"dbContainer\" class=\"row\" style=\"min-height: 478px;\" data-bind=\"with: createDatabasePart, visible: resourceType() == \'db\'\">                <div data-bind=\"compose: \'createDatabase.html\'\"></div>            </div>            <div id=\"fsContainer\" class=\"row\" style=\"min-height: 478px;\" data-bind=\"with: createFilesystemPart, visible: resourceType() == \'fs\'\">                <div data-bind=\"compose: \'filesystem/createFilesystem.html\'\"></div>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"submit\" class=\"btn btn-primary\">Create</button>        </div>    </form></div>'; } )
define("text!views/createSampleData.html", [], function () { return '<div class=\"panel panel-default\">    <div class=\"panel-heading\">        <h3 class=\"panel-title\">Create Sample Data</h3>    </div>    <div class=\"panel-body\">        <p>            <i class=\"fa fa-info-circle text-info\"></i>            Creating sample data requires an empty database.<br />        </p>        <div class=\"btn-group\">            <button class=\"btn btn-primary\" data-bind=\"click: generateSampleData\">                <i class=\"fa fa-magic\"></i>                Create sample data            </button>        </div>        <button class=\"btn btn-link\" data-bind=\"click: showSampleDataClass , enable: isEnable\">            <!--<i class=\"fa fa-file-code-o\"></i>-->            Show sample data classes        </button>        <div class=\"progress progress-striped active\" data-bind=\"visible: isBusy\">            <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>        </div>    </div></div>'; } )
define("text!views/csvImport.html", [], function () { return '<div id=\"csvImportContainer\" class=\"panel panel-default\">    <div class=\"panel-heading\">        <h3 class=\"panel-title\">Csv Import</h3>    </div>    <div class=\"panel-body\">        <p>            <i class=\"fa fa-info-circle text-info\"></i>            Import a csv file into a collection. Each column will be treated as a property.        </p>        <div id=\"addfileContainer\">            <!--<input id=\"csvFilePicker\" type=\"file\" data-bind=\"event: { change: fileSelected }\" />-->            <span class=\"btn btn-primary btn-file\">                Choose file <input id=\"csvFilePicker\" type=\"file\" data-bind=\"event: { change: fileSelected }\" />            </span>            <br />            <div class=\"btn-toolbar\" data-bind=\"visible: hasFileSelected\">                <div class=\"btn-group\">                    <button class=\"btn btn-primary\" data-bind=\"click: importCsv\">                        <i class=\"fa fa-save\"></i>                        CSV Import                    </button>                </div>            </div>            <br />            <div class=\"progress progress-striped active\" data-bind=\"visible: isImporting\">                <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\"></div>            </div>        </div>    </div></div>'; } )
define("text!views/customFunctionsEditor.html", [], function () { return '<form class=\"custom-functions-form\" id=\"customFunctionsContainer\">    <div class=\"btn-toolbar\">        <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"click: saveChanges, enable: isSaveEnabled\" title=\"Save Changes (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>        <span style=\"margin-left: 10px\">            You can create custom JavaScript functions here by writing simple <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1\" target=\"about:blank\">commonjs module</a>.        </span>        <span id=\"customFunctionsExample\" class=\"help-cursor\" data-placement=\"auto right\" data-original-title=\"Delete Script\" data-trigger=\"hover\">            See the example. <i class=\"fa fa-info-circle text-info\"></i>        </span>    </div>        <br />    <pre class=\"editor\" id=\"customFunctionsEditor\" data-bind=\"aceEditor: { code: documentText, fontSize: \'18px\', lang: \'ace/mode/javascript\' }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 40 }\"></pre>    </form>                                                                                                           '; } )
define("text!views/databaseSettings.html", [], function () { return '<form id=\"databaseSettingsContainer\" data-bind=\"submit: saveChanges\">    <div class=\"btn-toolbar\">        <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSaveEnabled, visible: isEditingEnabled\" title=\"Save Changes (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: editDatabaseSettings, visible: !isEditingEnabled()\" title=\"Edit Database Settings\"><i class=\"fa fa-pencil\"></i></button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: refreshFromServer\" title=\"Refresh from server, discarding any unsaved changes\">            <i class=\"fa fa-refresh\"></i>        </button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: formatDocument\" title=\"Format document (Alt+[)\" accesskey=\"[\">            <i class=\"fa fa-align-justify\"></i>        </button>    </div>        <ul class=\"nav nav-tabs\">        <li accesskey=\"d\" data-bind=\"click: activateDoc, css: { active: isEditingMetadata() === false }\" title=\"Edit document data (Alt+Shift+D)\"><a style=\"cursor: pointer;\">Data</a></li>        <li accesskey=\"m\" data-bind=\"click: activateMeta, css: { active: isEditingMetadata }\" title=\"Edit document metadata (Alt+Shift+M)\"><a style=\"cursor: pointer;\">Metadata</a></li>    </ul>    <pre id=\"dbDocEditor\" data-bind=\"aceEditor: { code: text, fontSize: \'18px\', lang: \'ace/mode/json\', readOnly: \'true\' }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 40 }\"></pre>    </form>'; } )
define("text!views/databaseSettingsDialog.html", [], function () { return '<style>    .settings-container {        overflow-x: hidden;        overflow-y: auto;        min-width: 75vw;        min-height: 60vh;        max-height: 60vh;    }</style><div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Database Settings</h4>    </div>    <div class=\"modal-body\">        <div class=\"settings-container row\">            <div class=\"col-md-2\">                <ul class=\"nav nav-pills nav-stacked\" data-bind=\"foreach: routes\">                    <li data-bind=\"css: { active: $root.isActive(moduleId) }\">                        <a href=\"#\" data-bind=\"text: title, click: $root.showView.bind($root, moduleId)\"></a>                    </li>                </ul>            </div>            <div class=\"col-md-10 composite-view\" data-bind=\"compose: content\"></div>            <div class=\"clearfix\"></div>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close\">Close</button>    </div></div>'; } )
define("text!views/deleteCollection.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Sure?</h4>    </div>    <div class=\"modal-body\" data-bind=\"with: collection\">        <span>You\'re deleting </span>        <strong data-bind=\"text: name\"></strong>        <strong data-bind=\"visible: documentCount() > 1, text: \'(\' + documentCount() + \' documents)\'\"></strong>        <strong data-bind=\"visible: documentCount() == 1, text: \'(\' + documentCount() + \' document)\'\"></strong>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: deleteCollection\">Yep, delete</button>    </div></div>'; } )
define("text!views/deleteDocuments.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Sure?</h4>    </div>    <div class=\"modal-body\">        <p data-bind=\"visible: documents().length === 1\">            <span>You\'re deleting</span>            <strong data-bind=\"with: documents()[0]\">                <span data-bind=\"text: __metadata.id\"></span>            </strong>        </p>        <div data-bind=\"visible: documents().length > 1\">            <span>You\'re deleting</span>            <strong data-bind=\"text: documents().length\"></strong>            <span>docs:</span>            <br />            <ul data-bind=\"foreach: documents\" style=\"max-height: 100px; overflow-y: auto;\">                <li data-bind=\"text: __metadata.id\"></li>            </ul>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: deleteDocs\">Yep, delete</button>    </div></div>'; } )
define("text!views/deleteDocumentsMatchingQueryConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Delete docs matching query?</h4>    </div>    <div class=\"modal-body\">        <p>You\'re deleting <strong data-bind=\"text: totalDocCount\"></strong> <span data-bind=\"visible: totalDocCount === 1\">document.</span> <span data-bind=\"visible: totalDocCount !== 1\">documents.</span></p>        <br />        <p class=\"text-muted\">These are all the docs in <strong data-bind=\"text: indexName\"></strong> <span data-bind=\"visible: queryText\">matching <pre data-bind=\"text: queryText, visible: queryText\"></pre></span></p>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteDocs\">Yep, delete</button>    </div></div>'; } )
define("text!views/deleteIndexesConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\" data-bind=\"text: title\"></h4>    </div>    <div class=\"modal-body\">        <p data-bind=\"visible: indexNames.length === 1\">You\'re deleting <strong data-bind=\"text: indexNames[0]\"></strong></p>        <p data-bind=\"visible: indexNames.length > 1\">You\'re deleting <strong data-bind=\"text: indexNames.length\"></strong> indexes</p>        <ul data-bind=\"visible: indexNames.length > 1, foreach: indexNames\" style=\"max-height: 200px; overflow-y: auto;\">            <li data-bind=\"text: $data\"></li>        </ul>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteIndexes\">Yep, delete</button>    </div></div>'; } )
define("text!views/deleteItems.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Sure?</h4>    </div>    <div class=\"modal-body\">        <p data-bind=\"visible: documents().length === 1\">            <span>You\'re deleting</span>            <strong data-bind=\"with: documents()[0]\">                <span data-bind=\"text: getId()\"></span>            </strong>        </p>        <div data-bind=\"visible: documents().length > 1\">            <span>You\'re deleting</span>            <strong data-bind=\"text: documents().length\"></strong>            <span>items:</span>            <br />            <ul data-bind=\"foreach: documents\" style=\"max-height: 100px; overflow-y: auto;\">                <li data-bind=\"text: getId()\"></li>            </ul>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: deleteItems\">Yep, delete</button>    </div></div>'; } )
define("text!views/deleteResourceConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Sure?</h4>    </div>    <div class=\"modal-body\">        <div data-bind=\"visible: resourcesToDelete().length === 1\">            <span>You\'re deleting </span>            <strong data-bind=\"with: resourcesToDelete()[0]\">                <span data-bind=\"text: name\"></span>            </strong>        </div>        <div data-bind=\"visible: resourcesToDelete().length > 1\">            <span>You\'re deleting </span>            <strong data-bind=\"text: resourcesToDelete().length\"></strong>             resources:            <br />            <ul data-bind=\"foreach: resourcesToDelete\" style=\"max-height: 100px; overflow-y: auto;\">                <li><span data-bind=\"text: name\"></span> (<span data-bind=\"text: type\"></span>)</li>            </ul>        </div>        <div data-bind=\"if: isDeletingDatabase\">            <div data-bind=\"visible: resourcesToDelete().length === 1\">                You can <a href=\"#\" data-bind=\"attr: { href: exportDatabaseUrl }\">export the database</a> if needed.<br />            </div>            <div data-bind=\"visible: resourcesToDelete().length > 1\">                You can <a href=\"#\" data-bind=\"attr: { href: exportDatabaseUrl }\">export these databases</a> if needed.<br />            </div>        </div>        <br />        <form class=\"form-horizontal\">            <div class=\"form-group\">                <label class=\"col-sm-4 control-label\">Delete options</label>                <div class=\"col-sm-8\">                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                            <span data-bind=\"visible: isKeepingFiles\">Keep files on disk</span>                            <span data-bind=\"visible: !isKeepingFiles()\">Delete everything</span>                            <span class=\"caret\"></span>                        </button>                        <ul class=\"dropdown-menu\" role=\"menu\">                            <li><a href=\"#\" data-bind=\"click: keepFiles\" title=\"Keep the physical database files on disk\">Keep files on disk</a></li>                            <li><a href=\"#\" data-bind=\"click: deleteEverything\" title=\"Delete all the on-disk files for this database\">Delete everything</a></li>                        </ul>                    </div>                    <p class=\"help-block\" data-bind=\"visible: resourcesToDelete().length > 1\">                        <i class=\"fa fa-info-circle\"></i> Delete options will be applied to all of the deleted resources.                    </p>                </div>            </div>        </form>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteDatabase\">Yep, delete</button>    </div></div>'; } )
define("text!views/deleteTransformerConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Delete transformer?</h4>    </div>    <div class=\"modal-body\">        <p data-bind=\"visible: transformersNames.length === 1\">You\'re deleting <strong data-bind=\"text: transformersNames[0]\"></strong></p>        <p data-bind=\"visible: transformersNames.length > 1\">You\'re deleting <strong data-bind=\"text: transformersNames.length\"></strong> transformers</p>        <ul data-bind=\"visible: transformersNames.length > 1, foreach: transformersNames\" style=\"max-height: 200px; overflow-y: auto;\">            <li data-bind=\"text: $data\"></li>        </ul>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteTransformers\">Yep, delete</button>    </div></div>'; } )
define("text!views/dialog.html", [], function () { return '<!-- We\'re using custom HTML here because Durandal 2.0 doesn\'t work properly with Bootstrap 3. !--><div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">		<button type=\"button\" class=\"close\" data-bind=\"click: function () { $data.selectOption(null); }\" data-dismiss=\"modal\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h3 data-bind=\"text: title\"></h3>    </div>    <div class=\"modal-body\">        <p class=\"message\" data-bind=\"text: message\"></p>    </div>    <div class=\"modal-footer\" data-bind=\"foreach: options\">        <button class=\"btn\" data-bind=\"click: function () { $parent.selectOption($data); }, text: $data, css: { \'btn-primary\': $index() === ($parent.options.length -1), autofocus: $index() === ($parent.options.length -1) }\"></button>    </div></div>'; } )
define("text!views/disableResourceToggleConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Sure?</h4>    </div>    <div class=\"modal-body\">        <div data-bind=\"visible: resourcesToDisable().length === 1\">            <span data-bind=\"text: deletionText\"></span>            <strong data-bind=\"with: resourcesToDisable()[0]\">                <span data-bind=\"text: name\"></span>            </strong>        </div>        <div data-bind=\"visible: resourcesToDisable().length > 1\">            <span data-bind=\"text: deletionText\"></span>            <strong data-bind=\"text: resourcesToDisable().length\"></strong>            resources            <br />            <ul data-bind=\"foreach: resourcesToDisable\" style=\"max-height: 100px; overflow-y: auto;\">                <li><span data-bind=\"text: name\"></span> (<span data-bind=\"text: type\"></span>)</li>            </ul>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: toggleDisableReources, text: confirmDeletionText\"></button>    </div></div>'; } )
define("text!views/documents.html", [], function () { return '<div class=\"documents-page no-outline\" tabindex=\"0\">    <!-- ko if: alerts().length > 0 -->        <!-- ko foreach: alerts -->        <div class=\"alert alert-warning alert-dismissable\" role=\"alert\">            <button data-bind=\"click: $root.dismissAlert.bind($root, uniqueKey)\" type=\"button\" class=\"close\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>            <a data-bind=\"attr: { href: $root.urlForAlert($data) }\"><span data-bind=\"text: title\"></span></a>        </div>        <!-- /ko -->    <!-- /ko -->    <div id=\"documents-page-container\" class=\"col-md-2\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\" style=\"padding-left: 0;\">        <ul class=\"nav nav-pills nav-stacked document-collections\" data-bind=\"foreach: collections\">            <li data-bind=\"event: { mousedown: $parent.selectCollection.bind($parent) }, css: { active: $data === $parent.selectedCollection() }, visible: documentCount() > 0 || isAllDocuments || isSystemDocuments\">                <a href=\"javascript:void(0)\">                    <div class=\"collection-name\">                        <div class=\"collection-text pull-left collection-color-strip\" data-bind=\"css: colorClass\"></div>                        <span class=\"collection-text pull-left collection-name-part\" data-bind=\" text: name, attr: {title: name}\"></span>                        <span class=\"collection-text pull-left text-muted\" data-bind=\"visible: !isSystemDocuments && !isAllDocuments, css: { \'text-muted\': $data !== $parent.selectedCollection() }, text:  \'&nbsp;(\' + documentsCountWithThousandsSeparator() + \')\'\"></span>                    </div>                </a>            </li>        </ul>    </div>    <div class=\"col-md-10\">        <div class=\"btn-toolbar\" role=\"toolbar\">            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-link\" style=\"margin-left: 10px;\" data-bind=\"click: toggleSelectAll, visible: hasDocuments\" title=\"Select all or none\">                    <img data-bind=\"attr: { src: hasAllDocumentsSelected() ? \'content/images/checked.png\' : hasAnyDocumentsSelected() ? \'content/images/some-checked.png\' : \'content/images/unchecked.png\' }\" />                </button>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-primary\" accesskey=\"n\" data-bind=\"click: newDocument\" title=\"Create new document (Alt+N)\">                    <i class=\"fa fa-plus\"></i> New document                </button>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: selectColumns, visible: hasDocuments\" title=\"Choose columns...\">                    <i class=\"fa fa-table\"></i>                </button>            </div>            <div class=\"btn-group\">                <a href=\"#\" target=\"_blank\" data-bind=\"attr: { href: currentExportUrl }, visible: isRegularCollection\" class=\"btn btn-default\" title=\"Export CSV\" download>                    <i class=\"fa fa-file-excel-o\"></i>                </a>            </div>            <div class=\"btn-group\" data-bind=\"visible: selectedDocumentIndices().length == 1\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: editSelectedDoc\" title=\"Edit selected document (F2)\">                    <i class=\"fa fa-pencil\"></i>                </button>            </div>            <div class=\"btn-group\" data-bind=\"visible: hasAnyDocumentsSelected\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: deleteSelectedDocs\" title=\"Delete selected documents (DEL)\">                    <i class=\"fa fa-trash-o\"></i>                </button>            </div>            <div class=\"btn-group\" data-bind=\"visible: hasAnyDocumentsSelected() && canCopyAllSelected()\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: copySelectedDocs\" title=\"Copy selected documents (Ctrl+C, D)\">                    <i class=\"fa fa-copy\"></i>                </button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: copySelectedDocIds\" title=\"Copy selected document IDs (Ctrl+C, I)\">                    <i class=\"fa fa-clipboard\"></i>                </button>            </div>            <div class=\"btn-group\">                <div id=\"loadingIndicator\" data-bind=\"visible: showLoadingIndicatorThrottled\"><i class=\"fa fa-spinner fa-spin fa-2x\"></i></div>            </div>        </div>        <div class=\"documents-select\" data-bind=\"with: selectedCollection, visible: hasAnyDocumentsSelected() && !hasAllDocumentsSelected() && isAnyDocumentsAutoSelected()\">            <i class=\"fa fa-info-circle\"></i> You have selected <strong data-bind=\"text: $root.selectedDocumentIndices().length\"></strong> documents.            <span class=\"select-link\" data-bind=\"click: $root.selectAll.bind($root)\">                Select all <strong data-bind=\"text: documentCount\"></strong> documents in <span data-bind=\"text: name\"></span>            </span>        </div>        <div class=\"documents-select\" data-bind=\"with: selectedCollection, visible: hasAllDocumentsSelected() && isAllDocumentsAutoSelected()\">            You have selected <strong data-bind=\"text: $root.selectedDocumentIndices().length\"></strong> documents in            <span data-bind=\"text: name\"></span>.            <span class=\"select-link\" data-bind=\"click: $root.selectNone.bind($root)\">                Clear selection            </span>        </div>        <div id=\"documentsGrid\" data-bind=\"widget: { kind: \'virtualTable\', customColumns: currentColumnsParams, itemsSource: currentCollectionPagedItems, selectedIndices: selectedDocumentIndices, gridSelector: \'#documentsGrid\', customFunctions: currentCustomFunctions, collections: collections, rowsAreLoading: showLoadingIndicator, isAnyDocumentsAutoSelected: isAnyDocumentsAutoSelected, isAllDocumentsAutoSelected: isAllDocumentsAutoSelected }\"></div>    </div></div>'; } )
define("text!views/editDocument.html", [], function () { return '<div id=\"editDocumentContainer\" tabindex=\"-1\">    <!-- We use a container with a tab index so that we can capture keyboard events, such as CTRL+S. -->    <ul class=\"breadcrumb\" style=\"display: inline-block\">        <li style=\"display: inline-block\">            <h3 style=\"display: inline-block\">                <i class=\"fa fa-file-text-o\" style=\"display: inline-block\"></i>                <a href=\"#documents\" data-bind=\"click: navigateToDocuments, text:isInDocMode() === true?\'Documents\':\'Indexes\'\" style=\"display: inline-block\">                </a>            </h3>        </li>        <!-- ko ifnot: isCreatingNewDocument -->        <li data-bind=\"with: metadata\" style=\"display: inline-block\">            <a style=\"display: inline-block\" href=\"#\" data-bind=\"text: $root.isInDocMode() === true?ravenEntityName:$root.queryIndex, attr: {title:ravenEntityName, href: \'#documents?collection=\' + ravenEntityName }, click: $root.navigateToCollection.bind($root, ravenEntityName)\"></a>        </li>        <!-- /ko -->        <li class=\"active\" data-bind=\"text: docTitle, attr:{ title: docTitle }\" style=\"display: inline-block\">        </li>    </ul>    <form data-bind=\"submit: saveDocument\">        <div class=\"btn-toolbar\">            <div class=\"btn-group\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSaveEnabled\" title=\"Save (Alt+S)\"><i class=\"fa fa-save\"></i></button>                <a class=\"btn btn-default\" data-bind=\"click: refreshDocument, visible: lodaedDocumentName\" title=\"Refresh (Alt+R)\" accesskey=\"R\"><i class=\"fa fa-refresh\"></i></a>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"enable:isNewLineFriendlyMode()===false || $root.isEditingMetadata()===true ,click: formatDocument\" title=\"Format document (Alt+[)\" accesskey=\"[\"><i class=\"fa fa-align-justify\"></i></button>                <button class=\"btn btn-default\" title=\"Toggle newline mode (Alt+N)\" data-toggle=\"button\" accesskey=\"N\" data-bind=\"enable: $root.isEditingMetadata() === false, click: toggleNewlineMode\">                    <span class=\"text-lowercase\" data-bind=\"text: newLineToggle\"></span>                </button>                <button class=\"btn btn-default\" title=\"Toggle auto-collapse\" data-toggle=\"button\" data-bind=\"enable: $root.isEditingMetadata() === false, click: toggleAutoCollapse\">                    <span class=\"fa fa-plus-square-o\"></span>                </button>                <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteDocument, visible: lodaedDocumentName\" title=\"Delete (Alt+shift+Del)\"><i class=\"fa fa-trash-o\"></i></button>            </div>            <div class=\"btn-group\" data-bind=\"with: docsList\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: $root.firstDocument.bind($root), attr:{ disabled: $root.isFirstDocumenNavtDisabled }\" title=\"Go to first document (Alt+Home)\"><i class=\"fa fa-step-backward\"></i></button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: $root.previousDocumentOrLast.bind($root)\" title=\"Go to previous document (Alt+PageUp)\"><i class=\"fa fa-caret-left\"></i></button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"text: \'Doc \' + (currentItemIndex() + 1) + \' of \' + totalResultCount()\"></button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: $root.nextDocumentOrFirst.bind($root)\" title=\"Go to next document (Alt+PageDown)\"><i class=\"fa fa-caret-right\"></i></button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: $root.lastDocument.bind($root), attr:{ disabled: $root.isLastDocumentNavDisabled }\" title=\"Go to last document (Alt+End)\"><i class=\"fa fa-step-forward\"></i></button>            </div>        </div>        <br />        <div class=\"row\">            <div class=\"col-md-7\">                <div class=\"row\" data-bind=\"with: metadata\">                    <div class=\"col-md-12\">                        <input id=\"documentName\" type=\"text\" class=\"form-control\" data-placement=\"top\" accesskey=\"i\" placeholder=\"document id\" data-bind=\"value: $root.userSpecifiedId, valueUpdate: \'afterkeyup\', attr: { disabled: $root.isBusy }\" />                    </div>                </div>                <br />                <div class=\"row\">                    <div class=\"col-md-12\">                        <ul class=\"nav nav-tabs\">                            <li accesskey=\"d\" data-bind=\"click: activateDoc, css: { active: isEditingMetadata() === false }\" title=\"Edit document data (Alt+Shift+D)\"><a style=\"cursor: pointer;\">Data</a></li>                            <li accesskey=\"m\" data-bind=\"click: activateMeta, css: { active: isEditingMetadata }\" title=\"Edit document metadata (Alt+Shift+M)\"><a style=\"cursor: pointer;\">Metadata</a></li>                        </ul>                        <pre id=\"docEditor\" class=\"form-control\" data-bind=\"aceEditor: { code: text, fontSize:\'16px\', lang: \'ace/mode/json\'}, attr: { disabled: isBusy }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 20 }\"></pre>                    </div>                </div>            </div>            <div class=\"form-group panel panel-default col-md-5 document-addition-data side-panel\">                <div class=\"col-md-12\" data-bind=\"with: metadata\">                    <h4><strong>Metadata</strong></h4>                    <hr />                    <div class=\"row\">                        <label class=\"col-md-5\">Raven-Entity-Name</label>                        <span class=\"col-md-7\" data-bind=\"text: ravenEntityName, attr: {title:ravenEntityName}\"></span>                    </div>                    <div class=\"row\">                        <label class=\"col-md-5\">Etag</label>                        <span class=\"col-md-7\" data-bind=\"text: etag, attr: {title:etag}\"></span>                    </div>                    <div class=\"row\">                        <label class=\"col-md-5\">Last-Modified</label>                        <span class=\"col-md-7\" data-bind=\"text: lastModifiedFullDate, attr: {title:lastModifiedFullDate}\"></span>                    </div>                    <div class=\"row\">                        <label class=\"col-md-5\">Size in KB</label>                        <span class=\"col-md-7\" data-bind=\"text: $root.documentSize() , attr: {title:$root.documentSize() }\"></span>                    </div>                </div>                <div class=\"col-md-12 query-metadata\" data-bind=\"visible:topRecentDocuments().length > 0\">                    <h4><strong>Recent Documents</strong></h4>                    <hr />                    <div class=\"documents-links-container\" data-bind=\"foreach: topRecentDocuments\">                        <a class=\"document-link\" data-bind=\"attr: { href: docUrl }\">                            <span class=\"collection-color-strip\" data-bind=\"css: $root.getColorClass($data.docId)\">&nbsp;</span>                            <span data-bind=\"text: docId\"></span>                        </a>                    </div>                </div>                <div class=\"col-md-12 query-metadata\" data-bind=\"visible: relatedDocumentHrefs().length >0\">                    <h4><strong>Related Documents</strong></h4>                    <hr />                    <div class=\"documents-links-container\" data-bind=\"foreach: relatedDocumentHrefs\">                        <a class=\"document-link\" data-bind=\"attr: { href:href }\">                            <span class=\"collection-color-strip\" data-bind=\"css: $root.getColorClass($data.id)\">&nbsp;</span>                            <span data-bind=\"text: id\"></span>                        </a>                    </div>                </div>            </div>        </div>    </form></div>'; } )
define("text!views/editIndex.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li>        <a data-bind=\"attr: { href: appUrls.indexes }\">Indexes</a>    </li>    <li class=\"active\">        <span data-bind=\"text: currentIndexName\"></span>    </li></ul><section id=\"editIndex\">    <div class=\"btn-toolbar\">        <div class=\"btn-group\">            <button class=\"btn btn-primary\" data-bind=\"click: save, enable: $root.isSaveEnabled()\" title=\"Save the index (Alt+S)\" accesskey=\"S\">                <i class=\"fa fa-save\"></i>            </button>        </div>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" accesskey=\"A\">                <i class=\"fa fa-plus\"></i>                Add                <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\">                <li  data-bind=\"click: addMap\" title=\"Add a map function (Alt+M)\" accesskey=\"M\"><a href=\"#\">Map</a></li>                <li  data-bind=\"click: addReduce, visible: !hasExistingReduce()\" title=\"Add a reduce function (Alt+R)\" accesskey=\"R\"><a href=\"#\">Reduce</a></li>                <li  data-bind=\"click: addField\" title=\"Add a field (Alt+G)\" accesskey=\"G\"><a href=\"#\">Field</a></li>                <li  data-bind=\"click: addSpatialField\" title=\"Add a spatial field (Alt+P)\" accesskey=\"P\"><a href=\"#\">Spatial Field</a></li>                <li  data-bind=\"click: function() {$root.editMaxIndexOutputsPerDocument(true); return false;}\"><a href=\"#\">Max Index Outputs</a></li>            </ul>        </div>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                <span data-bind=\"text: priorityLabel\"></span>                <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\">                <li data-bind=\"click: normalPriority\"><a href=\"#\">Normal</a></li>                <li data-bind=\"click: idlePriority\"><a href=\"#\">Idle</a></li>                <li data-bind=\"click: disabledPriority\"><a href=\"#\">Disabled</a></li>                <li data-bind=\"click: abandonedPriority\"><a href=\"#\">Abandoned</a></li>            </ul>        </div>                <div class=\"btn-group\">            <button class=\"btn btn-default\" title=\"Format maps and reduce\" data-bind=\"click: formatIndex\">                <i class=\"fa fa-magic\"></i>            </button>        </div>        <div class=\"btn-group\" data-bind=\"visible: isEditingExistingIndex\">                <a class=\"btn btn-default\" title=\"Query the index (Alt+Q)\" accesskey=\"Q\"   data-bind=\"attr: { href: queryUrl }\">                    <i class=\"fa fa-play\"></i>                </a>              <a class=\"btn btn-default\" title=\"Navigate to index terms\"  data-bind=\"attr: { href: termsUrl }\">Terms</a>        </div>        <div class=\"btn-group\" data-bind=\"visible: isEditingExistingIndex\">            <button class=\"btn btn-default\" title=\"Copy edited index to clipboard\" data-bind=\"click: copyIndex\">                <i class=\"fa fa-files-o\"></i>            </button>            <button class=\"btn btn-default\" title=\"Generate C# index definition\" data-bind=\"click: createCSharpCode\">                <i class=\"fa\">C#</i>            </button>            <button class=\"btn btn-default\" title=\"Refresh from server, discarding any unsaved changes\" data-bind=\"click: refreshIndex\">                <i class=\"fa fa-refresh\"></i>            </button>            <button class=\"btn btn-danger\" title=\"Delete index\" data-bind=\"click: deleteIndex\">                <i class=\"fa fa-trash-o\"></i>            </button>        </div>    </div>    <div data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">        <br />        <form class=\"form-horizontal\" role=\"form\" data-bind=\"with: editedIndex\">            <div class=\"form-group\">                <label for=\"indexName\" class=\"col-md-1 control-label\"  title=\" index name (Alt+I)\">Name</label>                <div class=\"col-md-11\">                    <div class=\"row\">                        <div class=\"col-md-11\">                            <input type=\"text\" class=\"form-control\" id=\"indexName\" placeholder=\"Index name\" accesskey=\"I\" data-bind=\"value: name, valueUpdate: \'afterkeyup\'\" />                        </div>                    </div>                </div>            </div>            <div class=\"form-group\">                <label id=\"indexMapsLabel\" style=\"cursor: help;\" class=\"col-sm-1 control-label\" data-placement=\"auto right\" data-original-title=\"Index maps\" data-trigger=\"hover\">                    Maps                    <i class=\"fa fa-info-circle text-info\"></i>                </label>                <div data-bind=\"foreach: maps\" class=\"col-md-11\">                    <div class=\"row\">                        <div class=\"col-md-11\">                            <pre id=\"indexEditor\" class=\"form-control map\" data-bind=\"aceEditor: { code: $data, allowResize: true, getFocus: true, lang:\'ace/mode/ravenMapLinq\', completer:$root.indexAutoCompleter.indexMapCompleter, typeName:\'map\', completerHostObject:$root.indexAutoCompleter}\"></pre>                        </div>                        <button type=\"button\" class=\"close pull-left\" data-bind=\"visible: $index() !== 0 || $root.hasMultipleMaps(), click: $root.removeMap.bind($root, $index())\" aria-hidden=\"true\" title=\"Remove this map from the index\">                            <i class=\"fa fa-times\"></i>                        </button>                    </div>                    <br />                </div>            </div>            <div class=\"form-group\" data-bind=\"if: reduce\">                <label id=\"indexReduceLabel\" style=\"cursor: help;\" for=\"indexReduce\" class=\"col-md-1 control-label\" data-placement=\"auto right\" data-original-title=\"Index reduce\" data-trigger=\"hover\">                    Reduce                    <i class=\"fa fa-info-circle text-info\"></i>                </label>                <div class=\"col-md-11\">                    <div class=\"row\">                        <div class=\"col-md-11\">                            <pre class=\"form-control map\" data-bind=\"aceEditor: { code: reduce, allowResize: true, lang:\'ace/mode/ravenReduceLinq\',completer:$root.indexAutoCompleter.indexReduceCompleter, typeName:\'reduce\', completerHostObject:$root.indexAutoCompleter }\"></pre>                        </div>                        <button type=\"button\" class=\"close pull-left\" data-bind=\"click: $root.removeReduce.bind($root)\" aria-hidden=\"true\" title=\"Remove the Reduce function from the index\">                            <i class=\"fa fa-times\"></i>                        </button>                    </div>                </div>            </div>            <div class=\"form-group\" data-bind=\"visible: luceneFields().length > 0\">                <label class=\"col-sm-1 control-label\">                    Fields                </label>                <div class=\"col-md-11\" data-bind=\"foreach: luceneFields\">                    <div class=\"col-xs-12 col-sm-9 col-md-6 col-lg-5\">                        <div class=\"panel panel-default\">                            <div class=\"panel-heading\">                                <div class=\"col-md-11\">                                    <input name=\"fieldName\" type=\"text\" class=\"form-control\" placeholder=\"FieldName\" data-bind=\"attr: { id:\'fieldName\' + $index() }, value: name, valueUpdate: \'afterkeydown\'\" autocomplete=\"off\" />                                    <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#\' + \'fieldName\' + $index(),foreach: fieldNameAutocompletes\">                                        <li role=\"presentation\" data-bind=\"click: $parent.setName.bind($parent,$data)\">                                            <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                                <span data-bind=\" text:$data\"></span>                                            </a>                                        </li>                                    </ul>                                </div>                                <div>                                    <button type=\"button\" class=\"close\" aria-hidden=\"true\"><i class=\"fa fa-times\" data-bind=\"click: $root.removeLuceneField.bind($root, $index())\" aria-hidden=\"true\" title=\"Remove this field from the index\"></i></button>                                </div>                                <div class=\"clearfix\"></div>                            </div>                            <div class=\"panel-body fieldControl\">                                <div class=\"col-md-6 fieldControl\">                                    <label class=\"control-label col-md-5 fieldControl\">Storage</label>                                    <div class=\"col-md-7 fieldControl\">                                        <select class=\"form-control fieldControl\" data-bind=\"options: [\'Yes\', \'No\'], value: stores\"></select>                                    </div>                                    <label class=\"control-label col-md-5 fieldControl\">Sort</label>                                    <div class=\"col-md-7 fieldControl\">                                        <select class=\"form-control fieldControl\" data-bind=\"options: [\'None\', \'String\', \'Int\', \'Float\', \'Long\', \'Double\', \'Short\', \'Custom\', \'Byte\', \'StringVal\'], value: sort\"></select>                                    </div>                                    <label class=\"control-label col-md-5 fieldControl\">TermVector</label>                                    <div class=\"col-md-7 fieldControl\">                                        <select class=\"form-control fieldControl\" data-bind=\"options: [\'No\', \'Yes\', \'WithPositions\', \'WithOffsets\', \'WithPositionsAndOffsets\'], value: termVector\"></select>                                    </div>                                </div>                                <div class=\"col-md-6 fieldControl\">                                    <label class=\"control-label col-md-5 fieldControl\">Indexing</label>                                    <div class=\"col-md-7 fieldControl\">                                        <select class=\"form-control fieldControl\" data-bind=\"options: [\'No\', \'Analyzed\', \'NotAnalyzed\', \'Default\'], value: indexing\"></select>                                    </div>                                    <label class=\"control-label col-md-5 fieldControl\" data-bind=\"visible: indexing() === \'Analyzed\'\">Analyzer</label>                                    <div class=\"col-md-7 fieldControl\" data-bind=\"visible: indexing() === \'Analyzed\'\">                                        <input type=\"text\" class=\"form-control fieldControl\" data-bind=\"value: analyzer, valueUpdate: \'afterkeyup\', attr: { title: analyzer }\" />                                    </div>                                    <label class=\"control-label col-md-5  fieldControl\" title=\"The suggestion distance algorithm\"  >Suggestion</label>                                    <div class=\"col-md-7 fieldControl\">                                        <select class=\"form-control  fieldControl\" data-bind=\"options: [\'None\', \'Default\', \'Levenshtein\', \'JaroWinkler\', \'NGram\'], value: suggestionDistance\"></select>                                        <input type=\"number\" class=\"form-control  fieldControl\" title=\"The suggestion accuracy\" step=\"0.1\" min=\"0.0\" max=\"1.0\" data-bind=\"numericValue: suggestionAccuracy, valueUpdate: \'afterkeyup\', visible: suggestionDistance() !== \'None\'\" />                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>            <div class=\"form-group\" data-bind=\"visible: spatialFields().length > 0\">                <label class=\"col-sm-1 control-label\">                    Spatial Fields                </label>                <div class=\"col-md-10\" data-bind=\"foreach: spatialFields, visible: spatialFields().length > 0\">                    <div>                        <div class=\"panel panel-default\">                            <div class=\"panel-heading\">                                <div class=\"col-md-11\">                                    <input type=\"text\" class=\"form-control\" data-bind=\"value: name, valueUpdate: \'afterkeyup\'\" placeholder=\"spatial field name\" />                                </div>                                <div>                                    <button type=\"button\" class=\"close\" data-bind=\"click: $root.removeSpatialField.bind($root, $index())\" title=\"Remove this spatial field from the index\">                                        <i class=\"fa fa-times\"></i>                                    </button>                                </div>                                <div class=\"clearfix\"></div>                            </div>                            <div class=\"panel-body\">                                <div class=\"col-md-6\">                                    <label class=\"control-label col-md-3\">Type</label>                                    <div class=\"col-md-9\">                                        <select class=\"form-control\" data-bind=\"options: [\'Geography\', \'Cartesian\'], value: type\"></select>                                    </div>                                    <label class=\"control-label col-md-3\">Strategy</label>                                    <div class=\"col-md-9\">                                        <select class=\"form-control\" data-bind=\"options: availableStrategies, value: strategy\"></select>                                    </div>                                    <label class=\"control-label col-md-3\">Min X</label>                                    <div class=\"col-md-9\">                                        <input type=\"number\" class=\"form-control\" data-bind=\"numericValue: minX, valueUpdate: \'afterkeyup\', enable: canSpecifyCoordinates\" />                                    </div>                                    <label class=\"control-label col-md-3\">Max X</label>                                    <div class=\"col-md-9\">                                        <input type=\"number\" class=\"form-control\" data-bind=\"numericValue: maxX, valueUpdate: \'afterkeyup\', enable: canSpecifyCoordinates\" />                                    </div>                                    <label class=\"control-label col-md-3\">Precision</label>                                    <div class=\"col-md-9\">                                        <p class=\"form-control-static\" style=\"white-space: nowrap\" data-bind=\"text: precision\"></p>                                    </div>                                </div>                                <div class=\"col-md-6\">                                    <label class=\"control-label col-md-7\" data-bind=\"visible: canSpecifyUnits\">Circle Radius Units</label>                                    <div class=\"col-md-5\" data-bind=\"visible: canSpecifyUnits\">                                        <select class=\"form-control\" data-bind=\"options: [\'Kilometers\', \'Miles\'], value: circleRadiusUnits\"></select>                                    </div>                                    <label class=\"control-label col-md-7\" data-bind=\"visible: canSpecifyTreeLevel\">Max Tree Level</label>                                    <div class=\"col-md-5\" data-bind=\"visible: canSpecifyTreeLevel\">                                        <input type=\"number\" class=\"form-control\" data-bind=\"numericValue: maxTreeLevel, valueUpdate: \'afterkeyup\'\" />                                    </div>                                    <label class=\"control-label col-md-7\">Min Y</label>                                    <div class=\"col-md-5\">                                        <input type=\"number\" class=\"form-control\" data-bind=\"numericValue: minY, valueUpdate: \'afterkeyup\', enable: canSpecifyCoordinates\" />                                    </div>                                    <label class=\"control-label col-md-7\">Max Y</label>                                    <div class=\"col-md-5\">                                        <input type=\"number\" class=\"form-control\" data-bind=\"numericValue: maxY, valueUpdate: \'afterkeyup\', enable: canSpecifyCoordinates\" />                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>            <div class=\"form-group\" data-bind=\"visible: maxIndexOutputsPerDocument() > 0 || $root.editMaxIndexOutputsPerDocument() == true\">                <label class=\"col-sm-1 control-label\">Max Index Outputs Per Document</label>                <div class=\"col-md-2\">                    <input class=\"form-control\" required type=\"number\" data-bind=\"numericValue: maxIndexOutputsPerDocument, valueUpdate: \'afterkeyup\'\" min=\"0\" />                </div>                <div class=\"col-md-1\">                    <button type=\"button\" class=\"close pull-left\" data-bind=\"click: $root.removeMaxIndexOutputs.bind($root)\" aria-hidden=\"true\" title=\"Nullify Max Index Outputs Per Document And Hide The Control\">                        <i class=\"fa fa-times\"></i>                    </button>                </div>            </div>                        <div class=\"form-group\" data-bind=\"visible: $root.scriptedIndex\" id=\"indexScriptPopover\">                <label class=\"col-sm-1 control-label index-script-label\" data-placement=\"auto right\" data-original-title=\"Index Script\" data-trigger=\"hover\">                    Index Script                    <i class=\"fa fa-info-circle text-info\"></i>                </label>                <div class=\"col-sm-11\" data-bind=\"with: $root.scriptedIndex\">                    <div class=\"row\">                        <div class=\"col-md-11\">                            <pre class=\"form-control map\" data-bind=\"aceEditor: { code: indexScript, allowResize: true, lang: \'ace/mode/javascript\', completer: $root.scriptedIndexCompleter, completerHostObject: $root.scriptedIndexCompleter, typeName: \'map\' }\"></pre>                        </div>                    </div>                </div>            </div>            <div class=\"form-group\" data-bind=\"visible: $root.scriptedIndex\" id=\"deleteScriptPopover\">                <label class=\"col-sm-1 control-label delete-script-label\" data-placement=\"auto right\" data-original-title=\"Delete Script\" data-trigger=\"hover\">                    Delete Script                    <i class=\"fa fa-info-circle text-info\"></i>                </label>                <div class=\"col-sm-11\" data-bind=\"with: $root.scriptedIndex\">                    <div class=\"row\">                        <div class=\"col-md-11\">                            <pre class=\"form-control map\" data-bind=\"aceEditor: { code: deleteScript, allowResize: true, lang: \'ace/mode/javascript\', completer: $root.scriptedIndexCompleter, completerHostObject: $root.scriptedIndexCompleeter, typeName: \'map\' }\"></pre>                        </div>                    </div>                </div>            </div>        </form>    </div></section>'; } )
define("text!views/editSqlReplication.html", [], function () { return '<section id=\"editSQLReplication\">    <form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: save\">        <div class=\"btn-toolbar edit-sql-replication-actions\">            <div class=\"btn-group\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: $root.isSaveEnabled()\" title=\"Save the index (Alt+S)\" accesskey=\"S\">                    <i class=\"fa fa-save\"></i>                </button>                <button class=\"btn btn-default\" title=\"Refresh from server, discarding any unsaved changes\" data-bind=\"click: refreshSqlReplication\">                    <i class=\"fa fa-refresh\"></i>                </button>            </div>            <div class=\"btn-group tools\">                <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" accesskey=\"A\">                    Tools                    <span class=\"caret\"></span>                </button>                <ul class=\"dropdown-menu\">                    <li>                        <a href=\"#\" title=\"View current SQL Replication stats\" data-bind=\"click: showStats\">Stats</a>                    </li>                    <li>                        <a href=\"#\" title=\"Simulate SQL Replication\" data-bind=\"click: simulateSqlReplication\">                            Simulation                        </a>                    </li>                    <li>                        <a href=\"#\" title=\"Open Sql Replication Statistics and Metrics View\" data-bind=\"attr: {href: $root.sqlReplicationStatsAndMetricsHref }\" target=\"_blank\">                            Metrics Page<i class=\"fa fa-external-link\"></i>                        </a>                    </li>                </ul>            </div>            <div class=\"btn-group\">                <button class=\"btn btn-warning\" title=\"Reset SQL Replication\" data-bind=\"click: resetSqlReplication\">                    <span class=\"glyphicon glyphicon-retweet\"></span>                </button>                <button class=\"btn btn-danger\" title=\"Delete SQL Replication\" data-bind=\"click: deleteSqlReplication\">                    <i class=\"fa fa-trash-o\"></i>                </button>            </div>        </div>        <div data-bind=\"with: $root.editedReplication\" style=\"padding-top: 5px;\">            <div class=\"col-sm-6\">                <div class=\"form-group\">                    <label class=\"col-sm-4 control-label\" title=\"SQL Replication name (alt+i)\">Name</label>                    <div class=\"col-sm-8\">                        <input tabindex=\"3\" required type=\"text\" class=\"form-control\" name=\"name\" data-bind=\"value: name, valueUpdate: \'afterkeydown\', attr: { placeholder: \'New SQL Replication\'}\" />                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-4 control-label\">Source Document Collection</label>                    <div class=\"col-sm-8\">                        <input tabindex=\"2\" required name=\"ravenEntityName\" type=\"text\" class=\"form-control\" data-bind=\"value: ravenEntityName, valueUpdate: \'afterkeydown\', attr: { \'id\': \'sourceDocumentCollection\'}\" />                        <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#sourceDocumentCollection\', foreach: searchResults\">                            <li role=\"presentation\" data-bind=\"click: $parent.saveNewRavenEntityName.bind($parent, $data)\">                                <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                    <span data-bind=\"text: $data\"></span>                                </a>                            </li>                        </ul>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-4 control-label\">SQL Replication Tables</label>                    <div class=\"col-sm-8\">                        <table tabindex=\"8\" class=\"table table-striped table-hover table-sql-replication-tables\">                            <thead>                                <tr class=\"sql-replication-tables-header\">                                    <td>Table Name</td>                                    <td>Document Key</td>                                    <td class=\"narrowest-column\">                                        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: addNewTable\" title=\"Add new table\">                                            <i class=\"fa fa-plus\"></i>                                        </button>                                    </td>                                </tr>                            </thead>                            <tbody data-bind=\"foreach: sqlReplicationTables\">                                <tr>                                    <td>                                        <div>                                            <input required type=\"text\" class=\"form-control\" data-bind=\"value: tableName, valueUpdate: \'afterkeydown\'\" />                                        </div>                                    </td>                                    <td>                                        <div>                                            <input required type=\"text\" class=\"form-control\" data-bind=\"value: documentKeyColumn, valueUpdate: \'afterkeydown\'\" />                                        </div>                                    </td>                                    <td>                                        <button type=\"button\" style=\"display: inline-block;\" class=\"close\" data-bind=\"visible: $parent.sqlReplicationTables().length > 1, click: $parent.removeTable.bind($parent)\" title=\"Remove this table\">                                            <i class=\"fa fa-times\"></i>                                        </button>                                    </td>                                </tr>                            </tbody>                        </table>                    </div>                </div>            </div>            <div class=\"col-sm-6\">                <div class=\"form-group\">                    <label class=\"col-sm-4 control-label\" title=\"Sql Replication Mode (Alt+I)\">Replication</label>                    <div class=\"col-sm-8\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: !disabled()\">Enabled</span>                                <span data-bind=\"visible: disabled\">Disabled</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: enable\">Enabled</a></li>                                <li><a href=\"#\" data-bind=\"click: disable\">Disabled</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-4 control-label\" data-bind=\"text: connectionStringSourceFieldName\"></label>                    <div class=\"col-sm-8\">                        <textarea tabindex=\"6\" rows=\"4\" required class=\"form-control\" data-bind=\"attr:{required:connectionStringType() !== $data.PREDEFINED_CONNECTION_STRING_NAME?\'required\':null},visible:connectionStringType() !== $data.PREDEFINED_CONNECTION_STRING_NAME ,value: connectionStringValue, valueUpdate: \'afterkeydown\'\" />                        <select tabindex=\"7\" required class=\"form-control\" data-bind=\"options:$root.availableConnectionStrings, optionsText:\'name\', optionsValue:\'name\', attr:{required:connectionStringType() === $data.PREDEFINED_CONNECTION_STRING_NAME?\'required\':null},visible:connectionStringType() === $data.PREDEFINED_CONNECTION_STRING_NAME ,value: connectionStringType() === $data.PREDEFINED_CONNECTION_STRING_NAME?connectionStringValue:null, valueUpdate: \'afterkeydown\'\" />                    </div>                </div>                <div class=\"form-group\">                    <button class=\"col-sm-4 btn\" data-toggle=\"button\" data-bind=\"attr:{title:(\'Switch to \' + ($root.isBasicView() === true?\'Advanced\':\'Basic\') + \' mode\')}, click: function(){$root.isBasicView.toggle();}, css:{pressed: !$root.isBasicView() === true}\">                        <i class=\"fa fa-cogs\"></i> Show advanced settings                    </button>                </div>                <div class=\"form-group\" data-bind=\"visible:$root.isBasicView() == false\">                    <label class=\"col-sm-4 control-label\">SQL Provider</label>                    <div class=\"col-sm-8\">                        <select tabindex=\"5\" required class=\"form-control\"                                data-bind=\"attr:{required:connectionStringType() !== $data.PREDEFINED_CONNECTION_STRING_NAME?\'required\':null}, event:{change:$root.providerChanged.bind($root)}, options: [\'System.Data.SqlClient\',\'System.Data.SqlServerCe.4.0\',\'System.Data.OleDb\',\'System.Data.OracleClient\',\'MySql.Data.MySqlClient\',\'System.Data.SqlServerCe.3.5\',\'Npgsql\'], optionsCaption: \'\', value: factoryName\"></select>                    </div>                </div>                <div class=\"form-group\" data-bind=\"visible:$root.isBasicView() == false\">                    <label class=\"col-sm-4 control-label\">Connection String Source</label>                    <div class=\"col-sm-8\">                        <select tabindex=\"7\" required class=\"form-control\"                                data-bind=\"options: $data.availableConnectionStringTypes, optionsCaption: \'\', value: connectionStringType\"></select>                    </div>                </div>                <div class=\"form-group\" data-bind=\"visible:$root.isBasicView() == false\">                    <!--<label class=\"col-sm-4 control-label\">Disable Parameterized Deletes</label>                    <div class=\"checkbox col-sm-8\">                        <input type=\"checkbox\" data-bind=\"checked: parameterizeDeletesDisabled\" />                    </div>-->                    <label class=\"col-sm-4 control-label\">Parameterized Deletes</label>                    <div class=\"checkbox col-sm-8\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: !parameterizeDeletesDisabled()\">Enable parameterized deletes</span>                                <span data-bind=\"visible: parameterizeDeletesDisabled\">Disable parameterized deletes</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: parameterizeDeletesDisabled.bind(parameterizeDeletesDisabled, false)\">Enable parameterized deletes</a></li>                                <li><a href=\"#\" data-bind=\"click: parameterizeDeletesDisabled.bind(parameterizeDeletesDisabled, true)\">Disable parameterized deletes</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\" data-bind=\"visible:$root.isBasicView() === false &&  (isSqlServerKindOfFactory(factoryName()) === true  || (connectionStringType() == PREDEFINED_CONNECTION_STRING_NAME && !!$root.availableConnectionStrings.first(function(x){debugger; return x.name() == connectionStringValue() && isSqlServerKindOfFactory(x.factoryName()) == true})))\">                    <label class=\"col-sm-4 control-label\">Query Recompiling</label>                    <div class=\"checkbox col-sm-8\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: forceSqlServerQueryRecompile\">Force recompile</span>                                <span data-bind=\"visible: !forceSqlServerQueryRecompile()\">Don\'t force recompile</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: forceSqlServerQueryRecompile.bind(forceSqlServerQueryRecompile, true)\">Force recompile</a></li>                                <li><a href=\"#\" data-bind=\"click: forceSqlServerQueryRecompile.bind(forceSqlServerQueryRecompile, false)\">Don\'t force recompile</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\" data-bind=\"visible:$root.isBasicView() === false\">                    <label class=\"col-sm-4 control-label\">Table Quotation</label>                    <div class=\"checkbox col-sm-8\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: performTableQuatation\">Use quotes for tables</span>                                <span data-bind=\"visible: !performTableQuatation()\">Don\'t use quotes for tables</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: performTableQuatation.bind(performTableQuatation, true)\">Use quotes for tables</a></li>                                <li><a href=\"#\" data-bind=\"click: performTableQuatation.bind(performTableQuatation, false)\">Don\'t use quotes for tables</a></li>                            </ul>                        </div>                    </div>                </div>            </div>            <br />            <div class=\"form-group sql-replication-script-container col-sm-12\">                <label class=\"col-sm-1 control-label script-label\" data-placement=\"auto right\" data-trigger=\"hover\">                    <span class=\"help-cursor\">                        Script                        <i class=\"fa fa-info-circle text-info\"></i>                    </span>                </label>                <div class=\"col-sm-11\">                    <pre tabindex=\"9\" id=\"sqlReplicationEditor\" class=\"form-control editor\" data-bind=\"aceEditor: { code: script, lang: \'ace/mode/javascript\' }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 40 }\"></pre>                </div>            </div>        </div>    </form></section>'; } )
define("text!views/editTransformer.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li>        <a data-bind=\"attr: { href: appUrls.transformers }\">Transformers</a>    </li>    <li class=\"active\">        <span data-bind=\"text: transformerName, visible: transformerName() != null\"></span>        <span data-bind=\"visible: transformerName() == null\">New Transformer</span>    </li></ul><section id=\"editTransformerContainer\">    <div class=\"btn-toolbar\">        <div class=\"btn-group\">            <button class=\"btn btn-primary\" data-bind=\"click: saveTransformer, enable: $root.isSaveEnabled()\" title=\"Save the transformer (Alt+S)\" accesskey=\"S\">                <i class=\"fa fa-save\"></i>            </button>        </div>        <div class=\"btn-group\">            <button class=\"btn btn-default\" title=\"Format transformer\" data-bind=\"click: formatTransformer\">                <i class=\"fa fa-magic\"></i>            </button>        </div>        <div class=\"btn-group\" data-bind=\"visible: isEditingExistingTransformer\">            <button class=\"btn btn-default\" title=\"Refresh from server, discarding any unsaved changes\" data-bind=\"click: refreshTransformer\">                <i class=\"fa fa-refresh\"></i>            </button>            <button class=\"btn btn-danger\" data-bind=\"click: deleteTransformer\" title=\"Delete the transformer (Alt+Shift+Delete)\">                <i class=\"fa fa-trash-o\"></i>            </button>        </div>    </div>    <br />    <form class=\"form-horizontal\" role=\"form\" data-bind=\"with: editedTransformer, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">        <div class=\"form-group\">            <label for=\"transformerName\" class=\"col-md-1 control-label\" title=\"Transformer name(Alt+I)\">Name</label>            <div class=\"col-md-11\">                <div class=\"row\">                    <div class=\"col-md-11\">                        <input type=\"text\" class=\"form-control\" id=\"transformerName\" placeholder=\"Transformer name\" accesskey=\"I\" data-bind=\"value: name, valueUpdate: \'afterkeyup\'\" />                    </div>                </div>            </div>        </div>        <div class=\"form-group\">            <label id=\"transformerResultsLabel\" style=\"cursor: help;\" class=\"col-sm-1 control-label\" data-placement=\"auto top\" data-original-title=\"Transform\" data-trigger=\"hover\">                Transform                <i class=\"fa fa-info-circle text-info\"></i>            </label>            <div class=\"col-md-11\">                <div class=\"row\">                    <div class=\"col-md-11\">                        <pre id=\"transformerAceEditor\" class=\"form-control transformer\" data-bind=\"aceEditor: { code: transformResults, getFocus: true}, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 65 }\"></pre>                    </div>                </div>                <br />            </div>        </div>    </form></section>'; } )
define("text!views/enterApiKey.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Enter API Key</h4>    </div>    <div class=\"modal-body\">        <p>Please enter OAuth API Key that will be used to authenticate with the server.</p>        <form class=\"form-horizontal\" role=\"form\">            <div class=\"form-group\">                <label class=\"col-sm-3 control-label\">Key: </label>                <div class=\"col-sm-7\">                    <input type=\"text\" class=\"form-control \" placeholder=\"api key\" data-bind=\"value: apiKey\" />                </div>            </div>        </form>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: ok\">OK</button>    </div></div>'; } )
define("text!views/executePatchConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Are you sure?</h4>    </div>    <div class=\"modal-body\">        <p><strong>Are you sure you want to apply this patch to all matching documents?</strong></p>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-primary\" autofocus data-bind=\"click: executePatch\">OK</button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>    </div></div>'; } )
define("text!views/exportDatabase.html", [], function () { return '<div class=\"panel panel-default\">        <div class=\"panel-heading\">        <h3 class=\"panel-title\">Export Database</h3>    </div>    <div class=\"panel-body\">        <h4 class=\"pull-left\">Export your database to a .ravendump file.</h4>        <br />        <br />        <div class=\"btn-toolbar\">            <div>                <div class=\"checkbox\">                    <a class=\"btn btn-primary\" data-bind=\"click: startExport\" download>                        <i class=\"fa fa-download\"></i>                        Export Database                    </a>                    <label data-bind=\"visible: !chooseDifferntFileName()\">                        <input type=\"checkbox\" data-bind=\"checked: chooseDifferntFileName\">Override file name                    </label>                    <span data-bind=\"visible: chooseDifferntFileName\">                        File name:                        <input type=\"text\" name=\"fileName\" data-bind=\"visible: chooseDifferntFileName, value: noneDefualtFileName\" title=\"Insert a file name to ovveride the default one.\">                    </span>                </div>                                <form id=\"dbExportDownloadForm\" method=\"post\" data-bind=\"attr:{action:exportActionUrl}\" target=\"about:blank\">                    <input type=\"hidden\" id=\"SmugglerOptions\" name=\"SmugglerOptions\" />                </form>            </div>        </div>        <br />        <ul class=\"nav nav-tabs\">            <li class=\"active\" data-bind=\"css: { active: !showAdvancedOptions()}\">                <a href=\"#\" data-bind=\"click:function(){this.selectOptions()}\">General</a>            </li>            <li data-bind=\"css: { active: showAdvancedOptions()}\">                <a href=\"#\" data-bind=\"click:function(){this.selectAdvancedOptions()}\">Advanced</a>            </li>        </ul>        <br />        <div class=\"btn-group btn-group-vertical\" data-bind=\"visible:!showAdvancedOptions()\">            <label class=\"btn btn-default\" data-bind=\"css:{active:includeDocuments() == true}, click: function(){$root.includeDocuments(!$root.includeDocuments()); return true;}, clickBubble: false\">                <i data-bind=\"css: {\'fa-check\': includeDocuments }\" class=\"fa fa-fw\"></i> Include Documents            </label>            <label class=\"btn btn-default\" data-bind=\"css:{active:includeIndexes() == true}, click: function(){$root.includeIndexes(!$root.includeIndexes()); return true;}, clickBubble: false\">                <i data-bind=\"css: {\'fa-check\': includeIndexes }\" class=\"fa fa-fw\"></i> Include Indexes            </label>            <label class=\"btn btn-default\" data-bind=\"css:{active:includeAttachments() == true}, click: function(){$root.includeAttachments(!$root.includeAttachments()); return true;}, clickBubble: false\">                <i data-bind=\"css: {\'fa-check\': includeAttachments }\" class=\"fa fa-fw\"></i> Include Attachments            </label>            <label class=\"btn btn-default\" data-bind=\"css:{active:includeTransformers() == true}, click: function(){$root.includeTransformers(!$root.includeTransformers()); return true;}, clickBubble: false\">                <i data-bind=\"css: {\'fa-check\': includeTransformers }\" class=\"fa fa-fw\"></i> Include Transformers            </label>            <label class=\"btn btn-default\" data-bind=\"css:{active:removeAnalyzers() == true}, click: function(){$root.removeAnalyzers(!$root.removeAnalyzers()); return true; }, clickBubble: false\">                <i data-bind=\"css: {\'fa-check\': removeAnalyzers }\" class=\"fa fa-fw\"></i> Remove Analyzers            </label>        </div>        <div data-bind=\"visible:showAdvancedOptions()\">            <form class=\"form-horizontal\" role=\"form\">                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">Batch size</label>                    <div class=\"col-sm-2\">                        <input class=\"form-control\" type=\"number\" min=\"0\" data-bind=\"value: batchSize\" />                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">Expired documents</label>                    <div class=\"col-sm-10\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: includeExpiredDocuments\">Include</span>                                <span data-bind=\"visible: !includeExpiredDocuments()\">Exclude</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: includeExpiredDocuments.bind(includeExpiredDocuments, true)\">Include</a></li>                                <li><a href=\"#\" data-bind=\"click: includeExpiredDocuments.bind(includeExpiredDocuments, false)\">Exclude</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">Collections</label>                    <div class=\"col-sm-10\">                        <!--<div class=\"btn-group\">                    <label class=\"btn btn-default\" data-bind=\"click: includeAllCollections.bind(includeAllCollections, true), css: { active: includeAllCollections }\">                        All collections                    </label>                    <label class=\"btn btn-default\" data-bind=\"click: includeAllCollections.bind(includeAllCollections, false), css: { active: !includeAllCollections() }\">                        Specified collections only                    </label>                </div>-->                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: includeAllCollections\">All collections</span>                                <span data-bind=\"visible: !includeAllCollections()\">Specified collections only</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: includeAllCollections.bind(includeAllCollections, true)\">All collections</a></li>                                <li><a href=\"#\" data-bind=\"click: includeAllCollections.bind(includeAllCollections, false)\">Specified collections only</a></li>                            </ul>                        </div>                        <div style=\"margin-left: 20px;\" data-bind=\"visible: !includeAllCollections()\">                            <p class=\"form-control-static\">Choose collections:</p>                            <div class=\"btn-group-vertical\" data-bind=\"foreach: includedCollections\">                                <label class=\"btn btn-default\" data-bind=\"click: isIncluded.bind(isIncluded, !isIncluded()), css: { active: isIncluded }\">                                    <i class=\"fa fa-fw\" data-bind=\"css: { \'fa-check\': isIncluded }\"></i>                                    <span data-bind=\"text: collection\"></span>                                </label>                            </div>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">                        <span>Filters</span>                        <span class=\"help-block\">                            <a class=\"text-muted\" title=\"External link: RavenDB filters documentation\" target=\"_blank\" href=\"http://ravendb.net/docs/server/administration/export-import\">                                <i class=\"fa fa-question-circle\"></i>                                Help                            </a>                        </span>                    </label>                    <div class=\"col-sm-10\">                        <div class=\"btn-group\">                            <table class=\"table table-striped\" style=\"max-width: 500px;\" data-bind=\"visible: filters().length\">                                <thead>                                    <tr>                                        <th style=\"width: 40%;\">Path</th>                                        <th style=\"width: 45%;\">Value</th>                                        <th style=\"width: 10%\">Should Match</th>                                        <th>&nbsp;</th>                                    </tr>                                </thead>                                <tbody data-bind=\"foreach: filters\">                                    <tr>                                        <td><input class=\"form-control\" type=\"text\" data-bind=\"value: Path\" /></td>                                        <td><input class=\"form-control\" type=\"text\" data-bind=\"value: Values[0]\" /></td>                                        <td>                                            <div class=\"btn-group\">                                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                    <span data-bind=\"visible: ShouldMatchObservable\">Should match</span>                                                    <span data-bind=\"visible: !ShouldMatchObservable()\">Should <strong>not</strong> match</span>                                                    <span class=\"caret\"></span>                                                </button>                                                <ul class=\"dropdown-menu\" role=\"menu\">                                                    <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"click: ShouldMatchObservable.bind(ShouldMatchObservable, true)\">Should match</a></li>                                                    <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"click: ShouldMatchObservable.bind(ShouldMatchObservable, false)\">Should <strong>not</strong> match</a></li>                                                </ul>                                            </div>                                        </td>                                        <td>                                            <button type=\"button\" class=\"close\" data-bind=\"click: $root.removeFilter.bind($root, $data)\" title=\"Remove this filter\">                                                <i class=\"fa fa-times\"></i>                                            </button>                                        </td>                                    </tr>                                </tbody>                            </table>                            <button class=\"btn btn-default\" data-bind=\"click: addFilter\">                                <i class=\"fa fa-plus\"></i> Add filter                            </button>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label id=\"transformScriptHelp\" class=\"col-sm-2 control-label\">                        Transform script&nbsp;                        <i class=\"fa fa-info-circle help-cursor\"></i>                    </label>                    <div class=\"col-sm-10\">                        <pre style=\"height: 200px;\" data-bind=\"aceEditor: { code: transformScript, lang: \'ace/mode/javascript\' }\">                        </pre>                    </div>                </div>            </form>            <div>                            </div>        </div>    </div></div>'; } )
define("text!views/importDatabase.html", [], function () { return '<div class=\"panel panel-default\">    <div class=\"panel-heading\">        <h3 class=\"panel-title\">Import Database</h3>    </div>    <div class=\"panel-body\">        <h4>Import data from a .ravendump file into the current database.</h4>        <p class=\"help-block\">            <i class=\"fa fa-warning text-warning\"></i>            Importing will overwrite any existing documents and indexes.        </p>        <div data-bind=\"with: activeDatabase\">            <span class=\"btn btn-primary btn-file\" data-bind=\"visible: !isImporting()\">                Choose file <input id=\"importDatabaseFilePicker\" type=\"file\" data-bind=\"visible: isImporting() == false, event: { change: $root.fileSelected.bind($root, $element.value) }\" />            </span>            <br />            <br />            <p data-bind=\"text: importStatus\"></p>            <br />            <div class=\"progress progress-striped active\" data-bind=\"visible: isImporting\">                <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\"></div>            </div>        </div>        <ul class=\"nav nav-tabs\">            <li data-bind=\"click: selectOptions, css: { active: !showAdvancedOptions() }\"><a href=\"#\">General</a></li>            <li data-bind=\"click: selectAdvancedOptions, css: { active: showAdvancedOptions }\"><a href=\"#\">Advanced</a></li>        </ul>        <br />        <div class=\"btn-group-vertical\" data-bind=\"visible: !showAdvancedOptions()\">            <label class=\"btn btn-default\" style=\"\" data-bind=\"click: includeDocuments.toggle.bind(includeDocuments), css: { active: includeDocuments }\">                <i data-bind=\"css: {\'fa-check\': includeDocuments }\" class=\"fa fa-fw\"></i> Include documents            </label>            <label class=\"btn btn-default\" style=\"\"  data-bind=\"click: includeIndexes.toggle.bind(includeIndexes), css: { active: includeIndexes }\">                <i data-bind=\"css: {\'fa-check\': includeIndexes }\" class=\"fa fa-fw\"></i> Include indexes            </label>            <label class=\"btn btn-default text-left\" style=\"\" data-bind=\"click: includeAttachments.toggle.bind(includeAttachments), css: { active: includeAttachments }\">                <i data-bind=\"css: {\'fa-check\': includeAttachments }\" class=\"fa fa-fw\"></i> Include attachments            </label>            <label class=\"btn btn-default text-left\" style=\"\" data-bind=\"click: includeTransformers.toggle.bind(includeTransformers), css: { active: includeTransformers }\">                <i data-bind=\"css: {\'fa-check\': includeTransformers }\" class=\"fa fa-fw\"></i> Include transformers            </label>            <label class=\"btn btn-default text-left\" style=\"\" data-bind=\"click: removeAnalyzers.toggle.bind(removeAnalyzers), css: { active: removeAnalyzers }\">                <i data-bind=\"css: {\'fa-check\': removeAnalyzers }\" class=\"fa fa-fw\"></i> Remove analyzers            </label>        </div>        <div data-bind=\"visible: showAdvancedOptions\">            <form class=\"form-horizontal\" role=\"form\">                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">Batch size</label>                    <div class=\"col-sm-2\">                        <input class=\"form-control\" type=\"number\" min=\"0\" data-bind=\"value: batchSize\" />                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">Expired documents</label>                    <div class=\"col-sm-10\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: includeExpiredDocuments\">Include</span>                                <span data-bind=\"visible: !includeExpiredDocuments()\">Exclude</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: includeExpiredDocuments.bind(includeExpiredDocuments, true)\">Include</a></li>                                <li><a href=\"#\" data-bind=\"click: includeExpiredDocuments.bind(includeExpiredDocuments, false)\">Exclude</a></li>                            </ul>                        </div>                    </div>                </div>                <!--This doesn\'tappear to be supported in Raven 3.-->                <!--<div class=\"form-group\">                <label class=\"col-sm-2 control-label\">Collections</label>                <div class=\"col-sm-10\">                    <div class=\"btn-group\">                        <label class=\"btn btn-primary\" data-bind=\"click: includeAllCollections.bind(includeAllCollections, true), css: { active: includeAllCollections }\">                            All collections                        </label>                        <label class=\"btn btn-primary\" data-bind=\"click: includeAllCollections.bind(includeAllCollections, false), css: { active: !includeAllCollections() }\">                            Specified collections only                        </label>                    </div>                    <div style=\"margin-left: 20px;\" data-bind=\"visible: !includeAllCollections()\">                        <p class=\"form-control-static\">Choose collections:</p>                        <div class=\"btn-group-vertical\" data-bind=\"foreach: includedCollections\">                            <label class=\"btn btn-primary\" data-bind=\"text: collection, click: isIncluded.bind(isIncluded, !isIncluded()), css: { active: isIncluded }\"></label>                        </div>                    </div>                </div>            </div>-->                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">                        <span>Filters</span>                        <span class=\"help-block\">                            <a class=\"text-muted\" title=\"External link: RavenDB filters documentation\" target=\"_blank\" href=\"http://ravendb.net/docs/server/administration/export-import\">                                <i class=\"fa fa-question-circle\"></i>                                Help                            </a>                        </span>                    </label>                    <div class=\"col-sm-10\">                        <div class=\"btn-group\">                            <table class=\"table table-striped\" style=\"max-width: 500px;\" data-bind=\"visible: filters().length\">                                <thead>                                    <tr>                                        <th style=\"width: 40%;\">Path</th>                                        <th style=\"width: 45%;\">Value</th>                                        <th style=\"width: 10%\">Should Match</th>                                        <th>&nbsp;</th>                                    </tr>                                </thead>                                <tbody data-bind=\"foreach: filters\">                                    <tr>                                        <td><input class=\"form-control\" type=\"text\" data-bind=\"value: Path\" /></td>                                        <td><input class=\"form-control\" type=\"text\" data-bind=\"value: Values[0]\" /></td>                                        <td>                                                                                            <div class=\"btn-group\">                                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                    <span data-bind=\"visible: ShouldMatchObservable\">Should match</span>                                                    <span data-bind=\"visible: !ShouldMatchObservable()\">Should <strong>not</strong> match</span>                                                    <span class=\"caret\"></span>                                                </button>                                                <ul class=\"dropdown-menu\" role=\"menu\">                                                    <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"click: ShouldMatchObservable.bind(ShouldMatchObservable, true)\">Should match</a></li>                                                    <li><a href=\"#\" style=\"text-decoration: none;\" data-bind=\"click: ShouldMatchObservable.bind(ShouldMatchObservable, false)\">Should <strong>not</strong> match</a></li>                                                </ul>                                            </div>                                        </td>                                        <td>                                            <button type=\"button\" class=\"close\" data-bind=\"click: $root.removeFilter.bind($root, $data)\" title=\"Remove this filter\">                                                <i class=\"fa fa-times\"></i>                                            </button>                                        </td>                                    </tr>                                </tbody>                            </table>                            <button class=\"btn btn-default\" data-bind=\"click: addFilter\">                                <i class=\"fa fa-plus\"></i> Add filter                            </button>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label id=\"transformScriptHelp\" class=\"col-sm-2 control-label\">                        Transform script&nbsp;                        <i class=\"fa fa-info-circle help-cursor text-info\"></i>                    </label>                    <div class=\"col-sm-10\">                        <pre style=\"height: 200px;\" data-bind=\"aceEditor: { code: transformScript, lang: \'ace/mode/javascript\' }\">                        </pre>                    </div>                </div>            </form>                    </div>    </div></div>'; } )
define("text!views/indexErrors.html", [], function () { return '<section id=\"indexErrorsContainer\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div class=\"page-header\" data-bind=\"visible: hasFetchedErrors && allIndexErrors().length === 0\">        <h3><i class=\"fa fa-info-circle text-info\"></i> No errors have occurred.</h3>    </div>    <div style=\"height: 65%; position: relative;\" data-bind=\"visible: hasFetchedErrors && allIndexErrors().length > 0\">        <div id=\"indexErrorsTableContainer\" style=\"overflow-y: auto; position: absolute; bottom: 10px; top: 80px; width: 100%;\">            <table class=\"table table-condensed single-line-row-table\" data-bind=\"event: { keydown: tableKeyDown }\" tabindex=\"1\">                <thead>                    <tr>                        <th style=\"width: 10%\">Index</th>                        <th style=\"width: 10%\">Action</th>                        <th style=\"width: 10%\">Timestamp</th>                        <th style=\"width: 60%\">Error</th>                        <th style=\"width: 10%\">Document</th>                    </tr>                </thead>                <tbody data-bind=\"foreach: allIndexErrors, delegatedHandler: \'click\'\">                    <tr data-click=\"selectIndexError\" data-bind=\"css: { \'selected\': $data === $parent.selectedIndexError() }\">                        <td data-bind=\"text: IndexName, attr: { title: IndexName }\"></td>                        <td data-bind=\"text: Action, attr: { title: Action }\"></td>                        <td data-bind=\"text: TimestampHumanized, attr: { title: TimestampHumanized }\"></td>                        <td data-bind=\"text: Error, attr: { title: Error }\"></td>                        <td data-bind=\"text: Document, attr: { title: Document }\"></td>                    </tr>                </tbody>            </table>        </div>    </div>    <div class=\"index-errors-details panel panel-default\" style=\"height: 30%;\" data-bind=\"visible: hasFetchedErrors && allIndexErrors().length > 0\">        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Index</label>            <div class=\"col-md-10\" data-bind=\"with: selectedIndexError\">                <p class=\"form-control-static\" data-bind=\"text: IndexName\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Error</label>            <div class=\"col-md-10\" data-bind=\"with: selectedIndexError\">                <p class=\"form-control-static exceptionText\" data-bind=\"text: Error\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Timestamp</label>            <div class=\"col-md-10\" data-bind=\"with: selectedIndexError\">                <p class=\"form-control-static\" data-bind=\"text: TimestampHumanized\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Index</label>            <div class=\"col-md-10\" data-bind=\"with: selectedIndexError\">                <p class=\"form-control-static\" data-bind=\"text: IndexName\"></p>            </div>        </div>        <div class=\"row\">            <label class=\"col-md-1 text-right control-label\">Document</label>            <div class=\"col-md-10\" data-bind=\"with: selectedIndexError\">                <p class=\"form-control-static\" data-bind=\"text: Document\"></p>            </div>        </div>    </div></section>'; } )
define("text!views/indexes.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li class=\"active\">        Indexes    </li></ul><div id=\"indexesContainer\">    <div class=\"btn-toolbar\" role=\"toolbar\" data-bind=\"visible: sortedGroups().length > 0\">        <div class=\"btn-group\">            <a class=\"btn btn-primary\" data-bind=\"attr: { href: newIndexUrl }\" title=\"Add a new index (Alt+N)\" accesskey=\"N\">                <i class=\"fa fa-plus\"></i> New index            </a>        </div>        <div class=\"btn-group\">            <a class=\"btn btn-default\" data-bind=\"attr: { href: queryUrl }\" title=\"New query (Alt+Q)\" accesskey=\"Q\"><i class=\"fa fa-search\"></i> Query</a>            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" data-bind=\"visible: recentQueries().length > 0\" title=\"Recent queries\">                <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: recentQueries, visible: recentQueries().length > 0\">                <li>                    <a href=\"#\" data-bind=\"attr: { href: $root.getRecentQueryUrl($data) }\">                        <span data-bind=\"text: IndexName\"></span>                        <span data-bind=\"visible: QueryText\">                            <span class=\"text-muted\">|</span>                            <span data-bind=\"text: QueryText\"></span>                        </span>                        <span data-bind=\"visible: Sorts.length > 0, with: Sorts\">                            <span class=\"text-muted\">|</span>                            <span data-bind=\"text: \'sort by \' + $root.getRecentQuerySortText($data)\"></span>                        </span>                        <span data-bind=\"with: TransformerQuery\">                            <span class=\"text-muted\">|</span>                            <span data-bind=\"text: \'transform by \' + transformerName + \' \' + $root.getStoredQueryTransformerParameters(queryParams)\"></span>                        </span>                        <span data-bind=\"visible: UseAndOperator\">                            <span class=\"text-muted\">|</span>                            <span>AND operator</span>                        </span>                        <span data-bind=\"visible: ShowFields\">                            <span class=\"text-muted\">|</span>                            <span>show fields</span>                        </span>                        <span data-bind=\"visible: IndexEntries\">                            <span class=\"text-muted\">|</span>                            <span>index entries</span>                        </span>                    </a>                </li>            </ul>        </div>        <div class=\"btn-group\">            <a class=\"btn btn-default\" data-bind=\"click: toggleExpandAll , attr: { state: btnState, title: btnTitle }\" accesskey=\"=\">                <i data-bind=\"css: { \'fa-plus-square-o\': btnState, \'fa-minus-square-o\': !btnState() }\" class=\"fa\"></i>            </a>        </div>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                <i class=\"fa fa-clipboard\"></i><span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\" role=\"menu\">                <li data-bind=\"click: pasteIndex\"><a href=\"#\" title=\"Paste index from JSON (Alt+V)\" accesskey=\"v\">Paste Single Index</a></li>                <li class=\"divider\"></li>                <li data-bind=\"click: copyIndexesAndTransformers\"><a href=\"#\" title=\"Paste index from JSON (Alt+V)\">Copy All Indexes And Transformers</a></li>                <li data-bind=\"click: pasteIndexesAndTransformers\"><a href=\"#\" title=\"Paste index from JSON (Alt+V)\">Paste Indexes And Transformers</a></li>            </ul>        </div>        <div class=\"btn-group\">            <a class=\"btn btn-default\" title=\"Index merge suggestions\" data-bind=\"attr: { href: appUrls.megeSuggestions }\">                <i class=\"fa fa-compress\"></i>            </a>        </div>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-danger dropdown-toggle\" data-toggle=\"dropdown\">                <i class=\"fa fa-trash-o\"></i> <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\" role=\"menu\">                <li data-bind=\"click: deleteIdleIndexes\"><a href=\"#\">Delete Idle Indexes</a></li>                <li data-bind=\"click: deleteDisabledIndexes\"><a href=\"#\">Delete Disabled Indexes</a></li>                <li data-bind=\"click: deleteAbandonedIndexes\"><a href=\"#\">Delete Abandoned Indexes</a></li>                <li class=\"divider\"></li>                <li data-bind=\"click: deleteAllIndexes\"><a href=\"#\">Delete All Indexes</a></li>            </ul>        </div>    </div>    <div class=\"text-center\" data-bind=\"visible: sortedGroups().length == 0\">        <h3 class=\"page-header text-info\">            <div>No indexes have been created for this database.</div>            <div>                <small>                          Go ahead and <a href=\"#\" data-bind=\"attr: { href: newIndexUrl }\">create an index</a>                          , <a href=\"#\" data-bind=\"click: pasteIndex\">paste single index</a> or <a href=\"#\" data-bind=\"click: pasteIndexesAndTransformers\">paste a bulk</a> of indexes and transformers definitions from JSON.                      </small>            </div>        </h3>    </div>    <div data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">        <div class=\"indexes-container panel-group index-panel\" id=\"indexesAccordion\" data-bind=\"foreach: sortedGroups\">            <div class=\"index-group panel panel-default index-panel\">                <div class=\"panel-heading\">                    <div class=\"pull-right indexGroup-actions-container\">                        <button class=\"btn btn-danger btn-sm\" data-bind=\"click: $root.deleteIndexGroup.bind($root), attr: { title: \'Delete all \' + entityName + \' indexes\' }\">                            <i class=\"fa fa-trash-o\"></i>                        </button>                    </div>                    <h4 class=\"panel-title\">                        <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#indexCollapse\' + $index() }\">                            <span data-bind=\"text: entityName\"></span>                            <span class=\"text-muted\" data-bind=\"text: \'(\' + indexes().length + \')\'\"></span>                        </a>                    </h4>                </div>                <div class=\" index-group-content panel-collapse in index-panel\" data-bind=\"attr: { id: \'indexCollapse\' + $index() }\">                    <div class=\"panel panel-default index-panel\" style=\"overflow: visible;\">                        <div class=\"panel-body index-panel\" data-bind=\"foreach: indexes\">                            <div class=\"index-panel panel panel-default\">                                <div class=\"panel-body\">                                    <h4 class=\"pull-left\">                                        <a data-bind=\"attr: { href: queryUrl }\" title=\"Query this index\">                                            <span data-bind=\"text: name, css: { \'text-warning\': isIdle, \'text-muted\': isDisabled, \'text-danger\': isAbandoned() || isInvalid() || isErrored() }\"></span>                                        </a>                                        <small class=\"text-warning\" data-bind=\"visible: isIdle\">Idle</small>                                        <small class=\"text-danger\" data-bind=\"visible: isAbandoned\">Abandoned</small>                                        <small class=\"badge\" data-bind=\"visible: isInvalid\"><i class=\"fa fa-bug\" /> Invalid index</small>                                        <small class=\"badge\" data-bind=\"visible: isErrored\"><i class=\"fa fa-bug\" /> Errored index</small>                                        <small class=\"text-muted\" data-bind=\"visible: isDisabled\">Disabled</small>                                        <small class=\"text-muted\" data-bind=\"text: \' - \' + docsCount + \' entries\' \" title=\" the number of documents affected by this index\"></small>                                        <label>                                            <i class=\"fa\" data-bind=\"css: { \'fa-unlock\': lockMode() === \'Unlock\' || lockMode() === \'LockedError\', \'text-danger\': lockMode() === \'LockedError\', \'fa-lock\': lockMode() === \'LockedIgnore\' }\"></i>                                        </label>                                    </h4>                                    <div class=\"pull-right\">                                        <a class=\"btn btn-default indexes-controls\" data-placement=\"bottom\" data-bind=\"attr: { href: editUrl }\">                                            <i class=\"fa fa-pencil\"></i>                                        </a>                                        <div class=\"btn-group\">                                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" data-placement=\"left\">                                                <i class=\"fa fa-cogs\"></i>                                            </button>                                            <ul class=\"dropdown-menu index-dropdown\" role=\"menu\">                                                <li role=\"presentation\">                                                    <a class=\"btn\" data-bind=\"click: $root.copyIndex.bind($root)\">                                                        <i class=\"fa fa-copy fa-fw\"></i> Copy index                                                    </a>                                                </li>                                                <li role=\"presentation\">                                                    <a class=\"btn\" title=\"Delete the index\" data-bind=\"click: $root.deleteIndex.bind($root)\">                                                        <i class=\"fa fa-trash-o fa-fw text-danger\"></i> Delete Index                                                    </a>                                                </li>                                                <li role=\"presentation\">                                                    <a class=\"btn indexes-controls\" title=\"Reset the index\" data-bind=\"click: $root.resetIndex.bind($root)\">                                                        <i class=\"fa fa-undo fa-fw\"></i> Reset Index                                                    </a>                                                </li>                                                <li role=\"presentation\" class=\"divider\"></li>                                                <li role=\"presentation\">                                                    <a class=\"btn\" data-bind=\"click: $root.unlockIndex.bind($root, $data), css: { active: lockMode() === \'Unlock\' }\" title=\"Unlocked: The index is unlocked for changes; apps can modify it, e.g. via IndexCreation.CreateIndexes().\">                                                        <i class=\"fa fa-unlock fa-fw\"></i>                                                        Unlocked                                                    </a>                                                </li>                                                <li role=\"presentation\">                                                    <a class=\"btn\" data-bind=\"click: $root.lockIndex.bind($root, $data), css: { active: lockMode() === \'LockedIgnore\' }\" title=\"Locked: The index is locked for changes; apps cannot modify it. Programmatic attempts to modify the index will be ignored.\">                                                        <i class=\"fa fa-lock fa-fw\"></i>                                                        Locked                                                    </a>                                                </li>                                                <li role=\"presentation\">                                                    <a class=\"btn\" data-bind=\"click: $root.lockErrorIndex.bind($root, $data), css: { active: lockMode() === \'LockedError\' }\" title=\"Locked + Error: The index is locked for changes; apps cannot modify it. An error will be thrown if an app attempts to modify it.\">                                                        <i class=\"fa fa-lock text-danger fa-fw\"></i>                                                        Locked (Error)                                                    </a>                                                </li>                                            </ul>                                        </div>                                        <!--                                        COMMENTED OUT: In 3.0, this doesn\'t seem to do anything. Is it because the index creation and saving has changed?                                        <button class=\"btn btn-default btn-warning\" title=\"Make index persistent\" data-bind=\"click: $root.makeIndexPersistent.bind($root, $data), visible: isOnRam() !== \'false\'\">                                            <i class=\"fa fa-download\"></i>                                        </button>-->                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/indexesAndTransformersClipboardDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\" data-bind=\"text:isPaste === true?\'Paste Indexes And Transformers\':\'Copy Indexes And Transformers\'\"></h4>    </div>    <div class=\"modal-body\">        <h4>            <strong data-bind=\"text: isPaste === true ? \'CTRL+V, Enter \': \'CTRL+C, Enter \'\"></strong>            <span data-bind=\"text: isPaste === true ? \'to save\' : \'to copy\'\"></span>        </h4>        <div>            <pre data-bind=\"aceEditor: { code: json, lang: \'ace/mode/json\', getFocus: true, selectAll: true, readOnly: !isPaste, bubbleEscKey: true }\" style=\"width: 600px; height: 400px;\"></pre>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close, visible: isPaste === true\">Close</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: saveAll, text: isPaste === true ? \'Save All\' : \'Close\', enable: !!json(), attr: { title: isPaste ? \'Save All (Alt+S)\' : \'\', accesskey: isPaste ? \'S\' : \'\' }\"></button>    </div></div>'; } )
define("text!views/indexesShell.html", [], function () { return '<section data-bind=\"router: { cacheViews: false } \"></section>'; } )
define("text!views/indexMergeSuggestions.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li class=\"active\">        <a data-bind=\"attr: { href: appUrls.indexes }\">Indexes</a>    </li>    <li class=\"active\">        <span>Merge Suggestions</span>    </li></ul><div id=\"index-merge-suggestions\" class=\"panel-group\">    <div class=\"panel index-group panel-default\">        <div class=\"panel-heading\">            <h4 class=\"panel-title text-info\">Suggestions</h4>        </div>        <div class=\"panel-body\" data-bind=\"visible: suggestions().length == 0\">            <h4 class=\"text-info\"> No merge suggestions availiable.</h4>        </div>                <div class=\"panel-group panel-body\" id=\"accordion\" data-bind=\"foreach: suggestions, visible: suggestions().length > 0\">            <div data-bind=\"if: $data.isSurpassingIndex()\">                <div class=\"panel panel-default\">                    <div class=\"panel-heading\">                        <h4 class=\"panel-title\">                            <a data-toggle=\"collapse\" data-parent=\"#accordion\" data-bind=\"text: \'Surpassing index: \' + surpassingIndex, attr: { href: \'#collapse\' + $index() }\"></a>                        </h4>                    </div>                    <div class=\"panel-collapse collapse\" data-bind=\"attr: { id: \'collapse\' + $index() }\">                        <div class=\"panel-body\">                            <div>Indexes to delete:</div>                            <ul data-bind=\"foreach: canDelete\">                                <li data-bind=\"text: $data\"></li>                            </ul>                            <button data-bind=\"click: $root.deleteIndexes.bind($root, $index())\" class=\"btn btn-primary\">Delete indexes</button>                        </div>                    </div>                </div>            </div>            <div data-bind=\"if: $data.isSurpassingIndex() == false\">                <div class=\"panel panel-default\">                    <div class=\"panel-heading\">                        <h4 class=\"panel-title\">                            <a data-toggle=\"collapse\" data-parent=\"#accordion\" data-bind=\"text: \'Merge Suggestion for \' + collection, attr: { href: \'#collapse\' + $index() }\"></a>                        </h4>                    </div>                    <div class=\"panel-collapse collapse\" data-bind=\"attr: { id: \'collapse\' + $index() }\">                        <div class=\"panel-body\">                            <div>Indexes to merge:</div>                            <ul data-bind=\"foreach: canMerge\">                                <li data-bind=\"text: $data\"></li>                            </ul>                            <a class=\"btn btn-primary\" href=\"#\" target=\"_blank\" data-bind=\"attr: { id: id, href: $root.mergedIndexUrl(id()) }, click: $root.saveMergedIndex.bind($root, id(), $data)\" title=\"Navigate to Save Merged Index\"><i class=\"fa fa-external-link\"></i> Show Merged Index</a>                        </div>                    </div>                </div>            </div>    </div>    <div class=\"panel index-group panel-default\">        <div class=\"panel-heading\">            <h4 class=\"panel-title text-info\">                <a href=\"#collapseUnmergable\" data-toggle=\"collapse\" >Unmergable (<span data-bind=\"text: unmergables().length\"></span>)</a>            </h4>        </div>        <div class=\"panel-collapse collapse\" id=\"collapseUnmergable\">            <div class=\"panel-body\">                <ul data-bind=\"foreach: unmergables\">                    <li>                        <span class=\"index-name\" data-bind=\"text: indexName\"></span>                        <span>: </span>                        <span data-bind=\"text: reason\"></span>                    </li>                </ul>            </div>        </div>    </div>        <div class=\"panel index-group panel-default\"  data-bind=\"visible: idleOrAbandonedIndexes().length > 0\">        <div class=\"panel-heading\">             <div class=\"pull-right indexGroup-actions-container\">                <button class=\"btn btn-danger btn-sm\" data-bind=\"click: deleteAllIdleOrAbandoned\" title=\"Delete all idle or abandoned indexes\">                    <i class=\"fa fa-trash-o\"></i>                </button>            </div>            <h4 class=\"panel-title text-info\">Idle or Abandoned</h4>        </div>        <div class=\"panel-body\">            <ul data-bind=\"foreach: idleOrAbandonedIndexes\">                <li>                    <span class=\"index-name\" data-bind=\"text: Name\"></span>                    <span>: </span>                    <span data-bind=\"text: Priority\"></span>                    <button class=\"btn btn-danger btn-sm\" data-bind=\"click: $root.deleteIndex.bind($root, Name)\" title=\"Delete index\">                        <i class=\"fa fa-trash-o\"></i>                    </button>                </li>            </ul>        </div>    </div>         <div class=\"panel index-group panel-default\" data-bind=\"visible: notUsedForLastWeek().length > 0\">         <div class=\"panel-heading\">             <div class=\"pull-right indexGroup-actions-container\" >                <button class=\"btn btn-danger btn-sm\" data-bind=\"click: deleteAllNotUsedForWeek\" title=\"Delete all indexes not used within last week\">                    <i class=\"fa fa-trash-o\"></i>                </button>            </div>             <h4 class=\"panel-title text-info\">Not used for over a week.</h4>         </div>        <div class=\"panel-body\">            <ul data-bind=\"foreach: notUsedForLastWeek\">                <li>                    <span class=\"index-name\" data-bind=\"text: Name\"></span>                    <span>: </span>                    <span data-bind=\"text: LastQueryTimestampText\"></span>                    <button class=\"btn btn-danger btn-sm\" data-bind=\"click: $root.deleteIndex.bind($root, Name)\" title=\"Delete index\">                        <i class=\"fa fa-trash-o\"></i>                    </button>                </li>            </ul>        </div>    </div></div>'; } )
define("text!views/indexStats.html", [], function () { return '<style>    #indexStatsContainer {        font: 11px sans-serif;    }    .axis path,    .axis line {        fill: none;        stroke: #000;        shape-rendering: crispEdges;    }    .bar {        fill: steelblue;    }    rect.outputCounts, rect.inputCounts {        fill-opacity: 0.8;        cursor: pointer;    }    rect.outputCounts:hover, rect.inputCounts:hover {        fill-opacity: 1;    }    .legend rect {        cursor: pointer;    }    .legend_bg {        fill: white;        fill-opacity: 0.8;        stroke: #ccc;    }    .legendHidden {        fill-opacity: 0.2;       }</style><section id=\"indexStatsContainer\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <svg id=\"indexStatsGraph\" transform=\"translate(0.5,0.5)\" preserveAspectRatio=\"xMinYMin slice\"></svg></section>'; } )
define("text!views/indexTerms.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li>        <a data-bind=\"attr: { href: appUrls.indexes }\">Indexes</a>    </li>    <li class=\"active\">        <a data-bind=\"text: indexName, attr: { href: appUrls.editIndex(indexName) }\"></a>    </li>    <li class=\"active\">        <span>Terms</span>    </li></ul><div class=\"panel-group\" id=\"accordion\" data-bind=\"foreach: fields, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <h4 class=\"panel-title\">                <a data-toggle=\"collapse\" data-parent=\"#accordion\" data-bind=\"text: name, attr: { href: \'#termCollapse\' + $index() }\"></a>            </h4>        </div>        <div class=\"panel-collapse collapse\" data-bind=\"attr: { id: \'termCollapse\' + $index() }\">            <div class=\"panel-body\">                <ul class=\"list-group\" data-bind=\"foreach: terms\">                    <li class=\"list-group-item\" data-bind=\"text: $data\"></li>                </ul>            </div>        </div>    </div></div>'; } )
define("text!views/infoPackage.html", [], function () { return '<style type=\"text/css\">    .link {  fill: none;  stroke: #ccc;  stroke-width: 1.5px;}.overlay {  fill: none;  pointer-events: all;}text.trace {    font-size: 11px;}.box {    fill: #158CBA;    fill-opacity: 0.2;    stroke: #158CBA;    stroke-width: 1.5px;}.notUserCode {    fill-opacity: 0.4;}.headerLine {    stroke: #158CBA;    stroke-width: 1.5px;}</style><section id=\"infoPackageSection\">        <div class=\"btn-group\" data-bind=\"visible: adminView()\">        <button class=\"btn btn-default\" title=\"Creates package with stacktrace (available ONLY for system database)\" data-bind=\"click: createPackageWithStacks\" >Create info package with stacktraces <span class=\"text-danger\">(This is resource consuming)</span></button>        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">            <span class=\"caret\"></span>            <span class=\"sr-only\" >Toggle Dropdown</span>        </button>        <ul class=\"dropdown-menu\" role=\"menu\">            <li>                <button data-bind=\"click: createPackageWithoutStacks\" class=\"btn btn-default\">                    Create info package <i class=\"fa fa-file-zip-o\"></i>                </button>            </li>        </ul>    </div>        <div class=\"btn-group\" data-bind=\"visible: adminView()==false\">        <button data-bind=\"click: createPackageWithoutStacks\" class=\"btn btn-default\">            Create info package <i class=\"fa fa-file-zip-o\"></i>        </button>    </div>        <div class=\"btn-group\" data-bind=\"visible: hasStackDump\">        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">            Download parallel stacks <i class=\"fa fa-download\"></i>        </button>        <ul class=\"dropdown-menu\" role=\"menu\">            <li data-bind=\"click: saveAsPng, visible: hasSaveAsPngSupport\"><a href=\"#\"><i class=\"fa fa-file-image-o\"></i> PNG</a></li>            <li data-bind=\"click: saveAsSvg\"><a href=\"#\"><i class=\"fa fa-file-image-o\"></i> SVG</a></li>            <li data-bind=\"click: saveAsJson\"><a href=\"#\"><i class=\"fa fa-file-text-o\"></i> JSON</a></li>        </ul>    </div>        <div class=\"btn-group\" data-bind=\"visible: hasInfoPackage\">        <button data-bind=\"click: saveAsZip\" type=\"button\" class=\"btn btn-default\">            Download info package <i class=\"fa fa-download\"></i>        </button>    </div>        <div class=\"btn-group\">        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: chooseImportFile\">                Import <i class=\"fa fa-upload\"></i>            </button>        </div>    </div>        <div class=\"btn-group\">        <div id=\"loadingIndicator\" data-bind=\"visible: showLoadingIndicator\" class=\"glyphicon\" style=\"width: 30px; height: 30px;\"><span class=\"fa fa-spinner fa-spin fa-2x\"></span></div>    </div>        <div class=\"alert alert-danger\" style=\"margin-top: 10px\" role=\"alert\" data-bind=\"text: fetchException, visible: hasFetchException\">    </div>    <div id=\"stacksContainer\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\" style=\"width: 100%\" class=\"with-3d-shadow with-transitions\">        <svg id=\"parallelStacks\" transform=\"translate(0.5,0.5)\" preserveAspectRatio=\"xMinYMin slice\"></svg>    </div></section>'; } )
define("text!views/infoPackageImport.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" >    <form data-bind=\"submit: doImport\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">&times;</button>            <h4 class=\"modal-title\">Import info package</h4>        </div>        <div class=\"modal-body\">                        Select file to import. <br />            <input id=\"importFilePicker\" type=\"file\" data-bind=\"event: { change: fileSelected }\" />                    </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Close</button>            <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: hasFileSelected\"><i class=\"fa fa-upload\"></i> Import</button>        </div>    </form></div>'; } )
define("text!views/ioTest.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: startPerformanceTest\">    <div class=\"panel panel-default\">        <div class=\"panel-heading panel-info\">            <button type=\"submit\" title=\"IO Test\" class=\"btn btn-primary\" data-bind=\"disable: isBusy\">                <i class=\"fa fa-gears\"></i>                <span>Test Disk Performance</span>            </button>            <button class=\"btn btn-danger\" data-bind=\"click: killTask, visible: isBusy\"><i class=\"fa fa-bolt\"></i> Cancel test</button>        </div>        <div class=\"panel-body\">            <div>                <div class=\"form-group\">                    <label for=\"path\" class=\"col-sm-2 control-label\">Temporary dir location</label>                    <div class=\"col-sm-5 input-group\">                        <input data-bind=\"value: ioTestRequest.path, disable: isBusy\" type=\"text\" required class=\"form-control\" id=\"path\" placeholder=\"C:&#92;temp&#92;\">                    </div>                </div>                <div class=\"form-group\">                    <label for=\"fileSize\" class=\"col-sm-2 control-label\">File size</label>                    <div class=\"col-sm-5 input-group\">                        <input data-bind=\"value: fileSizeMb, disable: isBusy\" type=\"number\" required class=\"form-control\" id=\"fileSize\" placeholder=\"1024\">                         <span class=\"input-group-addon\">MB</span>                    </div>                </div>                <div class=\"form-group\">                    <label for=\"operationType\" class=\"col-sm-2 control-label\">Operation Type</label>                    <div class=\"col-sm-10 input-group\">                        <div class=\"btn-group\" data-bind=\"with: ioTestRequest\">                            <button id=\"operationType\" type=\"button\" data-bind=\"disable: $root.isBusy\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: operationType() === \'Read\'\">Read</span>                                <span data-bind=\"visible: operationType() === \'Write\'\">Write</span>                                <span data-bind=\"visible: operationType() === \'Mix\'\">Read and write</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: operationType.bind(operationType, \'Read\')\">Read</a></li>                                <li><a href=\"#\" data-bind=\"click: operationType.bind(operationType, \'Write\')\">Write</a></li>                                <li><a href=\"#\" data-bind=\"click: operationType.bind(operationType, \'Mix\')\">Read and write</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label for=\"operationType\" class=\"col-sm-2 control-label\">Buffering</label>                    <div class=\"col-sm-10 input-group\">                        <div class=\"btn-group\" data-bind=\"with: ioTestRequest\">                            <button id=\"bufferingType\" type=\"button\" data-bind=\"disable: $root.isBusy\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: bufferingType() === \'None\'\">None</span>                                <span data-bind=\"visible: bufferingType() === \'ReadAndWrite\'\">Read and write</span>                                <span data-bind=\"visible: bufferingType() === \'Read\'\">Read</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: bufferingType.bind(operationType, \'None\')\">None</a></li>                                <li><a href=\"#\" data-bind=\"click: bufferingType.bind(operationType, \'ReadAndWrite\')\">Read and write</a></li>                                <li><a href=\"#\" data-bind=\"click: bufferingType.bind(operationType, \'Read\')\">Read</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label for=\"sequential\" class=\"col-sm-2 control-label\">Sequential</label>                    <div class=\"col-sm-10 input-group\">                        <div class=\"btn-group\" data-bind=\"with: ioTestRequest\">                            <button  id=\"sequential\" type=\"button\" data-bind=\"disable: $root.isBusy\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: sequential()\">Yes</span>                                <span data-bind=\"visible: sequential() == false\">No</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: sequential.bind(sequential, true)\">Yes</a></li>                                <li><a href=\"#\" data-bind=\"click: sequential.bind(sequential, false)\">No</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label for=\"threadCount\" class=\"col-sm-2 control-label\">Thread count</label>                    <div class=\"col-sm-5 input-group\">                        <input data-bind=\"value: ioTestRequest.threadCount, disable: isBusy\" type=\"number\" required class=\"form-control\" id=\"threadCount\">                    </div>                </div>                <div class=\"form-group\">                    <label for=\"timeToRunInSeconds\" class=\"col-sm-2 control-label\">Time to run (in seconds)</label>                    <div class=\"col-sm-5 input-group\">                        <input data-bind=\"value: ioTestRequest.timeToRunInSeconds, disable: isBusy\" type=\"number\" required class=\"form-control\" id=\"timeToRunInSeconds\">                    </div>                </div>                <div class=\"form-group\">                    <label for=\"chunkSize\" class=\"col-sm-2 control-label\">Chunk size</label>                    <div class=\"col-sm-5 input-group\">                        <input data-bind=\"value: chunkSizeKb, disable: isBusy, customValidity: chunkSizeCustomValidityError\" type=\"number\" required class=\"form-control\" id=\"chunkSize\">                        <span class=\"input-group-addon\">KB</span>                    </div>                </div>            </div>        </div>    </div>        <div data-bind=\"with: testResult\">        <div class=\"panel panel-default\" >            <div class=\"panel-heading panel-info\">                Disk Performance Test Results            </div>            <div class=\"panel-body\">                <!-- ko if:hasReads -->                <table class=\"table-condensed table-striped table-hover table\">                    <tr>                        <th>Total read:</th>                        <th>Test time:</th>                        <th>Avg read:</th>                        <th>&nbsp;</th>                    </tr>                    <tr>                        <td data-bind=\"text: totalRead\"></td>                        <td data-bind=\"text: testTime\"></td>                        <td data-bind=\"text: avgRead\"></td>                        <td>&nbsp;</td>                    </tr>                    <tr>                        <th>Read latency min</th>                        <th>Read latency mean</th>                        <th>Read latency stdev</th>                        <th>Read latency max</th>                    </tr>                    <tr>                        <td data-bind=\"text: readLatencyMin\"></td>                        <td data-bind=\"text: readLatencyMean\"></td>                        <td data-bind=\"text: readLatencyStdev\"></td>                        <td data-bind=\"text: readLatencyMax\"></td>                    </tr>                </table>                <!-- /ko -->                <!-- ko if:hasWrites -->                <table class=\"table-condensed table-striped table-hover table\">                    <tr>                        <th>Total write:</th>                        <th>Test time:</th>                        <th>Avg write:</th>                        <th>&nbsp;</th>                    </tr>                    <tr>                        <td data-bind=\"text: totalWrite\"></td>                        <td data-bind=\"text: testTime\"></td>                        <td data-bind=\"text: avgWrite\"></td>                        <td>&nbsp;</td>                    </tr>                    <tr>                        <th>Write latency min</th>                        <th>Write latency mean</th>                        <th>Write latency stdev</th>                        <th>Write latency max</th>                    </tr>                    <tr>                        <td data-bind=\"text: writeLatencyMin\"></td>                        <td data-bind=\"text: writeLatencyMean\"></td>                        <td data-bind=\"text: writeLatencyStdev\"></td>                        <td data-bind=\"text: writeLatencyMax\"></td>                    </tr>                </table>                <!-- /ko -->                <!-- ko if:hasReads -->                <table  class=\"table-condensed table-striped table-hover table\">                    <tr>                        <th data-bind=\"attr: { colspan: readPercentiles().length } \">Read latency percentiles</th>                    </tr>                    <tr data-bind=\"foreach: readPercentiles\">                        <td data-bind=\"text: key\"></td>                    </tr>                    <tr data-bind=\"foreach: readPercentiles\">                        <td data-bind=\"text: value\"></td>                    </tr>                </table>                <!-- /ko -->                <!-- ko if:hasWrites -->                <table  class=\"table-condensed table-striped table-hover table\">                    <tr>                        <th data-bind=\"attr: { colspan: writePercentiles().length } \">Write latency percentiles</th>                    </tr>                    <tr data-bind=\"foreach: writePercentiles\">                        <td data-bind=\"text: key\"></td>                    </tr>                    <tr data-bind=\"foreach: writePercentiles\">                        <td data-bind=\"text: value\"></td>                    </tr>                </table>                <!-- /ko -->                                <h4>Disk throughput</h4>                <div id=\"overTimeThroughputContainer\" class=\"with-3d-shadow with-transitions\">                    <svg height=\"400\"></svg>                </div>                                <h4>Disk latency</h4>                <div id=\"overTimeLatencyContainer\" class=\"with-3d-shadow with-transitions\">                    <svg height=\"400\"></svg>                </div>            </div>         </div>    </div></form>'; } )
define("text!views/latestBuildReminder.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h3 class=\"modal-title\">Latest Build Reminder</h3>    </div>    <div class=\"modal-body\" style=\"font-size: 1.3em\">        <!-- ko if: !latestServerBuildResult.Exception -->        <div>            A new build (<span data-bind=\"text: latestServerBuildResult.LatestBuild\"></span>) is available for <a href=\"http://ravendb.net/download\" target=\"_blank\">download</a>.        </div>        <!-- /ko -->        <!-- ko if: !!latestServerBuildResult.Exception -->        <div class=\"label label-danger\">An error occured!</div>        <div data-bind=\"text: latestServerBuildResult.Exception\"></div>        <!-- /ko -->                <div class=\"checkbox\">            <label>                <input type=\"checkbox\" data-bind=\"checked: mute\"> Mute for a week            </label>        </div>    </div></div>'; } )
define("text!views/licensingStatus.html", [], function () { return '<div class=\"messageBox licensing-status\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Licensing Status</h4>    </div>    <div class=\"modal-body\">        <label data-bind=\"text: licenseStatus.Message, css: { \'license-error\': licenseStatus.Error }\"></label>        <!-- ko with: licenseStatus.Details -->        <div class=\"panel-group\" id=\"detailsAccordion\">            <div class=\"panel panel-default\">                <div class=\"panel-heading\">                    <a data-toggle=\"collapse\" data-parent=\"#detailsAccordion\" href=\"#collapseDetails\">                        <h3 class=\"panel-title\">                            Details                        </h3>                    </a>                </div>                <div id=\"collapseDetails\" class=\"panel-collapse collapse\">                    <div class=\"panel-body\">                        <div class=\"form-group\">                            <div class=\"col-lg-12\">                                <p class=\"form-control-static\" data-bind=\"text: $data\"></p>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <!-- /ko -->        <!-- ko if: licenseStatus.IsCommercial -->        <div data-bind=\"text: \'Version: \' + licenseStatus.Attributes.version\"></div>        <div data-bind=\"text: \'Bundles: \' + bundleString + \'.\'\"></div>        <div data-bind=\"text: \'RavenFS: \' + licenseStatus.Attributes.ravenfs\"></div>        <div data-bind=\"text: \'FIPS compatible: \' + licenseStatus.Attributes.fips\"></div>        <div data-bind=\"text: \'Authorization: \' + licenseStatus.Attributes.authorization\"></div>        <div data-bind=\"text: \'Max Ram Utilization: \' + licenseStatus.Attributes.maxRamUtilization\"></div>        <div data-bind=\"text: \'Max Parallelism: \' + licenseStatus.Attributes.maxParallelism\"></div>        <div data-bind=\"text: \'Max Size in MB: \' + licenseStatus.Attributes.maxSizeInMb\"></div>        <div data-bind=\"text: \'Windows Clustering Allowed: \' + licenseStatus.Attributes.allowWindowsClustering\"></div>        <div data-bind=\"text: \'OEM: \' + licenseStatus.Attributes.OEM\"></div>        <div data-bind=\"text: \'Number of Databases: \' + licenseStatus.Attributes.numberOfDatabases\"></div>        <div data-bind=\"text: \'Updates Expiration: \' + licenseStatus.Attributes.updatesExpiration\"></div>        <!-- /ko -->    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: ok\">OK</button>    </div></div>'; } )
define("text!views/loadPatch.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" style=\"z-index: 1001\">    <form data-bind=\"submit: loadThePatch\" id=\"select-columns-form\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Load Patch</h4>        </div>                <div class=\"modal-body\">            <div class=\"row\">                <div class=\"col-md-12\">                    <div class=\"form-group\">                        <label>Select saved patch to load</label><br/>                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"text: patchName\"></span>                                <span class=\"caret\"></span>                            </button>                            <ul id=\"collectionToPatch\" class=\"dropdown-menu\" role=\"menu\">                                <!-- ko foreach: patches -->                                <li data-bind=\"click: $root.setSelectedPatch.bind($root, $data)\"><a href=\"#\" data-bind=\"text: $data.name()\"></a></li>                                <!-- /ko -->                            </ul>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" class=\"btn btn-primary\">OK</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>        </div>    </form></div>'; } )
define("text!views/logs.html", [], function () { return '<style>.column {    display: inline-block;    cursor: pointer;    overflow: hidden;    white-space: nowrap;    word-wrap: break-word;    text-overflow: ellipsis;    border-bottom: 1px solid #ddd;    margin: 0px;    padding: 5px;    height: 30px;}.selected .column {    background-color: #ffffcc;}</style><section id=\"logsContainer\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div style=\"position: relative; height: 65%\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: fetchLogs\"><i class=\"fa fa-refresh\"></i></button>        <div class=\"btn-group\" data-toggle=\"buttons\">            <label class=\"btn btn-default active\" data-bind=\"click: setFilterAll\">                <input type=\"radio\" name=\"options\" id=\"option1\"> <span data-bind=\"text: \'All logs (\' + allLogs().length + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterDebug\">                <input type=\"radio\" name=\"options\" id=\"option1\"> <span data-bind=\"text: \'Debug (\' + debugLogCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterInfo\">                <input type=\"radio\" name=\"options\" id=\"option2\"> <span data-bind=\"text: \'Info (\' + infoLogCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterWarning\">                <input type=\"radio\" name=\"options\" id=\"option3\"> <span data-bind=\"text: \'Warnings (\' + warningLogCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterError\">                <input type=\"radio\" name=\"options\" id=\"option3\"> <span data-bind=\"text: \'Errors (\' + errorLogCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterFatal\">                <input type=\"radio\" name=\"options\" id=\"option3\"> <span data-bind=\"text: \'Fatal (\' + fatalLogCount() + \')\'\"></span>            </label>        </div>        <form class=\"form-inline\" style=\"display: inline-block; vertical-align: middle;\">            <input type=\"text\" class=\"form-control col-md-8\" placeholder=\"Search\" data-bind=\"value: searchText, valueUpdate: \'afterkeydown\'\" />        </form>        <div id=\"logTableContainer\" style=\"overflow-y: auto; overflow-x: auto; position: absolute; top: 40px; bottom: 10px; width: 100%;\">            <div style=\"padding-top: 10px;\" data-bind=\"foreach: filteredLoggers\">                <button class=\"btn btn-default\" data-bind=\"click: $root.unHidelogType.bind($root)\">                    <span data-bind=\"text: $data\"></span>                    <span class=\"fa fa-times\"></span>                </button>            </div>            <span style=\"white-space: nowrap\">                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[0]() + \'%\' }\">                    <span class=\"column-handle\" column=\"0\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'Level\')\">Level</span>                    <span data-bind=\"visible: $root.sortColumn() === \'Level\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[1]() + \'%\' }\">                    <span class=\"column-handle\" column=\"1\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'TimeStamp\')\">Logged</span>                    <span data-bind=\"visible: $root.sortColumn() === \'TimeStamp\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[2]() + \'%\' }\">                    <span class=\"column-handle\" column=\"2\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'Message\')\">Message</span>                    <span data-bind=\"visible: $root.sortColumn() === \'Message\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[3]() + \'%\' }\">                    <span class=\"column-handle\" column=\"3\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'Exception\')\">Exception</span>                    <span data-bind=\"visible: $root.sortColumn() === \'Exception\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[4]() + \'%\' }\">                    <span class=\"column-handle\" column=\"4\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'LoggerName\')\">Log name</span>                    <span data-bind=\"visible: $root.sortColumn() === \'LoggerName\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>            </span>            <div style=\"white-space: nowrap\" data-bind=\"foreach: filteredAndSortedLogs, delegatedHandler: \'click\'\">                <div id=\"logRecordsContainer\" style=\"display: block; white-space: nowrap\" class=\"logRecord log-table-row\" data-click=\"selectLog\" data-bind=\"visible: IsVisible, css: { warning: Level === \'Warn\', danger: Level === \'Error\' || Level === \'Fatal\', \'selected\': $data === $parent.selectedLog() }\">                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[0]() + \'%\' }, text: Level\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[1]() + \'%\' }, text: HumanizedTimestamp, attr: { title: TimeStampText }\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[2]() + \'%\' }, text: Message, attr: { title: Message }\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[3]() + \'%\' }, text: Exception, attr: { title: Exception }\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[4]() + \'%\' }, text: LoggerName\"></div>                </div>            </div>        </div>    </div>    <div class=\"log-details panel panel-default\" style=\"height: 30%\">        <div class=\"col-md-11\">            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Message</label>                <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                    <p class=\"form-control-static\" data-bind=\"text: Message\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Exception</label>                <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                    <p class=\"form-control-static exceptionText\" data-bind=\"text: Exception\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Logged</label>                <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                    <p class=\"form-control-static\" data-bind=\"text: TimeStampText\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Level</label>                <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                    <p class=\"form-control-static\" data-bind=\"text: Level, css: { \'text-warning\': Level === \'Warn\', \'text-danger\': Level === \'Error\' || Level === \'Fatal\' }\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Logger</label>                <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                    <p class=\"form-control-static\" data-bind=\"text: LoggerName\"></p>                </div>            </div>        </div>        <div class=\"col-md-1\" data-bind=\"with: selectedLog\">            <button class=\"btn btn-default pull-right\" data-bind=\"click: $root.hideLogType.bind($root), attr:{title: \'Filter out all \' + LoggerName.split(\'.\').slice(2).join(\'.\') + \' logs\'}\">                <i class=\"fa fa-filter\"></i>            </button>        </div>    </div></section>'; } )
define("text!views/metrics.html", [], function () { return '<div id=\"metrics\">    <ul class=\"nav nav-tabs\" data-bind=\"foreach: router.navigationModel\">        <li data-bind=\"css: { active: isActive }\">             <a   data-bind=\"attr: { href: hash, title: tooltip }, text: title\"></a>        </li>    </ul>    <div class=\"tab-content\" data-bind=\"router: { cacheViews: false }\">    </div></div>'; } )
define("text!views/metricsIndexBatchSize.html", [], function () { return '<section class=\"metricsBatchSizeContainer\">    <h3>        Indexing Batch Size        <small><a href=\"#\" target=\"_blank\" title=\"URL for raw index batch size metrics. Opens in a new tab.\" data-bind=\"text: indexBatchSizeQueryUrl, attr: { href: indexBatchSizeQueryUrl }\"></a></small>    </h3>        <div id=\"actualIndexingBatchSizeContainer\" class=\"with-3d-shadow with-transitions\">        <svg data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\"></svg>    </div></section>'; } )
define("text!views/metricsIndexing.html", [], function () { return '<section class=\"metricsContainer\">        <div class=\"btn-group pull-right\">        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">            <span data-bind=\"text: currentIndexName\"></span>            <span class=\"caret\"></span>        </button>        <ul class=\"dropdown-menu\" role=\"menu\">            <li data-bind=\"click: $root.setSelectedIndex.bind($root, null)\">                <a href=\"#\">                    <span>All indexes</span>                </a>            </li>            <li class=\"divider\"></li>            <!-- ko foreach: availableIndexes -->            <li data-bind=\"click: $root.setSelectedIndex.bind($root, $data.Name)\"><a href=\"#\" data-bind=\"    text: $data.Name\"></a></li>            <!-- /ko -->        </ul>    </div>    <h3>        Indexing Performance        <small><a href=\"#\" target=\"_blank\" title=\"URL for raw indexing performance metrics. Opens in a new tab.\" data-bind=\"text: indexingPerformanceUrl, attr: { href: indexingPerformanceUrl }\"></a></small>    </h3>        <div id=\"indexPerfContainer\" class=\"with-3d-shadow with-transitions\" data-bind=\"visible: allIndexPerfChartVisible() == false\">        <svg  height=\"400\"></svg>    </div>    <div id=\"allIndexesPerfContainer\" class=\"with-3d-shadow with-transitions\" data-bind=\"visible: allIndexPerfChartVisible\">        <svg  data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\"></svg>    </div></section>'; } )
define("text!views/metricsPrefetches.html", [], function () { return '<section class=\"metricsContainer\">        <h3>Prefetches</h3>        <div id=\"prefetchesContainer\" class=\"with-3d-shadow with-transitions\" >        <svg data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\"></svg>    </div></section>'; } )
define("text!views/metricsRequests.html", [], function () { return '<section class=\"metricsContainer\">    <h3>        Request Counter        <small><a href=\"#\" target=\"_blank\" title=\"URL for raw request metrics. Opens in a new tab.\" data-bind=\"text: requestsMetricsUrl, attr: { href: requestsMetricsUrl }\"></a></small>    </h3>    <div id=\"requestCounterContainer\" class=\"with-3d-shadow with-transitions\">        <svg height=\"300\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\"></svg>    </div></section>'; } )
define("text!views/patch.html", [], function () { return '<div id=\"patchContainer\" class=\"no-outline\" tabindex=\"0\"> <!-- tabindex = 0 to that it can receive focus and catch keyboard shortcuts -->    <div class=\"btn-toolbar\" role=\"toolbar\">        <div class=\"btn-group\">             <button type=\"button\" class=\"btn btn-default dropdown-toggle\"  data-toggle=\"dropdown\">                <!-- ko with: patchDocument -->                <span data-bind=\"text: patchOnOption\"></span>                <!-- /ko -->                <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\" role=\"menu\">                <!-- ko foreach: [\'Document\', \'Collection\', \'Index\'] -->                <li data-bind=\"click: $root.setSelectedPatchOnOption.bind($root, $data)\"><a href=\"#\" data-bind=\"text: $data\"></a></li>                <!-- /ko -->            </ul>        </div>        <div class=\"btn-group\">            <button class=\"btn btn-default\" title=\"Test the patch script on the selected document (Alt+T)\" data-bind=\"click: testPatch, enable: isExecuteAllowed\" accesskey=\"T\"><i class=\"fa fa-question-circle\"></i> Test</button>        </div>        <div class=\"btn-group\">            <button class=\"btn btn-default\" title=\"Save the current Patch\" data-bind=\"click: savePatch\"><i class=\"fa fa-save\"></i> Save</button>            <button class=\"btn btn-default\" title=\"Load a saved Patch\" data-bind=\"click: loadPatch\"><i class=\"fa fa-arrow-up\"></i> Load</button>        </div>        <div class=\"btn-group\" data-bind=\"visible: (!!patchDocument()) && patchDocument().isDocumentPatch()\">            <button class=\"btn btn-default\" title=\"Execute Patch (Alt+P)\" accesskey=\"P\" data-bind=\"click: executePatchOnSingle, enable: isExecuteAllowed\">                <i class=\"fa fa-play\"></i> Patch            </button>        </div>        <div class=\"btn-group\" data-bind=\"visible: (!!patchDocument()) && (patchDocument().isCollectionPatch() || patchDocument().isIndexPatch())\">            <button class=\"btn btn-default\" title=\"Patch the selected documents (Alt+S)\" accesskey=\"S\" data-bind=\"click: executePatchOnSelected, enable: isExecuteAllowed\">                <i class=\"fa fa-play\"></i> Patch Selected            </button>            <button class=\"btn btn-default\" title=\"Patch all matching documents (Alt+A)\" data-bind=\"click: executePatchOnAll, enable: (patchDocument().script())\" accesskey=\"A\">                <i class=\"fa fa-forward\"></i> Patch All            </button>        </div>    </div>    <br />    <div class=\"form-horizontal\">        <div class=\"form-group\" data-bind=\"visible: (!!patchDocument()) && patchDocument().isDocumentPatch()\">            <div class=\"row\">                <label for=\"documentToPatch\" class=\"col-md-2 control-label\">Document to patch:</label>                <div class=\"col-md-10\">                    <div class=\"row\">                        <div class=\"col-md-6\" data-bind=\"with: patchDocument\">                            <input id=\"documentToPatch\" accesskey=\"I\" type=\"text\" class=\"form-control\" data-bind=\"value: selectedItem, valueUpdate: \'afterkeydown\', event: { keyup: $root.loadDocumentToTest.bind($root, $element.value) }\" />                        </div>                    </div>                </div>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: (!!patchDocument()) && patchDocument().isCollectionPatch()\">            <div class=\"row\">                <label for=\"collectionToPatch\" class=\"col-md-2 control-label\">Collection to patch:</label>                <div class=\"col-md-10\">                    <div class=\"row\">                        <div class=\"col-md-6\">                            <div class=\"btn-group\" data-bind=\"with: patchDocument\">                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                    <span data-bind=\"text: selectedItem\"></span>                                    <span class=\"caret\"></span>                                </button>                                <ul id=\"collectionToPatch\" class=\"dropdown-menu\" role=\"menu\">                                    <!-- ko foreach: $root.collections -->                                    <li data-bind=\"click: $root.setSelectedCollection.bind($root, $data)\"><a href=\"#\" data-bind=\"text: $data.name\"></a></li>                                    <!-- /ko -->                                </ul>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: (!!patchDocument()) && patchDocument().isIndexPatch()\">            <div class=\"row\">                <label for=\"indexToPatch\" class=\"col-md-2 control-label\">Index to patch:</label>                <div class=\"col-md-10\">                    <div class=\"row\">                        <div class=\"col-md-6\">                            <div class=\"btn-group\" data-bind=\"with: patchDocument\">                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                    <span data-bind=\"text: selectedItem\"></span>                                    <span class=\"caret\"></span>                                </button>                                <ul id=\"indexToPatch\" class=\"dropdown-menu\" role=\"menu\">                                    <!-- ko foreach: $root.indexNames -->                                    <li data-bind=\"click: $root.setSelectedIndex.bind($root, $data)\"><a href=\"#\" data-bind=\"text: $data\"></a></li>                                    <!-- /ko -->                                </ul>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: (!!patchDocument()) && patchDocument().isIndexPatch()\">            <div class=\"col-md-12\">                <div>                    <label id=\"indexQueryLabelContainer\" data-placement=\"auto right\" data-original-title=\"Index Query\" data-trigger=\"hover\">                        <span id=\"indexQueryLabel\" class=\"help-cursor\">                            Query                            <i class=\"fa fa-info-circle text-info\"></i>                        </span>                                                <a target=\"_blank\" class=\"control-label-additional-link\"  title=\"External link: Lucene query syntax documentation\" href=\"http://lucene.apache.org/core/2_9_4/queryparsersyntax.html\"><!--<i class=\"fa fa-question-circle text-muted\"></i>-->Lucene Docs</a>                    </label>                </div>                <div>                    <div class=\"row\">                        <div class=\"col-md-12\" data-bind=\"with: patchDocument\">                            <pre class=\"form-control\" data-bind=\"aceEditor: { code: query }, event: { keyup: $root.runQueryWithDelay.bind($root) }\" style=\"height:160px;\"></pre>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"form-group\">            <div class=\"col-md-9\">                <div>                    <label id=\"patchScriptsLabelContainer\" data-placement=\"auto right\" data-original-title=\"Patch Scripts\" data-trigger=\"hover\">                        <span id=\"patchScriptsLabel\" class=\"help-cursor\">                            Patch Scripts                            <i class=\"fa fa-info-circle text-info\"></i>                        </span>                    </label>                </div>                <div>                    <div class=\"row\">                        <div class=\"col-md-12\" data-bind=\"with: patchDocument\">                            <pre class=\"form-control\" data-bind=\"aceEditor: { code: script }\" style=\"height:160px;\"></pre>                        </div>                    </div>                </div>            </div>            <div class=\"col-md-3\">                <div>                    <label>Parameters</label>                </div>                <div data-bind=\"with: patchDocument\">                    <div class=\"col-sm-12\">                        <table class=\"table table-striped table-hover\" data-bind=\"visible: parameters().length > 0\">                            <thead>                                <tr>                                    <td width=\"35%\">Name</td>                                    <td>Value</td>                                    <td></td>                                </tr>                            </thead>                            <tbody data-bind=\"foreach: parameters\">                                <tr>                                    <td>                                        <input id=\"parametersName\" type=\"text\" class=\"form-control\" data-bind=\"value: key\" />                                    </td>                                    <td>                                        <input id=\"parametersValue\" type=\"text\" class=\"form-control\" data-bind=\"value: value\" />                                    </td>                                    <td>                                        <button type=\"button\" class=\"close\" data-bind=\"click: $parent.removeParameter.bind($parent, $data)\" title=\"Remove this parameter\">                                            <i class=\"fa fa-times\"></i>                                        </button>                                    </td>                                </tr>                            </tbody>                        </table>                        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: createParameter\" title=\"Add a parameter\">                          <i class=\"fa fa-plus\"></i> Add parameter                        </button>                    </div>                </div>            </div>        </div>        <div id=\"matchingDocumentsContainer\" class=\"form-group\" data-bind=\"visible: ((!!patchDocument()) && (patchDocument().isIndexPatch() || patchDocument().isCollectionPatch()))\">            <div class=\"col-md-12\">                <div>                    <label>Matching Documents</label>                </div>                <div>                    <div id=\"matchingDocumentsGrid\" style=\"width: 100%; height: 250px;\" data-bind=\"widget: { kind: \'virtualTable\', itemsSource: currentCollectionPagedItems, dynamicHeightBottomMargin: -30, dynamicHeightTargetSelector: \'#beforeAfterContainer\', selectedIndices: selectedDocumentIndices, gridSelector: \'#matchingDocumentsGrid\', maxHeight: \'210px\' }\"></div>                </div>            </div>        </div>        <div class=\"form-group patch-preview-flag\" data-bind=\"with: $root\" id=\"beforeAfterContainer\">            <div class=\"col-md-6\">                <div>                    <label>Before Patch</label>                </div>                <div>                    <div class=\"row\">                        <div class=\"col-md-12\">                            <pre class=\"form-control\" data-bind=\"aceEditor: { code: beforePatch, readOnly: true }\" style=\"height:260px;\"></pre>                        </div>                    </div>                </div>            </div>            <div class=\"col-md-6\">                <div>                    <label>After Patch</label>                </div>                <div>                    <div class=\"row\">                        <div class=\"col-md-12\">                            <pre class=\"form-control\" data-bind=\"aceEditor: { code: afterPatch, readOnly: true }\" style=\"height:260px;\"></pre>                        </div>                    </div>                </div>                <div class=\"tabs-container\">                    <ul class=\"nav nav-tabs\" role=\"tablist\">                      <li class=\"active\"><a href=\"#patchPut\" role=\"tab\" data-toggle=\"tab\">Document Puts <span data-bind=\"text: putDocuments().length\" class=\"badge\"></span></a></li>                      <li><a href=\"#patchLoad\" role=\"tab\" data-toggle=\"tab\">Document Loads <span data-bind=\"text: loadedDocuments().length\" class=\"badge\"></span></a></li>                    </ul>                    <!-- Tab panes -->                    <div class=\"tab-content\">                        <div class=\"tab-pane active jsContent\" id=\"patchPut\" data-bind=\"foreach: putDocuments\">                            <pre data-bind=\"html: $data\"></pre>                        </div>                        <div class=\"tab-pane\" id=\"patchLoad\">                            <ul class=\"list-group\" data-bind=\"foreach: loadedDocuments\">                                <li class=\"list-group-item\" data-bind=\"text: $data\"></li>                            </ul>                        </div>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/periodicExport.html", [], function () { return '<section data-bind=\"with: backupSetup\">    <div data-bind=\"visible: unsupported()\">        <div class=\"alert alert-danger\">Too many periodic export types found. This isn\'t a supported scenario for the UI.</div>    </div>    <div data-bind=\"visible: !unsupported()\">        <form data-bind=\"submit: $root.saveChanges.bind($root)\" id=\"save-periodic-backup-form\" class=\"form-horizontal\" role=\"form\">            <div class=\"btn-toolbar\">                <button type=\"submit\" class=\"btn btn-primary\" title=\"Save Changes(Alt+S)\" data-bind=\"enable: $root.isSaveEnabled()\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>                <button type=\"button\" class=\"btn btn-default\" title=\"Activate Periodic Export\" data-bind=\"click: $root.activatePeriodicExport.bind($root), visible: disabled()\">                    <i class=\"fa fa-unlock\"></i> Activate Periodic Export                </button>                <button type=\"button\" class=\"btn btn-default\" title=\"Deactivate Periodic Export\" data-bind=\"click: $root.activatePeriodicExport.bind($root), visible: !disabled()\">                    <i class=\"fa fa-lock\"></i> Deactivate Periodic Export                </button>            </div>            <br />            <p data-bind=\"visible: disabled\">                <i class=\"fa fa-info-circle text-info\"></i> Periodic Export is currently deactivated. <a href=\"#\" data-bind=\"click: $root.activatePeriodicExport.bind($root)\">Activate it</a>.            </p>            <div data-bind=\"visible: !disabled()\" id=\"periodicExportContainer\">                <div class=\"form-group\">                    <div class=\"col-sm-3\">                        <select class=\"form-control\" data-bind=\"options: availablePeriodicExports, optionsText: \'label\', optionsValue: \'value\', value: type\"></select>                    </div>                    <div class=\"col-sm-3\">                        <input required type=\"text\" class=\"form-control\" data-bind=\"value: mainValue, valueUpdate: \'afterkeydown\'\" />                    </div>                </div>                <div class=\"form-group\" data-bind=\"if: additionalAwsInfoRequired, visible: additionalAwsInfoRequired\">                    <label for=\"awsAccessKey\" class=\"col-sm-3 control-label\">AWS Access Key:</label>                    <div class=\"col-sm-3\">                        <input required id=\"awsAccessKey\" type=\"text\" class=\"form-control\" data-bind=\"value: awsAccessKey, valueUpdate: \'afterkeydown\'\" />                    </div>                </div>                <div class=\"form-group\" data-bind=\"if: additionalAwsInfoRequired, visible: additionalAwsInfoRequired\">                    <label for=\"awsSecretKey\" class=\"col-sm-3 control-label\">AWS Secret Key:</label>                    <div class=\"col-sm-3\">                        <input required id=\"awsSecretKey\" type=\"password\" autocomplete=\"off\" class=\"form-control\" data-bind=\"value: awsSecretKey, valueUpdate: \'afterkeydown\'\" />                    </div>                </div>                <div class=\"form-group\" data-bind=\"if: additionalAwsInfoRequired, visible: additionalAwsInfoRequired\">                    <label for=\"awsRegionEndpoint\" class=\"col-sm-3 control-label\">AWS Region Endpoint:</label>                    <div class=\"col-sm-3\">                        <select required id=\"awsRegionEndpoint\" class=\"form-control\" data-bind=\"options: availableAwsRegionEndpoints, optionsText: \'label\', optionsValue: \'value\', optionsCaption: \'\', value: awsRegionEndpoint\"></select>                    </div>                </div>                <div class=\"form-group\" data-bind=\"if: additionalAzureInfoRequired, visible: additionalAzureInfoRequired\">                    <label for=\"azureStorageAccount\" class=\"col-sm-3 control-label\">Azure Storage Account:</label>                    <div class=\"col-sm-3\">                        <input required id=\"azureStorageAccount\" type=\"text\" class=\"form-control\" data-bind=\"value: azureStorageAccount, valueUpdate: \'afterkeydown\'\" />                    </div>                </div>                <div class=\"form-group\" data-bind=\"if: additionalAzureInfoRequired, visible: additionalAzureInfoRequired\">                    <label for=\"azureStorageKey\" class=\"col-sm-3 control-label\">Azure Storage Key:</label>                    <div class=\"col-sm-3\">                        <input required id=\"azureStorageKey\" type=\"password\" autocomplete=\"off\" class=\"form-control\" data-bind=\"value: azureStorageKey, valueUpdate: \'afterkeydown\'\" />                    </div>                </div>                <div class=\"form-group\">                    <label for=\"incrementalBackupInterval\" class=\"col-sm-3 control-label\">Incremental Backup Interval:</label>                    <div class=\"col-sm-1\">                        <input id=\"incrementalBackupInterval\" required type=\"number\" class=\"form-control\" min=\"0\" data-bind=\"numericValue: incrementalBackupInterval, valueUpdate: \'afterkeydown\'\" />                    </div>                    <div class=\"col-sm-2\">                        <select class=\"form-control\" data-bind=\"options: availableIntervalUnits, value: incrementalBackupIntervalUnit\"></select>                    </div>                </div>                <div class=\"form-group\">                    <label for=\"fullBackupInterval\" class=\"col-sm-3 control-label\">Full Backup Interval:</label>                    <div class=\"col-sm-1\">                        <input id=\"fullBackupInterval\" required type=\"number\" class=\"form-control\" min=\"0\" data-bind=\"numericValue: fullBackupInterval, valueUpdate: \'afterkeydown\'\" />                    </div>                    <div class=\"col-sm-2\">                        <select class=\"form-control\" data-bind=\"options: availableIntervalUnits, value: fullBackupIntervalUnit\"></select>                    </div>                </div>            </div>        </form>    </div></section>'; } )
define("text!views/query.html", [], function () { return '<div id=\"queryContainer\" class=\"no-outline\" tabindex=\"0\">    <ul class=\"breadcrumb\">        <li>            <h3>                <a href=\"#databases\">                    Databases                </a>            </h3>        </li>        <li data-bind=\"with: activeDatabase\">            <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>        </li>        <li>            <a data-bind=\"attr: { href: appUrls.indexes }\">Indexes</a>        </li>        <li>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                    <span data-bind=\"text: selectedIndexLabel\"></span>                    <span class=\"caret\"></span>                </button>                <ul class=\"dropdown-menu scrollable-menu\" role=\"menu\">                    <!-- ko foreach: indexesExceptCurrent -->                    <li data-bind=\"click: $root.setSelectedIndex.bind($root, $data.name)\"><a href=\"#\" data-bind=\"text: $data.name\"></a></li>                    <!-- /ko -->                    <li class=\"divider\" data-bind=\"visible: collectionNames.length\"></li>                    <!-- ko foreach: collectionNamesExceptCurrent -->                    <li data-bind=\"click: $root.setSelectedIndex.bind($root, \'dynamic/\' + $data)\">                        <a href=\"#\">                            <span data-bind=\"text: \'dynamic/\' + $data\"></span>                        </a>                    </li>                    <!-- /ko -->                    <li class=\"divider\"></li>                    <li data-bind=\"click: $root.setSelectedIndex.bind($root, \'dynamic\')\">                        <a href=\"#\">                            <span>dynamic/All Documents</span>                        </a>                    </li>                </ul>            </div>        </li>        <li class=\"active\">Query</li>    </ul>    <div class=\"btn-toolbar\" role=\"toolbar\">        <div class=\"btn-group\">            <button class=\"btn btn-primary\" title=\"Run the query (Alt+R)\" data-bind=\"enable: hasSelectedIndex, click: runQuery\"><i class=\"fa fa-play\"></i></button>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" title=\"Add a transformer or sorting option to the query (Alt+A)\" accesskey=\"A\" data-trigger=\"hover\" data-placement=\"bottom\" data-bind=\"enable: hasSelectedIndex\">                    <i class=\"fa fa-plus\"></i> Add <span class=\"caret\"></span>                </button>                <ul class=\"dropdown-menu\" role=\"menu\">                    <li data-bind=\"visible: selectedIndex() !== \'All Documents\'\"><a href=\"#\" data-bind=\"click: addSortBy\" accesskey=\"O\" title=\"Add a field to sort by (Alt+O)\">Sort By</a></li>                    <li data-bind=\"visible: !transformer()\"><a href=\"#\" data-bind=\"click: addTransformer\" accesskey=\"T\" title=\"Add a transformer to transform the results of the query (Alt+T)\" data-placement=\"right\">Transformer</a></li>                </ul>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" title=\"Configure advanced query options\" data-bind=\"enable: hasSelectedIndex\">                    <i class=\"fa fa-cog\"></i> <span class=\"caret\"></span>                </button>                <ul class=\"dropdown-menu\" role=\"menu\">                    <li style=\"padding-left: 20px;\">                        <div class=\"btn-group\">                            <label class=\"btn btn-default\" data-bind=\"click: setOperatorOr, css: { active: isDefaultOperatorOr }\" title=\"Set the default operator to OR\">Or</label>                            <label class=\"btn btn-default\" data-bind=\"click: setOperatorAnd, css: { active: !isDefaultOperatorOr() }\" title=\"Set the default operator to AND\">And</label>                        </div>                    </li>                    <li><a href=\"#\"><label class=\"btn btn-default\" data-bind=\"click: toggleShowFields, css: { active: showFields }\" title=\"Show fields from matching index entries instead of matching documents\">Show Fields</label></a></li>                    <li><a href=\"#\"><label class=\"btn btn-default\" data-bind=\"click: toggleIndexEntries, css: { active: indexEntries }\" title=\"Show the raw index entries instead of matching documents\">Index Entries</label></a></li>                </ul>            </div>            <a class=\"btn btn-default\" data-bind=\"attr: { href: editIndexUrl }, enable: hasSelectedIndex\" title=\"Edit the index (F2)\"><i class=\"fa fa-pencil\"></i></a>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: selectColumns\" title=\"Choose columns...\">                <i class=\"fa fa-table\"></i>            </button>            <a href=\"#\" target=\"_blank\" data-bind=\"attr: { href: exportUrl }, visible: hasSelectedIndex\" class=\"btn btn-default\" title=\"Export CSV\" download>                <i class=\"fa fa-file-excel-o\"></i>            </a>            <a class=\"btn btn-default\" data-bind=\"attr: { href: visualizerUrl }, visible: isIndexMapReduce\" title=\"Map-Reduce visualizer\">                <i class=\"fa fa-sitemap\"></i>            </a>            <a class=\"btn btn-default\" data-bind=\"attr: { href: indexPerfStatsUrl }\" title=\"Indexing performance statistics\">                <i class=\"fa fa-line-chart\" />            </a>        </div>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" data-bind=\"visible: recentQueries().length > 0\">                Recent Queries <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: recentQueries\">                <li>                    <a href=\"#\" data-bind=\"click: $root.runRecentQuery.bind($root, $data)\">                        <span data-bind=\"text: IndexName === \'dynamic\' ? \'All Documents\' : IndexName\"></span>                        <span data-bind=\"visible: QueryText\">                            <span class=\"text-muted\">|</span>                            <span data-bind=\"text: QueryText\"></span>                        </span>                        <span data-bind=\"visible: Sorts.length, with: Sorts\">                            <span class=\"text-muted\">|</span>                            <span data-bind=\"text: \'sort by \' + $root.getRecentQuerySortText($data)\"></span>                        </span>                        <span data-bind=\"with: TransformerQuery\">                            <span class=\"text-muted\">|</span>                            <span data-bind=\"text: \'transform by \' + transformerName + \' \' + $root.getStoredQueryTransformerParameters(queryParams)\"></span>                        </span>                        <span data-bind=\"visible: UseAndOperator\">                            <span class=\"text-muted\">|</span>                            <span>AND operator</span>                        </span>                        <span data-bind=\"visible: ShowFields\">                            <span class=\"text-muted\">|</span>                            <span>show fields</span>                        </span>                        <span data-bind=\"visible: IndexEntries\">                            <span class=\"text-muted\">|</span>                            <span>index entries</span>                        </span>                    </a>                </li>            </ul>        </div>        <div class=\"btn-group\">            <a class=\"btn btn-default\" data-bind=\"attr: { href: termsUrl }, enable: hasSelectedIndex\" title=\"Navigate to index terms\">Terms</a>            <a class=\"btn btn-default\" data-bind=\"enable: !!queryStats(), click: openQueryStats\" title=\"Show Query Stats In Dialog\">Query Stats</a>        </div>        <div class=\"btn-group\" title=\"Delete all documents matching the query (map index only)\">            <button class=\" btn btn-danger\" data-bind=\"enable: hasSelectedIndex && isIndexMapReduce() == false, click: deleteDocsMatchingQuery\">                <i class=\"fa fa-trash-o\"></i>            </button>        </div>    </div>    <br />    <form class=\"form-horizontal\" role=\"form\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">        <div class=\"form-group\">            <label id=\"indexQueryLabelContainer\" class=\"col-sm-1 control-label\" data-placement=\"auto right\" data-original-title=\"Index Query\" data-trigger=\"hover\">                <span id=\"indexQueryLabel\" class=\"help-cursor\">                    Query                    <i class=\"fa fa-info-circle text-info\"></i>                </span>                <a target=\"_blank\" class=\"control-label-additional-link\" title=\"External link: Lucene query syntax documentation\" href=\"http://lucene.apache.org/core/2_9_4/queryparsersyntax.html\"><!--<i class=\"fa fa-question-circle text-muted\"></i>-->Lucene Docs</a>            </label>            <div class=\"col-md-11\">                <div class=\"row\">                    <div class=\"col-md-11\">                        <pre id=\"queryEditor\" class=\"form-control editor\" data-bind=\"aceEditor: { code: queryText, allowResize: true, minHeight: 60, maxHeight: 200, completer:queryCompleter, typeName:\'query\', lang:\'ace/mode/lucene\', completerHostObject:$root}, valueUpdate: \'afterkeydown\'\"></pre>                    </div>                </div>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: sortBys().length > 0\">            <label class=\"col-sm-1 control-label\">                Sort By            </label>            <div class=\"col-md-9\" data-bind=\"foreach: sortBys\">                <div class=\"col-xs-12 col-sm-9 col-md-6 col-lg-5\" style=\"padding-left: 0\">                    <div class=\"panel panel-default\">                        <div class=\"panel-body\">                            <div class=\"col-md-11\">                                <div class=\"btn-group\">                                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                        <span data-bind=\"text: fieldNameOrDefault\"></span> <span class=\"caret\"></span>                                    </button>                                    <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: $root.indexFields\">                                        <li><a href=\"#\" data-bind=\"text: $data, click: $parent.fieldName.bind($data)\"></a></li>                                    </ul>                                </div>                                <div class=\"btn-group\">                                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                        <span data-bind=\"visible: isAscending() && !isRange()\">Ascending</span>                                        <span data-bind=\"visible: !isAscending() && !isRange()\">Descending</span>                                        <span data-bind=\"visible: isAscending() && isRange()\">Range Ascending</span>                                        <span data-bind=\"visible: !isAscending() && isRange()\">Range Descending</span>                                        <span class=\"caret\"></span>                                    </button>                                    <ul class=\"dropdown-menu\" role=\"menu\">                                        <li><a href=\"#\" data-bind=\"click: function() { $data.isAscending(true); $data.isRange(false); }\">Ascending</a></li>                                        <li><a href=\"#\" data-bind=\"click: function() { $data.isAscending(false); $data.isRange(false); }\">Descending</a></li>                                        <li><a href=\"#\" data-bind=\"click: function() { $data.isAscending(true); $data.isRange(true); }\">Range Ascending</a></li>                                        <li><a href=\"#\" data-bind=\"click: function() { $data.isAscending(false); $data.isRange(false); }\">Range Descending</a></li>                                    </ul>                                </div>                            </div>                            <div>                                <button type=\"button\" class=\"close\" data-bind=\"click: $root.removeSortBy.bind($root, $data)\" title=\"Remove this sort from the query\">                                    <i class=\"fa fa-times\"></i>                                </button>                            </div>                            <div class=\"clearfix\"></div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: transformer() != null\">            <label id=\"indexQueryLabelContainer\" style=\"overflow-x: hidden; text-overflow: ellipsis;\" class=\"col-md-1 control-label\">                <span>Transformer</span>            </label>            <div class=\"col-xs-12 col-sm-9 col-md-6 col-lg-3\">                <div class=\"panel panel-default\">                    <div class=\"panel-heading\">                        <div class=\"btn-group col-md-11\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"text: transformer() && transformer().name() ? transformer().name() : \'Select a transformer\'\"></span> <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: $root.allTransformers\">                                <li><a href=\"#\" data-bind=\"text: name, click: $root.selectTransformer.bind($root, $data)\"></a></li>                            </ul>                        </div>                        <div>                            <button type=\"button\" class=\"close\" data-bind=\"click: $root.removeTransformer.bind($root)\" title=\"Remove this transformer from the query\">                                <i class=\"fa fa-times\"></i>                            </button>                        </div>                        <div class=\"clearfix\"></div>                    </div>                    <!-- ko if: typeof transformer() !== \"undefined\" && transformer() != null && transformer().extractInputs().length > 0 -->                    <div class=\"panel-body\">                        <div class=\"btn-group col-md-12\">                            <div class=\"clearfix\"></div>                            <div id=\"transformerParams\" data-bind=\"foreach: transformer().extractInputs()\">                                <div class=\"form-group row\">                                    <label data-bind=\"text: \'Parameter: \'+$data.name\" class=\"control-label\"></label>                                    <input type=\"text\" class=\"form-control transformer_param_flag\" data-bind=\"attr: { name: $data.name, required: $data.hasDefault ? null : \'\' }, event: { change: $root.runQuery.bind($root) }\" />                                </div>                            </div>                        </div>                    </div>                    <!-- /ko -->                </div>            </div>        </div>        <!--<ul class=\"list-group\" data-bind=\"foreach: relatedDocumentHrefs\">                <li class=\"list-group-item\"><a data-bind=\"text:$data.id, attr:{href:$data.href}\"></a></li>            </ul>-->        <div class=\"form-group\">            <div class=\"form-group\" data-bind=\"if:(!!$root.queryStats() && $root.queryStats().IsStale == true)\">                <span class=\"col-md-offset-1 text-danger\">Index Is Stale, possibly not all results presented</span>            </div>        </div>        <div class=\"form-group\">            <div class=\"form-group col-md-12\">                <label id=\"indexQueryLabelContainer\" class=\"control-label col-md-1\">                    Results                </label>                <div class=\"col-md-11 query-results\">                    <div id=\"queryResultsPanel\" class=\"panel panel-default\">                        <div class=\"panel-body\" data-bind=\"visible:isLoading() === true\">                            <span>Loading, please wait <i class=\"fa fa-spinner fa-spin fa-2x\"></i></span>                        </div>                        <div class=\"panel-body\">                            <div class=\"suggestion-box\" data-bind=\"visible: $root.showSuggestions, foreach: $root.indexSuggestions\">                                <div>Did you mean <a data-bind=\"text: Suggestion, click: $root.applySuggestion.bind($root, $data)\" href=\"#\"></a> for the field <i data-bind=\"text: FieldName\"></i>?</div>                            </div>                            <div id=\"queryResultsGrid\" data-bind=\"widget: { kind: \'virtualTable\', customColumns: currentColumnsParams, itemsSource: queryResults, selectedIndices: selectedResultIndices, gridSelector: \'#queryResultsGrid\', useContextMenu: true, showIds: true, showCheckboxes: true, maxHeight: \'450px\', isIndexMapReduce:isIndexMapReduce, collections: collections, contextMenuOptions: [\'copyitems\', \'CopyIDs\' , \'Delete\', \'EditItem\' ], noResultsMessage: \'No results were found. For NotAnalyzed fields you may wish to search with [[term]].\'}\"></div>                        </div>                    </div>                </div>            </div>        </div>    </form></div>'; } )
define("text!views/queryShell.html", [], function () { return '<section data-bind=\"router: { cacheViews: false }\"></section>'; } )
define("text!views/queryStatsDialog.html", [], function () { return '<div class=\"messageBox query-stats\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Query Stats</h4>    </div>    <div class=\"modal-body\" data-bind=\"with: queryStats\">                <div class=\"row\">            <div>                <div class=\"form-group\">                    <div class=\"row\">                        <strong class=\"col-sm-3\">Total Results:</strong>                        <span class=\"col-sm-9\" data-bind=\"text: TotalResults\"></span>                    </div>                    <div class=\"row\">                        <strong class=\"col-sm-3\">Status</strong>                        <span class=\"col-sm-9\" data-bind=\"text: IsStale === true ? \'Stale\' : \'Up to date\'\"></span>                    </div>                    <div class=\"row\">                        <strong class=\"col-sm-3\">Duration:</strong>                        <span class=\"col-sm-9\" data-bind=\"text: ((typeof (DurationMilliseconds) !== \'undefined\') ? DurationMilliseconds : \'??? \') + \'ms\'\"></span>                    </div>                    <div class=\"row\">                        <strong class=\"col-sm-3\">Index:</strong>                        <span class=\"col-sm-9\">                            <a target=\'_blank\' data-bind=\"text: IndexName, attr: { href: $root.selectedIndexEditUrl}\">Click Here</a>                        </span>                    </div>                    <div class=\"row\" data-bind=\"visible:$root.didDynamicChangeIndex === true\">                        <strong class=\"col-sm-3\">                            Index Explain:                        </strong>                        <span class=\"col-sm-9\">                            <a target=\'_blank\' data-bind=\"attr: { href: $root.rawJsonUrl  + \'&explain=true\'}\">Click Here</a>                        </span>                    </div>                    <div class=\"row\">                        <strong class=\"col-sm-3\">ETag:</strong>                        <span class=\"col-sm-9\" data-bind=\"text: ResultEtag\"></span>                    </div>                </div>                           </div>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: cancel\">OK</button>    </div></div>'; } )
define("text!views/quotas.html", [], function () { return '<section>    <form class=\"quotas-settings-form form-horizontal\" role=\"form\" data-bind=\"submit: $root.saveChanges.bind($root)\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <button type=\"submit\" class=\"btn btn-primary\" title=\"Save Changes(Alt+S)\" data-bind=\"enable: $root.isSaveEnabled()\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>            </div>            <div class=\"panel-body\">                <div class=\"form-group\">                    <div class=\"col-md-4 control-label\">Maximum size:</div>                    <div class=\"col-md-8\">                        <div class=\"input-group\">                            <input required type=\"number\" class=\"form-control\" data-bind=\"numericValue: maximumSize,valueUpdate: \'afterkeydown\'\" />                            <span class=\"input-group-addon\">MB</span>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <div class=\"col-md-4 control-label\">Warning limit threshold:</div>                    <div class=\"col-md-8\">                        <div class=\"input-group\">                            <input required type=\"number\" class=\"form-control\" data-bind=\"numericValue: warningLimitThreshold, valueUpdate: \'afterkeydown\'\" />                            <span class=\"input-group-addon\">MB</span>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <div class=\"col-md-4 control-label\">Maximum number of docs:</div>                    <div class=\"col-md-8\">                        <div class=\"input-group\">                            <input required type=\"number\" class=\"form-control\" data-bind=\"numericValue: maxNumberOfDocs,valueUpdate: \'afterkeydown\'\" />                            <span class=\"input-group-addon\">docs</span>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <div class=\"col-md-4 control-label\">Warning threshold for docs:</div>                    <div class=\"col-md-8\">                        <div class=\"input-group\">                            <input required type=\"number\" class=\"form-control\" data-bind=\"numericValue: warningThresholdForDocs,valueUpdate: \'afterkeydown\'\" />                            <span class=\"input-group-addon\">docs</span>                        </div>                    </div>                </div>            </div>        </div>    </form></section>'; } )
define("text!views/recentErrors.html", [], function () { return '<div id=\"recentErrorsDialog\" class=\"messageBox\" tabindex=\"-1\" data-bind=\"style: {width: width()+\'px\', height: height()+\'px\', \'marginLeft\': left()+\'px\', \'marginTop\': top()+\'px\'}\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Recent Errors</h4>    </div>    <div class=\"modal-body\" data-bind=\"style: { height: bodyHeight() + \'px\' }\">        <div class=\"panel-group error-details-accordion\" data-bind=\"foreach: errors\">            <div class=\"panel\" data-bind=\"css: { \'panel-danger\': $data.type == $root.getDangerAlertType(), \'panel-warning\': $data.type == $root.getWarningAlertType() }\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title\">                        <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#errorDetailsCollapse\' + $index() }\">                            <strong data-bind=\"text: title\"></strong>                            <span data-bind=\"visible: errorMessage, text: errorMessage, attr: { title: errorMessage }\"></span>                        </a>                    </h4>                </div>                <div class=\"panel-collapse collapse\" data-bind=\"attr: { id: \'errorDetailsCollapse\' + $index() }\">                    <div class=\"panel-body\">                        <pre class=\"error-details\" data-bind=\"text: $root.getErrorDetails($data)\"></pre>                        <pre class=\"http-status\" data-bind=\"visible: httpStatusText, text: httpStatusText\"></pre>                    </div>                </div>            </div>        </div>    </div>    <div class=\"modal-footer\">        <a class=\"pull-left\" href=\"http://issues.hibernatingrhinos.com/issues/RavenDB?#newissue=yes\" target=\"_blank\">Report a defect</a>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: clear\">Clear</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: close\">Close</button>        <span class=\"dialogResizer\"></span>    </div></div>'; } )
define("text!views/replications.html", [], function () { return '<form data-bind=\"submit: $root.saveChanges\" class=\" form-horizontal\" role=\"form\">    <div class=\"panel-group\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSetupSaveEnabled() || isConfigSaveEnabled()\" title=\"Save changes (Alt+S)\" accesskey=\"S\">                    <i class=\"fa fa-save\"></i>                </button>                <span style=\"margin-left: 5px;\">                    Replication configuration                </span>            </div>            <div class=\"panel-body\">                <div class=\"form-group\">                    <label for=\"conflictResolutionSelector\" class=\"col-sm-2 control-label\">Client failover behaviour</label>                    <div class=\"col-sm-10\">                        <div class=\"btn-group\" data-bind=\"with: replicationsSetup\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: clientFailoverBehaviour() == null\">Let client decide</span>                                <span data-bind=\"visible: clientFailoverBehaviour() === \'AllowReadsFromSecondaries\'\">Allow reads from secondaries</span>                                <span data-bind=\"visible: clientFailoverBehaviour() === \'AllowReadsFromSecondariesAndWritesToSecondaries\'\">Allow reads from secondaries and writes to secondaries</span>                                <span data-bind=\"visible: clientFailoverBehaviour() === \'FailImmediately\'\">Fail immediately</span>                                <span data-bind=\"visible: clientFailoverBehaviour() === \'ReadFromAllServers\'\">Read from all servers</span>                                <span data-bind=\"visible: $root.readFromAllAllowWriteToSecondaries\">Read from all servers and allow write to secondaries</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: clientFailoverBehaviour.bind(clientFailoverBehaviour, null)\">Let client decide</a></li>                                <li class=\"divider\"></li>                                <li><a href=\"#\" data-bind=\"click: clientFailoverBehaviour.bind(clientFailoverBehaviour, \'AllowReadsFromSecondaries\')\">Allow reads from secondaries</a></li>                                <li><a href=\"#\" data-bind=\"click: clientFailoverBehaviour.bind(clientFailoverBehaviour, \'AllowReadsFromSecondariesAndWritesToSecondaries\')\">Allow reads from secondaries and writes to secondaries</a></li>                                <li><a href=\"#\" data-bind=\"click: clientFailoverBehaviour.bind(clientFailoverBehaviour, \'FailImmediately\')\">Fail immediately</a></li>                                <li><a href=\"#\" data-bind=\"click: clientFailoverBehaviour.bind(clientFailoverBehaviour, \'ReadFromAllServers\')\">Read from all servers</a></li>                                <li><a href=\"#\" data-bind=\"click: clientFailoverBehaviour.bind(clientFailoverBehaviour, \'AllowReadsFromSecondariesAndWritesToSecondaries,ReadFromAllServers\')\">Read from all servers and allow write to secondaries</a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label for=\"conflictResolutionSelector\" class=\"col-sm-2 control-label\">Conflict resolution</label>                    <div class=\"col-sm-10\">                        <div class=\"btn-group\" data-bind=\"with: replicationConfig\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: documentConflictResolution() === \'None\'\">None</span>                                <span data-bind=\"visible: documentConflictResolution() === \'ResolveToLocal\'\">Resolve to <strong>local</strong></span>                                <span data-bind=\"visible: documentConflictResolution() === \'ResolveToRemote\'\">Resolve to <strong>remote</strong></span>                                <span data-bind=\"visible: documentConflictResolution() === \'ResolveToLatest\'\">Resolve to <strong>latest</strong></span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: documentConflictResolution.bind(documentConflictResolution, \'None\')\">None</a></li>                                <li class=\"divider\"></li>                                <li><a href=\"#\" data-bind=\"click: documentConflictResolution.bind(documentConflictResolution, \'ResolveToLocal\')\">Resolve to <strong>local</strong></a></li>                                <li><a href=\"#\" data-bind=\"click: documentConflictResolution.bind(documentConflictResolution, \'ResolveToRemote\')\">Resolve to <strong>remote</strong></a></li>                                <li><a href=\"#\" data-bind=\"click: documentConflictResolution.bind(documentConflictResolution, \'ResolveToLatest\')\">Resolve to <strong>latest</strong></a></li>                            </ul>                        </div>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-sm-2 control-label\">Replication destinations</label>                    <div class=\"col-sm-10\">                        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: createNewDestination\" title=\"Add a replication destination (Alt+N)\" accesskey=\"N\">                            <i class=\"fa fa-plus\"></i> Add destination                        </button>                        <br />                        <br />                        <div data-bind=\"with: replicationsSetup\">                            <p data-bind=\"visible: destinations().length === 0\">                                <i class=\"fa fa-warning text-warning\"></i> <span class=\"text-muted\">You haven\'t created any replication destinations.</span>                            </p>                            <div data-bind=\"foreach: destinations\">                                <div class=\"panel replication-destination-card\" data-bind=\"css: { \'panel-warning\': disabled(), \'panel-default\': !disabled() }\">                                    <div class=\"panel-heading\">                                        <h3 class=\"panel-title\">                                            <span data-bind=\"text: name\"></span>                                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\"><i class=\"fa fa-times\" data-bind=\"click: $root.removeDestination.bind($root)\" title=\"Remove this replication destination\"></i></button>                                        </h3>                                    </div>                                    <div class=\"panel-body\">                                        <div class=\"form-group\">                                            <div class=\"col-sm-offset-4 col-sm-7\">                                                <div class=\"btn-group\">                                                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                        <span data-bind=\"visible: !disabled()\">Enabled</span>                                                        <span data-bind=\"visible: disabled\">Disabled</span>                                                        <span class=\"caret\"></span>                                                    </button>                                                    <ul class=\"dropdown-menu\" role=\"menu\">                                                        <li><a href=\"#\" data-bind=\"click: enable\">Enabled</a></li>                                                        <li><a href=\"#\" data-bind=\"click: disable\">Disabled</a></li>                                                    </ul>                                                </div>                                            </div>                                        </div>                                        <div class=\"form-group\">                                            <label class=\"col-sm-4 control-label\">Url</label>                                            <div class=\"col-sm-7\">                                                <input required type=\"url\" class=\"form-control\" title=\"The address of the server to replicate to\" data-bind=\"value: url, valueUpdate: \'afterkeydown\'\" />                                            </div>                                        </div>                                        <div class=\"form-group\">                                            <label class=\"col-sm-4 control-label\">Database</label>                                            <div class=\"col-sm-7\">                                                <input required type=\"text\" class=\"form-control\" title=\"The name of the database on the destination server to replicate to\" data-bind=\"value: database, valueUpdate: \'afterkeydown\'\" />                                            </div>                                        </div>                                        <div class=\"form-group\">                                            <label class=\"col-sm-4 control-label\">Credentials</label>                                            <div class=\"col-sm-7\">                                                <div class=\"btn-group\">                                                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                        <span data-bind=\"visible: !isUserCredentials() && !isApiKeyCredentials()\">None</span>                                                        <span data-bind=\"visible: isUserCredentials\">User</span>                                                        <span data-bind=\"visible: isApiKeyCredentials\">API key</span>                                                        <span class=\"caret\"></span>                                                    </button>                                                    <ul class=\"dropdown-menu\" role=\"menu\">                                                        <li><a href=\"#\" data-bind=\"click: useNoCredentials\">None</a></li>                                                        <li class=\"divider\"></li>                                                        <li><a href=\"#\" data-bind=\"click: useUserCredentials\">User</a></li>                                                        <li><a href=\"#\" data-bind=\"click: useApiKeyCredentials\">API key</a></li>                                                    </ul>                                                </div>                                            </div>                                        </div>                                        <div data-bind=\"if: isUserCredentials, visible: isUserCredentials\">                                            <div class=\"form-group\">                                                <label class=\"col-sm-4 control-label\">User Name</label>                                                <div class=\"col-sm-7\">                                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: username, valueUpdate: \'afterkeydown\'\" />                                                </div>                                            </div>                                            <div class=\"form-group\">                                                <label class=\"col-sm-4 control-label\">Password</label>                                                <div class=\"col-sm-7\">                                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: password, valueUpdate: \'afterkeydown\'\" />                                                </div>                                            </div>                                            <div class=\"form-group\">                                                <label class=\"col-sm-4 control-label\">Domain</label>                                                <div class=\"col-sm-7\">                                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: domain, valueUpdate: \'afterkeydown\'\" />                                                </div>                                            </div>                                        </div>                                        <div data-bind=\"if: isApiKeyCredentials, visible: isApiKeyCredentials\">                                            <div class=\"form-group\">                                                <label class=\"col-sm-4 control-label\">API Key</label>                                                <div class=\"col-sm-7\">                                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: apiKey, valueUpdate: \'afterkeydown\'\" />                                                </div>                                            </div>                                        </div>                                        <a data-bind=\"click: toggleIsAdvancedShows\" class=\"advanced-replication-settings\">                                            Advanced Options                                        </a>                                        <div data-bind=\"visible: false\">                                            <div class=\"form-group\">                                                <label class=\"col-sm-4 control-label\">Client Visible Url</label>                                                <div class=\"col-sm-7\">                                                    <input type=\"text\" class=\"form-control\" data-bind=\"value: clientVisibleUrl, valueUpdate: \'afterkeydown\'\" />                                                </div>                                            </div>                                            <div class=\"form-group\">                                                <label class=\"col-sm-4 control-label\">Failover</label>                                                <div class=\"col-sm-7\">                                                    <div class=\"btn-group\">                                                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                            <span data-bind=\"visible: !ignoredClient()\">Include</span>                                                            <span data-bind=\"visible: ignoredClient\">Skip</span>                                                            <span class=\"caret\"></span>                                                        </button>                                                        <ul class=\"dropdown-menu\" role=\"menu\">                                                            <li><a href=\"#\" data-bind=\"click: includeFailover\">Include</a></li>                                                            <li><a href=\"#\" data-bind=\"click: skipFailover\">Skip</a></li>                                                        </ul>                                                    </div>                                                </div>                                            </div>                                            <div class=\"form-group\">                                                <label class=\"col-sm-4 control-label\">Transitive Replication</label>                                                <div class=\"col-sm-7\">                                                    <div class=\"btn-group\">                                                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                            <span data-bind=\"visible: transitiveReplicationBehavior() === \'None\'\">Changed only</span>                                                            <span data-bind=\"visible: transitiveReplicationBehavior() === \'Replicate\'\">Changed and replicated</span>                                                            <span class=\"caret\"></span>                                                        </button>                                                        <ul class=\"dropdown-menu\" role=\"menu\">                                                            <li><a href=\"#\" data-bind=\"click: transitiveReplicationBehavior.bind(transitiveReplicationBehavior, \'None\')\">Changed only</a></li>                                                            <li><a href=\"#\" data-bind=\"click: transitiveReplicationBehavior.bind(transitiveReplicationBehavior, \'Replicate\')\">Changed and replicated</a></li>                                                        </ul>                                                    </div>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                                    <button data-bind=\"click: saveServerPrefixForHiLo, enable: isServerPrefixForHiLoSaveEnabled\" type=\"submit\" class=\"btn btn-primary\" title=\"Save changes\">                        <i class=\"fa fa-save\"></i>                    </button>                <span style=\"margin-left: 5px;\">                    Server HiLo prefix                </span>            </div>                        <div class=\"panel-body\">                <div class=\"form-group\">                    <label for=\"conflictResolutionSelector\" class=\"col-sm-2 control-label\">                        Prefix                        <a class=\"control-label-additional-link\" href=\"http://ravendb.net/docs/server/scaling-out/replication/client-integration\" target=\"_blank\">                            Prefix docs                        </a>                    </label>                    <div class=\"col-sm-3\">                        <input name=\"prefix\" class=\"form-control\" type=\"text\" data-bind=\"value: prefixForHilo, valueUpdate: \'afterkeydown\'\">                    </div>                </div>            </div>        </div>    </div>    <p class=\"help-block pull-right\">        <a class=\"text-muted\" href=\"http://ravendb.net/docs/studio/bundles/replication\">            <i class=\"fa fa-question-circle\"></i> Replication documentation        </a>    </p>    <div class=\"clearfix\"></div></form>'; } )
define("text!views/replicationStats.html", [], function () { return '<style>    #replicationStatsContainer {        font: 11px sans-serif;    }    .axis path,    .axis line {        fill: none;        stroke: #000;        shape-rendering: crispEdges;    }    .bar {        fill: steelblue;    }    rect.outputCounts, rect.inputCounts {        fill-opacity: 0.8;        cursor: pointer;    }    rect.outputCounts:hover, rect.inputCounts:hover {        fill-opacity: 1;    }    .legend rect {        cursor: pointer;    }    .legend_bg {        fill: white;        fill-opacity: 0.8;        stroke: #ccc;    }    .legendHidden {        fill-opacity: 0.2;       }</style><section id=\"replicationTopologySection\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div class=\"page-header\" data-bind=\"visible: hasNoReplStatsAvailable\">        <h3><i class=\"fa fa-info-circle text-info\"></i> No replication stats available. <small>Either this database isn\'t <a target=\"_blank\" href=\"http://ravendb.net/docs/server/scaling-out/replication\">setup for replication</a>, or replication hasn\'t occurred in some time.</small></h3>    </div>    <div data-bind=\"with: replStatsDoc\">        <div class=\"panel-group\" id=\"indexStatsAccordion\" data-bind=\"foreach: Stats, visible: Stats.length > 0\">            <div class=\"panel\" data-bind=\"css:{\'panel-default\':!isHotFailure, \'panel-danger\':isHotFailure}\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title\">                        <a data-toggle=\"collapse\" href=\"#collapseOne\" data-bind=\"text: Url, attr: { href: \'#statsIndexCollapse\' + $index() }\"></a>                    </h4>                </div>                <div class=\"panel-collapse collapse\" data-bind=\"attr: { id: \'statsIndexCollapse\' + $index() }\">                    <div class=\"panel-body\">                        <div class=\"form-horizontal\" role=\"form\">                            <div class=\"form-group\">                                <label class=\"col-md-2 control-label\">Last success</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: LastSuccessTimestampHumanized\"></p>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-md-2 control-label\">Last failure</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: LastFailureTimestampHumanized\"></p>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-md-2 control-label\">Last failure message</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: LastError\"></p>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-md-2 control-label\">Failures</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: FailureCount\"></p>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-md-2 control-label\">Last replicated ETag</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: LastReplicatedEtag\"></p>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-md-2 control-label\">Last checked ETag</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: LastEtagCheckedForReplication\"></p>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-md-2 control-label\">Last heartbeat</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: LastHeartbeatReceivedHumanized\"></p>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div>    <div>        <div class=\"panel-group\" data-bind=\"visible: hasReplicationEnabled\">            <div class=\"panel panel-default\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title pull-left\">                        <a data-toggle=\"collapse\" href=\"#replicationSetupCollapse\">Replication topology</a>                    </h4>                    <div class=\"pull-right btn-group\" data-bind=\"if: topology\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" title=\"Download topology\">                            <i class=\"fa fa-download\"></i>                        </button>                        <ul class=\"dropdown-menu\" role=\"menu\">                            <li data-bind=\"click: saveAsPng, visible: hasSaveAsPngSupport\"><a href=\"#\"><i class=\"fa fa-file-image-o\"></i> PNG</a></li>                            <li data-bind=\"click: saveAsSvg\"><a href=\"#\"><i class=\"fa fa-file-image-o\"></i> SVG</a></li>                            <li data-bind=\"click: saveAsJson\"><a href=\"#\"><i class=\"fa fa-file-text-o\"></i> JSON</a></li>                        </ul>                    </div>                    <div class=\"clearfix\"></div>                </div>                <div class=\"panel-collapse collapse\" id=\"replicationSetupCollapse\">                    <div class=\"panel-body\">                        <div class=\"row\" data-bind=\"with: topology\">                            <div class=\"col-xs-8\">                                <svg id=\"replicationTopology\"></svg>                            </div>                            <div class=\"col-xs-4\">                                <div data-bind=\"if: !$root.currentLink()\">                                    <div class=\"well\">                                        <i class=\"fa fa-info-circle text-info\"></i> Click on the <strong>arrows between nodes</strong> to display information about the replication relationship.                                        <br/>                                        <br/>                                        <div>                                            <dl>                                                <dt class=\"text-success\"><i class=\"fa fa-long-arrow-right fa-2x\"></i></dt>                                                <dd>Endpoints can communicate each other</dd>                                            </dl>                                            <dl>                                                <dt class=\"text-danger\"><i class=\"fa fa-long-arrow-right fa-2x\"></i></dt>                                                <dd>Error in communication</dd>                                            </dl>                                        </div>                                    </div>                                </div>                                <div data-bind=\"with: $root.currentLink\">                                    <div class=\"panel panel-default\">                                        <div class=\"panel-body\">                                            <table class=\"table table-striped table-condensed\" data-bind=\"with: toRightPayload\">                                                <thead>                                                    <tr>                                                        <th>Property</th>                                                        <th>Value</th>                                                    </tr>                                                </thead>                                                <tbody>                                                    <tr>                                                        <td>Source</td>                                                        <td data-bind=\"text: Source\"></td>                                                    </tr>                                                    <tr>                                                        <td>Destination</td>                                                        <td data-bind=\"text: Destination\"></td>                                                    </tr>                                                    <tr>                                                        <td>SendServerId</td>                                                        <td data-bind=\"text: SendServerId\"></td>                                                    </tr>                                                    <tr>                                                        <td>StoredServerId</td>                                                        <td data-bind=\"text: StoredServerId\"></td>                                                    </tr>                                                    <tr>                                                        <td>LastAttachmentEtag</td>                                                        <td data-bind=\"text: LastAttachmentEtag\"></td>                                                    </tr>                                                    <tr>                                                        <td>LastDocumentEtag</td>                                                        <td data-bind=\"text: LastDocumentEtag\"></td>                                                    </tr>                                                    <tr>                                                        <td>ReplicationBehavior</td>                                                        <td data-bind=\"text: ReplicationBehavior\"></td>                                                    </tr>                                                    <tr>                                                        <td>SourceToDestinationState</td>                                                        <td data-bind=\"text: SourceToDestinationState\"></td>                                                    </tr>                                                    <tr>                                                        <td>DestinationToSourceState</td>                                                        <td data-bind=\"text: DestinationToSourceState\"></td>                                                    </tr>                                                    <tr data-bind=\"if: Errors\">                                                        <td>Errors</td>                                                        <td>                                                            <ul data-bind=\"foreach: Errors\">                                                                <li data-bind=\"text: $data\"></li>                                                            </ul>                                                        </td>                                                    </tr>                                                </tbody>                                            </table>                                            <table class=\"table table-striped table-condensed\" data-bind=\"with: toLeftPayload\">                                                <thead>                                                    <tr>                                                        <th>Property</th>                                                        <th>Value</th>                                                    </tr>                                                </thead>                                                <tbody>                                                    <tr>                                                        <td>Source</td>                                                        <td data-bind=\"text: Source\"></td>                                                    </tr>                                                    <tr>                                                        <td>Destination</td>                                                        <td data-bind=\"text: Destination\"></td>                                                    </tr>                                                    <tr>                                                        <td>SendServerId</td>                                                        <td data-bind=\"text: SendServerId\"></td>                                                    </tr>                                                    <tr>                                                        <td>StoredServerId</td>                                                        <td data-bind=\"text: StoredServerId\"></td>                                                    </tr>                                                    <tr>                                                        <td>LastAttachmentEtag</td>                                                        <td data-bind=\"text: LastAttachmentEtag\"></td>                                                    </tr>                                                    <tr>                                                        <td>LastDocumentEtag</td>                                                        <td data-bind=\"text: LastDocumentEtag\"></td>                                                    </tr>                                                    <tr>                                                        <td>ReplicationBehavior</td>                                                        <td data-bind=\"text: ReplicationBehavior\"></td>                                                    </tr>                                                    <tr>                                                        <td>SourceToDestinationState</td>                                                        <td data-bind=\"text: SourceToDestinationState\"></td>                                                    </tr>                                                    <tr>                                                        <td>DestinationToSourceState</td>                                                        <td data-bind=\"text: DestinationToSourceState\"></td>                                                    </tr>                                                    <tr data-bind=\"if: Errors\">                                                        <td>Errors</td>                                                        <td>                                                            <ul data-bind=\"foreach: Errors\">                                                                <li data-bind=\"text: $data\"></li>                                                            </ul>                                                        </td>                                                    </tr>                                                </tbody>                                            </table>                                        </div>                                    </div>                                </div>                            </div>                        </div>                        <div data-bind=\"visible: topology() == null\">                            <button data-bind=\"click: fetchTopology\" class=\"btn btn-default\"><i class=\"fa fa-sitemap\"></i> Fetch topology</button>                            <p class=\"help-block\">                                <i class=\"fa fa-warning text-warning\"></i> This operation may be time consuming.                            </p>                            <div id=\"loadingIndicator\" data-bind=\"visible: showLoadingIndicator\" class=\"glyphicon\" style=\"width: 30px; height: 30px;\"><span class=\"fa fa-spinner fa-spin fa-2x\"></span></div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"panel-group\" data-bind=\"visible: hasReplicationEnabled\">            <div class=\"panel panel-default\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title pull-left\">                        <a data-bind=\"click: replicationStatToggle\" data-toggle=\"collapse\" href=\"#replicationPerfStatsCollapse\">Replication Performance Statistics</a>                    </h4>                    <div class=\"clearfix\"></div>                </div>                <div class=\"panel-collapse collapse\" id=\"replicationPerfStatsCollapse\">                    <div class=\"panel-body\">                        <div id=\"replicationStatsContainer\" style=\"width: 100%; height: 600px\" >                            <svg id=\"replicationStatsGraph\" transform=\"translate(0.5,0.5)\" preserveAspectRatio=\"xMinYMin slice\"></svg>                        </div>                    </div>                </div>            </div>        </div>    </div></section>'; } )
define("text!views/reporting.html", [], function () { return '<div id=\"reportingContainer\"><ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li>        <a data-bind=\"attr: { href: appUrls.reporting }\">Reporting</a>    </li>    <li>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                <span data-bind=\"text: selectedIndexLabel\"></span>                <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: indexNames\">                <li data-bind=\"click: $root.setSelectedIndex.bind($root, $data)\"><a href=\"#\" data-bind=\"text: $data\"></a></li>            </ul>        </div>    </li></ul><div class=\"btn-toolbar\" role=\"toolbar\">    <div class=\"btn-group\">        <button class=\"btn btn-primary\" title=\"Run the report (Alt+R)\" accesskey=\"R\" data-bind=\"enable: hasSelectedIndex, click: runReport\">            <i class=\"fa fa-play\"></i>        </button>    </div>    <div class=\"btn-group\">        <a class=\"btn btn-default\" title=\"Edit the index (F2)\" data-bind=\"attr: { href: editSelectedIndexUrl }\">            <i class=\" fa fa-pencil\"></i>        </a>    </div></div><br /><form class=\"form-horizontal\" role=\"form\">    <div class=\"form-group\">        <label class=\"col-sm-1 control-label\">Group By</label>        <div class=\"col-md-5\">            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" accesskey=\"G\" title=\"Group By (Alt+G)\">                    <span data-bind=\"text: selectedFieldLabel\"></span> <span class=\"caret\"></span>                </button>                <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: availableFields\">                    <li data-bind=\"click: $root.setSelectedField.bind($root, $data)\">                        <a href=\"#\" data-bind=\"text: $data\"></a>                    </li>                </ul>            </div>        </div>    </div>    <div class=\"form-group\">        <label class=\"col-sm-1 control-label\">            Values        </label>        <div class=\"col-md-6\">            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" title=\"Add a value (Alt+V)\" accesskey=\"V\">                    <i class=\"fa fa-plus\"></i> Add a value <span class=\"caret\"></span>                </button>                <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: availableFields\">                    <li data-bind=\"click: $root.addValue.bind($root, $data)\">                        <a href=\"#\" data-bind=\"text: $data\"></a>                    </li>                </ul>            </div>            <br />            <br />            <ul class=\"list-group col-md-6\" data-bind=\"foreach: addedValues, visible: addedValues().length > 0\">                <li class=\"list-group-item\">                    <strong data-bind=\"text: aggregationField\"></strong>                    <span class=\"text-muted\"> summarized by </span>                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                            <span data-bind=\"text: aggregationLabel\"></span> <span class=\"caret\"></span>                        </button>                        <ul class=\"dropdown-menu\" role=\"menu\">                            <li data-bind=\"click: setAggregationToCount\"><a href=\"#\">Count</a></li>                            <li data-bind=\"click: setAggregationToMin\"><a href=\"#\">Min</a></li>                            <li data-bind=\"click: setAggregationToMax\"><a href=\"#\">Max</a></li>                            <li data-bind=\"click: setAggregationToSum\"><a href=\"#\">Sum</a></li>                            <li data-bind=\"click: setAggregationToAverage\"><a href=\"#\">Average</a></li>                        </ul>                    </div>                    <button type=\"button\" class=\"close\" data-bind=\"click: $root.removeValue.bind($root, $data)\" aria-hidden=\"true\" title=\"Remove this value\">                        <i class=\"fa fa-times\"></i>                    </button>                </li>            </ul>        </div>        <div>        </div>    </div>    <div class=\"form-group\">        <label class=\"col-sm-1 control-label\">            <span id=\"filterQueryLabel\" class=\"help-cursor\">                Filter                <i class=\"fa fa-info-circle text-info\"></i>            </span>        </label>        <div class=\"col-md-5\">            <button class=\"btn btn-default\" title=\"Add a filter (Alt+F)\" data-bind=\"visible: !hasFilter(), click: hasFilter.bind(true)\">                <i class=\"fa fa-plus\"></i> Add a filter            </button>            <div data-bind=\"visible: hasFilter\">                <div class=\"row\">                    <div class=\"col-md-11\">                        <pre class=\"form-control\" style=\"height: 100px;\" data-bind=\"aceEditor: { code: filter }\"></pre>                    </div>                    <div class=\"col-md-1\">                        <button type=\"button\" class=\"close pull-left\" aria-hidden=\"true\" title=\"Remove the filter\" data-bind=\"click: hasFilter.bind(hasFilter, false)\"></button>                    </div>                </div>            </div>        </div>    </div>    <div id=\"reportGridGroup\" class=\"form-group\">        <label id=\"indexQueryLabelContainer\" class=\"col-sm-1 control-label\">            Results        </label>        <div class=\"col-md-11\">            <div class=\"panel panel-default\">                <div class=\"panel-heading\">                    <table class=\"table table-condensed\" style=\"margin-bottom: 0;\">                        <thead>                            <tr>                                <th>Total</th>                                <th>Duration</th>                            </tr>                        </thead>                        <tbody>                            <tr data-bind=\"visible: reportResults\">                                <td data-bind=\"text: totalQueryResults\"></td>                                <td data-bind=\"text: queryDuration\"></td>                            </tr>                        </tbody>                    </table>                </div>                <div class=\"panel-body\">                    <div id=\"reportResultsGrid\" data-bind=\"widget: { kind: \'virtualTable\', itemsSource: reportResults, gridSelector: \'#reportResultsGrid\', useContextMenu: false, showIds: false, showCheckboxes: false, maxHeight: \'300px\' }\"></div>                </div>            </div>        </div>    </div></form></div>'; } )
define("text!views/resetIndexConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Reset index?</h4>    </div>    <div class=\"modal-body\">        <p>You\'re resetting <strong data-bind=\"text: indexName\"></strong></p>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: resetIndex\">Yep, reset</button>    </div></div>'; } )
define("text!views/resources.html", [], function () { return '<section id=\"resources-page\">    <div class=\"text-center\" data-bind=\"visible: resources().length == 1\">        <h2 class=\"page-header text-info\">No databases and no filesystems are available. <small>Go ahead and <a href=\"#\" data-bind=\"click: newResource\">create a database or distributed file system</a> or <a href=\"#\" data-bind=\"click: navigateToAdminSettings\">manage your server</a> </small></h2>    </div>    <ul class=\"breadcrumb\" data-bind=\"visible: resources().length > 1\">        <li>            <h3>                <a href=\"#resources\">                    Databases &amp; File Systems                </a>            </h3>        </li>    </ul>        <!-- ko if: alerts().length > 0 -->        <!-- ko foreach: alerts -->        <div class=\"alert alert-warning alert-dismissable\" role=\"alert\">            <button data-bind=\"click: $root.dismissAlert.bind($root, uniqueKey)\" type=\"button\" class=\"close\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>            <a data-bind=\"attr: { href: $root.urlForAlert($data) }\"><span data-bind=\"text: title\"></span></a>        </div>        <!-- /ko -->    <!-- /ko -->	<div class=\"btn-toolbar\" data-bind=\"visible: resources().length > 1\">		<div class=\"btn-group\">			<button type=\"button\" class=\"btn btn-link\" data-bind=\"click: toggleSelectAll\" title=\"Select all or none\">				<img data-bind=\"attr: { src: hasAllResourcesSelected() ? \'content/images/checked.png\' : isAnyResourceSelected() ? \'content/images/some-checked.png\' : \'content/images/unchecked.png\' }\">			</button>		</div>		<div class=\"btn-group\">			<button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: newResource\" accesskey=\"n\" title=\"Create a new resource. (Alt+N)\">				<i class=\"fa fa-plus\"></i> New Resource			</button>		</div>		<div class=\"btn-group\">			<input type=\"text\" accesskey=\"/\" class=\"form-control\" placeholder=\"Search\" data-bind=\"value: searchText, valueUpdate: \'afterkeydown\', visible: resources().length > 0\" title=\"Search for a database or file system (Alt+/)\">		</div>		<div class=\"btn-group\">			<button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteCheckedResources, visible: isAnyResourceSelected\" title=\"Delete selected databases or file systems\"><i class=\"fa fa-trash-o\"></i></button>		</div>	    <div class=\"btn-group\">	        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleCheckedResources, visible: allCheckedResourcesDisabled() != null, attr: { title: allCheckedResourcesDisabled() ? \'Enable selected resources\' : \'Disable selected resources\' }\">	            <i class=\"fa\" data-bind=\"css: { \'fa-lock\': !allCheckedResourcesDisabled(), \'fa-unlock\': allCheckedResourcesDisabled }\"></i>	        </button>	    </div>	    <div class=\"btn-group\">            <select data-bind=\"value: visibleResources\" class=\"form-control\" id=\"storageEngine\">                <option value=\"\">Show all</option>                <option value=\"db\">Show databases</option>                <option value=\"fs\">Show file systems</option>            </select>	    </div>	    <div class=\"btn-group pull-right\">			<button class=\"btn btn-warning\" data-bind=\"click: navigateToAdminSettings\">Manage Your Server</button>		</div>	</div>    <div class=\"resources-container\" data-bind=\"foreach: resources\">        <!--ko if: $data.isDatabase() -->        <div class=\"resource\" data-bind=\"visible: isVisible, click: function () { $root.selectResource($data); return true; }, css: { selected: isSelected, disabled: disabled }\">            <div class=\"checkbox\" data-bind=\"click: function(){ checkboxToggle(); $root.optionsClicked(true); return true; }, style: { display: isChecked() ? \'block\' : \'\' }\">                <img data-bind=\"attr: { src: isChecked() ? \'content/images/checked.png\' : \'content/images/unchecked.png\' }\" />            </div>            <div class=\"details\">                <h4>                                        <!-- ko if: !$data.disabled() && $data.isLicensed() -->                    <a class=\"resource-name\" data-bind=\"attr: { href: $root.getDocumentsUrl($data) }\"><i class=\"fa fa-database\"></i> db/<span data-bind=\"text: name\"></span></a>                    <!-- /ko -->                    <!-- ko if: $data.disabled() || !$data.isLicensed() -->                    <a class=\"resource-name\"><i class=\"fa fa-database\"></i> db/<span data-bind=\"text: name\"></span></a>                    <!-- /ko -->                </h4>                <br />                                              <!-- ko if: !$data.disabled() && $data.isLicensed() -->                <span class=\"stats\" data-bind=\"style: { visibility: statistics() ? \'visible\' : \'hidden\' }, text: itemCountText\"></span>                <!-- /ko -->                               <!-- ko if: $data.disabled -->                <span class=\"stats-disabled\">Disabled</span>                <!-- /ko -->                <!-- ko if: !$data.disabled() && !$data.isLicensed() -->                <span class=\"stats-disabled\">Unlicensed</span>                <!-- /ko -->            </div>            <!-- ko if: $data.indexingDisabled -->            <span class=\"indexing-disabled\"><i class=\"fa fa-warning text-warning\" title=\"Indexing Disabled\"></i></span>            <!-- /ko -->            <!-- ko if: $data.rejectClientsMode -->            <span class=\"clients-rejected\"><i class=\"fa fa-warning text-warning\" title=\"Clients rejected mode\" ></i></span>            <!-- /ko -->            <div class=\"btn-group\" data-bind=\"click: function(){ $root.optionsClicked(true); }\">                <a class=\"dropdown-toggle\" data-toggle=\"dropdown\">                    <i class=\"fa fa-cogs fa-lg\"></i>                </a>                <ul class=\"dropdown-menu\" role=\"menu\">                    <li class=\"dropdown-submenu\">                        <a tabindex=\"-1\" href=\"#\">                            <i class=\"fa fa-arrow-down\"></i>                            <span>Takedowns</span>                        </a>                        <ul class=\"dropdown-menu\">                            <li role=\"presentation\">                                <a data-bind=\"click: function () { $root.toggleSelectedResources([$data]); return true; }, attr: { title: disabled() ? \'Enable Selected Database\' : \'Disable Selected Database\' }\">                                    <i class=\"fa fa-fw\" data-bind=\"css: { \'fa-lock\': !disabled(), \'fa-unlock\': disabled }\"></i>                                    <span data-bind=\"text: disabled() ? \'Enable\' : \'Disable\'\"></span>                                </a>                            </li>                            <li role=\"presentation\">                                <a data-bind=\"click: function () { $root.disableDatabaseIndexing($data); return true; }, attr: { title: indexingDisabled() ? \'Enable Indexing\' : \'Disable Indexing\' }\">                                    <i class=\"fa fa-fw fa-bolt\" data-bind=\"style: { color: indexingDisabled() ?  \'red\' : \'green\' }\"></i>                                    <span data-bind=\"text: indexingDisabled() ? \'Enable indexing\' : \'Disable indexing\'\"></span>                                </a>                            </li>                            <li role=\"presentation\">                                <a data-bind=\"click: function () { $root.toggleRejectDatabaseClients($data); return true; }, attr: { title: rejectClientsMode() ? \'Accept clients mode\' : \'Reject clients mode\' }\">                                    <i class=\"fa fa-fw fa-umbrella\" data-bind=\"style: { color: rejectClientsMode() ? \'red\' : \'green\' }\"></i>                                    <span data-bind=\"text: rejectClientsMode() ? \'Accept clients mode\' : \'Reject clients mode\'\"></span>                                </a>                            </li>                        </ul>                    </li>                                       <li class=\"divider\"></li>                    <li role=\"presentation\" class=\"delete-resource\">                        <a title=\"Delete selected database\" data-bind=\"click: function () { $root.deleteSelectedResources([$data]); return true; }\">                            <i class=\"fa fa-fw fa-trash-o\"></i>                            <span>Delete</span>                        </a>                    </li>                </ul>            </div>        </div>        <!-- /ko -->        <!-- ko if: $data.isFilesystem() -->        <div class=\"resource fs\" data-bind=\"visible: isVisible, click: function () { $root.selectResource($data); return true; }, css: { selected: isSelected, disabled: disabled }\">            <div class=\"checkbox\" data-bind=\"click: function () { checkboxToggle(); $root.optionsClicked(true); return true; }, style: { display: isChecked() ? \'block\' : \'\' }\">                <img data-bind=\"attr: { src: isChecked() ? \'content/images/checked.png\' : \'content/images/unchecked.png\' }\" />            </div>            <div class=\"details\">                <h4>                    <!-- ko if: !$data.disabled() && $data.isLicensed() -->                    <a class=\"resource-name\" data-bind=\"attr: { href: $root.getFilesystemFilesUrl($data) }\"><i class=\"fa fa-file-image-o\"></i> fs/<span data-bind=\"text: name\"></span></a>                    <!-- /ko -->                    <!-- ko if: $data.disabled() || !$data.isLicensed() -->                    <a class=\"resource-name\"><i class=\"fa fa-file-image-o\"></i> fs/<span data-bind=\"text: name\"></span></a>                    <!-- /ko -->                </h4>                <br />                <!-- ko if: !$data.disabled() && $data.isLicensed() -->                <span class=\"stats\" data-bind=\"style: { visibility: statistics() ? \'visible\' : \'hidden\' }, text: itemCountText\"></span>                <!-- /ko -->                <!-- ko if: $data.disabled -->                <span class=\"stats-disabled\">Disabled</span>                <!-- /ko -->                <!-- ko if: !$data.disabled() && !$data.isLicensed() -->                <span class=\"stats-disabled\">Unlicensed</span>                <!-- /ko -->            </div>            <div class=\"btn-group\" data-bind=\"click: function () { $root.optionsClicked(true); }\">                <a class=\"dropdown-toggle\" data-toggle=\"dropdown\">                    <i class=\"fa fa-cogs fa-lg\"></i>                </a>                <ul class=\"dropdown-menu\" role=\"menu\">                    <li role=\"presentation\">                        <a data-bind=\"click: function () { $root.toggleSelectedResources([$data]); return true; }, attr: { title: disabled() ? \'Enable Selected Database\' : \'Disable Selected Database\' }\">                            <i class=\"fa fa-fw\" data-bind=\"css: { \'fa-lock\': !disabled(), \'fa-unlock\': disabled }\"></i>                            <span data-bind=\"text: disabled() ? \'Enable\' : \'Disable\'\"></span>                        </a>                    </li>                    <li class=\"divider\"></li>                    <li role=\"presentation\" class=\"delete-resource\">                        <a title=\"Delete selected filesystem\" data-bind=\"click: function () { $root.deleteSelectedResources([$data]); return true; }\">                            <i class=\"fa fa-fw fa-trash-o\"></i>                            <span>Delete</span>                        </a>                    </li>                </ul>            </div>        </div>        <!-- /ko -->    </div></section>'; } )
define("text!views/restoreDatabase.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: startRestore\">    <div class=\"panel panel-default\">        <div class=\"panel-heading panel-info\">            <button type=\"submit\" title=\"Start restore\" class=\"btn btn-primary\" data-bind=\"disable: isBusy\">                <i class=\"fa fa-cloud-download\"></i>                <span>Restore Database</span>            </button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"visible: isBusy, css: { \'active\': keepDown }, click: function () { this.toggleKeepDown() }\">KeepDown</button>            <div data-bind=\"visible: anotherRestoreInProgres()\" class=\"badge pull-right\"> <span class=\"fa fa-spinner fa-spin\"></span> Another restore in progress</div>        </div>        <div class=\"panel-body\">            <div>                <div class=\"form-group\">                    <label for=\"backupLocation\" class=\"col-sm-2 control-label\">Backup Location</label>                    <div class=\"col-sm-5\">                        <input data-bind=\"value: backupLocation, disable: isBusy\" type=\"text\" required class=\"form-control\" id=\"backupLocation\" placeholder=\"C:&#92;path-to-your-backup-folder\">                    </div>                </div>                <div class=\"form-group\">                    <label for=\"databaseLocation\" class=\"col-sm-2 control-label\">Database Location</label>                    <div class=\"col-sm-5\">                        <input data-bind=\"value: databaseLocation, disable: isBusy\" type=\"text\" class=\"form-control\" id=\"databaseLocation\" placeholder=\"C:&#92;path-to-your-restored-database-folder\">                    </div>                </div>                <div class=\"form-group\">                    <label for=\"databaseName\" class=\"col-sm-2 control-label\">Database Name</label>                    <div class=\"col-sm-3\">                        <input data-bind=\"value: databaseName, disable: isBusy, customValidity: nameCustomValidityError\" type=\"text\" required class=\"form-control\" id=\"databaseName\" placeholder=\"Restored database name\" autocomplete=\"off\">                    </div>                </div>                <div class=\"form-group\">                    <div class=\"col-sm-offset-2 col-sm-5\">                        <div class=\"checkbox\">                            <label>                                <input type=\"checkbox\" data-bind=\"checked: defrag, disable: isBusy\"> Defrag                            </label>                        </div>                    </div>                </div>            </div>        </div>    </div>    <div id=\"restoreLog\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\'}\" >        <pre data-bind=\"visible: restoreStatusMessages().length > 0\" id=\"restoreLogPre\" style=\"word-wrap: normal; overflow: auto; height: 97%\"><!-- ko foreach: restoreStatusMessages --><div data-bind=\"text: $data\"></div><!-- /ko -->        </pre>    </div></form>'; } )
define("text!views/runningTasks.html", [], function () { return '<style>.column {    display: inline-block;    cursor: pointer;    overflow: hidden;    white-space: nowrap;    word-wrap: break-word;    text-overflow: ellipsis;    border-bottom: 1px solid #ddd;    margin: 0px;    padding: 5px;    height: 30px;}.selected .column {    background-color: #ffffcc;}</style><section id=\"runningTasksContainer\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div style=\"height: 65%; position: relative;\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: fetchTasks\"><i class=\"fa fa-refresh\"></i></button>        <div class=\"btn-group\" data-toggle=\"buttons\">            <label class=\"btn btn-default active\" data-bind=\"click: setFilterTypeAll\">                <input type=\"radio\" name=\"options\" id=\"option0\"> <span data-bind=\"text: \'All tasks (\' + allTasks().length + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeSuggestionQuery, visible: suggestionQueryCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option1\"> <span data-bind=\"text: \'Suggestion Query (\' + suggestionQueryCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeBulkInsert, visible: bulkInsertCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option2\"> <span data-bind=\"text: \'Bulk insert (\' + bulkInsertCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeIndexBulkOperation, visible: indexBulkOperationCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option3\"> <span data-bind=\"text: \'Bulk operation (\' + indexBulkOperationCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeIndexDeleteOperation, visible: indexDeleteOperationCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option4\"> <span data-bind=\"text: \'Index delete (\' + indexDeleteOperationCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeImportDatabase, visible: importDatabaseCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option5\"> <span data-bind=\"text: \'Import database (\' + importDatabaseCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeRestoreDatabase, visible: restoreDatabaseCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option6\"> <span data-bind=\"text: \'Restore database (\' + restoreDatabaseCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeRestoreFilesystem, visible: restoreFilesystemCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option7\"> <span data-bind=\"text: \'Restore filesystem (\' + restoreFilesystemCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeCompactDatabase, visible: compactDatabaseCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option8\"> <span data-bind=\"text: \'Compact database (\' + compactDatabaseCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeCompactFilesystem, visible: compactFilesystemCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option9\"> <span data-bind=\"text: \'Compact filesystem (\' + compactFilesystemCount() + \')\'\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setFilterTypeIoTest, visible: ioTestCount() > 0\">                <input type=\"radio\" name=\"options\" id=\"option10\"> <span data-bind=\"text: \'IO test (\' + ioTestCount() + \')\'\"></span>            </label>        </div>        <form class=\"form-inline\" style=\"display: inline-block; vertical-align: middle;\">            <input type=\"text\" class=\"form-control col-md-8\" placeholder=\"Search\" data-bind=\"value: searchText, valueUpdate: \'afterkeydown\'\" />        </form>        <div id=\"runningTasksTableContainer\" style=\"overflow-y: auto; overflow-x: auto; position: absolute; top: 40px; bottom: 10px; width: 100%;\">            <span style=\"white-space: nowrap\">                <div class=\"column column-header\"  style=\"width: 40px;\">                    <span>Kill</span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[0]() + \'px\' }\">                    <span class=\"column-handle\" column=\"0\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'TaskType\')\">Type</span>                    <span data-bind=\"visible: $root.sortColumn() === \'TaskType\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[1]() + \'px\' }\">                    <span class=\"column-handle\" column=\"1\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'TimeStamp\')\">Started</span>                    <span data-bind=\"visible: $root.sortColumn() === \'TimeStamp\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[2]() + \'px\' }\">                    <span class=\"column-handle\" column=\"2\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'TaskStatus\')\">Status</span>                    <span data-bind=\"visible: $root.sortColumn() === \'TaskStatus\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[3]() + \'px\' }\">                    <span class=\"column-handle\" column=\"3\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'Payload\')\">Payload</span>                    <span data-bind=\"visible: $root.sortColumn() === \'Payload\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[4]() + \'px\' }\">                    <span class=\"column-handle\" column=\"4\"></span>                    <span data-bind=\"click: $root.sortBy.bind($root, \'ExceptionText\')\">Exception</span>                    <span data-bind=\"visible: $root.sortColumn() === \'ExceptionText\'\">                        <span class=\"fa fa-sort-asc\" data-bind=\"visible: $root.sortAsc\"></span>                        <span class=\"fa fa-sort-desc\" data-bind=\"visible: !$root.sortAsc()\"></span>                    </span>                </div>                            </span>            <div style=\"white-space: nowrap\" data-bind=\"foreach: filteredAndSortedTasks, delegatedHandler: \'click\'\">                <div style=\"display: block; white-space: nowrap\" class=\"logRecord log-table-row\" data-click=\"selectTask\" data-bind=\"visible: IsVisible, css: { warning: TaskStatus === \'Canceled\', danger: TaskStatus === \'Faulted\', \'selected\': $data === $parent.selectedTask() }\">                    <div class=\"column\" style=\"width: 40px\"><button  data-bind=\"visible: Killable, click: $root.taskKill.bind($root, $data)\" class=\"btn btn-default\"><i class=\"fa fa-bolt\"></i></button></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[0]() + \'px\' }, text: TaskType\"></div>                     <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[1]() + \'px\' }, text: TimeStampText, attr: { title: TimeStampText }\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[2]() + \'px\' }, text: TaskStatus\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[3]() + \'px\' }, text: Payload\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[4]() + \'px\' }, text: ExceptionText, attr: { title: ExceptionText }\"></div>                </div>            </div>        </div>    </div>    <div class=\"log-details panel panel-default\">        <div class=\"col-md-11\">            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Type</label>                <div class=\"col-md-10\" data-bind=\"with: selectedTask\">                    <p class=\"form-control-static\" data-bind=\"text: TaskType\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Started</label>                <div class=\"col-md-10\" data-bind=\"with: selectedTask\">                    <p class=\"form-control-static\" data-bind=\"text: TimeStampText\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Status</label>                <div class=\"col-md-10\" data-bind=\"with: selectedTask\">                    <p class=\"form-control-static\" data-bind=\"text: TaskStatus\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Payload</label>                <div class=\"col-md-10\" data-bind=\"with: selectedTask\">                    <p class=\"form-control-static\" data-bind=\"text: Payload\"></p>                </div>            </div>            <div class=\"row\">                <label class=\"col-md-2 text-right control-label\">Exception</label>                <div class=\"col-md-10\" data-bind=\"with: selectedTask\">                    <p class=\"form-control-static\" data-bind=\"text: ExceptionText\"></p>                </div>            </div>            <div class=\"clearfix\"></div>        </div>        <div class=\"clearfix\"></div>    </div></section>'; } )
define("text!views/savePatch.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: saveThePatch\" id=\"select-columns-form\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Save Patch</h4>        </div>                <div class=\"modal-body\">            <div class=\"row\">                <div class=\"col-md-12\">                    <div class=\"form-group\">                        <label for=\"name\">Please enter a name</label>                        <input name=\"name\" class=\"form-control\" required type=\"text\" data-bind=\"value: patchName, valueUpdate: \'afterkeydown\'\" />                    </div>                </div>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" class=\"btn btn-primary\">OK</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>        </div>    </form></div>'; } )
define("text!views/saveTransformerWithNewNameConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Can not rename and save a transformer</h4>    </div>    <div class=\"modal-body\">        <p data-bind=\"text: message\"></p>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: saveTransformer\">OK</button>        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>    </div></div>'; } )
define("text!views/scriptedIndexes.html", [], function () { return '<div id=\"scriptedIndexes\" class=\"innerWindowsStyle\">    <form id=\"scriptedIndexesForm\" data-bind=\"submit: saveChanges\" class=\" form-horizontal\" role=\"form\">        <nav class=\"navbar navbar-default\" role=\"navigation\">            <div class=\"collapse navbar-collapse\">                <div class=\"navbar-form navbar-right\">                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" data-bind=\"visible: inactiveIndexNames().length > 0\" title=\" Create Script\">                            <i class=\"fa fa-plus\"></i> Create Script for Index: <span class=\"caret\"></span>                        </button>                        <ul class=\"dropdown-menu\" role=\"menu\">                            <!-- ko foreach: inactiveIndexNames -->                            <li data-bind=\"click: $root.createScriptedIndex.bind($root, $data)\"><a href=\"#\" data-bind=\"text: $data\"></a></li>                            <!-- /ko -->                        </ul>                    </div>                    <div class=\"btn-group\">                        <button type=\"submit\" class=\"btn btn-primary\" title=\"Save Changes(Alt+S)\" accesskey=\"S\" data-bind=\"enable: isSaveEnabled\"><i class=\"fa fa-save\"></i></button>                    </div>                </div>            </div>        </nav>        <div class=\"alert alert-warning\" data-bind=\"visible: activeScriptedIndexes().length === 0\">            You\'ve got no scripted indexes set up.        </div>        <div class=\"panel-group\" id=\"accordion\" data-bind=\"foreach: activeScriptedIndexes\">            <div class=\"panel panel-default panel-info\">                <div class=\"panel-heading\">                    <a data-toggle=\"collapse\" data-parent=\"#accordion\" data-bind=\"attr: { \'href\': \'#scriptedIndex\' + $index() }\">                        <h3 class=\"panel-title\">                            <span data-bind=\"text: indexName\"></span>                            <span class=\"close\" aria-hidden=\"true\" data-bind=\"click: $root.removeScriptedIndex.bind($root, $data)\" title=\"Remove this Scripted Index\"><i class=\"fa fa-times\"></i></span>                        </h3>                    </a>                </div>                <div data-bind=\"attr: { \'id\': \'scriptedIndex\' + $index() }, css: { \'collapse\': ($index() !== $parent.firstIndex()), \'in\': ($index() === $parent.firstIndex()) }\" class=\"panel-collapse collapse\">                    <div class=\"panel-body\">                        <div class=\"form-group\">                            <label style=\"cursor: help;\" class=\"col-md-2 control-label index-script-label\" data-placement=\"auto right\" data-original-title=\"Index Script\" data-trigger=\"hover\">                                Index Script                                <i class=\"fa fa-info-circle text-info\"></i>                            </label>                            <div class=\"col-md-10\">                                <div class=\"row\">                                    <div class=\"col-md-11\">                                        <pre class=\"form-control map\" data-bind=\"aceEditor: { code: indexScript, lang: \'ace/mode/javascript\' }\"></pre>                                    </div>                                </div>                            </div>                        </div>                        <div class=\"form-group\">                            <label style=\"cursor: help;\" class=\"col-md-2 control-label delete-script-label\" data-placement=\"auto right\" data-original-title=\"Delete Script\" data-trigger=\"hover\">                                Delete Script                                <i class=\"fa fa-info-circle text-info\"></i>                            </label>                            <div class=\"col-md-10\">                                <div class=\"row\">                                    <div class=\"col-md-11\">                                        <pre class=\"form-control map\" data-bind=\"aceEditor: { code: deleteScript, lang: \'ace/mode/javascript\' }\"></pre>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </form></div>'; } )
define("text!views/selectColumns.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" style=\"width: 715px;\">    <div class=\" modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Choose columns</h4>    </div>    <div class=\"modal-body\">        <div class=\"row\">            <form class=\"form-horizontal\" role=\"form\">                <div class=\"form-group\">                    <label for=\"inputEmail3\" class=\"col-sm-2 control-label\">                        Columns                    </label>                    <div class=\"col-sm-10\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                <span data-bind=\"visible: !customColumns.customMode()\">Automatic</span>                                <span data-bind=\"visible: customColumns.customMode\">Custom</span>                                <span class=\"caret\"></span>                            </button>                            <ul class=\"dropdown-menu\" role=\"menu\">                                <li><a href=\"#\" data-bind=\"click: customScheme.bind($data, false)\">Automatic</a></li>                                <li><a href=\"#\" data-bind=\"click: customScheme.bind($data, true)\">Custom</a></li>                            </ul>                        </div>                        <p class=\"help-block\" data-bind=\"visible: !customColumns.customMode()\">                            <i class=\"fa fa-info-circle text-info\"></i> RavenDB will choose columns based on visible documents                        </p>                    </div>                </div>            </form>        </div>        <form id=\"selectColumnsForm\">            <table class=\"table table-hover\" data-bind=\"visible: customColumns.customMode(), css: { \'custom-table\': isScrollNeeded }\">                <thead>                    <tr style=\"height: 39px\">                        <th class=\"col-md-3\">Binding</th>                        <th class=\"col-md-3\">Title</th>                        <th class=\"col-md-2\">Default Width</th>                        <th class=\"col-md-2\">Options</th>                    </tr>                </thead>                <tbody data-bind=\"foreach: customColumns.columns, css: { \'custom-table-tbody\': isScrollNeeded }\">                    <tr>                        <td class=\"col-md-3\">                            <div style=\"position: relative\">                                <input class=\"form-control\" required type=\"text\" data-bind=\"attr: { \'id\': $root.generateBindingInputId($index()) }, value: binding, valueUpdate: \'afterkeydown\', event: { keydown: $root.consumeUpDownArrowKeys.bind($root) }\" autocomplete=\"off\" />                                <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#\' + $root.generateBindingInputId($index()), foreach: $root.autoCompleteResults\">                                    <li role=\"presentation\" data-bind=\"click: $root.completeTheWord.bind($root)\">                                        <a href=\"#\" data-bind=\"click: $root.completeTheWord.bind($root)\">                                            <span data-bind=\"text: $data\"></span>                                        </a>                                    </li>                                </ul>                            </div>                        </td>                        <td class=\"col-md-3\"><input class=\"form-control\" required type=\"text\" data-bind=\"value: header, valueUpdate: \'afterkeydown\'\" /></td>                        <td class=\"col-md-2\"><input class=\"form-control\" required type=\"number\" data-bind=\"value: width, valueUpdate: \'afterkeydown\'\" /></td>                        <td class=\"col-md-2\">                            <div class=\"btn-group\">                                <button data-bind=\"click: $root.moveUp.bind($root, $data), disable: ($index() === 0)\" type=\"button\" class=\"btn btn-default\"><i class=\"fa fa-arrow-up\"></i></button>                                <button data-bind=\"click: $root.moveDown.bind($root, $data), disable: ($index() === $root.customColumns.columns().length - 1)\" type=\"button\" class=\"btn btn-default\"><i class=\"fa fa-arrow-down\"></i></button>                                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: $root.deleteRow.bind($root, $data)\"><i class=\"fa fa-trash-o\"></i></button>                            </div>                        </td>                    </tr>                </tbody>            </table>        </form>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>        <button class=\"btn btn-primary\" data-bind=\"click: changeCurrentColumns\">Ok</button>        <button type=\"button\" class=\"btn pull-left btn-default\" data-bind=\"click: insertNewRow, visible: customColumns.customMode()\">            <i class=\"fa fa-plus\"></i> New column        </button>        <button type=\"button\" class=\"btn pull-left btn-default\" data-bind=\"click: saveAsDefault\">            <i class=\"fa fa-save\"></i> Save as default        </button>    </div></div>'; } )
define("text!views/settings.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li class=\"active\">        <span>Settings</span>    </li>    <li class=\"active\" data-bind=\"text: activeSubViewTitle\">        <a data-bind=\"attr: { href: hash }, text: title\"></a>    </li></ul><div class=\"settings-container row\">    <div class=\"col-md-2\">        <ul class=\"nav nav-pills nav-stacked\" data-bind=\"foreach: router.navigationModel\">            <li data-bind=\"css: { active: (isActive() || $root.isEditingSqlReplication($root.router.navigationModel,route) === true) }, visible: $parent.routeIsVisible($data)\">                <a data-bind=\"attr: { href: hash }, text: title\"></a>            </li>        </ul>    </div>    <div class=\"col-md-10\" data-bind=\"router: { cacheViews: false }\">    </div></div>'; } )
define("text!views/shell.html", [], function () { return '<div>    <div id=\"shellHeader\" class=\"navbar navbar-fixed-top navbar-default\" role=\"navigation\">        <div class=\"container-fluid\">            <div class=\"navbar-header\">                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#topNavBarCollapse\">                    <span class=\"sr-only\">Toggle navigation</span>                    <span class=\"icon-bar\"></span>                    <span class=\"icon-bar\"></span>                    <span class=\"icon-bar\"></span>                </button>            </div>            <div class=\"collapse navbar-collapse\" id=\"topNavBarCollapse\">                <div data-bind=\"visible: appUrls.isAreaActive(\'admin\')\">                    <ul class=\"nav navbar-nav\">                        <li class=\"navbar-splitbutton active\">                            <h3>Manage Your Server</h3>                        </li>                    </ul>                </div>                <div data-bind=\"visible: canShowDatabaseNavbar(), css: { \'menu-item-disabled\': isActiveResourceDisabled }\">                    <ul class=\"nav navbar-nav\">                        <li class=\"navbar-splitbutton\" data-bind=\"css: { active: appUrls.isActive(\'Documents\') }\">                            <a data-bind=\"attr: { href: appUrls.documents }\">Documents</a>                        </li>                        <li class=\"dropdown\" data-bind=\"css: { active: appUrls.isActive(\'Documents\') }\">                            <a class=\"dropdown-toggle caret-after\" data-toggle=\"dropdown\">                                <b class=\"caret\"></b>                            </a>                            <ul class=\"dropdown-menu\">                                <li>                                    <a tabindex=\"-1\" data-bind=\"attr: { href: appUrls.documents }\">Documents</a>                                </li>                                <li data-bind=\"visible: $root.hasReplicationSupport()\">                                    <a tabindex=\"-1\" data-bind=\"attr: { href: appUrls.conflicts }\">Conflicts</a>                                </li>                                <li>                                    <a tabindex=\"-1\" data-bind=\"attr: { href: appUrls.patch }\">Patch</a>                                </li>                            </ul>                        </li>                        <li class=\"navbar-splitbutton\" data-bind=\"css: { active: appUrls.isActive(\'Indexes\') }\">                            <a data-bind=\"attr: { href: appUrls.indexes }\">Indexes</a>                        </li>                        <li class=\"dropdown\" data-bind=\"css: { active: appUrls.isActive(\'Indexes\') }\">                            <a class=\"dropdown-toggle caret-after\" data-toggle=\"dropdown\">                                <b class=\"caret\"></b>                            </a>                            <ul class=\"dropdown-menu\">                                <li>                                    <a tabindex=\"-1\" data-bind=\"attr: { href: appUrls.indexes }\">Indexes</a>                                </li>                                <li>                                    <a tabindex=\"-1\" data-bind=\"attr: { href: appUrls.transformers }\">Transformers</a>                                </li>                            </ul>                        </li>                        <li class=\"navbar-splitbutton\" data-bind=\"css: { active: appUrls.isActive(\'Query\') }\">                            <a data-bind=\"attr: { href: appUrls.query(null) }\">Query</a>                        </li>                        <li class=\"dropdown\" data-bind=\"css: { active: appUrls.isActive(\'Query\') }\">                            <a class=\"dropdown-toggle caret-after\" data-toggle=\"dropdown\">                                <b class=\"caret\"></b>                            </a>                            <ul class=\"dropdown-menu\">                                <li>                                    <a tabindex=\"-1\" data-bind=\"attr: { href: appUrls.query(null) }\">Query</a>                                </li>                                <li>                                    <a tabindex=\"-1\" data-bind=\"attr: { href: appUrls.reporting }\">Reporting</a>                                </li>                            </ul>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Tasks\') }\">                            <a data-bind=\"attr: { href: appUrls.tasks }\">Tasks</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Settings\') }, visible: $root.isSystemConnected\">                            <a data-bind=\"attr: { href: appUrls.settings }\">Settings</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Status\') }\">                            <a data-bind=\"attr: { href: appUrls.status }\">Status</a>                        </li>                    </ul>                    <ul class=\"nav navbar-nav\">                        <li class=\"dropdown\">                            <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">                                <i class=\"fa fa-plus\"></i> New <b class=\"caret\"></b>                            </a>                            <ul class=\"dropdown-menu\">                                <li>                                    <a href=\"#\" data-bind=\"click: newDocument\">                                        <i class=\"fa fa-file-o\"></i>                                        <span>Document</span>                                        <span class=\"text-muted keyboard-shortcut\">Ctrl+Alt+N</span>                                    </a>                                </li>                                <li>                                    <a data-bind=\"attr: { href: newIndexUrl }\">Index</a>                                </li>                                <li>                                    <a data-bind=\"attr: { href: newTransformerUrl }\">Transformer</a>                                </li>                            </ul>                        </li>                    </ul>                    <form class=\"navbar-form pull-left hidden-xs hidden-sm col-sm-2\">                        <input id=\"goToDocInput\" title=\"Search for a document (Alt+G)\" accesskey=\"G\"                               type=\"text\" class=\"form-control\" placeholder=\"Go to document\" data-bind=\"value: goToDocumentSearch, valueUpdate: \'afterkeydown\', disable: isActiveDatabaseDisabled\" autocomplete=\"off\" />                        <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#goToDocInput\', foreach: goToDocumentSearchResults\">                            <li role=\"presentation\" data-bind=\"click: $root.goToDoc.bind($root, $data)\">                                <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                    <span class=\"collection-color-strip\" data-bind=\"css: $root.getDocCssClass($data)\"></span>                                    <span data-bind=\"text: $data[\'@metadata\'][\'@id\']\"></span>                                </a>                            </li>                        </ul>                    </form>                </div>                <div data-bind=\"visible: canShowFileSystemNavbar, css: { \'menu-item-disabled\': isActiveFileSystemDisabled }\">                    <ul class=\"nav navbar-nav\">                        <li data-bind=\"css: { active: appUrls.isActive(\'Files\') }\">                            <a data-bind=\"attr: { href: appUrls.filesystemFiles }\">Files</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Search\') }\">                            <a data-bind=\"attr: { href: appUrls.filesystemSearch }\">Search</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Synchronization\') }\">                            <a data-bind=\"attr: { href: appUrls.filesystemSynchronization }\">Synchronization</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Status\') }\">                            <a data-bind=\"attr: { href: appUrls.filesystemStatus }\">Status</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Configuration\') }\">                            <a data-bind=\"attr: { href: appUrls.filesystemConfiguration }\">Configuration</a>                        </li>                    </ul>                </div>                <div id=\"countingNavbar\" data-bind=\"visible: canShowCountersNavbar\">                    <ul class=\" nav navbar-nav\">                        <li data-bind=\"css: { active: appUrls.isActive(\'Counters\') }\">                            <a data-bind=\"attr: { href: appUrls.counterStorageCounters }\">Counters</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Replication\') }\">                            <a data-bind=\"attr: { href: appUrls.counterStorageReplication }\">Replication</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Stats\') }\">                            <a data-bind=\"attr: { href: appUrls.counterStorageStats }\">Stats</a>                        </li>                        <li data-bind=\"css: { active: appUrls.isActive(\'Configuration\') }\">                            <a data-bind=\"attr: { href: appUrls.counterStorageConfiguration }\">Configuration</a>                        </li>                    </ul>                </div>                <div>                    <ul class=\"nav navbar-nav navbar-right hidden-xs hidden-sm databases\">                        <li class=\"navbar-right\" style=\"padding-left: 5px;\">                            <a class=\"navbar-brand\" href=\"http://ravendb.net\" target=\"_blank\">                                <img style=\"height: 24px\" src=\"content/images/raven.png\" />                            </a>                        </li>                        <li class=\"dropdown navbar-right\" data-bind=\"visible: canShowResourcesNavbar()\">                            <a class=\"dropdown-toggle resource-link\" data-toggle=\"dropdown\" href=\"#\" data-bind=\"with: lastActivatedResource, css: { \'resource-link-disabled\': $root.listedResources().length == 0 }\">                                <span data-bind=\"text: name\"></span>                                <b class=\"caret\" data-bind=\"visible: $root.listedResources().length > 0\"></b>                            </a>                            <ul class=\"dropdown-menu\" data-bind=\"foreach: listedResources\">                                <li>                                    <a href=\"#\" data-bind=\"click: $root.selectResource.bind($root, $data)\">                                        <span data-bind=\"attr: { class: $root.iconName($data) }\"></span>                                        <span data-bind=\"text: name\"></span>                                    </a>                                </li>                            </ul>                        </li>                        <li class=\"navbar-right\">                            <div>                                <ul class=\"nav navbar-nav\">                                    <li class=\"vertical-navbar-menu-item\">                                        <a style=\"padding-right: 0; padding-left: 0; padding-bottom: 0; display: inline-block;\" data-bind=\"attr: { href: getCurrentActiveFeatureHref() }\">                                            <span data-bind=\"text: getCurrentActiveFeatureName()\"></span>&nbsp;                                            <i class=\"fa fa-caret-right\" data-bind=\"visible: canShowDatabaseNavbar() || canShowFileSystemNavbar() || canShowCountersNavbar()\"></i>&nbsp;                                        </a>                                    </li>                                    <li class=\"dropdown vertical-navbar-menu-item\" data-bind=\"visible: appUrls.isAreaActive(\'admin\')()\">                                        <a class=\"dropdown-toggle vertical-bottom-container\" data-toggle=\"dropdown\">                                            <i class=\"fa fa-caret-down\"></i>                                        </a>                                        <ul class=\"dropdown-menu\">                                            <li>                                                <a href=\"#resources\" data-bind=\"click: navigateToResources.bind($root)\">Resources</a>                                            </li>                                        </ul>                                    </li>                                </ul>                            </div>                        </li>                        <li class=\"navbar-right\" data-bind=\"visible: recordedErrors().length > 0, click: $root.showErrorsDialog.bind($root)\" title=\"Show errors\" style=\"padding-left: 0;\">                            <a href=\"#\" style=\"padding-left: 0; padding-right: 0\"><i class=\"fa fa-warning text-danger\"></i></a>                        </li>                    </ul>                </div>            </div>        </div>    </div>    <!--Alerts container-->    <div class=\"studio-alerts\" data-bind=\"with: currentAlert\">        <div class=\"alert alert-dismissable fade in\" data-bind=\"attr: { id: id }, css: { \'alert-info\': type === 0, \'alert-success\': type === 1, \'alert-warning\': type === 2, \'alert-danger\': type === 3 || type === 4 }, event: { \'closed.bs.alert\': $root.onAlertHidden.bind($root) }\">            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <div class=\"alert-text\">                <strong data-bind=\"text: title, attr:{title:title}\"></strong>            </div>            <span data-bind=\"visible: errorMessage, text: errorMessage\"></span>            <a class=\"alert alert-link\" href=\"#\" data-bind=\"visible: details, click: $root.showErrorsDialog.bind($root)\">Details</a>        </div>    </div>    <div id=\"page-host\" class=\"page-host\" data-bind=\"router: { cacheViews: false }\"></div></div><footer style=\"z-index: 999\" id=\"shellFooter\">    <div class=\"navbar navbar-fixed-bottom navbar-inverse\">        <div class=\"navbar-inner\">            <ul class=\"nav navbar-nav\" data-bind=\"with: activeDatabase, visible: appUrls.isAreaActive(\'databases\')() && !isActiveDatabaseDisabled()\">                <li class=\"status-link\"><a data-bind=\"attr: { href: $root.appUrls.status }\" class=\"navbar-link\">Status</a></li>                <!-- ko with: statistics -->                <li><a class=\"navbar-link\" data-bind=\"text: CountOfDocuments.toLocaleString() + \' documents\', attr: { href: $parents[1].appUrls.documents }\"></a></li>                <li><a class=\"navbar-link\" data-bind=\"text: CountOfIndexes.toLocaleString() + \' indexes\', attr: { href: $parents[1].appUrls.indexes }\"></a></li>                <li><a class=\"navbar-link\" data-bind=\"text: StaleIndexes.length.toLocaleString() + \' stale\', attr: { href: $parents[1].appUrls.status }\"></a></li>                <li><a class=\"navbar-link\" data-bind=\"text: Errors.length.toLocaleString() + \' errors\', attr: { href: $parents[1].appUrls.indexErrors }\"></a></li>                <!--<li><a class=\"navbar-link\" data-bind=\"text: ApproximateTaskCount + \' tasks\', attr: { href: $parents[1].appUrls.status }\"></a></li>-->                <li class=\"raw-url hidden-sm\" data-bind=\"visible:$root.rawUrlIsVisible\">                    <a class=\"navbar-link\" href=\"#\" target=\'_blank\' data-bind=\"text: $root.currentRawUrl, attr: { href: $root.currentRawUrl, title: $root.currentRawUrl }\" style=\"max-width: 180px; -ms-text-overflow: ellipsis; -o-text-overflow: ellipsis; text-overflow: ellipsis; overflow-x: hidden; white-space: nowrap;\"></a>                </li>                <!-- /ko -->            </ul>            <ul class=\"nav navbar-nav\" data-bind=\"with: activeFilesystem, visible: appUrls.isAreaActive(\'filesystems\')() && !isActiveFileSystemDisabled()\">                <li><a data-bind=\"text:\'Status\'\" class=\"navbar-link\" href=\"#/filesystems/status\"></a></li>                <!-- ko with: statistics -->                <li><a href=\"#filesystems\" data-bind=\"text: FileCount + \' files\'\"></a></li>                <li><a href=\"#filesystems\" data-bind=\"text: Metrics.RequestsPerSecond + \' requests per second\'\"></a></li>                <li><a href=\"#filesystems\" data-bind=\"text: Metrics.RequestsDuration.Mean.toFixed(1) + \'ms mean duration\'\"></a></li>                <!-- /ko -->            </ul>            <ul class=\"nav navbar-nav navbar-right\" style=\"margin-right: 10px;\">                <!-- ko with: $root -->                <li class=\"licensing-status\" data-bind=\"with: localLicenseStatus\">                    <a class=\"navbar-link\" href=\"#\" data-bind=\"css: { \'license-error\': Error }, text: \'License Status: \' + Status, click: $root.showLicenseStatusDialog.bind($root)\"></a>                </li>                <li class=\"server-build-link\" data-bind=\"with: serverBuildVersion\"><a class=\"navbar-link\" data-bind=\"text: \'Server Build #\' + BuildVersion\"></a></li>                <li class=\"client-build-link\" data-bind=\"with: clientBuildVersion\"><a class=\"navbar-link\" data-bind=\"text: \'Client Build #\' + BuildVersion\"></a></li>                <!-- /ko -->            </ul>        </div>    </div></footer>'; } )
define("text!views/showDataDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close glyphicon glyphicon-remove remove-icon\" data-bind=\"click: close\" aria-hidden=\"true\"></button>        <h4 class=\"modal-title\" data-bind=\"text: title\"></h4>    </div>    <div class=\"modal-body\">        <h4><strong>CTRL+C, </strong>to copy</h4>        <div>            <textarea data-bind=\"text: inputData, event: { focus: function () { $(this).select(); } }\" id=\"inputData\" rows=\"13\" style=\"width: 600px;\" class=\"form-control\" autofocus=\"autofocus\"></textarea>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close\">Close</button>     </div></div>'; } )
define("text!views/sqlReplicationConnectionStringsManagement.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: $root.save\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSaveEnabled\" title=\"Save changes (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: addSqlReplicationConnection\" title=\"Add connection string (Alt+N)\" accesskey=\"N\">                <i class=\"fa fa-plus\"></i> New connection string            </button>        </div>        <br />        <div class=\"panel-body\" data-bind=\"with: connections\">            <!--<div class=\"alert alert-warning\" data-bind=\"visible: predefinedConnections().length === 0\">                You\'ve got no sql replication connections set up.            </div>-->            <p data-bind=\"visible: predefinedConnections().length === 0\">                <i class=\"fa fa-warning text-warning\"></i> You\'ve got no SQL replication connections set up.            </p>            <div data-bind=\"foreach: predefinedConnections\">                <div class=\"col-sm-6\">                    <div class=\"sql-replication-connection-card panel panel-default\">                        <div class=\"panel-heading\">                            <h3 class=\"panel-title\">                                <span data-bind=\"text: name() || \'[untitled]\'\"></span>                                <button type=\"button\" class=\"close\" aria-hidden=\"true\" data-bind=\"click: function(){$root.removeSqlReplicationConnection($data)}\" title=\"Remove this connection\"><i class=\"fa fa-times\"></i></button>                            </h3>                        </div>                        <div class=\"panel-body\">                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">Name</label>                                <div class=\"col-sm-7\">                                    <input required name=\"name\" class=\"form-control\" type=\"text\" data-bind=\"value:name, valueUpdate: \'afterkeydown\'\" />                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">SQL Provider</label>                                <div class=\"col-sm-7\">                                    <select tabindex=\"5\" required class=\"form-control\" data-bind=\"event:{change:function(val,event){$root.providerChanged($data,event);return true;}},options: [\'System.Data.SqlClient\',\'System.Data.SqlServerCe.4.0\',\'System.Data.OleDb\',\'System.Data.OracleClient\',\'MySql.Data.MySqlClient\',\'System.Data.SqlServerCe.3.5\',\'Npgsql\'], optionsCaption: \'\', value: factoryName\"></select>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">Connection String</label>                                <div class=\"col-sm-7\">                                    <textarea tabindex=\"6\" rows=\"4\" required class=\"form-control\" data-bind=\"value: connectionString, valueUpdate: \'afterkeydown\'\"></textarea>                                </div>                            </div>                            <div class=\"form-group\">                                <div class=\"col-sm-7 col-sm-offset-4\">                                    <button type=\"button\" class=\"btn btn-default\" data-bind=\"enable: connectionTestState() === CONNECTION_STATE_STAND_BY, click: testConnection.bind($data, $root.getActiveDatabase.bind($root))\">Test connection</button>                                    <br/>                                    <div class=\"progress progress-striped\" data-bind=\"visible:connectionTestState() !== CONNECTION_STATE_STAND_BY\">                                        <div class=\"progress-bar progress-bar-info\" data-bind=\"css: {\'active\':connectionTestState() === CONNECTION_STATE_CONNECTING}\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%; float:left;\">                                            <span class=\"sr-only\" data-bind=\"text:connectionTestState() === CONNECTION_STATE_CONNECTING?\'Connecting\':\'Connected\'\"></span>                                        </div>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></form>'; } )
define("text!views/sqlReplicationPerfStats.html", [], function () { return '<style>    #replicationStatsContainer {        font: 11px sans-serif;    }    .axis path,    .axis line {        fill: none;        stroke: #000;        shape-rendering: crispEdges;    }    .bar {        fill: steelblue;    }    rect.outputCounts, rect.inputCounts {        fill-opacity: 0.8;        cursor: pointer;    }    rect.outputCounts:hover, rect.inputCounts:hover {        fill-opacity: 1;    }    .legend rect {        cursor: pointer;    }    .legend_bg {        fill: white;        fill-opacity: 0.8;        stroke: #ccc;    }    .legendHidden {        fill-opacity: 0.2;       }</style><section id=\"replicationStatsContainer\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div class=\"page-header\" data-bind=\"visible: hasReplicationEnabled() == false\">        <h3><i class=\"fa fa-info-circle text-info\"></i> No sql replication stats available. <small>Either this database isn\'t <a target=\"_blank\" href=\"http://ravendb.net/docs/server/scaling-out/sql-replication\">setup for sql replication</a>, or sql replication hasn\'t occurred in some time.</small></h3>    </div>        <div data-bind=\"visible: hasReplicationEnabled()\">        <svg id=\"replicationStatsGraph\" transform=\"translate(0.5,0.5)\" preserveAspectRatio=\"xMinYMin slice\"></svg>    </div></section>'; } )
define("text!views/sqlReplications.html", [], function () { return '<div id=\"sqlReplications\" class=\"innerWindowsStyle\">    <div id=\"sqlReplicationsForm\">        <div class=\"btn-toolbar\">            <a class=\"btn btn-default\" data-bind=\"attr: {href:getSqlReplicationUrl(\'\')}\" title=\"New SQL Replication (Alt+N)\" accesskey=\"N\">                <i class=\"fa fa-plus\"></i> New SQL replication            </a>            <a class=\"btn btn-default\" data-bind=\"attr: {href:getSqlReplicationConnectionStringsUrl()}\" accesskey=\"M\" title=\"Manage SQL connection strings (Alt+M)\">                <i class=\"fa fa-database\"></i> Manage connection strings            </a>        </div>        <div data-bind=\"visible: replications().length === 0\">            <br />            <p>                <i class=\"fa fa-warning text-warning\"></i> You\'ve got no SQL replications set up.            </p>        </div>        <div class=\"replications-container\" data-bind=\"foreach: replications\">            <div class=\"replication\">                <h4 data-bind=\"attr: { \'href\': \'\', titel:\'$root.appUrl.forEditSqlReplication(name, this.activeDatabase()) \'}\">                    <a data-bind=\"text: name, attr: { href: $root.getSqlReplicationUrl(name()) }\"></a>                </h4>                <label>                    <i class=\"fa fa-power-off\" data-bind=\"attr: { title:disabled() === false?\'SQL Replication is Enabled\':\'SQL Replication is Disabled\'},css:{enabledReplication:disabled() === false,disabledReplication:disabled() === true }\"></i>                </label>                <div class=\"sqlRepActions pull-right\">                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" data-placement=\"left\">                            <i class=\"fa fa-cogs\"></i>                        </button>                        <ul class=\"dropdown-menu index-dropdown\" role=\"menu\">                            <li role=\"presentation\">                                <a href=\"#\" title=\"Delete the replication\" data-bind=\"click: $root.removeSqlReplication.bind($root,$data)\">                                    <i class=\"fa fa-trash-o text-danger\"></i> Delete                                </a>                            </li>                            <li role=\"presentation\">                                <a href=\"#\" title=\"Show replication stats dialog\" data-bind=\"click: $root.showStats.bind($root,Name)\">                                    Show stats                                </a>                            </li>                            <li role=\"presentation\">                                <a href=\"#\" title=\"Reset current replication\" data-bind=\"click: function(){ $root.resetSqlReplication(Name)}\">                                    Reset                                </a>                            </li>                        </ul>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/sqlReplicationSimulationDialog.html", [], function () { return '<div class=\"messageBox replicationSimulation\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: $root.cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\" data-bind=\"text:\'SQL Replication Simulation For: \' + simulatedSqlReplication.name()\"></h4>    </div>    <div class=\"modal-body replicationSimulationData\">        <div class=\"modal-body\">            <nav class=\"navbar navbar-default\" role=\"navigation\">                <div class=\"collapse navbar-collapse btn-toolbar\">                    <div class=\"col-sm-4\">                        <input id=\"docIdInput\" title=\"Document to run simulation with\" placeholder=\"Document ID\"                               type=\"text\" class=\"form-control\" data-bind=\"value: documentId, valueUpdate: \'afterkeydown\'\" autocomplete=\"off\" />                        <div data-bind=\"visible:isAutoCompleteVisible\">                            <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\"                                data-bind=\"autoComplete: \'#docIdInput\', foreach: documentAutocompletes\">                                <li role=\"presentation\" data-bind=\"click:function(){$root.documentIdSubmitted($data[\'@metadata\'][\'@id\']); }\">                                    <span role=\"menuitem\" tabindex=\"-1\">                                        <span class=\"collection-color-strip\" data-bind=\"css: $root.getDocCssClass($data)\"></span>                                        <span data-bind=\"text: $data[\'@metadata\'][\'@id\']\"></span>                                    </span>                                </li>                            </ul>                        </div>                    </div>                    <div class=\"btn-group\">                        <button type=\"button\" class=\"btn btn-info\" data-bind=\"click:$root.getResults.bind($root,false)\">Simulate!</button>                        <button type=\"button\" class=\"btn btn-info dropdown-toggle\" data-toggle=\"dropdown\">                            <span class=\"caret\"></span>                        </button>                        <ul class=\"dropdown-menu\">                            <li>                                <a href=\"#\" data-bind=\"click:$root.getResults.bind($root,true)\">Test transaction</a>                            </li>                        </ul>                    </div>                                        <div class=\"progress progress-striped\" data-bind=\"visible:waitingToAnswer\" style=\"padding:0; \">                        <div class=\"progress-bar progress-bar-info active\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%; float:left;\">                        </div>                    </div>                </div>            </nav>            <div class=\"col-sm-12 form-group\">                <!-- ko if: rolledbackTransactionPerformed -->                <label class=\"col-sm-4  control-label\">                    Test Transaction Status:                </label>                <label class=\"col-sm-8\" data-bind=\"text:rolledBackTransactionPassed()==true?\'Passed\':\'Failed\', css:{\'text-success\':rolledBackTransactionPassed() === true, \'text-danger\':rolledBackTransactionPassed() === false}\"></label>                <label class=\"col-sm-12  control-label\" data-bind=\"visible:rolledBackTransactionPassed()==false|| !!lastAlert()\">                    Test Transaction Error:                </label>                <span class=\"col-sm-offset-2 col-sm-10\" data-bind=\"visible:rolledBackTransactionPassed() == false || !!lastAlert(), text:lastAlert\"></span>                <!-- /ko -->                <!-- ko if: simulationResults().length> 0 -->                <label class=\"col-sm-12  control-label\" data-bind=\"text:rolledbackTransactionPerformed() == true?\'Test SQL Commands:\':\'Simulated SQL Commands:\'\">                </label>                <div class=\"col-sm-12 simulationResultContainer list-group\" data-bind=\"foreach:simulationResults\">                    <a class=\"col-sm-offset-1 col-sm-10 sqlQuery\" data-bind=\"click:function(){$data.showParamsValues.toggle();}, css:{\'parametrizedQuery\':($root.rolledbackTransactionPerformed() == true && (commandText().indexOf(\'INSERT\') === 0 || $root.simulatedSqlReplication.parameterizeDeletesDisabled() === false))}\">                        <span data-bind=\"text:commandText\"></span>                    </a>                </div>                <!-- /ko -->                <div class=\"col-sm-12\" data-bind=\"visible: simulationResults().length== 0\">                    <h4>                        No results                    </h4>                </div>            </div>        </div>    </div>    <div class=\"modal-footer\">        <span class=\"pull-left\" data-bind=\"text:rolledbackTransactionPerformed() == true?\'* Press command to toggle parameters view\':\'* This is debug data, real queries will be parametrised. Try pressing the test transaction button\'\"></span>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: $root.cancel\">OK</button>    </div></div>'; } )
define("text!views/sqlReplicationStatsDialog.html", [], function () { return '<div class=\"messageBox sqlReplication-Stats\" tabindex=\"-1\" >    <div class=\"modal-header\">        <button type=\"button\" class=\"close btn btn-default\" data-bind=\"click: fetchSqlReplicationStats\"><i class=\"fa fa-refresh\"></i></button>        <h4 class=\"modal-title\" data-bind=\"text:\'SQL Replication Stats For: \' + sqlReplicationName\"></h4>    </div>    <div class=\"modal-body replicationStatsData\">        <div class=\"modal-body\">            <!-- ko if: !!repData()  -->            <div class=\"form-horizontal\" role=\"form\" data-bind=\"with: repData\">                <div class=\"form-group\">                    <label class=\"col-lg-2 col-md-4 control-label\">Last error time</label>                    <div class=\"col-lg-10 col-md-8\">                        <p class=\"form-control-static\" data-bind=\"text: LastErrorTime\"></p>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-lg-2 col-md-4 control-label\">Script error count</label>                    <div class=\"col-lg-10 col-md-8\">                        <p class=\"form-control-static\" data-bind=\"text: ScriptErrorCount\"></p>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-lg-2 col-md-4 control-label\">Script success count</label>                    <div class=\"col-lg-10 col-md-8\">                        <p class=\"form-control-static\" data-bind=\"text: ScriptSuccessCount\"></p>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-lg-2 col-md-4 control-label\">Write error count</label>                    <div class=\"col-lg-10 col-md-8\">                        <p class=\"form-control-static\" data-bind=\"text: WriteErrorCount\"></p>                    </div>                </div>                <div class=\"form-group\">                    <label class=\"col-lg-2 col-md-4 control-label\">Success count</label>                    <div class=\"col-lg-10 col-md-8\">                        <p class=\"form-control-static\" data-bind=\"text: SuccessCount\"></p>                    </div>                </div>                <!-- ko with: LastAlert -->                <div class=\"panel-group\" id=\"statsAccordion\">                    <div class=\"panel panel-warning\">                        <div class=\"panel-heading\">                            <a data-toggle=\"collapse\" data-parent=\"#statsAccordion\" href=\"#collapseLastError\">                                <h3 class=\"panel-title\">                                    Last Alert                                </h3>                            </a>                        </div>                        <div id=\"collapseLastError\" class=\"panel-collapse collapse\">                            <div class=\"panel-body\">                                <div class=\"form-group\">                                    <label class=\"col-lg-2 control-label\">Title</label>                                    <div class=\"col-lg-10\">                                        <p class=\"form-control-static\" data-bind=\"text: Title\"></p>                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-lg-2 control-label\">Created at</label>                                    <div class=\"col-lg-10\">                                        <p class=\"form-control-static\" data-bind=\"text: CreatedAt\"></p>                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-lg-2 control-label\">Observed</label>                                    <div class=\"col-lg-10\">                                        <p class=\"form-control-static\" data-bind=\"text: Observed\"></p>                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-lg-2 control-label\">Message</label>                                    <div class=\"col-lg-10\">                                        <p class=\"form-control-static\" data-bind=\"text: Message\"></p>                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-lg-2 control-label\">Alert level</label>                                    <div class=\"col-lg-10\">                                        <p class=\"form-control-static\" data-bind=\"text: AlertLevel\"></p>                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-lg-2 control-label\">Exception</label>                                    <div class=\"col-lg-10\">                                        <p class=\"form-control-static\"><span class=\"exceptionText\" data-bind=\"text: Exception\"></span></p>                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-lg-2 control-label\">Unique key</label>                                    <div class=\"col-lg-10\">                                        <p class=\"form-control-static\" data-bind=\"text: UniqueKey\"></p>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>                <!-- /ko -->            </div>            <!-- /ko -->            <div class=\"alert alert-warning text-center\" data-bind=\"visible: !repData()\">                <h3>                    No stats available                </h3>            </div>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: $root.cancel\">OK</button>    </div></div>'; } )
define("text!views/statistics.html", [], function () { return '<section data-bind=\"if: stats, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <form class=\"form-horizontal\" role=\"form\">		<div class=\"form-group\">			<label class=\"col-md-2 control-label\">Storage Engine</label>			<div class=\"col-md-10\">				<p class=\"form-control-static\" data-bind=\"text: stats().StorageEngine\"></p>			</div>		</div><div class=\"form-group\">            <label class=\"col-md-2 control-label\">Last document Etag</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: stats().LastDocEtag\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Last attachment etag</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: stats().LastAttachmentEtag\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Index count</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: stats().CountOfIndexes\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Document count</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: stats().CountOfDocumentsLocale\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Stale indexes</label>            <ul class=\"col-md-10 list-unstyled\" data-bind=\"foreach: stats().StaleIndexes\">                <li data-bind=\"text: $data\"></li>            </ul>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Index batch size</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: stats().CurrentNumberOfItemsToIndexInSingleBatchLocale\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Reduce batch size</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: stats().CurrentNumberOfItemsToReduceInSingleBatchLocale\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Indexes</label>            <div class=\"col-md-10\">                <div class=\"panel-group\" id=\"indexStatsAccordion\" data-bind=\"foreach: indexes\">                    <div class=\"panel panel-default\">                        <div class=\"panel-heading\">                            <h4 class=\"panel-title\">                                <a data-toggle=\"collapse\" href=\"#collapseOne\" data-bind=\"attr: { href: \'#statsIndexCollapse\' + $index() }\">                                    <span data-bind=\"text: Name\"></span>                                    <span class=\"text-muted\">- <span data-bind=\"text: DocsCountLocale\"></span> entries</span>                                </a>                            </h4>                        </div>                        <div class=\"panel-collapse collapse\" data-bind=\"attr: { id: \'statsIndexCollapse\' + $index() }\">                            <div class=\"panel-body\">                                <div class=\"form-horizontal\" role=\"form\">                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Created</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: CreatedTimestampText\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Entries</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: DocsCountLocale\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\" data-bind=\"if: IndexingAttempts !== null\">                                        <label class=\"col-md-2 control-label\">Runs</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"css: { \'text-success\': IndexingAttempts === IndexingSuccesses, \'text-warning\': IndexingSuccesses > 0 && IndexingSuccesses < IndexingAttempts, \'text-danger\': IndexingAttempts > 0 && IndexingSuccesses === 0 }\">                                                <span data-bind=\"visible: IndexingAttempts > 0, text: IndexingAttemptsLocale\"></span>                                                <span data-bind=\"visible: IndexingAttempts === 0\" class=\"text-muted\">Never run</span>                                                <span data-bind=\"visible: IndexingAttempts === IndexingSuccesses && IndexingAttempts > 0\">- all successful</span>                                                <span data-bind=\"visible: IndexingSuccesses > 0 && IndexingSuccesses < IndexingAttempts, text: \'attempts \' + (IndexingAttempts - IndexingSuccesses) + \' failed\'\"></span>                                                <span data-bind=\"visible: IndexingAttempts > 0 && IndexingSuccesses === 0\">- all failed</span>                                            </p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Last run</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: LastIndexedTimestampText\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\" data-bind=\"if: IndexingAttempts !== null\">                                        <label class=\"col-md-2 control-label\">Reduce runs</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"css: { \'text-success\': ReduceIndexingAttempts === ReduceIndexingSuccesses, \'text-warning\': ReduceIndexingSuccesses > 0 && ReduceIndexingSuccesses < ReduceIndexingAttempts, \'text-danger\': ReduceIndexingAttempts > 0 && ReduceIndexingSuccesses === 0 }\">                                                <span data-bind=\"visible: ReduceIndexingAttempts > 0, text: ReduceIndexingAttemptsLocale\"></span>                                                <span data-bind=\"visible: !ReduceIndexingAttempts\" class=\"text-muted\">Never run</span>                                                <span data-bind=\"visible: ReduceIndexingAttempts === ReduceIndexingSuccesses && ReduceIndexingAttempts > 0\">- all successful</span>                                                <span data-bind=\"visible: ReduceIndexingSuccesses > 0 && ReduceIndexingSuccesses < ReduceIndexingAttempts, text: \'attempts, \' + (ReduceIndexingAttempts - ReduceIndexingSuccesses) + \' failed\'\"></span>                                                <span data-bind=\"visible: ReduceIndexingAttempts > 0 && ReduceIndexingSuccesses === 0\">- all failed</span>                                            </p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Last reduce</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: LastReducedTimestampText\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Last query</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: LastQueryTimestampText\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Priority</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: Priority, css: { \'text-muted\': Priority === \'Idle\', \'text-warning\': Priority === \'Disabled\', \'text-danger\': Priority === \'Abandoned\' }\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Last indexed Etag</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: LastIndexedEtag\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Last reduced Etag</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: LastReducedEtag\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Is on RAM</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: IsOnRam\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Lock</label>                                        <div class=\"col-md-8\">                                            <p class=\"form-control-static\" data-bind=\"text: LockMode\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Entities</label>                                        <div class=\"col-md-8\" data-bind=\"with: ForEntityName\">                                            <p class=\"form-control-static\" data-bind=\"text: $data.join(\', \')\"></p>                                        </div>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </form></section>'; } )
define("text!views/status.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li class=\"active\">        <span data-bind=\"text: currentRouteTitle\"></span>    </li></ul><div>    <div class=\"row\">		<div class=\"col-md-2\">			<ul class=\"nav nav-list nav-pills nav-stacked\" data-bind=\"foreach: router.navigationModel\">				<li data-bind=\"css: { active: isActive }\">					<a data-bind=\"attr: { href: hash }, text: title\"></a>				</li>			</ul>		</div>        <div class=\"col-md-10\" data-bind=\"router: { cacheViews: false }\">        </div>    </div></div>'; } )
define("text!views/statusDebug.html", [], function () { return '<div id=\"status-debug\">    <ul class=\"nav nav-tabs\" data-bind=\"foreach: router.navigationModel\">        <li data-bind=\"css: { active: isActive }\">             <a   data-bind=\"attr: { href: hash, title: tooltip }, text: title\"></a>        </li>    </ul>    <div class=\"tab-content\" data-bind=\"router: { cacheViews: false }\">    </div></div>'; } )
define("text!views/statusDebugChanges.html", [], function () { return '<div class=\"panel-group\" data-bind=\"foreach: data\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <h4 class=\"panel-title\">                <a data-toggle=\"collapse\"  data-bind=\"text: \'Connection identifier: \' + Id, attr: { href: \'#statsDebugChangesCollapse\' + $index() }\"></a>            </h4>        </div>        <div class=\"panel-collapse collapse in\" data-bind=\"attr: { id: \'statsDebugChangesCollapse\' + $index() }\">            <div class=\"panel-body\">                <div class=\"form-horizontal\" role=\"form\">                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Connected</label>                        <div class=\"col-md-10\">                            <p class=\"form-control-static\" data-bind=\"text: Connected\"></p>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch all documents</label>                        <div class=\"col-md-10\">                            <p class=\"form-control-static\" data-bind=\"text: WatchAllDocuments\"></p>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch all indexes</label>                        <div class=\"col-md-10\">                            <p class=\"form-control-static\" data-bind=\"text: WatchAllIndexes\"></p>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch config</label>                        <div class=\"col-md-10\">                            <p class=\"form-control-static\" data-bind=\"text: WatchConfig\"></p>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch conflicts</label>                        <div class=\"col-md-10\">                            <p class=\"form-control-static\" data-bind=\"text: WatchConflicts\"></p>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch sync</label>                        <div class=\"col-md-10\">                            <p class=\"form-control-static\" data-bind=\"text: WatchSync\"></p>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch cancellations</label>                        <div class=\"col-md-10\">                            <p class=\"form-control-static\" data-bind=\"text: WatchCancellations\"></p>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch document prefixes</label>                        <div class=\"col-md-10\">                            <ul data-bind=\"foreach: WatchDocumentPrefixes\">                                <li data-bind=\"text: $data\"></li>                            </ul>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch documents in collection</label>                        <div class=\"col-md-10\">                            <ul data-bind=\"foreach: WatchDocumentsInCollection\">                                <li data-bind=\"text: $data\"></li>                            </ul>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch indexes</label>                        <div class=\"col-md-10\">                            <ul data-bind=\"foreach: WatchIndexes\">                                <li data-bind=\"text: $data\"></li>                            </ul>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watch documents</label>                        <div class=\"col-md-10\">                            <ul data-bind=\"foreach: WatchDocuments\">                                <li data-bind=\"text: $data\"></li>                            </ul>                        </div>                    </div>                    <div class=\"form-group\">                        <label class=\"col-md-2 control-label\">Watched folders</label>                        <div class=\"col-md-10\">                            <ul data-bind=\"foreach: WatchedFolders\">                                <li data-bind=\"text: $data\"></li>                            </ul>                        </div>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/statusDebugConfig.html", [], function () { return '<section>    <form class=\"form-horizontal\" role=\"form\">        <div class=\"form-group\">            <div class=\"col-md-12\">                <div>                    <div class=\"row\">                        <div class=\"col-md-12\">                            <pre id=\"statusDebugConfigEditor\" class=\"form-control\" data-bind=\"aceEditor: { code: data, readOnly: true }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 35 }\" ></pre>                        </div>                    </div>                </div>            </div>        </div>    </form></section>'; } )
define("text!views/statusDebugCurrentlyIndexing.html", [], function () { return '<section>    <button id=\"refresh-btn\" class=\"btn\" data-bind=\"css: { active: autoRefresh }, click: toggleAutoRefresh\"><i class=\"fa fa-refresh\"></i> Autorefresh</button>    <form class=\"form-horizontal\" role=\"form\" data-bind=\"with: data\">        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Number of currently working indexes</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: NumberOfCurrentlyWorkingIndexes\"></p>            </div>        </div>        <!-- ko foreach:Indexes -->        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Index name</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: IndexName\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Is map/reduce?</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: IsMapReduce\"></p>            </div>        </div>        <!-- ko foreach:CurrentOperations-->        <div class=\"form-group\">            <!-- ko if: $index() == 0 -->            <label class=\"col-md-2 control-label\">Current operations</label>            <label class=\"col-md-2 control-label\" data-bind=\"text: Operation\"></label>            <!-- /ko -->            <!-- ko if: $index() != 0 -->            <label class=\"col-md-2 col-md-offset-2 control-label\" data-bind=\"text: Operation\"></label>            <!-- /ko -->            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: NumberOfProcessingItems\"></p>            </div>        </div>        <!-- /ko -->        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Priority</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: Priority\"></p>            </div>        </div>        <!-- ko foreach:OverallIndexingRate-->        <div class=\"form-group\">                        <!-- ko if: $index() == 0 -->            <label class=\"col-md-2 control-label\">Overall indexing rate</label>            <label class=\"col-md-2 control-label\" data-bind=\"text: Operation\"></label>            <!-- /ko -->            <!-- ko if: $index() != 0 -->            <label class=\"col-md-2 col-md-offset-2 control-label\" data-bind=\"text: Operation\"></label>            <!-- /ko -->            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: Rate\"></p>            </div>        </div>        <!-- /ko -->        <hr />        <!-- /ko -->    </form></section>'; } )
define("text!views/statusDebugDocrefs.html", [], function () { return '<section>    <form class=\"form-horizontal\" role=\"form\">        <div class=\"form-group row\">            <label class=\"col-md-2 control-label\">Show documents referencing</label>            <div class=\"col-md-4\">                <div class=\"input-group\">                    <input type=\"text\" data-bind=\"value: docId, valueUpdate: \'afterkeydown\'\" class=\"form-control\">                    <span class=\"input-group-btn\">                        <button data-bind=\"click: fetchDocRefs, enable: canSearch\" class=\"btn btn-default\"><i class=\"fa fa-search\"></i></button>                    </span>                </div>            </div>        </div>    </form>        <div class=\"status-debug-docrefs-page\" data-bind=\"if: currentDocRefs\">        <div class=\"row\">            <div class=\"col-md-12\">                <div id=\"docRefsGrid\" data-bind=\"widget: {                    kind: \'virtualTable\',                     itemsSource: currentDocRefs,                    gridSelector: \'#docRefsGrid\',                    showCheckboxes: false,                     useContextMenu: false,                    customColumns: columns                }\"></div>            </div>        </div>    </div>    </section>'; } )
define("text!views/statusDebugIdentities.html", [], function () { return '<section>    <div class=\"status-debug-docrefs-page\" data-bind=\"if: currentIdentities\">        <div class=\"row\">            <div class=\"col-md-12\">                <div id=\"identitiesGrid\" data-bind=\"widget: {    kind: \'virtualTable\', itemsSource: currentIdentities,    gridSelector: \'#identitiesGrid\',    showCheckboxes: false, useContextMenu: false,    customColumns: columns, showIds: false}\">                </div>            </div>        </div>    </div>    </section>'; } )
define("text!views/statusDebugIndexFields.html", [], function () { return '<section>    <form class=\"form-horizontal\" role=\"form\">        <div class=\"col-md-12\">            <div>                <div class=\"row\">                    <div class=\"col-md-6\">                        <div class=\"form-group\">                            <label id=\"indexDefLabelContainer\"  class=\"control-label\" data-placement=\"auto right\" data-original-title=\"Index definition\" data-trigger=\"hover\">                                <span id=\"indexDefLabel\" class=\"help-cursor\">                                    Index definition                                    <i class=\"fa fa-info-circle text-info\"></i>                                </span>                            </label>                            <pre id=\"statusDebugIndexFieldsEditor\" class=\"form-control\" data-bind=\"aceEditor: { code: indexStr }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 35 }\" ></pre>                        </div>                    </div>                    <div class=\"col-md-6\">                        <button class=\"btn btn-default\" data-bind=\"click: fetchIndexFields\"><i class=\"fa fa-table\"></i> Show index fields</button>                                                    <hr/>                        <!-- ko with: result -->                        <ol data-bind=\"foreach: FieldNames\">                            <li data-bind=\"text: $data\"></li>                        </ol>                        <!-- /ko -->                    </div>                </div>            </div>        </div>    </form></section>'; } )
define("text!views/statusDebugMetrics.html", [], function () { return '<section data-bind=\"with: data\">    <div class=\"panel-group\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a data-toggle=\"collapse\" href=\"#metricsGeneral\">General</a>                </h4>            </div>            <div class=\"panel-collapse collapse in\"  id=\"metricsGeneral\" >                <div class=\"panel-body\">                    <div class=\"form-horizontal\" role=\"form\">                        <div class=\"form-group\">                            <label class=\"col-md-4 control-label\">Docs writes/second</label>                            <div class=\"col-md-8\">                                <p class=\"form-control-static\" data-bind=\"text: DocsWritesPerSecond\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-4 control-label\">Indexed/second</label>                            <div class=\"col-md-8\">                                <p class=\"form-control-static\" data-bind=\"text: IndexedPerSecond\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-4 control-label\">Reduced/second</label>                            <div class=\"col-md-8\">                                <p class=\"form-control-static\" data-bind=\"text: ReducedPerSecond\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-4 control-label\">Requests/second</label>                            <div class=\"col-md-8\">                                <p class=\"form-control-static\" data-bind=\"text: RequestsPerSecond\"></p>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a data-toggle=\"collapse\" href=\"#metricsRequest\">Requests</a>                </h4>            </div>            <div class=\"panel-collapse collapse in\" id=\"metricsRequest\" >                <div class=\"panel-body\">                    <div class=\"form-horizontal\" role=\"form\">                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Count</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: Requests.Count\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Counter</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: RequestsDuration.Counter\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Mean rate</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: Requests.MeanRate\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Min</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: RequestsDuration.Min\"></p>                            </div>                            <label class=\"col-md-2 control-label\">One minute rate</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: Requests.OneMinuteRate\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Max</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: RequestsDuration.Max\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Five minute rate</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: Requests.FiveMinuteRate\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Mean</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: RequestsDuration.Mean\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Fifteen minute rate</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: Requests.FifteenMinuteRate\"></p>                            </div>                            <label class=\"col-md-2 control-label\">Std dev.</label>                            <div class=\"col-md-4\">                                <p class=\"form-control-static\" data-bind=\"text: RequestsDuration.Stdev\"></p>                            </div>                            <label class=\"col-md-2 col-md-offset-6 control-label\">Percentiles</label>                            <div class=\"col-md-4\"></div>                            <div data-bind=\"foreach: $parent.requestPercentiles\">                                <label class=\"col-md-2 col-md-offset-6 control-label\" data-bind=\"text: key\"></label>                                <div class=\"col-md-4\">                                    <p class=\"form-control-static\" data-bind=\"text: value\"></p>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a data-toggle=\"collapse\" href=\"#metricsStaleIndexes\">Stale Indexes</a>                </h4>            </div>            <div class=\"panel-collapse collapse in\" id=\"metricsStaleIndexes\" >                <div class=\"panel-body\">                    <div class=\"form-horizontal\" role=\"form\">                        <div class=\"form-group\">                            <div class=\"col-md-6\">                                <h4>Maps</h4>                                <label class=\"col-md-4 control-label\">Counter</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexMaps.Counter\"></p>                                </div>                                 <label class=\"col-md-4 control-label\">Min</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexMaps.Min\"></p>                                </div>                                 <label class=\"col-md-4 control-label\">Max</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexMaps.Max\"></p>                                </div>                                  <label class=\"col-md-4 control-label\">Mean</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexMaps.Mean\"></p>                                </div>                                 <label class=\"col-md-4 control-label\">Std dev.</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexMaps.Stdev\"></p>                                </div>                                <label class=\"col-md-4 control-label\">Percentiles</label>                                <div class=\"clearfix\"></div>                                <div class=\"left\" data-bind=\"foreach: $parent.staleIndexMapsPercentiles\">                                    <label class=\"col-md-4 control-label\" data-bind=\"text: key\"></label>                                    <div class=\"col-md-8\">                                        <p class=\"form-control-static\" data-bind=\"text: value\"></p>                                    </div>                                </div>                            </div>                            <div class=\"col-md-6\">                                <h4>Reduces</h4>                                <label class=\"col-md-4 control-label\">Counter</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexReduces.Counter\"></p>                                </div>                                 <label class=\"col-md-4 control-label\">Min</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexReduces.Min\"></p>                                </div>                                 <label class=\"col-md-4 control-label\">Max</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexReduces.Max\"></p>                                </div>                                <label class=\"col-md-4 control-label\">Mean</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexReduces.Mean\"></p>                                </div>                                <label class=\"col-md-4 control-label\">Std dev.</label>                                <div class=\"col-md-8\">                                    <p class=\"form-control-static\" data-bind=\"text: StaleIndexReduces.Stdev\"></p>                                </div>                                <label class=\"col-md-4 control-label\">Percentiles</label>                                <div class=\"clearfix\"></div>                                <div class=\"left\" data-bind=\"foreach: $parent.staleIndexReducesPercentiles\">                                    <label class=\"col-md-4 control-label\" data-bind=\"text: key\"></label>                                    <div class=\"col-md-8\">                                        <p class=\"form-control-static\" data-bind=\"text: value\"></p>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a data-toggle=\"collapse\" href=\"#metricsGauges\">Gauges</a>                </h4>            </div>            <div class=\"panel-collapse collapse in\"  id=\"metricsGauges\" >                <div class=\"panel-body\">                    <div class=\"form-horizontal\" role=\"form\" data-bind=\"foreach: $root.gauges\">                        <!-- ko foreach: values -->                        <div class=\"form-group\">                            <label class=\"col-md-6 control-label\" data-bind=\"text: $parent.key + \' \' + key \"></label>                            <div class=\"col-md-6\">                                <p class=\"form-control-static\" data-bind=\"text: value\"></p>                            </div>                        </div>                        <!-- /ko -->                    </div>                </div>            </div>        </div>        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a data-toggle=\"collapse\" href=\"#metricsReplication\">Replication</a>                </h4>            </div>            <div class=\"panel-collapse collapse in\" id=\"metricsReplication\"  >                <div class=\"panel-body\">                    <ul class=\"nav nav-tabs\" data-bind=\"foreach: $root.replicationDestinations\">                        <li data-bind=\"css: { active: $index() == 0 }\"><a data-bind=\"attr: { href: \'#replication-tab-\' + $index() }, text: $data\" data-toggle=\"tab\"></a></li>                    </ul>                    <div class=\"tab-content\" data-bind=\"foreach: $root.replicationDestinations\">                        <div data-bind=\"attr: { id: \'replication-tab-\' + $index() }, css: { active: $index() == 0 }\" class=\"tab-pane\">                            <div class=\"panel-group\">                                <div class=\"panel panel-default\">                                    <div class=\"panel-heading\">                                        <h4 class=\"panel-title\">                                            <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#metrics-rep-\' + $index() + \'-bs\' }\">Batch Size</a>                                        </h4>                                    </div>                                    <div class=\"panel-collapse collapse in\" data-bind=\"attr: { id: \'metrics-rep-\' + $index() + \'-bs\' }\">                                        <div class=\"panel-body\">                                            <div class=\"form-horizontal\" role=\"form\" >                                                <div class=\"col-md-6\" data-bind=\"with: $root.data().ReplicationBatchSizeMeter[$data]\">                                                     <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Count</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Count\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Mean rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: MeanRate\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">One minute rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: OneMinuteRate\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Five minute rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: FiveMinuteRate\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Fifteen minute rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: FifteenMinuteRate\"></p>                                                        </div>                                                    </div>                                                </div>                                                <div class=\"col-md-6\" data-bind=\"with: $root.data().ReplicationBatchSizeHistogram[$data]\">                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Counter</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Counter\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Min</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Min\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Max</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Max\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Mean</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Mean\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Std dev.</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Stdev\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Percentiles</label>                                                        <div class=\"clearfix\"></div>                                                        <div class=\"left\" data-bind=\"foreach: $root.extractPercentiles(Percentiles)\">                                                            <label class=\"col-md-4 control-label\" data-bind=\"text: key\"></label>                                                            <div class=\"col-md-8\">                                                                <p class=\"form-control-static\" data-bind=\"text: value\"></p>                                                            </div>                                                        </div>                                                    </div>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                <div class=\"panel panel-default\">                                    <div class=\"panel-heading\">                                        <h4 class=\"panel-title\">                                            <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#metrics-rep-\' + $index() + \'-duration\' }\">Duration</a>                                        </h4>                                    </div>                                    <div class=\"panel-collapse collapse in\" data-bind=\"attr: { id: \'metrics-rep-\' + $index() + \'-duration\' }\">                                        <div class=\"panel-body\">                                            <div class=\"form-horizontal\" role=\"form\" >                                                <div class=\"col-md-6\" data-bind=\"with: $root.data().ReplicationDurationMeter[$data]\">                                                     <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Count</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Count\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Mean rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: MeanRate\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">One minute rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: OneMinuteRate\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Five minute rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: FiveMinuteRate\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Fifteen minute rate</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: FifteenMinuteRate\"></p>                                                        </div>                                                    </div>                                                </div>                                                <div class=\"col-md-6\" data-bind=\"with: $root.data().ReplicationDurationHistogram[$data]\">                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Counter</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Counter\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Min</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Min\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Max</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Max\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Mean</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Mean\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Std dev.</label>                                                        <div class=\"col-md-8\">                                                            <p class=\"form-control-static\" data-bind=\"text: Stdev\"></p>                                                        </div>                                                    </div>                                                    <div class=\"form-group\">                                                        <label class=\"col-md-4 control-label\">Percentiles</label>                                                        <div class=\"clearfix\"></div>                                                        <div class=\"left\" data-bind=\"foreach: $root.extractPercentiles(Percentiles)\">                                                            <label class=\"col-md-4 control-label\" data-bind=\"text: key\"></label>                                                            <div class=\"col-md-8\">                                                                <p class=\"form-control-static\" data-bind=\"text: value\"></p>                                                            </div>                                                        </div>                                                    </div>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></section>'; } )
define("text!views/statusDebugQueries.html", [], function () { return '<div>    <button id=\"refresh-btn\" class=\"btn\" data-bind=\"css: { active: autoRefresh }, click: toggleAutoRefresh\"><i class=\"fa fa-refresh\"></i> Autorefresh</button>    <hr />    <div class=\"panel-group\" data-bind=\"foreach: data\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a data-toggle=\"collapse\"  data-bind=\"text: indexName, attr: { href: \'#statsDebugQueriesCollapse\' + $index() }\"></a>                </h4>            </div>            <div class=\"panel-collapse collapse in\" data-bind=\"attr: { id: \'statsDebugQueriesCollapse\' + $index() }\">                <div class=\"panel-body\">                    <div class=\"form-horizontal\" role=\"form\" data-bind=\"foreach: queries\">                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Start time</label>                            <div class=\"col-md-6\">                                <p class=\"form-control-static\" data-bind=\"text: startTime\"></p>                            </div>                            <div class=\"col-md-4 text-right\">                                <button class=\"btn btn-danger\" data-bind=\"click: $root.killQuery.bind($root, queryId)\"><i class=\"fa fa-bolt\"></i> Kill this query</button>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Duration</label>                            <div class=\"col-md-10\">                                <p class=\"form-control-static\" data-bind=\"text: duration\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Query Info</label>                            <div class=\"col-md-10\">                                <pre class=\"form-control\" data-bind=\"aceEditor: { code: queryInfo, readOnly: true }\"  style=\"height: 350px;\" ></pre>                            </div>                        </div>                        <hr />                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/statusDebugRequestTracing.html", [], function () { return '<section id=\"requestTracingContainer\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div style=\"height: 65%; position: relative;\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: fetchRequestTracing\"><i class=\"fa fa-refresh\"></i></button>        <div class=\"btn-group\" data-toggle=\"buttons\">            <label class=\"btn btn-default active\" data-bind=\"click: setStatusAll\">                <input type=\"radio\" name=\"options\" id=\"option1\"> All requests <span class=\"badge\" data-bind=\"text: allEntries().length\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setStatusSuccess\">                <input type=\"radio\" name=\"options\" id=\"option1\"> Success <span class=\"badge\" data-bind=\"text: successCount()\"></span>            </label>            <label class=\"btn btn-default\" data-bind=\"click: setStatusFailed\">                <input type=\"radio\" name=\"options\" id=\"option2\"> Failure <span class=\"badge\" data-bind=\"text: failedCount()\"></span>            </label>        </div>        <div id=\"requestTracingTableContainer\" style=\"overflow-y: auto; position: absolute; bottom: 10px; top: 50px; width: 100%; \">            <table class=\"single-line-row-table table table-condensed\" data-bind=\"event: { keydown: tableKeyDown }\" tabindex=\"1\">                <thead>                    <tr>                        <th class=\"col-md-2\">Method</th>                        <th class=\"col-md-2\">Status code</th>                        <th class=\"col-md-6\">Uri</th>                        <th class=\"col-md-2\">Execution time</th>                    </tr>                </thead>                <tbody data-bind=\"foreach: allEntries, delegatedHandler: \'click\'\">                    <tr class=\"logRecord\" data-click=\"selectEntry\" data-bind=\"visible: IsVisible, css: { warning: StatusCode >= 400, \'selected\': $data === $parent.selectedEntry() }\">                        <td data-bind=\"text: Method\"></td>                        <td data-bind=\"text: StatusCode\"></td>                        <td data-bind=\"text: Uri, attr: { title: Uri }\"></td>                        <td data-bind=\"text: ExecutionTime\"></td>                    </tr>                </tbody>            </table>        </div>    </div>    <div class=\"panel panel-default\" style=\"height: 30%; overflow-y: auto\" data-bind=\"with: selectedEntry\">        <div class=\"panel-heading\">Headers</div>        <div class=\"panel-body\" data-bind=\"foreach: RequestHeaders\">            <div class=\"row\">                <label class=\"col-md-3 text-right control-label\" data-bind=\"text: Name\">Message</label>                <div class=\"col-md-9\">                    <p class=\"form-control-static\" data-bind=\"text: Values.join(\', \')\"></p>                </div>            </div>        </div>            </div></section>'; } )
define("text!views/statusDebugRoutes.html", [], function () { return '<section>    <form class=\"form-horizontal\" role=\"form\">        <div class=\"form-group\">            <div class=\"col-md-12\">                <div>                    <div class=\"row\">                        <div class=\"col-md-12\">                            <pre id=\"statusDebugRoutesEditor\" class=\"form-control\" data-bind=\"aceEditor: { code: data, readOnly: true }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 35 }\" ></pre>                        </div>                    </div>                </div>            </div>        </div>    </form></section>'; } )
define("text!views/statusDebugSlowDocCounts.html", [], function () { return '<section>    <div class=\"panel panel-danger\">        <div class=\"panel-heading\">            <h3 class=\"panel-title\">This operation is resource intensive!</h3>        </div>        <div class=\"panel-body\">            <p class=\"text-center\">                <button class=\"btn btn-danger\" data-bind=\"click: fetchDocCounts, enable: canSearch\">Compute docs counts</button>            </p>        </div>    </div>    <div data-bind=\"with: data\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h3 class=\"panel-title\">General Data</h3>            </div>            <div class=\"panel-body\">                <div class=\"row\">                    <label class=\"col-md-5 text-right form-control-static\">Time to generate</label>                    <span class=\"col-md-5 form-control-static\" data-bind=\"text: $root.formatTimeSpan(timeToGenerate)\"></span>                </div>                <div class=\"row\">                    <label class=\"col-md-5 text-right form-control-static\">Total Count</label>                    <span class=\"col-md-5 form-control-static\" data-bind=\"text: total\"></span>                </div>                <div class=\"row\">                    <label class=\"col-md-5 text-right form-control-static\">Total Size</label>                    <span class=\"col-md-5 form-control-static\" data-bind=\"text: $root.formatBytesToSize(totalSize)\"></span>                </div>                <div class=\"row\">                    <label class=\"col-md-5 text-right form-control-static\">Tombstones</label>                    <span class=\"col-md-5 form-control-static\" data-bind=\"text: tombstones\"></span>                </div>            </div>        </div>        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h3 class=\"panel-title\">Basic stats</h3>            </div>            <div class=\"panel-body\">                <table class=\"table table-condensed table-striped\">                    <thead>                        <tr>                            <th>Name</th>                            <th>Amount</th>                            <th>Size</th>                            <th>Min</th>                            <th>Max</th>                            <th>Mean</th>                            <th>Std dev.</th>                        </tr>                    </thead>                    <tbody>                        <!-- ko foreach:collections -->                        <tr>                            <td data-bind=\"text: name\"></td>                            <td data-bind=\"text: stats.Counter\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(size)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Min)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Max)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Mean)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Stdev)\"></td>                        </tr>                        <!-- /ko -->                        <tr data-bind=\"with: system\">                            <td>System</td>                            <td data-bind=\"text: Stats.Counter\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(TotalSize)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Min)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Max)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Mean)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Stdev)\"></td>                        </tr>                        <tr data-bind=\"with: noCollection\">                            <td>No collection</td>                            <td data-bind=\"text: Stats.Counter\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(TotalSize)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Min)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Max)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Mean)\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Stdev)\"></td>                        </tr>                    </tbody>                </table>            </div>        </div>        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h3 class=\"panel-title\">Percentiles</h3>            </div>            <div class=\"panel-body\">                <table class=\"table table-condensed table-striped\">                    <thead>                        <tr>                            <th>Name</th>                            <th>50%</th>                            <th>75%</th>                            <th>95%</th>                            <th>99%</th>                            <th>99.9%</th>                            <th>99.99%</th>                        </tr>                    </thead>                    <tbody>                        <!-- ko foreach:collections -->                        <tr>                            <td data-bind=\"text: name\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Percentiles[\'50%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Percentiles[\'75%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Percentiles[\'95%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Percentiles[\'99%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Percentiles[\'99.9%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(stats.Percentiles[\'99.99%\'])\"></td>                        </tr>                        <!-- /ko -->                        <tr data-bind=\"with: system\">                            <td>System</td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'50%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'75%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'95%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'99%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'99.9%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'99.99%\'])\"></td>                        </tr>                        <tr data-bind=\"with: noCollection\">                            <td>No collection</td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'50%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'75%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'95%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'99%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'99.9%\'])\"></td>                            <td data-bind=\"text: $root.formatBytesToSize(Stats.Percentiles[\'99.99%\'])\"></td>                        </tr>                    </tbody>                </table>            </div>        </div>         <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h3 class=\"panel-title\">Top docs</h3>            </div>            <div class=\"panel-body\">                <table class=\"table table-condensed table-striped\">                    <thead>                        <tr>                            <th>Collection name</th>                            <th>Document ID</th>                            <th>Document Size</th>                        </tr>                    </thead>                    <tbody>                        <!-- ko foreach:collections -->                        <!-- ko foreach:topDocs -->                        <tr data-bind=\"css: { \'topBorder\': $index() == 0 }\">                            <!-- ko if: $index() == 0 -->                            <td style=\"background-color: white\" data-bind=\"attr: { rowspan: $parent.topDocs.length }\"><span data-bind=\"text: $parent.name\"></span></td>                            <!-- /ko -->                            <td data-bind=\"text: DocId\"></td>                            <td data-bind=\"text: Size\"></td>                        </tr>                        <!-- /ko -->                        <!-- /ko -->                        <!-- /ko -->                    </tbody>                </table>            </div>        </div>    </div></section>'; } )
define("text!views/statusDebugSqlReplication.html", [], function () { return '<section>    <div id=\"sqlReplicationStats\" class=\"panel-group\" data-bind=\"foreach: data\">        <div class=\"sqlStatsPanel panel panel-default\">            <div class=\"panel-heading\">                <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#statsDebugSqlRepCollapse\' + $index() }\">                    <h4 class=\"panel-title\" data-bind=\"text:name\"></h4>                </a>            </div>            <div class=\"panel-collapse collapse in\" data-bind=\"attr: { id: \'statsDebugSqlRepCollapse\' + $index() }\">                <div class=\"panel-body\">                    <div class=\"form-horizontal statisticsSection\" role=\"form\" data-bind=\"with:statistics\">                        <div class=\"form-group sectionTitle\">                            <strong class=\"control-label\">Statistics:</strong>                        </div>                        <div class=\"form-group col-sm-12\">                            <label class=\"col-md-2 control-label\">Last error time</label>                            <div class=\"col-md-10\">                                <p class=\"form-control-static\" data-bind=\"text: LastErrorTime\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Script error count</label>                            <div class=\"col-md-10\">                                <p class=\"form-control-static\" data-bind=\"text: ScriptErrorCount\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Script success count</label>                            <div class=\"col-md-10\">                                <p class=\"form-control-static\" data-bind=\"text: ScriptSuccessCount\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Write error count</label>                            <div class=\"col-md-10\">                                <p class=\"form-control-static\" data-bind=\"text: WriteErrorCount\"></p>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-md-2 control-label\">Success count</label>                            <div class=\"col-md-10\">                                <p class=\"form-control-static\" data-bind=\"text: SuccessCount\"></p>                            </div>                        </div>                        <!-- ko with: LastAlert -->                        <div class=\"panel panel-warning\" data-bind=\"attr:{id:\'statsAccordion\' + $index()}\">                            <div class=\"panel-heading\">                                <a data-toggle=\"collapse\" data-bind=\"attr:{\'data-parent\':\'#statsAccordion\' + $index(), \'href\':\'#collapselasterror\' + $index()}\">                                    <h3 class=\"panel-title\">                                        Last Alert                                    </h3>                                </a>                            </div>                            <div class=\"panel-collapse collapse\" data-bind=\"attr:{id:\'collapselasterror\' + $index()}\">                                <div class=\"panel-body\">                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Title</label>                                        <div class=\"col-md-10\">                                            <p class=\"form-control-static\" data-bind=\"text: Title\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Created at</label>                                        <div class=\"col-md-10\">                                            <p class=\"form-control-static\" data-bind=\"text: CreatedAt\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Observed</label>                                        <div class=\"col-md-10\">                                            <p class=\"form-control-static\" data-bind=\"text: Observed\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Message</label>                                        <div class=\"col-md-10\">                                            <p class=\"form-control-static\" data-bind=\"text: Message\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Alert level</label>                                        <div class=\"col-md-10\">                                            <p class=\"form-control-static\" data-bind=\"text: AlertLevel\"></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Exception</label>                                        <div class=\"col-md-10\">                                            <p class=\"form-control-static\"><span class=\"exceptionText\" data-bind=\"text: Exception\"></span></p>                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-md-2 control-label\">Unique key</label>                                        <div class=\"col-md-10\">                                            <p class=\"form-control-static\" data-bind=\"text: UniqueKey\"></p>                                        </div>                                    </div>                                </div>                            </div>                        </div>                        <!-- /ko -->                    </div>                    <div class=\"form-horizontal\" role=\"form\">                        <div class=\"form-group sectionTitle\">                            <strong class=\"control-label\">Metrics:</strong>                        </div>                        <div class=\"form-group subSectionTitle\">                            <strong class=\"control-label\">Rate Metrics:</strong>                        </div>                        <div from-group>                            <div class=\"meterTable col-sm-12\">                                <span class=\"headers\">                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[0]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"0\"></span>                                        <span>Table</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[1]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"1\"></span>                                        <span>Metric Name</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[2]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"2\"></span>                                        <span>Count</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[3]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"3\"></span>                                        <span>MeanRate</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[4]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"4\"></span>                                        <span>OneMinuteRate</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[5]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"5\"></span>                                        <span>FiveMinuteRate</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[6]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"6\"></span>                                        <span>FifteenMinuteRate</span>                                    </div>                                </span>                                <div style=\"white-space: nowrap\" data-bind=\"foreach: rateMetrics\">                                    <div style=\"display: block; white-space: nowrap\" class=\"logRecord log-table-row\">                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[0]() + \'em\' }, text: Table\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[1]() + \'em\' }, text: Name\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[2]() + \'em\' }, text: Count\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[3]() + \'em\' }, text: MeanRate\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[4]() + \'em\' }, text: OneMinuteRate\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[5]() + \'em\' }, text: FiveMinuteRate\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[6]() + \'em\' }, text: FifteenMinuteRate\"></div>                                    </div>                                </div>                            </div>                            <div class=\"form-group subSectionTitle\">                                <strong class=\"control-label\">Histograms:</strong>                            </div>                            <div class=\"meterTable col-sm-12\">                                <span class=\"headers\">                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[7]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"7\"></span>                                        <span>Table</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[8]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"8\"></span>                                        <span>Metric Name</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[9]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"9\"></span>                                        <span>Counter</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[10]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"10\"></span>                                        <span>Max</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[11]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"11\"></span>                                        <span>Min</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[12]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"12\"></span>                                        <span>Mean</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[13]() + \'em\' }\">                                        <span class=\"column-handle\" column=\"13\"></span>                                        <span>Stdev</span>                                    </div>                                    <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[14]() + \'em\' }\">                                        <span>Percentiles</span>                                        <div style=\"width:100%\">                                            <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[15]() + \'em\' }\">                                                <span class=\"column-handle\" column=\"15\"></span>                                                <span>50%</span>                                            </div>                                            <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[16]() + \'em\' }\">                                                <span class=\"column-handle\" column=\"16\"></span>                                                <span>75%</span>                                            </div>                                            <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[17]() + \'em\' }\">                                                <span class=\"column-handle\" column=\"17\"></span>                                                <span>95%</span>                                            </div>                                            <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[18]() + \'em\' }\">                                                <span class=\"column-handle\" column=\"18\"></span>                                                <span>99%</span>                                            </div>                                            <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[19]() + \'em\' }\">                                                <span class=\"column-handle\" column=\"19\"></span>                                                <span>99.9%</span>                                            </div>                                            <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[20]() + \'em\' }\">                                                <span class=\"column-handle\" column=\"20\"></span>                                                <span>99.99%</span>                                            </div>                                        </div>                                    </div>                                </span>                                <div style=\"white-space: nowrap\" data-bind=\"foreach: histogramMetrics\">                                    <div style=\"display: block; white-space: nowrap\" class=\"logRecord log-table-row\">                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[7]() + \'em\' }, text: Table\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[8]() + \'em\' }, text: Name\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[9]() + \'em\' }, text: Counter\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[10]() + \'em\' }, text: Max\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[11]() + \'em\' }, text: Min\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[12]() + \'em\' }, text: Min\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[13]() + \'em\' }, text: Stdev\"></div>                                        <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[14]() + \'em\' }, if:!!Percentiles[0]\">                                            <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[15]() + \'em\' }, text: Percentiles[0].percentileValue\"></div>                                            <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[16]() + \'em\' }, text: Percentiles[1].percentileValue\"></div>                                            <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[17]() + \'em\' }, text: Percentiles[2].percentileValue\"></div>                                            <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[18]() + \'em\' }, text: Percentiles[3].percentileValue\"></div>                                            <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[19]() + \'em\' }, text: Percentiles[4].percentileValue\"></div>                                            <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[20]() + \'em\' }, text: Percentiles[5].percentileValue\"></div>                                        </div>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></section>'; } )
define("text!views/statusDebugTasks.html", [], function () { return '<section>    <form class=\"form-horizontal\" role=\"form\">        <!-- ko foreach: data -->        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Id</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: Id\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Index Id</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: IndexId\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Index name</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: IndexName\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Added time</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: AddedTime\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-4 control-label\">Type</label>            <div class=\"col-md-8\">                <p class=\"form-control-static\" data-bind=\"text: Type\"></p>            </div>        </div>        <hr />        <!-- /ko -->    </form></section>'; } )
define("text!views/statusDebugWebSocket.html", [], function () { return '<section>    <button data-bind=\"click: test\" class=\"btn btn-primary\">Test web sockets</button>        <h4>Results:</h4>    <pre data-bind=\"text: results\">    </pre>    </section>'; } )
define("text!views/studioConfig.html", [], function () { return '<div class=\"panel panel-default form-horizontal\" role=\"form\">    <div class=\"panel-heading\"></div>    <div class=\"panel-body\">        <div class=\"form-group\">            <div class=\"col-md-4 control-label\">Warn when using System Database</div>            <div class=\"col-md-8\">                <div class=\"btn-group\">                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                        <span data-bind=\"visible: warnWhenUsingSystemDatabase\">On</span>                        <span data-bind=\"visible: !warnWhenUsingSystemDatabase()\">Off</span>                        <span class=\"caret\"></span>                    </button>                    <ul class=\"dropdown-menu\" role=\"menu\">                        <li><a href=\"#\" data-bind=\"click: setSystemDatabaseWarning.bind($root, true)\">On</a></li>                        <li><a href=\"#\" data-bind=\"click: setSystemDatabaseWarning.bind($root, false)\">Off</a></li>                    </ul>                </div>            </div>        </div>        <div class=\"form-group\">            <div class=\"col-md-4 control-label\" data-bind=\"text: \'Mute remind to upgrade (\' + timeUntilRemindToUpgradeMessage() + \')\'\"></div>            <div class=\"col-md-8\">                <div class=\"btn-group\">                    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                        <span data-bind=\"visible: mute\">On</span>                        <span data-bind=\"visible: !mute()\">Off</span>                        <span class=\"caret\"></span>                    </button>                    <ul class=\"dropdown-menu\" role=\"menu\">                        <li><a href=\"#\" data-bind=\"click: setUpgradeReminder.bind($root, true)\">On</a></li>                        <li><a href=\"#\" data-bind=\"click: setUpgradeReminder.bind($root, false)\">Off</a></li>                    </ul>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/tasks.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li>        <a data-bind=\"attr: { href: appUrls.tasks }\">Tasks</a>    </li>    <li class=\"active\" data-bind=\"text: activeSubViewTitle\">    </li></ul><div>    <div class=\"row\">        <div class=\"col-md-2\">            <ul class=\"nav nav-pills nav-pills nav-stacked\" data-bind=\"foreach: router.navigationModel\">                <li data-bind=\"css: { active: isActive }, visible: $parent.routeIsVisible($data)\">                    <a data-bind=\"attr: { href: hash }, text: title\"></a>                </li>            </ul>        </div>        <div class=\"col-md-10\" data-bind=\"router: { cacheViews: false }\">                    </div>    </div></div>'; } )
define("text!views/toggleIndexing.html", [], function () { return '<div class=\"panel panel-default\">    <div class=\"panel-heading\">        <h3 class=\"panel-title\">Toggle Indexing</h3>    </div>    <div class=\"panel-body\">        <div data-bind=\"visible: indexingStatus() !== \'Disabled\'\">            <div class=\"btn-group\" data-toggle=\"buttons\">                <label class=\"btn btn-default\" data-bind=\"click: enableIndexing, css: { active: indexingStatus() !== \'Paused\' }\">                    <input type=\"checkbox\"> <i class=\"fa fa-play\"></i> Enable indexing                </label>                <label class=\"btn btn-default\" data-bind=\"click: disableIndexing, css: { active: indexingStatus() !== \'Indexing\' && indexingStatus() !== \'Started\' }\">                    <input type=\"checkbox\"> <i class=\"fa fa-stop text-danger\"></i> Disable indexing                </label>            </div>            <br /><br />        </div>        <div>            <span class=\"text-muted\">Current Status:</span>&nbsp;<span data-bind=\"text: indexingStatus\"></span>        </div>    </div></div>'; } )
define("text!views/trafficWatch.html", [], function () { return '<section id=\"watchTrafficContainer\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">    <div class=\"form-horizontal\">        <div class=\"form-group logButtons btn-group\">            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click:configureConnection\">Configure Connection</button>                <button type=\"button\" class=\"btn btn-success\" data-bind=\"click:reconnect\">Reconnect</button>                <button type=\"button\" class=\"btn btn-warning\" data-bind=\"click:disconnect\">Disconnect</button>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"css:{\'pressed\':keepDown}, click:function(){this.toggleKeepDown()}\">KeepDown</button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click:resetStats\">Reset Stats</button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click:clearLogs\">Clear</button>            </div>            <div class=\"btn-group\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click:exportTraffic\">Export</button>            </div>        </div>        <div class=\"form-group statsBar\">            <strong class=\"col-sm-12\">Stats:</strong>            <div class=\"small col-sm-offset-1 col-sm-11\" data-bind=\"with:logConfig\">                <strong>Status: </strong><label data-bind=\"text:($root.isConnected()==true?\'Connected\':\'Disconnected\'), css:{\'text-danger\':$root.isConnected() == false, \'text-success\':$root.isConnected()==true}\"></label>                <strong>; Watched Resource: </strong><label data-bind=\"text:ResourceName\"></label>                <strong>; Trace Start Time :</strong><label data-bind=\"text:$root.startTraceTimeHumanized()\"></label>                <strong>; Requests: </strong><label data-bind=\"text:$root.watchedRequests()\"></label>                <strong>; Avg Request Duration: </strong><label data-bind=\"text:$root.averageRequestDuration()\"></label>                <strong>; Min Request Duration: </strong><label data-bind=\"text:$root.minRequestDuration()\"></label>                <strong>; Max Request Duration: </strong><label data-bind=\"text:$root.maxRequestDuration()\"></label>                <strong>; Buffer Size: </strong><label data-bind=\"text:MaxEntries\"></label>            </div>        </div>        <div class=\"form-group\" id=\"logTableContainer\">            <div class=\"form-group logHeaders\">                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[0]() + \'%\' }\">                    <span class=\"column-handle\" column=\"0\"></span>                    <span>Time</span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[1]() + \'%\' }\">                    <span class=\"column-handle\" column=\"1\"></span>                    <span>Duration</span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[2]() + \'%\' }\">                    <span class=\"column-handle\" column=\"2\"></span>                    <span>Resource</span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[3]() + \'%\' }\">                    <span class=\"column-handle\" column=\"3\"></span>                    <span>Method</span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[4]() + \'%\' }\">                    <span class=\"column-handle\" column=\"4\"></span>                    <span>Url</span>                </div>                <div class=\"column column-header\" data-bind=\"style: { width: $root.columnWidths[5]() + \'%\' }\">                    <span class=\"column-handle\" column=\"5\"></span>                    <span>Has Additional Data</span>                </div>            </div>            <div id=\"logRecords\" class=\"form-group logRecords\" style=\"white-space: nowrap\" data-bind=\"foreach: recentEntries, delegatedHandler: \'click\'\">                <div id=\"logRecordsContainer\" style=\"display: block; white-space: nowrap\" class=\"logRecord log-table-row\" data-click=\"selectLog\" data-bind=\"\'selected\': $data === $parent.selectedLog()\">                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[0]() + \'%\' }, text: TimeStampText, attr: {title:Time}\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[1]() + \'%\' }, text: Duration, attr: { title: Duration }\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[2]() + \'%\' }, text: Resource, attr: { title: Resource }\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[3]() + \'%\' }, text: Method, attr: { title: Method }\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[4]() + \'%\' }, text: Url\"></div>                    <div class=\"column\" data-bind=\"style: { width: $root.columnWidths[5]() + \'%\' }, text: !!CustomInfo?\'Y\':\'N\'\"></div>                </div>            </div>            <div class=\"form-group log-details panel panel-default\" data-bind=\"visible:showLogDetails\">                <div class=\"col-md-10\">                    <div class=\"row\">                        <label class=\"col-md-2 text-right control-label\">Time</label>                        <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                            <p class=\"form-control-static\" data-bind=\"text: TimeStampText() +\' \' + Time()\"></p>                        </div>                    </div>                    <div class=\"row\">                        <label class=\"col-md-2 text-right control-label\">Duration</label>                        <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                            <p class=\"form-control-static\" data-bind=\"text: Duration\"></p>                        </div>                    </div>                    <div class=\"row\">                        <label class=\"col-md-2 text-right control-label\">Resource Name</label>                        <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                            <p class=\"form-control-static\" data-bind=\"text: Resource\"></p>                        </div>                    </div>                    <div class=\"row\">                        <label class=\"col-md-2 text-right control-label\">Method</label>                        <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                            <p class=\"form-control-static\" data-bind=\"text: Method\"></p>                        </div>                    </div>                    <div class=\"row\">                        <label class=\"col-md-2 text-right control-label\">Url</label>                        <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                            <p class=\"form-control-static\" data-bind=\"text: Url\"></p>                        </div>                    </div>                    <div class=\"row\">                        <label class=\"col-md-2 text-right control-label\">Custom Info</label>                        <div class=\"col-md-10\" data-bind=\"with: selectedLog\">                            <p class=\"form-control-static\" data-bind=\"html: CustomInfo\"></p>                        </div>                    </div>                </div>                <div class=\"col-sm-2\">                    <button class=\"btn btn-default\" data-bind=\"click:function(){this.showLogDetails(false)}\">Hide</button>                </div>            </div>        </div>    </div>    </section>'; } )
define("text!views/transformers.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#databases\">                Databases            </a>        </h3>    </li>    <li data-bind=\"with: activeDatabase\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.documents }\"></a>    </li>    <li class=\"active\">        Transformers    </li></ul><div id=\"transformersContainer\">    <div class=\"btn-toolbar\" role=\"toolbar\">        <!--data-bind=\"visible: transformersGroups().length > 0\"-->        <div class=\"btn-group\">            <a class=\"btn btn-primary\" data-bind=\"attr: { href: newTransformerUrl }\" title=\"Add a new transformer (Alt+N)\" accesskey=\"N\">                <i class=\"fa fa-plus\"></i> New transformer            </a>        </div>        <div class=\"btn-group\">            <button class=\"btn btn-default\" data-bind=\"click: toggleExpandAll, attr: { title: expandCollapseTitle }\" accesskey=\"=\">                <i data-bind=\"css: { \'fa-plus-square-o\': !allTransformersExpanded(), \'fa-minus-square-o\': allTransformersExpanded }\" class=\"fa fa-fw\"></i>            </button>        </div>        <div class=\"btn-group\">            <button class=\"btn btn-default\" data-bind=\"click: pasteTransformer\" title=\"Paste transformer from JSON (Alt+V)\" accesskey=\"V\">                <i class=\"fa fa-paste\"></i>            </button>        </div>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteAllTransformers\" title=\"Delete All Transformers\"><i class=\"fa fa-trash-o\"></i></button>        </div>    </div>    <div data-bind=\"visible: transformersGroups().length == 0\">        <h4 class=\"page-header text-info\">No transformers have been created for this database. <a href=\"#\" data-bind=\"attr: { href: newTransformerUrl }\">Create one now</a>.</h4>    </div>    <br />    <div data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">        <div class=\"transformers-container panel-group\" id=\"transformersAccordion\" data-bind=\"foreach: transformersGroups\">            <div class=\"transformers-group panel panel-default\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title\">                        <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#transformerCollapse\' + $index() }\">                            <span data-bind=\"text: entityName\"></span>                            <span class=\"text-muted\" data-bind=\"text: \'(\' + transformers().length + \')\'\"></span>                        </a>                    </h4>                </div>                <div class=\"index-group-content panel-collapse in\" data-bind=\"attr: { id: \'transformerCollapse\' + $index() }\">                    <div class=\"panel panel-default\" style=\"overflow: visible;\">                        <div class=\"panel-body\" data-bind=\"foreach: transformers\">                            <div class=\"index panel panel-default\">                                <div class=\"panel-body\">                                    <h4 class=\"pull-left\">                                        <a data-bind=\"attr: { href: editUrl }\">                                            <span data-bind=\"text: name\"></span>                                        </a>                                    </h4>                                    <div class=\"pull-right index-actions-container\">                                        <a class=\"btn btn-default\" title=\"Edit the transformer\" data-bind=\"attr: { href: editUrl }\">                                            <i class=\"fa fa-pencil\"></i>                                        </a>                                        <a class=\"btn btn-default\" title=\"Copy the transformer\" data-bind=\"click: $root.copyTransformer.bind($root)\">                                            <i class=\"fa fa-copy\"></i>                                        </a>                                        <button class=\"btn btn-danger\" title=\"Delete the transformer\" data-bind=\"click: $root.deleteTransformer.bind($root)\">                                            <i class=\"fa fa-trash-o\"></i>                                        </button>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/transformersShell.html", [], function () { return '<section data-bind=\"router: { cacheViews: false }\"></section>'; } )
define("text!views/upgrade.html", [], function () { return '<div id=\"upgradeContainer\">    <div class=\"text-center\">        <div data-bind=\"visible: inProgress\" class=\"alert alert-warning\" role=\"alert\">            <br /><br />            <h2>Database upgrade in progress.</h2>            <h4>For upgrade details please look into the server logs.</h4>                        <br /><br />            <i class=\"fa fa-spin fa-5x fa-cog\"></i>        </div>                <div data-bind=\"visible: !inProgress()\" class=\"alert alert-info\" role=\"alert\">            <br /><br />            <h2>Upgrade completed</h2>                        <br /><br />            <i class=\"fa fa-check fa-5x\"></i>        </div>    </div></div>'; } )
define("text!views/userInfo.html", [], function () { return '<section data-bind=\"with: data\">    <form class=\"form-horizontal\" role=\"form\">        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Remark</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: Remark\"></p>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: User\">            <label class=\"col-md-2 control-label\">User</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: User\"></p>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: Principal\">            <label class=\"col-md-2 control-label\">Principal</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: Principal\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Admin (global)</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: IsAdminGlobal\"></p>            </div>        </div>        <div class=\"form-group\">            <label class=\"col-md-2 control-label\">Admin (current database)</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: IsAdminCurrentDb\"></p>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: AccessTokenBody\">            <label class=\"col-md-2 control-label\">Access token body</label>            <div class=\"col-md-10\">                <p class=\"form-control-static\" data-bind=\"text: AccessTokenBody\"></p>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: Databases\">            <label class=\"col-md-2 control-label\">Databases</label>            <div class=\"col-md-10\" data-bind=\"with: Databases\">                <p class=\"form-control-static\" data-bind=\"text: $data.join(\', \')\"></p>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: AdminDatabases\">            <label class=\"col-md-2 control-label\">Admin databases</label>            <div class=\"col-md-10\" data-bind=\"with: AdminDatabases\">                <p class=\"form-control-static\" data-bind=\"text: $data.join(\', \')\"></p>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: ReadOnlyDatabases\">            <label class=\"col-md-2 control-label\">Read-only databases</label>            <div class=\"col-md-10\" data-bind=\"with: ReadOnlyDatabases\">                <p class=\"form-control-static\" data-bind=\"text: $data.join(\', \')\"></p>            </div>        </div>        <div class=\"form-group\" data-bind=\"visible: ReadWriteDatabases && ReadWriteDatabases.length\">            <label class=\"col-md-2 control-label\">Read-write databases</label>            <div class=\"col-md-10\" data-bind=\"with: ReadWriteDatabases\">                <p class=\"form-control-static\" data-bind=\"text: $data.join(\', \')\"></p>            </div>        </div>    </form></section>'; } )
define("text!views/versioning.html", [], function () { return '<section>    <form class=\"versioning-settings-form form-horizontal\" role=\"form\" data-bind=\"submit: $root.saveChanges.bind($root)\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <button type=\"submit\" class=\"btn btn-primary\" title=\"Save Changes(Alt+S)\" data-bind=\"enable: isSaveEnabled\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: createNewVersioning\" title=\"Add a replication destination (Alt+N)\" accesskey=\"N\">                    <i class=\"fa fa-plus\"></i> Add versioning                </button>            </div>            <div class=\"panel-body\">                <div class=\"alert alert-warning\" data-bind=\"visible: versionings().length == 0\">                    You\'ve got no versioning set up.                </div>                <div data-bind=\"foreach: versionings \">                    <div class=\"panel versioning-card\" data-bind=\"css: { \'panel-warning\': disabled, \'panel-default\': !disabled() }\">                        <div class=\"panel-heading\">                            <h3 class=\"panel-title\">                                <span> Versioning setup <span data-bind=\"visible: collection().length>0\">for</span> <span data-bind=\"text: collection\"></span></span>                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" data-bind=\"click: $root.removeVersioning.bind($root), visible: removable\" title=\"remove this versioning\"><i class=\"fa fa-times\"></i></button>                            </h3>                        </div>                        <div class=\"panel-body\">                            <div class=\"form-group\">                                <div class=\"col-sm-4 control-label\">Collection</div>                                <div class=\"col-sm-8\">                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: collection, enable: removable && !fromDatabase(), valueUpdate: \'afterkeyup\'\" />                                </div>                            </div>                            <div class=\"form-group\">                                <div class=\"col-sm-4 control-label\">Max Revisions</div>                                <div class=\"col-sm-8\">                                    <input required type=\"number\" class=\"form-control\" data-bind=\"numericValue: maxRevisions, valueUpdate: \'afterkeyup\'\" />                                </div>                            </div>                            <div class=\"form-group\">                                <div class=\"col-sm-4 control-label\">Excluded</div>                                <div class=\"col-sm-7\">                                    <div class=\"btn-group\">                                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                            <span data-bind=\"visible: !exclude()\">Include</span>                                            <span data-bind=\"visible: exclude\">Exclude</span>                                            <span class=\"caret\"></span>                                        </button>                                        <ul class=\"dropdown-menu\" role=\"menu\">                                            <li><a href=\"#\" data-bind=\"click: makeIncluded\">Include</a></li>                                            <li><a href=\"#\" data-bind=\"click: makeExcluded\">Exclude</a></li>                                        </ul>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </form></section>'; } )
define("text!views/viewSystemDatabaseConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Are you sure?</h4>    </div>    <div class=\"modal-body\">        <strong><span data-bind=\"text: confirmationMessage\"></span></strong>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>        <button type=\"button\" class=\"btn btn-danger\" autofocus data-bind=\"click: viewSystemDatabase\">OK</button>    </div></div>'; } )
define("text!views/visualizer.html", [], function () { return '<style>    .nodeRect {        fill-opacity: .4 !important;        stroke: #777;        stroke-width: 1.5px;    }    rect.hover {        stroke-width: 2px;        stroke: black;        fill-opacity: .95 !important;        stroke-opacity: .95 !important;    }    .nodeRect.highlight {        fill-opacity: 0.8 !important;    }    .nodeCheck {        stroke-width: 2px;        stroke: black;        fill: white;    }        .nodeCheck.selected {            stroke-width: 2px;            stroke: black;            fill: black;        }    .hidden {        display: none;    }    circle {        fill: #fff;        stroke: steelblue;        stroke-width: 1.5px;    }    g {        font: 10px sans-serif;        cursor: pointer;    }    .link {        fill: none;        stroke: #ccc;        stroke-width: 1.5px;    }        .link.selected {            fill: none;            stroke: black;            stroke-width: 2.5px;        }    .selectable-tooltip {        pointer-events: all;        -webkit-touch-callout: all;        -webkit-user-select: all;        -khtml-user-select: all;        -moz-user-select: all;        -ms-user-select: all;        user-select: all;    }    text {        pointer-events: none;        text-anchor: middle;    }</style><section id=\"visualizerSection\">    <form class=\"form-inline\" role=\"form\">        <h4 class=\"pull-left\" data-bind=\"visible: !onlineMode()\">Offline analysis for index <strong data-bind=\"text: indexName\"></strong>&nbsp;&nbsp;</h4>        <div class=\"btn-group\" data-bind=\"visible: onlineMode\">            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                <span data-bind=\"text: indexName\"></span>                <span class=\"caret\"></span>            </button>            <ul class=\"dropdown-menu\" role=\"menu\">                <!-- ko foreach: indexes -->                <li data-bind=\"click: $root.setSelectedIndex.bind($root, $data.name)\"><a href=\"#\" data-bind=\"text: $data.name\"></a></li>                <!-- /ko -->                <!-- ko if: indexes().length === 0 -->                <li data-bind=\"click: function() { }\"><a href=\"#\">No indexes available</a></li>                <!-- /ko -->            </ul>        </div>        <div class=\"form-group\" data-bind=\"visible: hasIndexSelected() && onlineMode()\">            <div class=\"input-group\">                <input id=\"docKey\" type=\"text\" data-bind=\"value: docKey, valueUpdate: \'afterkeydown\'\" class=\"form-control\" placeholder=\"Document Id\" autocomplete=\"off\">                <span class=\"input-group-btn\" style=\"width: auto\">                    <button data-bind=\"click: addDocKey.bind($root, docKey())\" class=\"btn btn-default\" type=\"button\">                        <i class=\"fa fa-plus\"></i>                    </button>                </span>            </div>            <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#docKey\', foreach: docKeysSearchResults\">                <li role=\"presentation\" data-bind=\"click: $root.selectDocKey.bind($root, $data)\">                    <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                        <span data-bind=\"text: $data\"></span>                    </a>                </li>            </ul>        </div>        <div class=\"form-group\" data-bind=\"visible: hasIndexSelected() && onlineMode()\">            <div class=\"input-group\">                <input id=\"itemKey\" type=\"text\" data-bind=\"value: reduceKey, valueUpdate: \'afterkeydown\'\" class=\"form-control\" placeholder=\"Reduce key\" autocomplete=\"off\">                <span class=\"input-group-btn\" style=\"width: auto\">                    <button data-bind=\"click: addReduceKey.bind($root, reduceKey()), visible: hasIndexSelected\" class=\"btn btn-default\" type=\"button\"><i class=\"fa fa-plus\"></i></button>                </span>            </div>            <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#itemKey\', foreach: reduceKeysSearchResults\">                <li role=\"presentation\" data-bind=\"click: $root.selectReduceKey.bind($root, $data)\">                    <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                        <span data-bind=\"text: $data\"></span>                    </a>                </li>            </ul>        </div>        <div class=\"btn-group\">            <a class=\"btn btn-default\" data-bind=\"attr: { href: editIndexUrl }, visible: hasIndexSelected() && onlineMode()\" title=\"Edit index\"><i class=\"fa fa-pencil\"></i></a>            <a class=\"btn btn-default\" data-bind=\"attr: { href: runQueryUrl }, visible: hasIndexSelected() && onlineMode()\" title=\"Run query\">                <i class=\"fa fa-play\"></i>            </a>            <button id=\"fullScreenButton\" class=\"btn btn-default\" data-bind=\"visible: hasIndexSelected, click: toggleFullscreen\" title=\"Fullscreen mode\">                <i class=\"fa fa-expand\"></i>            </button>            <button id=\"keysDialogBtn\" class=\"btn btn-default\" title=\"Displays information about inserted document ids and reduce keys\" data-bind=\"visible: hasIndexSelected, click: displayKeyInfo\">                <i class=\"fa fa-key\"></i>            </button>            <button class=\"btn btn-danger\" title=\"Clear\" data-bind=\"visible: hasIndexSelected, click: clearChart\">                <i class=\"fa fa-trash-o\"></i>            </button>        </div>        <div class=\"btn-group\" data-bind=\"visible: hasIndexSelected\">            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                <i class=\"fa fa-download\"></i>            </button>            <ul class=\"dropdown-menu\" role=\"menu\">                <li data-bind=\"click: saveAsPng, visible: hasSaveAsPngSupport\"><a href=\"#\"><i class=\"fa fa-file-image-o\"></i> PNG</a></li>                <li data-bind=\"click: saveAsSvg\"><a href=\"#\"><i class=\"fa fa-file-image-o\"></i> SVG</a></li>                <li data-bind=\"click: saveAsJson\"><a href=\"#\"><i class=\"fa fa-file-text-o\"></i> JSON</a></li>            </ul>        </div>        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: chooseImportFile\" title=\"Import visualization\">                <i class=\"fa fa-upload\"></i>            </button>        </div>        <div class=\"btn-group\" data-bind=\"visible: hasIndexSelected\">            <div id=\"loadingIndicator\" data-bind=\"visible: showLoadingIndicator\" class=\"glyphicon\" style=\"width: 30px; height: 30px;\"><span class=\"fa fa-spinner fa-spin fa-2x\"></span></div>        </div>    </form>    <svg id=\"visHeader\" style=\"height: 25px\" height=\"25\">    </svg>    <div id=\"visualizerContainer\" style=\"height: 600px\" style=\"width: 100%\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\" class=\"with-3d-shadow with-transitions\">        <div>            <svg id=\"visualizer\" transform=\"translate(0.5,0.5)\" preserveAspectRatio=\"xMinYMin slice\"></svg>        </div>    </div></section>'; } )
define("text!views/visualizerImport.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" >    <form data-bind=\"submit: doImport\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Import visualization</h4>        </div>        <div class=\"modal-body\">                        Select file to import. <br />            <input id=\"importFilePicker\" type=\"file\" data-bind=\"event: { change: fileSelected }\" />                    </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Close</button>            <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: hasFileSelected\"><i class=\"fa fa-upload\"></i> Import</button>        </div>    </form></div>'; } )
define("text!views/visualizerKeys.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" >    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Document Ids and Reduce Keys</h4>    </div>    <div class=\"modal-body\" data-bind=\"with: visualizer\">        <div class=\"row\">            <div class=\"col-md-6\">                <h4>Document Ids</h4>                <ul data-bind=\"foreach: docKeys\">                    <li data-bind=\"text: $data\"></li>                </ul>            </div>            <div class=\"col-md-6\">                <h4>Reduce Keys</h4>                <ul data-bind=\"foreach: reduceKeys\">                    <li data-bind=\"text: $data\"></li>                </ul>            </div>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Close</button>    </div></div>'; } )
define("text!views/watchTrafficConfigDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" style=\"width: 715px;\">    <form class=\"form-horizontal\" data-bind=\"submit: confirmConfig\" id=\"log-config-form\" onkeypress=\"return event.keyCode != 13;\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Custom logging</h4>        </div>        <div class=\"modal-body\">            <div class=\"row\">                <div class=\"col-md-12\">                    <div class=\"form-group\">                        <div class=\"col-sm-3\"><label for=\"maxEntries\" class=\"control-label\">Maximum number of displayed entries</label></div>                        <div class=\"col-sm-9\">                            <input type=\"number\" data-bind=\"value: maxEntries\" class=\"form-control\" id=\"maxEntries\" required max=\"30000\" min=\"1\">                        </div>                    </div>                </div>            </div>            <div class=\"row\">                <div class=\"col-md-12\">                    <div class=\"form-group\">                        <div class=\"col-sm-12\"><label for=\"maxEntries\" class=\"control-label\">Watched Resource:</label></div>                        <div class=\"col-sm-12\">                            <div class=\"col-sm-3\">                                <label title=\"Resource name, might be a database and/or a filesystem\">                                    <input type=\"radio\" value=\"SingleResourceView\" data-bind=\"checked:watchedResourceMode\" />Single Resource                                </label>                            </div>                            <div class=\"col-sm-9\">                                <input id=\"watchedResource\" placeholder=\"Database or FileSystem name\" type=\"text\" class=\"form-control\"                                       data-bind=\"enable:watchedResourceMode()==\'SingleResourceView\', customValidity: nameCustomValidityError, value: resourceName, valueUpdate: \'afterkeydown\'\" autocomplete=\"off\" />                                <ul class=\"dropdown-menu\"  role=\"menu\" style=\"display: none;\"                                    data-bind=\"autoComplete: \'#watchedResource\', foreach: resourceAutocompletes\">                                    <li role=\"presentation\" data-bind=\"click:function(){$root.resourceName($data); }\">                                        <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                            <span role=\" menuitem\" tabindex=\"-1\">                                                <span data-bind=\"text: $data\"></span>                                            </span>                                        </a>                                    </li>                                </ul>                            </div>                        </div>                        <div class=\"col-sm-12\">                            <div class=\"col-sm-12\">                                <label title=\"Allows watching all incoming Requests. Requires Machine Admin authentication\" class=\"text-danger\">                                    <input type=\"radio\" value=\"AdminView\" data-bind=\"checked:watchedResourceMode\" />All (Admin View)                                </label>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" class=\"btn btn-primary\">Connect</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>        </div>    </form></div>'; } )
define("text!views/windowsAuth.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: saveChanges\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSaveEnabled\" title=\"Save changes(Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: addUserSettings, visible: isUsersSectionActive\" title=\"Add user settings(Alt+N)\" accesskey=\"N\"><i class=\"fa fa-plus\"></i> Add User Settings</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: addGroupSettings, visible: !isUsersSectionActive()\"><i class=\"fa fa-plus\"></i> Add Group Settings</button>        </div>        <div class=\"panel-body\">            <!-- Nav tabs -->            <ul class=\"nav nav-tabs\">                <li class=\"active\"><a href=\"#windowsAuthUsers\" data-toggle=\"tab\" data-bind=\"click: isUsersSectionActive.bind($root, true)\">Users</a></li>                <li><a href=\"#windowsAuthGroups\" data-toggle=\"tab\" data-bind=\"click: isUsersSectionActive.bind($root, false)\">Groups</a></li>            </ul>            <!-- Tab panes -->            <div class=\"tab-content win-auth-tabs\">                <div class=\"tab-pane fade in active\" id=\"windowsAuthUsers\">                    <div data-bind=\"foreach: setup().requiredUsers\" class=\"win-auth-panels-container\">                        <div class=\"panel win-auth-card\" data-bind=\"css: { \'panel-info\': enabled, \'panel-warning\': !enabled() }\">                            <div class=\"panel-heading\">                                <h3 class=\"panel-title\">                                    <span><span data-bind=\"text: name() ? name() : \'untitled\'\"></span></span>                                    <button type=\"button\" style=\"display:inline-block;\" class=\"close\" title=\"Remove\" data-bind=\"click: $parent.removeUserSettings.bind($parent)\">×</button>                                </h3>                            </div>                            <div class=\"panel-body\">                                    <div class=\"form-group\">                                        <label class=\"col-sm-3 control-label\">Name</label>                                        <div class=\"col-sm-9\">                                            <input type=\"text\" class=\"form-control\" required data-bind=\"value: name, valueUpdate: \'afterkeydown\', customValidity: nameCustomValidity\" />                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-sm-3 control-label\">Enabled</label>                                        <div class=\"col-sm-9\">                                            <div class=\"btn-group\">                                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                    <span data-bind=\"visible: enabled\">Enabled</span>                                                    <span data-bind=\"visible: !enabled()\">Disabled</span>                                                    <span class=\"caret\"></span>                                                </button>                                                <ul class=\"dropdown-menu\" role=\"menu\">                                                    <li><a href=\"#\" data-bind=\"click: enable\">Enabled</a></li>                                                    <li><a href=\"#\" data-bind=\"click: disable\">Disabled</a></li>                                                </ul>                                            </div>                                        </div>                                    </div>                                <div class=\"form-group\">                                    <label class=\"col-sm-3 control-label\">Databases</label>                                    <div class=\"col-sm-9\">                                        <table class=\"table table-striped table-hover\">                                            <thead>                                                <tr class=\"database-header\" data-bind=\"visible: databases().length > 0\">                                                    <td>Name</td>                                                    <td>Type</td>                                                    <td>                                                        <button type=\"button\" style=\"display: inline-block; font-size: 14px;\" class=\"close\" title=\"Add database\" data-bind=\"click: addEmptyDatabase\">                                                            <i class=\"fa fa-plus\"></i>                                                        </button>                                                    </td>                                                </tr>                                                <tr data-bind=\"visible: databases().length == 0\">                                                    <td>                                                        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: addEmptyDatabase\" title=\"Add database\">                                                            <i class=\"fa fa-plus\"></i> Add database                                                        </button>                                                    </td>                                                </tr>                                            </thead>                                            <tbody data-bind=\"foreach: databases\">                                                <tr>                                                    <td>                                                        <div class=\"btn-group\">                                                            <input tabindex=\"2\" required type=\"text\" name=\"databaseName\" class=\"form-control\" data-bind=\"value: tenantId, valueUpdate: \'afterkeydown\', customValidity: tenantCustomValidityError, attr: { \'id\': \'userDatabaseName\' + $parentContext.$index() + $index() }\" placeholder=\"Database name\">                                                            <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#userDatabaseName\' + $parentContext.$index() + $index(), foreach: searchResults\">                                                                <li role=\"presentation\" data-bind=\"click: $parent.tenantId.bind($data)\">                                                                    <a role=\"menuitem\" tabindex=\"-1\" href=\"#\" class=\"nounderline\">                                                                        <span data-bind=\"text: $data\"></span>                                                                    </a>                                                                </li>                                                            </ul>                                                        </div>                                                    </td>                                                    <td>                                                        <div class=\"btn-group\">                                                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                                <span data-bind=\"text: currentAccessType\"></span> <span class=\"caret\"></span>                                                            </button>                                                            <ul class=\"dropdown-menu\" role=\"menu\">                                                                <!-- ko foreach:getTypes() -->                                                                <li><a href=\"#\" class=\"nounderline\" data-bind=\"text: $data, click: $parent.currentAccessType.bind($parent)\"></a></li>                                                                <!-- /ko -->                                                            </ul>                                                        </div>                                                    </td>                                                    <td>                                                        <button type=\"button\" class=\"close\" data-bind=\"visible: $parent.databases().length > 1, click: $parent.removeDatabase.bind($parent, $data)\" title=\"Remove this database\">                                                            <i class=\"fa fa-times\"></i>                                                        </button>                                                    </td>                                                </tr>                                            </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>                <div class=\"tab-pane fade\" id=\"windowsAuthGroups\">                    <div data-bind=\"foreach: setup().requiredGroups\" class=\"win-auth-panels-container\">                        <div class=\"panel win-auth-card\" data-bind=\"css: { \'panel-info\': enabled, \'panel-warning\': !enabled() }\">                            <div class=\"panel-heading\">                                <h3 class=\"panel-title\">                                    <span><span data-bind=\"text: name() ? name() : \'untitled\'\"></span></span>                                    <button type=\"button\" style=\"display:inline-block;\" class=\"close\" title=\"Remove\" data-bind=\"click: $parent.removeGroupSettings.bind($parent)\">×</button>                                </h3>                            </div>                            <div class=\"panel-body\">                                    <div class=\"form-group\">                                        <label class=\"col-sm-3 control-label\">Name</label>                                        <div class=\"col-sm-9\">                                            <input type=\"text\" class=\"form-control\" required data-bind=\"value: name, valueUpdate: \'afterkeydown\', customValidity: nameCustomValidity\" />                                        </div>                                    </div>                                    <div class=\"form-group\">                                        <label class=\"col-sm-3 control-label\">Enabled</label>                                        <div class=\"col-sm-9\">                                            <div class=\"btn-group\">                                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                    <span data-bind=\"visible: enabled\">Enabled</span>                                                    <span data-bind=\"visible: !enabled()\">Disabled</span>                                                    <span class=\"caret\"></span>                                                </button>                                                <ul class=\"dropdown-menu\" role=\"menu\">                                                    <li><a href=\"#\" data-bind=\"click: enable\">Enabled</a></li>                                                    <li><a href=\"#\" data-bind=\"click: disable\">Disabled</a></li>                                                </ul>                                            </div>                                        </div>                                    </div>                                <div class=\"form-group\">                                    <label class=\"col-sm-3 control-label\">Databases</label>                                    <div class=\"col-sm-9\">                                        <table class=\"table table-striped table-hover\">                                            <thead>                                                <tr class=\"database-header\" data-bind=\"visible: databases().length > 0\">                                                    <td>Name</td>                                                    <td>Type</td>                                                    <td>                                                        <button type=\"button\" style=\"display: inline-block; font-size: 14px;\" class=\"close\" title=\"Add database\" data-bind=\"click: addEmptyDatabase\">                                                            <i class=\"fa fa-plus\"></i>                                                        </button>                                                    </td>                                                </tr>                                                <tr data-bind=\"visible: databases().length == 0\">                                                    <td>                                                        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: addEmptyDatabase\" title=\"Add database\">                                                            <i class=\"fa fa-plus\"></i> Add database                                                        </button>                                                    </td>                                                </tr>                                            </thead>                                            <tbody data-bind=\"foreach: databases\">                                                <tr>                                                    <td>                                                        <div class=\"btn-group\">                                                            <input tabindex=\"2\" required type=\"text\" name=\"databaseName\" class=\"form-control\" data-bind=\"value: tenantId, valueUpdate: \'afterkeydown\', customValidity: tenantCustomValidityError, attr: { \'id\': \'groupDatabaseName\' + $parentContext.$index() + $index() }\" placeholder=\"Database name\">                                                            <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#groupDatabaseName\' + $parentContext.$index() + $index(), foreach: searchResults\">                                                                <li role=\"presentation\" data-bind=\"click: $parent.tenantId.bind($data)\">                                                                    <a role=\"menuitem\" tabindex=\"-1\" href=\"#\" class=\"nounderline\">                                                                        <span data-bind=\"text: $data\"></span>                                                                    </a>                                                                </li>                                                            </ul>                                                        </div>                                                    </td>                                                    <td>                                                        <div class=\"btn-group\">                                                            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">                                                                <span data-bind=\"text: currentAccessType\"></span> <span class=\"caret\"></span>                                                            </button>                                                            <ul class=\"dropdown-menu\" role=\"menu\">                                                                <!-- ko foreach:getTypes() -->                                                                <li><a href=\"#\" class=\"nounderline\" data-bind=\"text: $data, click: $parent.currentAccessType.bind($parent)\"></a></li>                                                                <!-- /ko -->                                                            </ul>                                                        </div>                                                    </td>                                                    <td>                                                        <button type=\"button\" class=\"close\" style=\"display: inline-block; font-size: 14px;\" data-bind=\"visible: $parent.databases().length > 1, click: $parent.removeDatabase.bind($parent, $data)\" title=\"Remove this database\">                                                            <i class=\"fa fa-times\"></i>                                                        </button>                                                    </td>                                                </tr>                                            </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></form>'; } )
define("text!views/counter/counterStorageConfiguration.html", [], function () { return '<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>    <title></title></head><body></body></html>'; } )
define("text!views/counter/counterStorageCounters.html", [], function () { return '<div class=\"documents-page\">    <div class=\"col-md-2\">        <ul class=\"nav nav-pills nav-stacked\" data-bind=\"foreach: counterGroups\">            <li data-bind=\"click: $root.selectGroup.bind($root, $data), css: { active: $root.selectedCounterGroup() === $data }\">                <a href=\"javascript:void(0)\">                    <span data-bind=\"text: name\"></span>                    <span data-bind=\"text: \'(\' + numOfCounters() + \')\', css: { \'text-muted\': $data !== $parent.selectedCounterGroup() }\"></span>                </a>            </li>        </ul>    </div>    <div class=\"col-md-10\" data-bind=\"with: selectedCounterGroup\">        <div class=\"btn btn-group\">            <button class=\"btn btn-primary\" data-bind=\"click:function(){$root.addOrEditCounter();}\">Add New Counter</button>        </div>        <div class=\"panel-group\" id=\"accordion\" data-bind=\"foreach: counters\">            <div class=\"panel panel-default\" style=\"padding-top: 0\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title md-col-3\" style=\"padding-top: 10px; display:inline-block\">                        <a data-bind=\"text: id, attr: { href: \'#counterCollapse\' + $index() }\"></a>                    </h4>                    <button class=\"btn btn-primary md-col-3\" data-bind=\"click:function(){$root.addOrEditCounter($data);}\">Edit Counter</button>                    <button class=\"btn btn-primary md-col-3\" data-bind=\"click:function(){$root.resetCounter($data);}\">Reset Counter</button>                </div>                <div class=\"panel-collapse\" data-bind=\"attr:{id:\'counterCollapse\' + $index()}\">                    <div class=\"panel panel-default\">                        <div class=\"panel-body\">                            <div> <strong>Overall Total: </strong> <span data-bind=\"text:overallTotal\"></span></div>                            <div> <strong>Group: </strong> <span data-bind=\"text:group\"></span></div>                            <div> <strong>Servers: </strong></div>                            <ul data-bind=\"foreach: servers\">                                <li>                                    <span class=\"col-md-4\"> <strong>Server URL: </strong><span data-bind=\"text:name()\"></span></span>                                    <span class=\"col-md-4\"> <strong>Positive: </strong><span data-bind=\"text:posCount()\"></span></span>                                    <span class=\"col-md-4\"> <strong>Negative: </strong><span data-bind=\"text:negCount()\"></span></span>                                </li>                            </ul>                        </div>                    </div>                </div>            </div>        </div>    </div>    <div id=\"countersGrid\" data-bind=\"widget: { kind: \'virtualTable\', itemsSource: currentCountersPagedItems, selectedIndices: selectedCountersIndices, gridSelector: \'#countersGrid\' }\"></div></div>'; } )
define("text!views/counter/counterStorageReplication.html", [], function () { return '<div class=\"settings-container row\">    <form data-bind=\"submit: $root.saveChanges\" class=\"form-horizontal\" role=\"form\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <div class=\"pull-left panel-title\">Replication Destinations</div>                <div class=\"pull-right\">                    <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: createNewDestination\" title=\"Add a replication destination (Alt+N)\" accesskey=\"N\">                        <i class=\"fa fa-plus\"></i> Add destination                    </button>                    <!-- ko if: true -->                         <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: refreshFromServer\" title=\"Refresh from server, discarding any unsaved changes\" >                            <i class=\"fa fa-refresh\"></i>                        </button>                    <!-- /ko -->                     <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSaveEnabled\" title=\"Save replication destinations (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>                </div>                <div class=\"clearfix\"></div>            </div>            <div class=\"panel-body\" data-bind=\"with: replicationsSetup\">                <div class=\"alert alert-warning\" data-bind=\"visible: destinations().length === 0\">                    You\'ve got no replication destinations set up.                </div>                <div data-bind=\"foreach: destinations\">                    <div class=\"panel replication-destination-card\" data-bind=\"css: { \'panel-danger\': !isValid(), \'panel-info\': isValid() && !disabled(), \'panel-warning\': isValid() && disabled() }\">                        <div class=\"panel-heading\">                            <h3 class=\"panel-title\">                                <span data-bind=\"text: name\"></span>                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" data-bind=\"click: $root.removeDestination.bind($root)\" title=\"Remove this replication destination\"><i class=\"fa fa-times\"></i></button>                            </h3>                        </div>                        <div class=\"panel-body\">                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">&nbsp;</label>                                <div class=\"col-sm-7\">                                    <div class=\"btn-group\" data-toggle=\"buttons\">                                        <label class=\"btn btn-primary\" data-bind=\"click: enable, css: { active: !disabled() }\">                                            <input type=\"radio\" name=\"options\"> Enabled                                        </label>                                        <label class=\"btn btn-primary\" data-bind=\"click: disable, css: { active: disabled }\">                                            <input type=\"radio\" name=\"options\"> Disabled                                        </label>                                    </div>                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">Url</label>                                <div class=\"col-sm-7\">                                    <input required type=\"url\" class=\"form-control\" data-bind=\"value: serverUrl, valueUpdate: \'afterkeydown\'\" />                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">Counter Storage</label>                                <div class=\"col-sm-7\">                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: counterStorageName, valueUpdate: \'afterkeydown\'\" />                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">Credentials</label>                                <div class=\"col-sm-7\">                                    <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleUserCredentials, css: {active:isUserCredentials}\">User</button>                                    <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleApiKeyCredentials, css: {active:isApiKeyCredentials}\">ApiKey</button>                                </div>                            </div>                            <div data-bind=\"if: isUserCredentials, visible: isUserCredentials\">                                <div class=\"form-group\">                                    <label class=\"col-sm-4 control-label\">User Name</label>                                    <div class=\"col-sm-7\">                                        <input required type=\"text\" class=\"form-control\" data-bind=\"value: username, valueUpdate: \'afterkeydown\'\" />                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-sm-4 control-label\">Password</label>                                    <div class=\"col-sm-7\">                                        <input required type=\"text\" class=\"form-control\" data-bind=\"value: password, valueUpdate: \'afterkeydown\'\" />                                    </div>                                </div>                                <div class=\"form-group\">                                    <label class=\"col-sm-4 control-label\">Domain</label>                                    <div class=\"col-sm-7\">                                        <input required type=\"text\" class=\"form-control\" data-bind=\"value: domain, valueUpdate: \'afterkeydown\'\" />                                    </div>                                </div>                            </div>                            <div data-bind=\"if: isApiKeyCredentials, visible: isApiKeyCredentials\">                                <div class=\"form-group\">                                    <label class=\"col-sm-4 control-label\">API Key</label>                                    <div class=\"col-sm-7\">                                        <input required type=\"text\" class=\"form-control\" data-bind=\"value: apiKey, valueUpdate: \'afterkeydown\'\" />                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </form></div>'; } )
define("text!views/counter/counterStorages.html", [], function () { return '<!--<div class=\"alert alert-danger\">    <p>Note: not finished implementation yet</p>    <a href=\"http://issues.hibernatingrhinos.com/issue/RavenDB-2063\">You can track progress here</a></div>--><section class=\"filesystem-page\">    <div class=\"text-center\" data-bind=\"visible: counterStorages().length == 0\">        <h3 class=\"page-header text-info\">No counter storages are available. <small>Go ahead and <a href=\"#\" data-bind=\"click: createNewCountersStorage\">create a distributed counter storage</a>.</small></h3>    </div>    <div data-bind=\"visible: counterStorages().length > 0\">        <div style=\"position: relative\">            <ul class=\"breadcrumb\">                <li>                    <h3>                        <a href=\"#counterstorages\">                            Counter Storages                        </a>                    </h3>                </li>            </ul>            <div class=\"btn-toolbar\">                <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: createNewCountersStorage\" accesskey=\"n\" title=\"Create a new file system. (Alt+N)\">                    <i class=\"fa fa-plus\"></i> New Counter Storage                </button>                <form class=\"form-inline\" style=\"display: inline-block; vertical-align: middle;\">                    <input type=\"text\" accesskey=\"s\" class=\"form-control col-md-8\" placeholder=\"Search\" data-bind=\"value: searchCounterStorageByText, valueUpdate: \'afterkeydown\'\" title=\"Search for a file system (Alt+S)\">                </form>                <button class=\"btn btn-danger\" data-bind=\"visible: !!selectedCounterStorage(), click: deleteSelectedCounterStorage\"><i class=\"fa fa-trash-o\"></i></button>            </div>            <br />            <div class=\"filesystems-container\" data-bind=\"foreach: counterStorages\">                <div class=\"filesystem\" data-bind=\"visible: isVisible, click: function () { $root.selectCounterStorage($data); return true; }, css: { selected: isSelected }\">                    <h4><a data-bind=\"text: name, attr: { href: $root.getCounterStorageUrl($data) }\"></a></h4>                    <!--<span class=\"text-muted\" data-bind=\"style: { visibility: statistics() ? \'visible\':\'hidden\' }, text: itemCount() + \' files\'\"></span>-->                </div>            </div>        </div>    </div></section>'; } )
define("text!views/counter/counterStorageStats.html", [], function () { return '<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>    <title></title></head><body></body></html>'; } )
define("text!views/counter/createCounterStorage.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: nextOrCreate\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\"></button>            <h4 class=\"modal-title\">Create Counter Storage</h4>        </div>        <div class=\"modal-body\">            <div class=\"row\">                <div class=\"col-md-12\">                    <div class=\"form-group\">                        <label for=\"counterStorageName\">Name</label>                        <input required type=\"text\" class=\"form-control\" id=\"counterStorageName\" placeholder=\"Counter Storage Name\" data-bind=\"value: counterStorageName, valueUpdate: \'afterkeydown\', hasfocus: counterStorageNameFocus\">                    </div>                    <div class=\"panel-group\" id=\"accordion\">                        <div class=\"panel panel-default\">                            <div class=\"panel-heading\">                                <h4 class=\"panel-title\">                                    <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#advancedOptions\">                                        Advanced Settings                                    </a>                                </h4>                            </div>                            <div id=\"advancedOptions\" class=\"panel-collapse collapse\">                                <div class=\"panel-body\">                                    <div class=\"form-group\">                                        <label for=\"counterStoragePath\">Path</label>                                        <input data-bind=\"value: counterStoragePath, valueUpdate: \'afterkeydown\', attr: { placeholder: \'~/Counters/\' + counterStorageName() }\" type=\"text\" class=\"form-control\" id=\"databasePath\">                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"submit\" class=\"btn btn-primary\">Create</button>        </div>    </form></div>'; } )
define("text!views/counter/deleteCounterStorageConfirm.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\"></button>        <h4 class=\"modal-title\">Delete Counter Storage?</h4>    </div>    <div class=\"modal-body\">        <p>Delete options:</p>        <div class=\"btn-group\" data-toggle=\"buttons\">            <label class=\"btn btn-primary active\" title=\"Keep the physical counter storage files on disk\" data-bind=\"click: keepFiles\">                <input type=\"radio\" name=\"options\" id=\"option1\"> Keep files            </label>            <label class=\"btn btn-primary\" title=\"Delete all files from disk which related to this counter storage\" data-bind=\"click: deleteEverything\">                <input type=\"radio\" name=\"options\" id=\"option2\"> Delete everything            </label>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteCounterStorage\">Yep, delete</button>    </div></div>'; } )
define("text!views/counter/editCounterDialog.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\" style=\"width:60%\">    <form data-bind=\"submit: nextOrCreate\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\"></button>            <h4 class=\"modal-title\" data-bind=\"text:(isNewCounter == true? \'Create \' : \'Update \' ) + \'Counter\'\"></h4>        </div>        <div class=\"modal-body\">            <div class=\"row\">                <div class=\"col-md-12\" data-bind=\"with: editedCounter()\">                    <div class=\"col-md-12\">                        <label class=\"col-md-6\" for=\"counterId\">Counter Name:</label>                        <div class=\"col-md-6\">                            <input required type=\"text\" class=\"form-control\" id=\"counterId\" placeholder=\"Counter Name\" data-bind=\"enable: $root.isNewCounter, value: id, valueUpdate: \'afterkeydown\'\">                        </div>                    </div>                    <div class=\"col-md-12\">                        <label class=\"col-md-6\" for=\"counterGroup\">Group Name:</label>                        <div class=\"col-md-6\">                            <input required type=\"text\" class=\"form-control\" id=\"counterGroup\" placeholder=\"Group Name\" data-bind=\"enable: $root.isNewCounter, value: group, valueUpdate: \'afterkeydown\'\">                        </div>                    </div>                    <div class=\"col-md-12\">                        <label class=\"col-md-6\" for=\"counterOverall\">Overall Total:</label>                        <div class=\"col-md-6\">                            <input type=\"text\" class=\"form-control\" id=\"counterOverall\" data-bind=\"enable:false, value: overallTotal()\"></input>                        </div>                    </div>                    <div class=\"col-md-12\">                        <label class=\"col-md-6\" for=\"counterDelta\">Delta</label>                        <div class=\"col-md-6\" style=\"display:inline-block\">                            <input class=\"form-control\" required type=\"number\" id=\"counterDelta\" placeholder=\"Counter Delta\" data-bind=\"value: $root.counterDelta, valueUpdate: \'afterkeydown\'\">                        </div>                    </div>                </div>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"text:(isNewCounter == true? \'Create \' : \'Update \' )\"></button>        </div>    </form></div>'; } )
define("text!views/counter/editCounterStorage.html", [], function () { return '<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>    <title></title></head><body></body></html>'; } )
define("text!views/filesystem/backupFilesystem.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: startBackup\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <div class=\"btn-group\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"disable: isBusy\">                    <i class=\"fa fa-cloud-upload\"></i>                    <span>Start Backup</span>                </button>            </div>        </div>        <div class=\"panel-body\">            <div class=\"form-group\">                <label for=\"databaseName\" class=\"col-sm-2 control-label\">Filesystem to backup</label>                <div class=\"col-sm-3\">                    <input tabindex=\"2\" required type=\"text\" name=\"filesystemName\" class=\"form-control\" id=\"filesystemName\" data-bind=\"value: filesystemName, valueUpdate: \'afterkeydown\', customValidity: nameCustomValidityError\" placeholder=\"Filesystem name to backup\">                    <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#filesystemName\', foreach: searchResults\">                        <li role=\"presentation\" data-bind=\"click: $parent.filesystemName.bind($parent, $data)\">                            <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                <span data-bind=\"text: $data\"></span>                            </a>                        </li>                    </ul>                </div>            </div>            <div class=\"form-group\">                <label for=\"location\" class=\"col-sm-2 control-label\">Location</label>                <div class=\"col-sm-5\">                    <input type=\"text\" required class=\"form-control\" id=\"location\" data-bind=\"value: backupLocation\" placeholder=\"C:&#92;path-to-your-backup-folder\">                </div>            </div>             <div class=\"form-group\">                <div class=\"col-sm-offset-2 col-sm-5\">                    <div class=\"checkbox\">                        <label>                            <input type=\"checkbox\" data-bind=\"checked: incremental\"> Incremental                        </label>                    </div>                </div>            </div>            <div class=\"progress progress-striped active\" data-bind=\"visible: isBusy\">                <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>            </div>            <div data-bind=\"foreach: backupStatusMessages, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: \'10px\' }\">                <div data-bind=\"text: \'[\' + Timestamp+ \']\t\' + Severity +\':\t\'+ Message\"></div>            </div>        </div>    </div></form>'; } )
define("text!views/filesystem/compactFilesystem.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: startCompact\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <div class=\"btn-group\">                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"disable: isBusy\">                    <i class=\"fa fa-hdd-o\"></i>                    <span>Start Compaction</span>                </button>            </div>        </div>        <div class=\"panel-body\">            <div class=\"form-group\">                <label for=\"filesystemName\" class=\"col-sm-2 control-label\">Filesystem to compact</label>                <div class=\"col-sm-3\">                    <input tabindex=\"2\" required type=\"text\" name=\"filesystemName\" class=\"form-control\" id=\"filesystemName\" data-bind=\"value: filesystemName, valueUpdate: \'afterkeydown\', customValidity: nameCustomValidityError\" placeholder=\"Filesystem name to compact\">                    <ul class=\"dropdown-menu\" role=\"menu\" style=\"display: none;\" data-bind=\"autoComplete: \'#filesystemName\', foreach: searchResults\">                        <li role=\"presentation\" data-bind=\"click: $parent.filesystemName.bind($parent, $data)\">                            <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                                <span data-bind=\"text: $data\"></span>                            </a>                        </li>                    </ul>                </div>            </div>            <div class=\"progress progress-striped active\" data-bind=\"visible: isBusy\">                <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 100%\"></div>            </div>                        <p>                <i class=\"fa fa-warning text-warning\"></i> <span class=\"text-muted\">Compaction takes filesystem offline.</span>            </p>        </div>    </div></form>'; } )
define("text!views/filesystem/configuration.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#filesystems\">                File Systems            </a>        </h3>    </li>    <li class=\"active\" data-bind=\"with: activeFilesystem\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.filesystemFiles }\"></a>    </li>    <li class=\"active\">        <span>Configuration</span>    </li></ul><div id=\"configurationContainer\" tabindex=\"-1\">    <div class=\"text-center\" data-bind=\"visible: keys().length == 0\">        <h3>No configuration keys have been created for this file system. <small>Go ahead and <a href=\"#\" data-bind=\"click: newConfigurationKey\">create a configuration key</a>.</small></h3>    </div>    <div class=\"row\" data-bind=\"visible: keys().length > 0\">        <div class=\"col-md-3\">            <ul class=\"nav nav-pills nav-stacked keys-collection\" data-bind=\"foreach: keys\">                <li data-bind=\"event: { mousedown: $parent.selectKey.bind($parent) }, css: { active: $data === $parent.selectedKey() }\">                    <a href=\"#\" data-bind=\"text: key, click: $parent.selectKey.bind($parent)\"></a>                </li>            </ul>        </div>        <div id=\"settingsContainer\" class=\"col-md-9\">            <form data-bind=\"submit: save\">                <div class=\"row\">                    <div class=\"btn-toolbar\">                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: newConfigurationKey\" title=\"Create new key (Alt+N)\" accesskey=\"N\">                                <i class=\"fa fa-plus\"></i>                            </button>                        </div>                        <div class=\"btn-group\">                            <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: save, enable: isSaveEnabled\" title=\"Save (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>                            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: refreshConfig\" title=\"Refresh (Alt+R)\" accesskey=\"R\"><i class=\"fa fa-refresh\"></i></button>                            <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: deleteConfiguration\" title=\"Delete (Alt+shift+Del)\" accesskey=\"D\"><i class=\"fa fa-trash-o\"></i></button>                        </div>                    </div>                </div>                <div class=\"row\"> &nbsp; </div>                <div class=\"row\">                    <pre id=\"configurationEditor\" class=\"form-control\" data-bind=\"aceEditor: { code: text, fontSize:\'16px\', lang: \'ace/mode/json\'}, attr: { disabled: isBusy }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 20 }\"></pre>                </div>            </form>        </div>    </div></div>'; } )
define("text!views/filesystem/createConfigurationKey.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: create\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Create Configuration Key</h4>        </div>        <div class=\"modal-body\">            <div class=\"form-group\">                <label for=\"databaseName\">Name</label>                <input required type=\"text\" class=\"form-control\" id=\"configurationKeyName\" placeholder=\"Configuration Key Name\" data-bind=\"value: configurationKeyName, hasfocus: configurationKeyNameFocus\">            </div>        </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"submit\" class=\"btn btn-primary\">Create</button>        </div>    </form></div>'; } )
define("text!views/filesystem/createFilesystem.html", [], function () { return '<div class=\"col-md-12\">    <div class=\"form-group\">        <label for=\"databaseName\">Name</label>        <input data-bind=\"value: fileSystemName, valueUpdate: \'afterkeydown\', hasfocus: fileSystemNameFocus, customValidity: nameCustomValidityError\" type=\"text\" class=\"form-control\" id=\"filesystemName\" autocomplete=\"off\" placeholder=\"File System Name\">    </div>    <div class=\"panel-group\" id=\"accordion\">        <div class=\"panel panel-default\">            <div class=\"panel-heading\">                <h4 class=\"panel-title\">                    <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#fsAdvancedOptions\">                        Advanced Settings                    </a>                </h4>            </div>            <div id=\"fsAdvancedOptions\" class=\"panel-collapse collapse\">                <div class=\"panel-body\">                    <div class=\"form-group\">                        <label for=\"filesystemPath\">Path</label>                        <input data-bind=\"value: fileSystemPath, customValidity: pathCustomValidityError, valueUpdate: \'afterkeydown\', attr: { placeholder: \'~/Filesystems/\' + fileSystemName() }\" type=\"text\" class=\"form-control\" id=\"filesystemPath\" autocomplete=\"off\">                    </div>                    <div class=\"form-group\">                        <label for=\"filesystemLogs\">Logs</label>                        <input data-bind=\"value: fileSystemLogsPath, customValidity: logsCustomValidityError, valueUpdate: \'afterkeydown\', attr: { placeholder: (fileSystemPath() || \'~/Filesystems/\' + fileSystemName()) }\" type=\"text\" class=\"form-control\" id=\"filesystemLogs\" autocomplete=\"off\">                    </div>                    <div class=\"form-group\">                        <label for=\"storageEngine\">Storage Engine</label>                        <select data-bind=\"value: storageEngine\" class=\"form-control\" id=\"storageEngine\">                            <option value=\"\">Default</option>                            <option value=\"esent\">Esent</option>                            <option value=\"voron\">Voron</option>                        </select>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/filesystem/createFolderInFilesystem.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: create\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Create folder</h4>        </div>        <div class=\"modal-body\">            <div class=\"form-group\">                <label for=\"folderName\">Name</label>                <input required type=\"text\" class=\"form-control\" id=\"filesystemName\" placeholder=\"Folder Name\" data-bind=\"value: folderName\">            </div>        </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"submit\" class=\"btn btn-primary\">Create</button>        </div>    </form></div>'; } )
define("text!views/filesystem/deleteConfigurationKeys.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Sure?</h4>    </div>    <div class=\"modal-body\">        <p data-bind=\"visible: keys().length === 1\">            <span>You\'re deleting</span>            <strong data-bind=\"with: keys()[0]\">                <span data-bind=\"text: key\"></span>            </strong>        </p>        <div data-bind=\"visible: keys().length > 1\">            <span>You\'re deleting</span>            <strong data-bind=\"text: keys().length\"></strong>            <span>items:</span>            <br />            <ul data-bind=\"foreach: keys\" style=\"max-height: 100px; overflow-y: auto;\">                <li data-bind=\"text: key\"></li>            </ul>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: deleteKeys\">Yep, delete</button>    </div></div>'; } )
define("text!views/filesystem/deleteFiles.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <div class=\"modal-header\">        <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">            <i class=\"fa fa-times\"></i>        </button>        <h4 class=\"modal-title\">Sure?</h4>    </div>    <div class=\"modal-body\">        <p data-bind=\"visible: files().length === 1\">            <span>You\'re deleting</span>            <strong data-bind=\"with: files()[0]\">                <span data-bind=\"text: __metadata.id\"></span>            </strong>        </p>        <div data-bind=\"visible: files().length > 1\">            <span>You\'re deleting</span>            <strong data-bind=\"text: files().length\"></strong>            <span>files:</span>            <br />            <ul data-bind=\"foreach: files\" style=\"max-height: 100px; overflow-y: auto;\">                <li data-bind=\"text: $data.id\"></li>            </ul>        </div>    </div>    <div class=\"modal-footer\">        <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Nevermind</button>        <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: deleteFiles\">Yep, delete</button>    </div></div>'; } )
define("text!views/filesystem/filesystemEditFile.html", [], function () { return '<div id=\"editFileContainer\" tabindex=\"-1\">    <!-- We use a container with a tab index so that we can capture keyboard events, such as CTRL+S. -->    <ul class=\"breadcrumb\">        <li>            <h3>                <i class=\"fa fa-file-text-o\"></i>                <a data-bind=\"click: navigateToFiles\">                    File Systems                </a>            </h3>        </li>        <li class=\"active\">            <span data-bind=\"text: fileName\"></span>        </li>    </ul>    <div class=\"btn-toolbar\">        <div class=\"btn-group\">            <button type=\"button\" class=\"btn btn-primary\" data-bind=\"click: saveFileMetadata\" title=\"Save (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: refreshFile\" title=\"Refresh (Alt+R)\" accesskey=\"R\"><i class=\"fa fa-refresh\"></i></button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: downloadFile\" title=\"Download file (Alt+O)\" accesskey=\"O\"><i class=\"fa fa-download\"></i></button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: deleteFile\" title=\"Delete (Alt+shift+Del)\"><i class=\"fa fa-trash-o\"></i></button>        </div>    </div>    <br />    <div class=\"row\">        <div class=\"col-md-7\">            <div class=\"row\">                <div class=\"col-md-12\">                    <input type=\"text\" class=\"form-control\" title=\"File name\" data-bind=\"value: fileName, attr: { disabled: true }\" />                </div>            </div>            <br />            <div class=\"row\">                <div class=\"col-md-12\">                    <ul class=\"nav nav-tabs\">                        <li accesskey=\"m\" title=\"Edit file metadata (Alt+M)\">File Metadata</li>                    </ul>                    <pre id=\"fileMetadataEditor\" class=\"form-control\" data-bind=\"attr: { disabled: isBusy }, dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\', bottomMargin: 20 }\"></pre>                </div>            </div>        </div>        <div class=\"form-group panel panel-default col-md-5 document-addition-data side-panel\">            <div class=\"col-md-12\" data-bind=\"with: metadata\">                <h4><strong>Metadata</strong></h4>                <hr />                <div class=\"row\">                    <div class=\"col-md-5\">                        <label>Etag</label>                    </div>                    <div class=\"col-md-7\">                        <span data-bind=\"text: etag\"></span>                    </div>                </div>                <div class=\"row\">                    <div class=\"col-md-5\">                        <label>Creation-Date</label>                    </div>                    <div class=\"col-md-7\">                        <span data-bind=\"text: creationDate\"></span>                    </div>                </div>                <div class=\"row\">                    <div class=\"col-md-5\">                        <label>Last-Modified</label>                    </div>                    <div class=\"col-md-7\">                        <span data-bind=\"text: lastModified\"></span>                    </div>                </div>                <div class=\"row\">                    <div class=\"col-md-5\">                        <label>RavenFS-Size</label>                    </div>                    <div class=\"col-md-7\">                        <span data-bind=\"text: ravenFSSize\"></span>                    </div>                </div>            </div>            <div class=\"col-md-12 query-metadata\" data-bind=\"visible:topRecentFiles().length > 0\">                <h4><strong>Recent Files</strong></h4>                <hr />                <div class=\"documents-links-container\" data-bind=\"foreach: topRecentFiles\">                    <a class=\"document-link\" data-bind=\"attr: { href: fileUrl }\">                        <span class=\"collection-color-strip system-documents-collection\">&nbsp;</span>                        <span data-bind=\"text: fileId\"></span>                    </a>                </div>            </div>                    </div>    </div></div>'; } )
define("text!views/filesystem/filesystemFiles.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#filesystems\">                File Systems            </a>        </h3>    </li>    <li class=\"active\" data-bind=\"with: activeFilesystem\">        <span data-bind=\"text: name\" />    </li>    <li class=\"active\">        <span>All</span>    </li></ul><div id=\"fileSystemFilesPage\">     <div class=\"row\">        <div class=\"col-md-2\">            <div class=\"btn-toolbar\" role=\"toolbar\">                <div class=\"btn-group\">                    <button type=\"button\" class=\"btn btn-primary\" accesskey=\"n\" data-bind=\"click: createFolder\" title=\"Create folder\">                        <span>New Folder</span>                    </button>                </div>                <div class=\"btn-group\">                    <span class=\"btn btn-primary btn-file\" title=\"Upload files\">                        <i class=\"fa fa-upload\"></i>                        <input id=\"upload\" name=\"upload\" type=\"file\" multiple=\"multiple\" data-bind=\"value: uploadFiles, fileUpload: { files: uploadFiles, directory: selectedFolder, uploads: uploadQueue, before: expandUploadQueuePanel, success: uploadSuccess.bind($data), fail: uploadFailed.bind($data) }\" />                    </span>                </div>            </div>            <span><br/></span>            <div id=\"filesTree\" data-bind=\"tree: {selectedNode: selectedFolder, addedNode: addedFolder, currentLevelNodes: currentLevelSubdirectories}\" />        </div>        <div class=\"col-md-10\">            <div class=\"btn-toolbar\" role=\"toolbar\">                <div class=\"btn-group\">                    <button type=\"button\" class=\"btn btn-link\" style=\"margin-left: 10px;\" data-bind=\"click: toggleSelectAll\" title=\"Select all or none\">                        <img data-bind=\"attr: { src: isSelectAll() ? \'content/images/checked.png\' : \'content/images/unchecked.png\' }\" />                    </button>                </div>                <div class=\"btn-group\" data-bind=\"visible: hasAnyFileSelected\">                    <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: editSelectedFile\" title=\"Edit selected document (F2)\">                        <i class=\"fa fa-pencil\"></i>                    </button>                    <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: deleteSelectedFiles\" title=\"Delete selected documents (DEL)\">                        <i class=\"fa fa-trash-o\"></i>                    </button>                    <button type=\"button\" class=\"btn btn-default\" data-bind=\"enable: selectedFilesIndices().length == 1, click: downloadSelectedFiles\" title=\"Download selected document\">                        <i class=\"fa fa-download\"></i>                    </button>                </div>                <span></span>            </div>            <div class=\"files-select\" data-bind=\"visible: selectedFilesIndices().length > 0\">                You have selected <strong data-bind=\"text: $root.selectedFilesIndices().length\"></strong> files.            </div>            <div id=\"filesGrid\" data-bind=\"widget: { kind: \'virtualTable\', itemsSource: allFilesPagedItems, selectedIndices: selectedFilesIndices, dynamicHeightTargetSelector: \'#uploadQueueContainer\', gridSelector: \'#filesGrid\', contextMenuOptions: [\'Delete\'] }\"></div>        </div>    </div>    <div class=\"row\">        <div id=\"uploadQueueContainer\" class=\"upload-queue panel panel-info\">            <div class=\"panel-heading\">                <span><i class=\"fa fa-upload bold blue\"></i>&nbsp;Upload Queue</span>                <a href=\"#\" id=\"uploadQueuePanelToggle\" class=\"opened pull-right\" style=\"float:right; padding-right:10px\" data-bind=\"click: toggleCollapseUploadQueue\"><i class=\"fa fa-angle-double-down bold red\"></i></a>            </div>            <div class=\"panel-body\">                <div id=\"uploadQueue\" >                    <button id=\"clearUploadQueue\" class=\"btn btn-default btn-sm pull-right\" title=\"Clear queue\"                             data-trigger=\"hover\" data-toggle=\"tooltip\" data-bind=\"click: $root.clearUploadQueue.bind($root)\">                        <i class=\"fa fa-ban\"></i>                    </button>                    <div style=\"height:230px; overflow-y:auto\">                        <table class=\"table table-striped table-hover\">                            <thead>                                <tr class=\"database-header\">                                    <td class=\"ko-grid-column-header\"><b>File</b></td>                                    <td class=\"ko-grid-column-header\"><b>Status</b></td>                                </tr>                            </thead>                            <tbody data-bind=\"foreach: $root.uploadQueue\">                                <tr class=\"database-row\">                                    <td data-bind=\"text: fileName\"></td>                                    <td data-bind=\"text: status\"></td>                                </tr>                            </tbody>                        </table>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/filesystem/filesystemUploadFile.html", [], function () { return '<div id=\"indexesContainer\" tabindex=\"-1\">    <!-- We use a container with a tab index so that we can capture keyboard events, such as CTRL+S. -->    <ul class=\"breadcrumb\">        <li>            <h3>                <a href=\"#filesystems\" data-bind=\"click: navigateToFiles\">                    Filesystems                </a>            </h3>        </li>        <li data-bind=\"with: activeFilesystem\">            <a data-bind=\"text: name\"></a>        </li>        <li>            <a>Files</a>        </li>        <li>            <a>Upload</a>        </li>    </ul>    <div>        <br />        <br />        <form>            <input id=\"upload\" name=\"upload\" type=\"file\" multiple=\"multiple\" data-bind=\"value: files, fileUpload: { files: files, directory: selectedDirectory, uploads: uploadQueue, success: uploadSuccess.bind($data), fail: uploadFailed.bind($data) }\" />        </form>        <br />        <br />    </div>    <div class=\"indexes-container\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\">        <div class=\"index-group panel panel-default\">            <div class=\"panel-heading\">                <div class=\"pull-right indexGroup-actions-container\">                         <button class=\" btn btn-danger\" title=\"Clear queue\"                                  data-bind=\"click: $root.clearUploadQueue.bind($root)\">                            <i class=\"fa fa-trash-o\"></i>                        </button></div>                <h1 class=\"panel-title\">                    Upload Queue                </h1>            </div>            <div class=\"index-group-content\">                <table class=\"table table-striped table-hover\">                    <thead>                        <tr class=\"database-header\">                            <td class=\"ko-grid-column-header\"><b>File</b></td>                            <td class=\"ko-grid-column-header\"><b>Status</b></td>                        </tr>                    </thead>                    <tbody data-bind=\"foreach: $root.uploadQueue\">                        <tr class=\"database-row\">                            <td data-bind=\"text: fileName\"></td>                            <td data-bind=\"text: status\"></td>                        </tr>                    </tbody>                </table>            </div>        </div>    </div></div>'; } )
define("text!views/filesystem/resolveConflict.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: resolve\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: cancel\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\" data-bind=\"text: title\"></h4>        </div>        <div class=\"modal-body\">            <span data-bind=\"html: message\"></span>        </div>        <div class=\"modal-footer\">            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</button>            <button type=\"submit\" class=\"btn btn-warning\">Resolve</button>        </div>    </form></div>'; } )
define("text!views/filesystem/restoreFilesystem.html", [], function () { return '<form class=\"form-horizontal\" role=\"form\" data-bind=\"submit: startRestore\">    <div class=\"panel panel-default\">        <div class=\"panel-heading panel-info\">            <button type=\"submit\" title=\"Start restore\" class=\"btn btn-primary\" data-bind=\"disable: isBusy\">                <i class=\"fa fa-cloud-download\"></i>                <span>Restore Filesystem</span>            </button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"visible: isBusy, css: { \'active\': keepDown }, click: function () { this.toggleKeepDown() }\">KeepDown</button>            <div data-bind=\"visible: anotherRestoreInProgres()\" class=\"badge pull-right\"> <span class=\"fa fa-spinner fa-spin\"></span> Another restore in progress</div>        </div>        <div class=\"panel-body\">            <div>                <div class=\"form-group\">                    <label for=\"backupLocation\" class=\"col-sm-2 control-label\">Backup Location</label>                    <div class=\"col-sm-5\">                        <input data-bind=\"value: backupLocation, disable: isBusy\" type=\"text\" required class=\"form-control\" id=\"backupLocation\" placeholder=\"C:&#92;path-to-your-backup-folder\">                    </div>                </div>                <div class=\"form-group\">                    <label for=\"filesystemLocation\" class=\"col-sm-2 control-label\">Filesystem Location</label>                    <div class=\"col-sm-5\">                        <input data-bind=\"value: filesystemLocation, disable: isBusy\" type=\"text\" class=\"form-control\" id=\"filesystemLocation\" placeholder=\"C:&#92;path-to-your-restored-filesystem-folder\">                    </div>                </div>                <div class=\"form-group\">                    <label for=\"filesystemName\" class=\"col-sm-2 control-label\">Filesystem Name</label>                    <div class=\"col-sm-3\">                        <input data-bind=\"value: filesystemName, disable: isBusy, customValidity: nameCustomValidityError\" type=\"text\" required class=\"form-control\" id=\"filesystemName\" placeholder=\"Restored filesystem name\" autocomplete=\"off\">                    </div>                </div>                <div class=\"form-group\">                    <div class=\"col-sm-offset-2 col-sm-5\">                        <div class=\"checkbox\">                            <label>                                <input type=\"checkbox\" data-bind=\"checked: defrag, disable: isBusy\"> Defrag                            </label>                        </div>                    </div>                </div>            </div>        </div>    </div>    <div id=\"restoreLog\" data-bind=\"dynamicHeight: { resizeTrigger: window.ravenStudioWindowHeight(), target: \'footer\' }\" >        <pre data-bind=\"visible: restoreStatusMessages().length > 0\" id=\"restoreLogPre\" style=\"word-wrap: normal; overflow: auto; height: 97%\"><!-- ko foreach: restoreStatusMessages --><div data-bind=\"text: $data\"></div><!-- /ko -->        </pre>    </div></form>'; } )
define("text!views/filesystem/search.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#filesystems\">                File Systems            </a>        </h3>    </li>    <li class=\"active\" data-bind=\"with: activeFilesystem\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.filesystemFiles }\"></a>    </li>    <li class=\"active\">        <span>Settings</span>    </li></ul><div class=\"filesystems-page\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <form class=\"form-inline\">                <div class=\"row\" style=\"padding: 0 10px 0 10px\">                    <div class=\"input-group col-lg-12\">                        <input type=\"text\" class=\"form-control\" data-bind=\"value: searchText\" placeholder=\"E.g. __fileName:MyFile* AND __directoryName:/subfolder\" />                        <span class=\"input-group-addon\" style=\"width: 30px\">                            <a href=\"#\" data-bind=\"click: clear\"><i class=\"fa fa-times\"></i></a>                        </span>                        <span class=\"input-group-addon\" style=\"width: 30px\">                            <a href=\"#\" data-bind=\"click: search\"><i class=\"fa fa-search\"></i></a>                        </span>                    </div>                </div>            </form>            <br />            <h5>Add search filter</h5>            <div class=\"row\" style=\"padding: 0 10px 0 10px\">                <div class=\"btn-group\">                    <button id=\"fileNameStartsWith\" type=\"button\" class=\"btn btn-default\" data-bind=\"click: fileNameStartsWith\">File name starts with...</button>                    <button id=\"fileNameEndsWith\" type=\"button\" class=\"btn btn-default\" data-bind=\"click: fileNameEndsWith\">File name ends with...</button>                    <button id=\"fileSizeBetween\" type=\"button\" class=\"btn btn-default\" data-bind=\"click: fileSizeBetween\">File size...</button>                    <button id=\"hasMetadata\" type=\"button\" class=\"btn btn-default\" data-bind=\"click: hasMetadata\">Has metadata...</button>                    <button id=\"inFolder\" type=\"button\" class=\"btn btn-default\" data-bind=\"click: inFolder\">In folder...</button>                    <button id=\"lastModifiedBetween\" type=\"button\" class=\"btn btn-default\" data-bind=\"click: lastModifiedBetween\">Last modified...</button>                </div>            </div>        </div>        <div class=\"panel-body\">            <div id=\"filesGrid\" data-bind=\"widget: { kind: \'virtualTable\', itemsSource: allFilesPagedItems, selectedIndices: selectedFilesIndices, gridSelector: \'#filesGrid\', contextMenuOptions: [], selectionEnabled: false }\"></div>        </div>    </div></div>'; } )
define("text!views/filesystem/searchFileSizeRangeClause.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: applyFilter\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Add search filter</h4>        </div>        <div class=\"modal-body\">            <div class=\"form-group form-inline\">                <label>File size between: </label>                <input type=\"text\" class=\"form-control\" data-bind=\"value: inputs[0]\" />                <label> and: </label>                <input type=\"text\" class=\"form-control\" data-bind=\"value: inputs[1]\" />            </div>            <div class=\"form-group help-block\">                <p><b>Hint:</b> use <b>Kb</b>, <b>Mb</b> or <b>Gb</b> to specify unit (case insensitive). Default: Bytes</p>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" data-bind=\"enable: enabled()\" class=\"btn btn-primary\">Apply</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close\">Cancel</button>        </div>    </form></div>'; } )
define("text!views/filesystem/searchHasMetadataClause.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: applyFilter\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Add search filter</h4>        </div>        <div class=\"modal-body form-inline\">            <div class=\"form-group\">                <label>Key: </label>                <input id=\"keysAutocomplete\" type=\"text\" class=\"form-control\" placeholder=\"Search key...\" data-bind=\"value: inputs[0], valueUpdate: \'afterkeydown\'\" autocomplete=\"off\" />                <ul style=\"display: none\" class=\"dropdown-menu\" role=\"menu\" data-bind=\"autoComplete: \'#keysAutocomplete\', foreach: keySearchResults\">                    <li role=\"presentation\" data-bind=\"click: $root.setKey.bind($root, $data)\">                        <a role=\"menuitem\" tabindex=\"-1\" href=\"#\">                            <span data-bind=\"text: $data\"></span>                        </a>                    </li>                </ul>                <label> value: </label>                <input type=\"text\" class=\"form-control\" data-bind=\"value: inputs[1]\" />            </div>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" data-bind=\"enable: enabled()\" class=\"btn btn-primary\">Apply</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close\">Cancel</button>        </div>    </form></div>'; } )
define("text!views/filesystem/searchLastModifiedBetweenClause.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">    <form data-bind=\"submit: applyFilter\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Add search filter</h4>        </div>        <div class=\"modal-body form-inline\">            <div class=\"form-group\">                <label>Between: </label>                <input id=\"fromDate\" type=\"text\" class=\"form-control\" data-bind=\"value: inputs[0]\" />                <button class=\"btn btn-default\" id=\"fromDateButton\" data-bind=\"clickBubble: false, datePicker: fromDate, datepickerOptions: {endDateElement: \'toDateButton\'}\"><i class=\"fa fa-calendar\"></i></button>                <label> and: </label>                <input id=\"toDate\" type=\"text\" class=\"form-control\" data-bind=\"value: inputs[1]\" />                <button class=\"btn btn-default\" id=\"toDateButton\" data-bind=\"clickBubble: false, datePicker: toDate, datepickerOptions: {startDateElement: \'fromDateButton\'}\"><i class=\"fa fa-calendar\"></i></button>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" data-bind=\"enable: enabled()\" class=\"btn btn-primary\">Apply</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close\">Cancel</button>        </div>    </form></div>'; } )
define("text!views/filesystem/searchSingleInputClause.html", [], function () { return '<div class=\"messageBox\" tabindex=\"-1\">        <form data-bind=\"submit: applyFilter\">        <div class=\"modal-header\">            <button type=\"button\" class=\"close\" data-bind=\"click: close\" aria-hidden=\"true\">                <i class=\"fa fa-times\"></i>            </button>            <h4 class=\"modal-title\">Add search filter</h4>        </div>        <div class=\"modal-body\">            <div class=\"form-group\">                <label data-bind=\"text: label\"></label>                <input type=\"text\" id=\"firstInput\" class=\"form-control\" data-bind=\"value: inputs[0]\"/>            </div>        </div>        <div class=\"modal-footer\">            <button type=\"submit\" data-bind=\"enable: enabled()\" class=\"btn btn-primary\">Apply</button>            <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: close\">Cancel</button>        </div>    </form></div>'; } )
define("text!views/filesystem/status.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#filesystems\">                File Systems            </a>        </h3>    </li>    <li class=\"active\" data-bind=\"with: activeFilesystem\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.filesystemFiles }\"></a>    </li>    <li class=\"active\">        <span>Settings</span>    </li></ul><div class=\"filesystems-page\">     <button class=\"btn btn-primary\" data-bind=\"click: synchronizeNow\" title=\"Sync Now (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-refresh\"></i> Sync Now</button>        <br />    <br />    <div class=\"row\">        <div class=\"col-md-6\">            <div class=\"synchronization-group panel panel-default\" data-bind=\"visible: isOutgoingActivityVisible()\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title\">                        <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#outgoingActivityCollapse\' }\">                            <span>Outgoing Activity</span>                            <span class=\"text-muted\" data-bind=\"text: \'(\'+ outgoingActivity().length +\')\'\"></span>                        </a>                    </h4>                </div>                <div class=\"synchronization-group-content panel-collapse in\" data-bind=\"attr: { id: \'outgoingActivityCollapse\' }\" id=\"outgoingActivityCollapse\">                    <div class=\"panel-body\" style=\"padding-bottom:15px\">                        <div style=\"height:392px; overflow-y:auto\">                            <table class=\"table table-striped table-hover\">                                <thead>                                    <tr class=\"database-header\">                                        <td class=\"ko-grid-column-header\"><b>File Name</b></td>                                        <td class=\"ko-grid-column-header\"><b>Destination Url</b></td>                                        <td class=\"ko-grid-column-header\"><b>Type</b></td>                                        <td class=\"ko-grid-column-header\"><b>Status</b></td>                                    </tr>                                </thead>                                <tbody data-bind=\"foreach: $root.outgoingActivity\">                                    <tr class=\"database-row\">                                        <td data-bind=\"text: fileName\"></td>                                        <td data-bind=\"text: DestinationUrl\"></td>                                        <td data-bind=\"text: TypeDescription\"></td>                                        <td data-bind=\"text: Status\"></td>                                    </tr>                                </tbody>                            </table>                        </div>                    </div>                </div>            </div>        </div>        <div class=\"col-md-6\">            <div class=\"synchronization-group panel panel-default\" data-bind=\"visible: isIncomingActivityVisible()\">                <div class=\"panel-heading\">                    <h4 class=\"panel-title\">                        <a data-toggle=\"collapse\" data-bind=\"attr: { href: \'#incomingActivityCollapse\' }\">                            <span>Incoming Activity</span>                            <span class=\"text-muted\" data-bind=\"text: \'(\' + incomingActivity().length + \')\'\"></span>                        </a>                    </h4>                </div>                <div class=\"synchronization-group-content panel-collapse in\" id=\"incomingActivityCollapse\">                    <div class=\"panel-body\" style=\"height:422px; padding-bottom:15px\">                        <table class=\"table table-striped table-hover\">                            <thead>                                <tr class=\"database-header\">                                    <td class=\"ko-grid-column-header\"><b>File Name</b></td>                                    <td class=\"ko-grid-column-header\"><b>Destination Url</b></td>                                    <td class=\"ko-grid-column-header\"><b>Type</b></td>                                    <td class=\"ko-grid-column-header\"><b>Status</b></td>                                </tr>                            </thead>                            <tbody data-bind=\"foreach: $root.incomingActivity\">                                <tr class=\"database-row\">                                    <td data-bind=\"text: fileName\"></td>                                    <td data-bind=\"text: DestinationUrl\"></td>                                    <td data-bind=\"text: TypeDescription\"></td>                                    <td data-bind=\"text: Status\"></td>                                </tr>                            </tbody>                        </table>                    </div>                </div>            </div>        </div>    </div></div>'; } )
define("text!views/filesystem/synchronization.html", [], function () { return '<ul class=\"breadcrumb\">    <li>        <h3>            <a href=\"#filesystems\">                File Systems            </a>        </h3>    </li>    <li class=\"active\" data-bind=\"with: activeFilesystem\">        <a data-bind=\"text: name, attr: { href: $parent.appUrls.filesystemFiles }\"></a>    </li>    <li class=\"active\">        <span>Synchronization</span>    </li></ul><div>    <div class=\"settings-container row\">        <div class=\"col-md-2\">            <ul class=\"nav nav-list nav-pills nav-stacked\" data-bind=\"foreach: router.navigationModel\">                <li data-bind=\"css: { active: isActive }\">                    <a data-bind=\"attr: { href: hash }, text: title\"></a>                </li>            </ul>        </div>        <div class=\"col-md-10\" data-bind=\"router: { cacheViews: false }\">        </div>    </div></div>'; } )
define("text!views/filesystem/synchronizationConflicts.html", [], function () { return '<div class=\"synchronization-group panel panel-default\" >    <div class=\"panel-heading\">        <h4 class=\"panel-title\">            <a class=\"pull-right\" data-toggle=\"collapse\" data-bind=\"attr: { href: \'#conflictsCollapse\' }\">                <span>Conflicts</span>                <span class=\"text-muted\" data-bind=\"text: \'(\' + conflicts().length + \')\'\"></span>            </a>            <span class=\"btn-group\">                <button type=\"button\" class=\"btn btn-link\" style=\"margin-left: 10px;\" data-bind=\"click: toggleSelectAll\" title=\"Select all or none\">                    <img data-bind=\"attr: { src: isSelectAll() ? \'content/images/checked.png\' : \'content/images/unchecked.png\' }\" />                </button>                <button class=\"btn btn-primary\" data-bind=\"click: resolveWithLocalVersion\">Resolve with Local</button>                <button class=\"btn btn-primary\" data-bind=\"click: resolveWithRemoteVersion\">Resolve with Remote</button>            </span>        </h4>        <div class=\"clearfix\"></div>    </div>    <div class=\"synchronization-group-content panel-collapse in\" data-bind=\"attr: { id: \'conflictsCollapse\' }\">        <div class=\"panel-body\">            <div class=\"alert alert-warning\" data-bind=\"visible: conflicts().length === 0\">                You\'ve got no conflicts.            </div>            <table class=\"table-no-borders\">                <tbody data-bind=\"foreach: conflicts\">                    <tr>                        <td style=\"padding:0px\">                            <h5 class=\"pull-left\">                                <a>                                    <input type=\"checkbox\" data-bind=\"attr: { value: fileName }, checked: $root.selectedConflicts\" />                                    <span data-bind=\"text: fileName\"></span>                                </a>                            </h5>                        </td>                    </tr>                </tbody>            </table>        </div>    </div></div>'; } )
define("text!views/filesystem/synchronizationDestinations.html", [], function () { return '<form data-bind=\"submit: $root.saveChanges\" class=\" form-horizontal\" role=\"form\">    <div class=\"panel panel-default\">        <div class=\"panel-heading\">            <div class=\"pull-left panel-title\">Replication Destinations</div>            <div class=\"pull-right\">                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: createNewDestination\" title=\"Add a replication destination (Alt+N)\" accesskey=\"N\">                    <i class=\"fa fa-plus\"></i> Add destination                </button>                <button type=\"submit\" class=\"btn btn-primary\" data-bind=\"enable: isSaveEnabled\" title=\"Save replication destinations (Alt+S)\" accesskey=\"S\"><i class=\"fa fa-save\"></i></button>            </div>            <div class=\"clearfix\"></div>        </div>        <div class=\"panel-body\" data-bind=\"with: replicationsSetup\">            <div class=\"alert alert-warning\" data-bind=\"visible: destinations().length === 0\">                You\'ve got no replication destinations set up.            </div>            <div data-bind=\"foreach: destinations\">                <div class=\"panel replication-destination-card\" data-bind=\"css: { \'panel-danger\': !isValid(), \'panel-info\': isValid() && !disabled(), \'panel-warning\': isValid() && disabled() }\">                    <div class=\"panel-heading\">                        <h3 class=\"panel-title\">                            <span data-bind=\"text: name\"></span>                            <button data-bind=\"click: $root.removeDestination.bind($root)\" title=\"Remove this replication destination\" type=\"button\" class=\"close\" aria-hidden=\"true\"><i class=\"fa fa-times\"></i></button>                        </h3>                    </div>                    <div class=\"panel-body\">                        <div class=\"form-group\">                            <label class=\"col-sm-4 control-label\">Disabled</label>                            <div class=\"col-sm-7\">                                <div class=\"btn-group\" data-toggle=\"buttons\">                                    <label class=\"btn btn-primary\" data-bind=\"click: enable, css: { active: !disabled() }\">                                        <input type=\"radio\" name=\"options\"> Enabled                                    </label>                                    <label class=\"btn btn-primary\" data-bind=\"click: disable, css: { active: disabled }\">                                        <input type=\"radio\" name=\"options\"> Disabled                                    </label>                                </div>                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-4 control-label\">Url</label>                            <div class=\"col-sm-7\">                                <input required type=\"url\" class=\"form-control\" data-bind=\"value: url, valueUpdate: \'afterkeydown\'\" />                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-4 control-label\">Filesystem</label>                            <div class=\"col-sm-7\">                                <input required type=\"text\" class=\"form-control\" data-bind=\"value: filesystem, valueUpdate: \'afterkeydown\'\" />                            </div>                        </div>                        <div class=\"form-group\">                            <label class=\"col-sm-4 control-label\">Credentials</label>                            <div class=\"col-sm-7\">                                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleUserCredentials, css: {active:isUserCredentials}\">User</button>                                <button type=\"button\" class=\"btn btn-default\" data-bind=\"click: toggleApiKeyCredentials, css: {active:isApiKeyCredentials}\">ApiKey</button>                            </div>                        </div>                        <div data-bind=\"if: isUserCredentials, visible: isUserCredentials\">                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">User Name</label>                                <div class=\"col-sm-7\">                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: username, valueUpdate: \'afterkeydown\'\" />                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">Password</label>                                <div class=\"col-sm-7\">                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: password, valueUpdate: \'afterkeydown\'\" />                                </div>                            </div>                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">Domain</label>                                <div class=\"col-sm-7\">                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: domain, valueUpdate: \'afterkeydown\'\" />                                </div>                            </div>                        </div>                        <div data-bind=\"if: isApiKeyCredentials, visible: isApiKeyCredentials\">                            <div class=\"form-group\">                                <label class=\"col-sm-4 control-label\">API Key</label>                                <div class=\"col-sm-7\">                                    <input required type=\"text\" class=\"form-control\" data-bind=\"value: apiKey, valueUpdate: \'afterkeydown\'\" />                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></form>'; } )